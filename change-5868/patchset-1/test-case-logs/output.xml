<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 05:12:23.748" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite name="Tests" source="/tmp/fspcibld/23984/obmc-robot/tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:24.390">Dictionary does not contain key 'host'.</msg>
<status endtime="20170809 05:12:24.390" starttime="20170809 05:12:24.390" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:24.390">${has_host} = False</msg>
<status endtime="20170809 05:12:24.391" starttime="20170809 05:12:24.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170809 05:12:24.392" starttime="20170809 05:12:24.391" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:24.392" starttime="20170809 05:12:24.391" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:24.393">${port_num} = 22</msg>
<status endtime="20170809 05:12:24.393" starttime="20170809 05:12:24.393" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:24.394">${SSH_PORT} = 22</msg>
<status endtime="20170809 05:12:24.394" starttime="20170809 05:12:24.393" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:24.394">${https_num} = 443</msg>
<status endtime="20170809 05:12:24.394" starttime="20170809 05:12:24.394" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:24.395">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170809 05:12:24.395" starttime="20170809 05:12:24.394" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:24.395" starttime="20170809 05:12:24.392" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:24.395" starttime="20170809 05:12:24.392" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:24.396">Dictionary does not contain key 'port'.</msg>
<status endtime="20170809 05:12:24.396" starttime="20170809 05:12:24.396" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:24.396">${has_port} = False</msg>
<status endtime="20170809 05:12:24.396" starttime="20170809 05:12:24.395" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170809 05:12:24.398" starttime="20170809 05:12:24.398" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170809 05:12:24.398" starttime="20170809 05:12:24.398" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:24.398" starttime="20170809 05:12:24.397" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:24.399" starttime="20170809 05:12:24.396" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:24.399">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 05:12:26.068">Read output: root@witherspoon:~#</msg>
<status endtime="20170809 05:12:26.068" starttime="20170809 05:12:24.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:26.068" starttime="20170809 05:12:24.389" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:26.070">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170809 05:12:26.147">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 05:12:26.147">${output} = VERSION_ID="v1.99.8-201-g7bf86a2"</msg>
<msg level="INFO" timestamp="20170809 05:12:26.147">${stderr} = </msg>
<status endtime="20170809 05:12:26.147" starttime="20170809 05:12:26.069" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:26.148">Length is 0</msg>
<status endtime="20170809 05:12:26.148" starttime="20170809 05:12:26.147" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:26.148">VERSION_ID="v1.99.8-201-g7bf86a2"</msg>
<status endtime="20170809 05:12:26.148" starttime="20170809 05:12:26.148" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:26.149" starttime="20170809 05:12:26.069" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:26.149" starttime="20170809 05:12:26.069" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:26.150">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170809 05:12:26.327">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170809 05:12:26.327">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170809 05:12:26.327">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170809 05:12:26.327" starttime="20170809 05:12:26.150" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:26.328">Length is 81</msg>
<msg level="FAIL" timestamp="20170809 05:12:26.328">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170809 05:12:26.328" starttime="20170809 05:12:26.328" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:26.328" starttime="20170809 05:12:26.149" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:26.329" starttime="20170809 05:12:26.149" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:26.329" starttime="20170809 05:12:26.149" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:26.720">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:12:26.721">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 05:12:27.451">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170809 05:12:27.451">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 05:12:27.538">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 05:12:27.548">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 05:12:27.548">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 05:12:27.549">${rc} = 0</msg>
<status endtime="20170809 05:12:27.549" starttime="20170809 05:12:26.330" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:27.549">Length is 0</msg>
<status endtime="20170809 05:12:27.549" starttime="20170809 05:12:27.549" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:27.550">Length is 11</msg>
<status endtime="20170809 05:12:27.550" starttime="20170809 05:12:27.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:27.550">${bmc_model} = Witherspoon</msg>
<status endtime="20170809 05:12:27.550" starttime="20170809 05:12:26.329" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:27.550">BMC Model=Witherspoon</msg>
<status endtime="20170809 05:12:27.550" starttime="20170809 05:12:27.550" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.551" starttime="20170809 05:12:26.329" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.551" starttime="20170809 05:12:26.329" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:27.553">Dictionary does not contain key 'host'.</msg>
<status endtime="20170809 05:12:27.553" starttime="20170809 05:12:27.553" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:27.553">${has_host} = False</msg>
<status endtime="20170809 05:12:27.553" starttime="20170809 05:12:27.552" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170809 05:12:27.554" starttime="20170809 05:12:27.554" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.554" starttime="20170809 05:12:27.553" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:27.556">${port_num} = 22</msg>
<status endtime="20170809 05:12:27.556" starttime="20170809 05:12:27.556" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:27.557">${SSH_PORT} = 22</msg>
<status endtime="20170809 05:12:27.557" starttime="20170809 05:12:27.557" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:27.557">${https_num} = 443</msg>
<status endtime="20170809 05:12:27.557" starttime="20170809 05:12:27.557" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:27.558">${AUTH_URI} = https://9.3.86.161:443</msg>
<status endtime="20170809 05:12:27.558" starttime="20170809 05:12:27.558" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.558" starttime="20170809 05:12:27.555" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.558" starttime="20170809 05:12:27.555" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:27.559">Dictionary does not contain key 'port'.</msg>
<status endtime="20170809 05:12:27.559" starttime="20170809 05:12:27.559" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:27.559">${has_port} = False</msg>
<status endtime="20170809 05:12:27.559" starttime="20170809 05:12:27.558" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170809 05:12:27.561" starttime="20170809 05:12:27.561" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170809 05:12:27.562" starttime="20170809 05:12:27.562" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.562" starttime="20170809 05:12:27.561" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:27.562" starttime="20170809 05:12:27.560" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:27.563">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 05:12:29.279">Read output: root@witherspoon:~#</msg>
<status endtime="20170809 05:12:29.279" starttime="20170809 05:12:27.562" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.280" starttime="20170809 05:12:27.551" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.281">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170809 05:12:29.368">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 05:12:29.368">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170809 05:12:29.368">${stderr} = </msg>
<status endtime="20170809 05:12:29.368" starttime="20170809 05:12:29.280" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.368">Length is 0</msg>
<status endtime="20170809 05:12:29.369" starttime="20170809 05:12:29.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.369">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170809 05:12:29.369" starttime="20170809 05:12:29.280" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170809 05:12:29.369" starttime="20170809 05:12:29.369" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.369" starttime="20170809 05:12:27.551" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.369" starttime="20170809 05:12:27.551" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170809 05:12:29.370" starttime="20170809 05:12:29.370" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.370" starttime="20170809 05:12:24.388" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/23984/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/23984/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.456">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:29.456" starttime="20170809 05:12:29.455" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:29.457" starttime="20170809 05:12:29.456" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.457">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:29.458" starttime="20170809 05:12:29.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:29.458" starttime="20170809 05:12:29.458" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:29.640" starttime="20170809 05:12:29.459" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.640">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:29.640">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:29.640" starttime="20170809 05:12:29.458" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:29.641" starttime="20170809 05:12:29.640" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:29.642" starttime="20170809 05:12:29.641" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.642" starttime="20170809 05:12:29.455" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.642" starttime="20170809 05:12:29.454" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.642" starttime="20170809 05:12:29.454" status="PASS"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.647">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:29.647" starttime="20170809 05:12:29.647" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.648">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:29.648" starttime="20170809 05:12:29.648" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.649">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:29.649" starttime="20170809 05:12:29.648" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.649">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:29.649" starttime="20170809 05:12:29.649" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.831">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:29.831" starttime="20170809 05:12:29.650" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.832">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:29.832">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:29.832" starttime="20170809 05:12:29.650" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.832">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:29.832" starttime="20170809 05:12:29.832" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:29.833" starttime="20170809 05:12:29.833" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.833" starttime="20170809 05:12:29.646" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.833" starttime="20170809 05:12:29.645" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.833" starttime="20170809 05:12:29.645" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.834">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:12:29.834" starttime="20170809 05:12:29.834" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.836">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:29.836" starttime="20170809 05:12:29.835" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.837">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:29.837" starttime="20170809 05:12:29.837" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.837" starttime="20170809 05:12:29.836" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.838" starttime="20170809 05:12:29.835" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.838" starttime="20170809 05:12:29.834" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.927">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:29.927">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:29.927" starttime="20170809 05:12:29.838" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.930">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:29.930" starttime="20170809 05:12:29.929" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.930">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:29.931" starttime="20170809 05:12:29.930" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.931" starttime="20170809 05:12:29.930" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.931" starttime="20170809 05:12:29.928" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.931" starttime="20170809 05:12:29.928" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:29.931">Delete All Sessions</msg>
<status endtime="20170809 05:12:29.931" starttime="20170809 05:12:29.931" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.932">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:29.932" starttime="20170809 05:12:29.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:29.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:29.932" starttime="20170809 05:12:29.932" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.933">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:29.933">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:29.933">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:29.933" starttime="20170809 05:12:29.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.933">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 05:12:29.933" starttime="20170809 05:12:29.644" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.934">${host_state} = Off</msg>
<status endtime="20170809 05:12:29.934" starttime="20170809 05:12:29.643" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:29.935">Off != Quiesced</msg>
<status endtime="20170809 05:12:29.935" starttime="20170809 05:12:29.934" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.935">${status} = False</msg>
<status endtime="20170809 05:12:29.935" starttime="20170809 05:12:29.934" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.935">${status} = False</msg>
<status endtime="20170809 05:12:29.935" starttime="20170809 05:12:29.643" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170809 05:12:29.936" starttime="20170809 05:12:29.935" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170809 05:12:29.936" starttime="20170809 05:12:29.936" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.949">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170809 05:12:29.949" starttime="20170809 05:12:29.937" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.963">${FFDC_DIR_PATH} = </msg>
<status endtime="20170809 05:12:29.963" starttime="20170809 05:12:29.949" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.966">${cur_time} = 2017-08-09 05:12:29:965599</msg>
<status endtime="20170809 05:12:29.966" starttime="20170809 05:12:29.965" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.967">${cur_time} = 20170809051229965599</msg>
<status endtime="20170809 05:12:29.967" starttime="20170809 05:12:29.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.967" starttime="20170809 05:12:29.965" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.974">${FFDC_TIME} = 20170809051229965599</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.976">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170809 05:12:29.976" starttime="20170809 05:12:29.975" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.976">${suite_name} = 20170809051229965599_TestsSecurityTestSsl</msg>
<status endtime="20170809 05:12:29.976" starttime="20170809 05:12:29.976" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.977">${test_name} = TestSSLConnection</msg>
<status endtime="20170809 05:12:29.977" starttime="20170809 05:12:29.977" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.977">${test_name} = 20170809051229965599_TestSSLConnection</msg>
<status endtime="20170809 05:12:29.977" starttime="20170809 05:12:29.977" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.978" starttime="20170809 05:12:29.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.978">${FFDC_DIR_PATH} = /tmp/fspcibld/23984/obmc-robot/logs/20170809051229965599_TestsSecurityTestSsl/20170809051229965599_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170809 05:12:29.982">${FFDC_PREFIX} = 20170809051229965599_</msg>
<status endtime="20170809 05:12:29.982" starttime="20170809 05:12:29.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.982" starttime="20170809 05:12:29.963" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170809 05:12:29.983" starttime="20170809 05:12:29.983" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:12:29.984">Created directory '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs"&gt;/tmp/fspcibld/23984/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170809 05:12:29.984" starttime="20170809 05:12:29.983" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:29.985">File '/tmp/fspcibld/23984/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170809 05:12:29.985" starttime="20170809 05:12:29.985" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.985">${exist} = False</msg>
<status endtime="20170809 05:12:29.985" starttime="20170809 05:12:29.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:12:29.986">Created file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:12:29.987" starttime="20170809 05:12:29.986" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.987" starttime="20170809 05:12:29.986" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170809 05:12:29.987" starttime="20170809 05:12:29.987" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.988">${cur_time} = 2017-08-09 05:12:29:987890</msg>
<status endtime="20170809 05:12:29.988" starttime="20170809 05:12:29.988" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:29.989">${cur_time} = 20170809051229987890</msg>
<status endtime="20170809 05:12:29.989" starttime="20170809 05:12:29.988" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:29.989">${cur_time} = 20170809051229987890</msg>
<status endtime="20170809 05:12:29.989" starttime="20170809 05:12:29.987" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:12:29.990">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:12:29.990" starttime="20170809 05:12:29.989" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.990" starttime="20170809 05:12:29.937" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:29.990" starttime="20170809 05:12:29.642" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170809 05:12:29.990" starttime="20170809 05:12:29.453" status="PASS"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:29.991">Delete All Sessions</msg>
<status endtime="20170809 05:12:29.991" starttime="20170809 05:12:29.991" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170809 05:12:29.991" starttime="20170809 05:12:29.372" status="PASS"></status>
</suite>
<status endtime="20170809 05:12:29.993" starttime="20170809 05:12:29.370" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/23984/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.030">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:12:30.030" starttime="20170809 05:12:30.030" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.031">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:12:30.031" starttime="20170809 05:12:30.031" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.031">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:12:30.031" starttime="20170809 05:12:30.030" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.033">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:12:30.033" starttime="20170809 05:12:30.033" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.034">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:12:30.034" starttime="20170809 05:12:30.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.034">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:12:30.034" starttime="20170809 05:12:30.032" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.035">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 05:12:30.035" starttime="20170809 05:12:30.035" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:12:30.035" starttime="20170809 05:12:30.035" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.042">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:12:30.045">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:12:30.045">${output} = /tmp/fspcibld/23984/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 05:12:30.045" starttime="20170809 05:12:30.036" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 05:12:30.049" starttime="20170809 05:12:30.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 05:12:30.050" starttime="20170809 05:12:30.049" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.051">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 05:12:30.051" starttime="20170809 05:12:30.050" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.051">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 05:12:30.051" starttime="20170809 05:12:30.034" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.052">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170809 05:12:30.052" starttime="20170809 05:12:30.051" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:12:30.052" starttime="20170809 05:12:30.052" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.058">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:12:30.064">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:12:30.065">${os_con_pid} = </msg>
<status endtime="20170809 05:12:30.065" starttime="20170809 05:12:30.053" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170809 05:12:30.067" starttime="20170809 05:12:30.067" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.068">${cmd_buf} = kill -9 </msg>
<status endtime="20170809 05:12:30.068" starttime="20170809 05:12:30.067" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:12:30.069" starttime="20170809 05:12:30.068" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.070">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 05:12:30.070">${output} = None</msg>
<status endtime="20170809 05:12:30.070" starttime="20170809 05:12:30.069" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 05:12:30.071" starttime="20170809 05:12:30.070" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:30.078">Source file '/tmp/9.3.86.161_os_console' does not exist.</msg>
<status endtime="20170809 05:12:30.078" starttime="20170809 05:12:30.072" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:30.078" starttime="20170809 05:12:30.072" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.078" starttime="20170809 05:12:30.071" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.079">${output} = </msg>
<status endtime="20170809 05:12:30.079" starttime="20170809 05:12:30.078" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.079">${loc_quiet} = 1</msg>
<status endtime="20170809 05:12:30.079" starttime="20170809 05:12:30.079" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170809 05:12:30.131" starttime="20170809 05:12:30.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.132">${rc} = 1</msg>
<msg level="INFO" timestamp="20170809 05:12:30.132">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170809 05:12:30.132" starttime="20170809 05:12:30.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.133">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory
</msg>
<status endtime="20170809 05:12:30.133" starttime="20170809 05:12:30.032" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:12:30.135">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170809 05:12:30.135" starttime="20170809 05:12:30.134" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.136">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 05:12:30.136" starttime="20170809 05:12:30.135" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:12:30.136" starttime="20170809 05:12:30.136" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.143">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:12:30.150">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:12:30.150">${output} = /tmp/fspcibld/23984/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 05:12:30.150" starttime="20170809 05:12:30.137" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 05:12:30.152" starttime="20170809 05:12:30.152" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 05:12:30.153" starttime="20170809 05:12:30.153" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.154">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 05:12:30.154" starttime="20170809 05:12:30.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.154">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 05:12:30.154" starttime="20170809 05:12:30.135" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.155">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170809 05:12:30.155" starttime="20170809 05:12:30.155" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:12:30.156" starttime="20170809 05:12:30.155" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.158">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170809 05:12:30.161">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:12:30.161">${output} = </msg>
<status endtime="20170809 05:12:30.161" starttime="20170809 05:12:30.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170809 05:12:30.164" starttime="20170809 05:12:30.163" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.164" starttime="20170809 05:12:30.029" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:30.165">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.167">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170809 05:12:30.167" starttime="20170809 05:12:30.166" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.168">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 05:12:30.168" starttime="20170809 05:12:30.168" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:30.173">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:30.174" starttime="20170809 05:12:30.172" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.175">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:30.175" starttime="20170809 05:12:30.174" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.176">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:30.176" starttime="20170809 05:12:30.175" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.176">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:30.176" starttime="20170809 05:12:30.176" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:30.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:30.733" starttime="20170809 05:12:30.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:30.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:30.734">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:30.734" starttime="20170809 05:12:30.177" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:30.734">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:30.735" starttime="20170809 05:12:30.734" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:30.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:30.735" starttime="20170809 05:12:30.735" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.735" starttime="20170809 05:12:30.172" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.736" starttime="20170809 05:12:30.171" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.736" starttime="20170809 05:12:30.169" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.736">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 05:12:30.736" starttime="20170809 05:12:30.736" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.737">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:30.737" starttime="20170809 05:12:30.737" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 05:12:30.737" starttime="20170809 05:12:30.737" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:30.739">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status endtime="20170809 05:12:30.739" starttime="20170809 05:12:30.738" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:30.740">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 05:12:30.740" starttime="20170809 05:12:30.740" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.741" starttime="20170809 05:12:30.739" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:30.741" starttime="20170809 05:12:30.738" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:31.887">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 05:12:31.887">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:31.887" starttime="20170809 05:12:30.741" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:31.889">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:31.889" starttime="20170809 05:12:31.888" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:31.890">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:31.890" starttime="20170809 05:12:31.889" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:31.890" starttime="20170809 05:12:31.889" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:31.890" starttime="20170809 05:12:31.887" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:31.890">Delete All Sessions</msg>
<status endtime="20170809 05:12:31.890" starttime="20170809 05:12:31.890" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:31.891">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:31.891" starttime="20170809 05:12:30.169" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:31.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:31.891" starttime="20170809 05:12:31.891" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:31.892">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:31.892">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:31.892">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:31.892" starttime="20170809 05:12:31.892" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:31.892" starttime="20170809 05:12:30.167" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 05:12:31.893" starttime="20170809 05:12:31.892" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:31.898">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:31.898" starttime="20170809 05:12:31.897" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:31.899">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:31.899" starttime="20170809 05:12:31.898" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:31.899">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:31.899" starttime="20170809 05:12:31.899" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:31.900">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:31.900" starttime="20170809 05:12:31.899" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:32.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:32.920" starttime="20170809 05:12:31.901" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:32.920">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:32.921">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:32.921" starttime="20170809 05:12:31.900" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:32.921">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:32.921" starttime="20170809 05:12:32.921" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:32.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:32.922" starttime="20170809 05:12:32.922" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:32.922" starttime="20170809 05:12:31.897" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:32.922" starttime="20170809 05:12:31.896" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:32.922" starttime="20170809 05:12:31.896" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:32.923">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:12:32.923" starttime="20170809 05:12:32.923" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:32.925">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:32.925" starttime="20170809 05:12:32.924" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:32.926">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:32.926" starttime="20170809 05:12:32.926" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:32.926" starttime="20170809 05:12:32.925" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:32.926" starttime="20170809 05:12:32.924" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:32.926" starttime="20170809 05:12:32.923" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.542">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:37.542">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:37.542" starttime="20170809 05:12:32.927" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.544">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:37.544" starttime="20170809 05:12:37.543" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.545">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:37.545" starttime="20170809 05:12:37.544" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.545" starttime="20170809 05:12:37.544" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.545" starttime="20170809 05:12:37.543" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.545" starttime="20170809 05:12:37.542" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:37.545">Delete All Sessions</msg>
<status endtime="20170809 05:12:37.546" starttime="20170809 05:12:37.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:37.546">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:37.546" starttime="20170809 05:12:31.895" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.547">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:37.547" starttime="20170809 05:12:37.546" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.547">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:37.547">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:37.547">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:37.547" starttime="20170809 05:12:37.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:37.548">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 05:12:37.548" starttime="20170809 05:12:31.895" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:37.548">${power_state} = Off</msg>
<status endtime="20170809 05:12:37.548" starttime="20170809 05:12:31.894" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:12:37.548" starttime="20170809 05:12:37.548" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.549" starttime="20170809 05:12:31.894" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:37.553" starttime="20170809 05:12:37.552" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:37.554" starttime="20170809 05:12:37.553" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.554">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:37.554" starttime="20170809 05:12:37.554" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.555">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:37.555" starttime="20170809 05:12:37.554" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.978">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:37.978" starttime="20170809 05:12:37.555" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:37.978">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:37.978">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:37.978" starttime="20170809 05:12:37.555" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.979">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:37.979" starttime="20170809 05:12:37.979" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:37.980" starttime="20170809 05:12:37.979" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.980" starttime="20170809 05:12:37.552" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.980" starttime="20170809 05:12:37.551" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.980" starttime="20170809 05:12:37.550" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.981">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:12:37.981" starttime="20170809 05:12:37.981" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:37.984">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:37.984" starttime="20170809 05:12:37.983" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:37.985">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:37.986" starttime="20170809 05:12:37.985" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.986" starttime="20170809 05:12:37.984" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.986" starttime="20170809 05:12:37.982" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:37.986" starttime="20170809 05:12:37.981" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.268">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:38.269">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:38.269" starttime="20170809 05:12:37.986" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.271">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:38.271" starttime="20170809 05:12:38.270" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.272">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:38.272" starttime="20170809 05:12:38.272" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.272" starttime="20170809 05:12:38.271" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.272" starttime="20170809 05:12:38.270" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.272" starttime="20170809 05:12:38.269" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:38.273">Delete All Sessions</msg>
<status endtime="20170809 05:12:38.273" starttime="20170809 05:12:38.273" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:38.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:38.273" starttime="20170809 05:12:37.550" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:38.274" starttime="20170809 05:12:38.273" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.274">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:38.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:38.274">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:38.274" starttime="20170809 05:12:38.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:38.275">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170809 05:12:38.275" starttime="20170809 05:12:37.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:38.275">${host_state} = Off</msg>
<status endtime="20170809 05:12:38.275" starttime="20170809 05:12:37.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:12:38.275" starttime="20170809 05:12:38.275" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.276" starttime="20170809 05:12:31.893" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.276" starttime="20170809 05:12:31.893" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.276" starttime="20170809 05:12:30.166" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.277">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170809 05:12:38.277" starttime="20170809 05:12:38.277" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.278">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170809 05:12:38.278" starttime="20170809 05:12:38.278" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.281">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:38.281" starttime="20170809 05:12:38.280" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:38.282" starttime="20170809 05:12:38.281" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.282">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:38.282" starttime="20170809 05:12:38.282" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.283">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:38.283" starttime="20170809 05:12:38.282" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:38.546" starttime="20170809 05:12:38.284" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:38.546">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:38.546">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:38.546" starttime="20170809 05:12:38.283" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:38.547" starttime="20170809 05:12:38.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:38.548" starttime="20170809 05:12:38.547" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.548" starttime="20170809 05:12:38.280" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.548" starttime="20170809 05:12:38.279" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.548" starttime="20170809 05:12:38.279" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.549">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170809 05:12:38.549" starttime="20170809 05:12:38.548" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:38.549" starttime="20170809 05:12:38.549" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170809 05:12:38.550" starttime="20170809 05:12:38.550" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.552">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status endtime="20170809 05:12:38.552" starttime="20170809 05:12:38.551" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.553">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170809 05:12:38.553" starttime="20170809 05:12:38.553" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.553" starttime="20170809 05:12:38.552" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.553" starttime="20170809 05:12:38.550" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.880">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 05:12:38.881">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:38.881" starttime="20170809 05:12:38.553" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.882">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:38.882" starttime="20170809 05:12:38.881" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.883">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:38.883" starttime="20170809 05:12:38.883" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.883" starttime="20170809 05:12:38.882" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.883" starttime="20170809 05:12:38.881" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:38.884">Delete All Sessions</msg>
<status endtime="20170809 05:12:38.884" starttime="20170809 05:12:38.883" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:38.884">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:38.884" starttime="20170809 05:12:38.278" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:38.885" starttime="20170809 05:12:38.884" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.885">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:38.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:38.885">${json} = {u'status': u'ok', u'data': None, u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:38.885" starttime="20170809 05:12:38.885" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:38.886" starttime="20170809 05:12:38.277" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170809 05:12:38.886" starttime="20170809 05:12:38.886" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:38.893">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:38.894" starttime="20170809 05:12:38.892" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.894">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:38.894" starttime="20170809 05:12:38.894" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.895">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:38.895" starttime="20170809 05:12:38.895" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:38.897">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:38.897" starttime="20170809 05:12:38.896" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:41.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:41.177" starttime="20170809 05:12:38.898" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:41.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:41.178">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:41.178" starttime="20170809 05:12:38.897" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:41.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:41.178" starttime="20170809 05:12:41.178" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:41.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:41.179" starttime="20170809 05:12:41.179" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:41.179" starttime="20170809 05:12:38.891" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:41.179" starttime="20170809 05:12:38.891" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:41.179" starttime="20170809 05:12:38.890" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:41.180">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:12:41.180" starttime="20170809 05:12:41.180" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:41.182">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:41.182" starttime="20170809 05:12:41.181" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:41.183">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:41.183" starttime="20170809 05:12:41.183" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:41.183" starttime="20170809 05:12:41.182" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:41.183" starttime="20170809 05:12:41.181" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:41.183" starttime="20170809 05:12:41.180" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:45.470">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:45.471">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:45.471" starttime="20170809 05:12:41.184" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:45.473">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:45.473" starttime="20170809 05:12:45.472" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:45.474">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:45.474" starttime="20170809 05:12:45.474" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:45.474" starttime="20170809 05:12:45.473" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:45.475" starttime="20170809 05:12:45.472" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:45.475" starttime="20170809 05:12:45.471" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:45.475">Delete All Sessions</msg>
<status endtime="20170809 05:12:45.475" starttime="20170809 05:12:45.475" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:45.476">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:45.476" starttime="20170809 05:12:38.889" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:45.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:45.477" starttime="20170809 05:12:45.476" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:45.477">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:45.477">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:45.477">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:45.477" starttime="20170809 05:12:45.477" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:45.478">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 05:12:45.478" starttime="20170809 05:12:38.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:45.478">${power_state} = Off</msg>
<status endtime="20170809 05:12:45.478" starttime="20170809 05:12:38.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:45.479">On != Off</msg>
<status endtime="20170809 05:12:45.479" starttime="20170809 05:12:45.479" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:45.479" starttime="20170809 05:12:38.887" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:45.479" starttime="20170809 05:12:38.887" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:55.485">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:55.486" starttime="20170809 05:12:55.484" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:55.486">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:55.486" starttime="20170809 05:12:55.486" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:55.487">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:55.487" starttime="20170809 05:12:55.486" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:55.487">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:55.488" starttime="20170809 05:12:55.487" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.396">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:56.396" starttime="20170809 05:12:55.488" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:56.396">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:56.396">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:56.396" starttime="20170809 05:12:55.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.397">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:56.397" starttime="20170809 05:12:56.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:56.397" starttime="20170809 05:12:56.397" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.398" starttime="20170809 05:12:55.484" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.398" starttime="20170809 05:12:55.483" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.398" starttime="20170809 05:12:55.483" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.398">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:12:56.398" starttime="20170809 05:12:56.398" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.401">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:56.401" starttime="20170809 05:12:56.400" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.402">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:56.402" starttime="20170809 05:12:56.401" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.402" starttime="20170809 05:12:56.401" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.402" starttime="20170809 05:12:56.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.402" starttime="20170809 05:12:56.399" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.963">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:56.963">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:56.963" starttime="20170809 05:12:56.402" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.965">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:56.965" starttime="20170809 05:12:56.965" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.966">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:56.966" starttime="20170809 05:12:56.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.967" starttime="20170809 05:12:56.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.967" starttime="20170809 05:12:56.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.967" starttime="20170809 05:12:56.964" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:56.967">Delete All Sessions</msg>
<status endtime="20170809 05:12:56.967" starttime="20170809 05:12:56.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:56.967">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:56.968" starttime="20170809 05:12:55.482" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:56.968" starttime="20170809 05:12:56.968" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.969">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:56.969">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:56.969">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:56.969" starttime="20170809 05:12:56.968" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:56.969">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:12:56.969" starttime="20170809 05:12:55.482" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:56.970">${power_state} = On</msg>
<status endtime="20170809 05:12:56.970" starttime="20170809 05:12:55.481" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:12:56.970" starttime="20170809 05:12:56.970" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:56.970" starttime="20170809 05:12:55.480" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:56.974">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:56.974" starttime="20170809 05:12:56.973" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.975">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:56.975" starttime="20170809 05:12:56.974" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.975">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:56.975" starttime="20170809 05:12:56.975" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:56.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:56.976" starttime="20170809 05:12:56.975" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.529">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:57.529" starttime="20170809 05:12:56.977" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:57.529">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:57.529">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:57.529" starttime="20170809 05:12:56.976" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.530">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:57.530" starttime="20170809 05:12:57.530" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:57.531" starttime="20170809 05:12:57.530" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.531" starttime="20170809 05:12:56.973" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.531" starttime="20170809 05:12:56.972" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.531" starttime="20170809 05:12:56.972" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.532">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:12:57.532" starttime="20170809 05:12:57.531" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.534">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:57.534" starttime="20170809 05:12:57.533" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.535">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:12:57.535" starttime="20170809 05:12:57.534" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.535" starttime="20170809 05:12:57.534" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.535" starttime="20170809 05:12:57.532" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.535" starttime="20170809 05:12:57.532" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:57.965">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:57.965" starttime="20170809 05:12:57.535" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.967">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:57.967" starttime="20170809 05:12:57.967" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:57.968" starttime="20170809 05:12:57.968" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.968" starttime="20170809 05:12:57.968" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.969" starttime="20170809 05:12:57.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:57.969" starttime="20170809 05:12:57.966" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:57.969">Delete All Sessions</msg>
<status endtime="20170809 05:12:57.969" starttime="20170809 05:12:57.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:57.969">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:57.969" starttime="20170809 05:12:56.971" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:57.970" starttime="20170809 05:12:57.970" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.971">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:57.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:57.971">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:57.971" starttime="20170809 05:12:57.970" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:57.971">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:12:57.971" starttime="20170809 05:12:56.971" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:57.971">${host_state} = Running</msg>
<status endtime="20170809 05:12:57.971" starttime="20170809 05:12:56.970" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:12:57.972" starttime="20170809 05:12:57.972" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:57.976">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:12:57.977" starttime="20170809 05:12:57.976" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:12:57.977" starttime="20170809 05:12:57.977" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.978">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:12:57.978" starttime="20170809 05:12:57.977" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:57.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:12:57.978" starttime="20170809 05:12:57.978" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:58.354">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:12:58.354" starttime="20170809 05:12:57.979" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:58.354">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:12:58.354">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:58.354" starttime="20170809 05:12:57.979" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:58.355">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:58.355" starttime="20170809 05:12:58.355" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:58.356">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:58.356" starttime="20170809 05:12:58.355" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.356" starttime="20170809 05:12:57.975" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.356" starttime="20170809 05:12:57.974" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.356" starttime="20170809 05:12:57.974" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:58.357">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:12:58.357" starttime="20170809 05:12:58.356" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:58.359">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:12:58.359" starttime="20170809 05:12:58.358" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:58.360">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:12:58.360" starttime="20170809 05:12:58.360" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.360" starttime="20170809 05:12:58.359" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.360" starttime="20170809 05:12:58.358" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.360" starttime="20170809 05:12:58.357" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:58.625">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:12:58.625">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:58.625" starttime="20170809 05:12:58.360" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:58.627">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:58.628" starttime="20170809 05:12:58.627" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:58.631">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:12:58.631" starttime="20170809 05:12:58.628" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.631" starttime="20170809 05:12:58.628" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.632" starttime="20170809 05:12:58.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:12:58.632" starttime="20170809 05:12:58.626" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:12:58.632">Delete All Sessions</msg>
<status endtime="20170809 05:12:58.632" starttime="20170809 05:12:58.632" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:58.632">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:12:58.632" starttime="20170809 05:12:57.973" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:12:58.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:12:58.633" starttime="20170809 05:12:58.633" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:12:58.634">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:12:58.634">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:12:58.634">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:12:58.634" starttime="20170809 05:12:58.633" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:58.634">${state} = Off</msg>
<status endtime="20170809 05:12:58.634" starttime="20170809 05:12:57.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:12:58.634">${boot_progress} = Off</msg>
<status endtime="20170809 05:12:58.634" starttime="20170809 05:12:57.972" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:12:58.635">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 05:12:58.635" starttime="20170809 05:12:58.635" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:58.635" starttime="20170809 05:12:57.972" status="FAIL"></status>
</kw>
<status endtime="20170809 05:12:58.635" starttime="20170809 05:12:55.480" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.640">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:08.641" starttime="20170809 05:13:08.640" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.641">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:08.641" starttime="20170809 05:13:08.641" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.642">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:08.642" starttime="20170809 05:13:08.642" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.643">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:08.643" starttime="20170809 05:13:08.643" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.863">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:08.864" starttime="20170809 05:13:08.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:08.864">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:08.864">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:08.864" starttime="20170809 05:13:08.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.864">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:08.865" starttime="20170809 05:13:08.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.865">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:08.865" starttime="20170809 05:13:08.865" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.865" starttime="20170809 05:13:08.640" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.866" starttime="20170809 05:13:08.639" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.866" starttime="20170809 05:13:08.639" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.866">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:13:08.866" starttime="20170809 05:13:08.866" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.868">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:08.868" starttime="20170809 05:13:08.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.869">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:08.869" starttime="20170809 05:13:08.869" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.869" starttime="20170809 05:13:08.869" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.870" starttime="20170809 05:13:08.867" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.870" starttime="20170809 05:13:08.867" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.941">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:08.941">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:08.941" starttime="20170809 05:13:08.870" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.943">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:08.943" starttime="20170809 05:13:08.942" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.944">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:08.944" starttime="20170809 05:13:08.943" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.944" starttime="20170809 05:13:08.943" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.944" starttime="20170809 05:13:08.942" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.944" starttime="20170809 05:13:08.941" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:08.944">Delete All Sessions</msg>
<status endtime="20170809 05:13:08.944" starttime="20170809 05:13:08.944" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:08.945">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:08.945" starttime="20170809 05:13:08.638" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:08.945" starttime="20170809 05:13:08.945" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.946">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:08.946">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:08.946">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:08.946" starttime="20170809 05:13:08.946" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:08.947">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:13:08.947" starttime="20170809 05:13:08.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:08.947">${power_state} = On</msg>
<status endtime="20170809 05:13:08.947" starttime="20170809 05:13:08.637" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:13:08.948" starttime="20170809 05:13:08.948" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:08.948" starttime="20170809 05:13:08.637" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:08.952">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:08.953" starttime="20170809 05:13:08.952" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:08.954" starttime="20170809 05:13:08.953" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.954">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:08.954" starttime="20170809 05:13:08.954" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:08.955">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:08.955" starttime="20170809 05:13:08.955" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.187">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:09.187" starttime="20170809 05:13:08.956" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:09.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:09.187" starttime="20170809 05:13:08.955" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.188">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:09.188" starttime="20170809 05:13:09.188" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.189">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:09.189" starttime="20170809 05:13:09.188" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.189" starttime="20170809 05:13:08.951" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.189" starttime="20170809 05:13:08.951" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.189" starttime="20170809 05:13:08.950" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.190">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:13:09.190" starttime="20170809 05:13:09.189" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.192">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:09.192" starttime="20170809 05:13:09.191" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.193">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:09.193" starttime="20170809 05:13:09.193" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.193" starttime="20170809 05:13:09.192" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.193" starttime="20170809 05:13:09.191" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.193" starttime="20170809 05:13:09.190" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.357">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:09.357">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:09.358" starttime="20170809 05:13:09.193" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.359">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:09.359" starttime="20170809 05:13:09.359" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.360">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:09.360" starttime="20170809 05:13:09.360" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.361" starttime="20170809 05:13:09.360" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.361" starttime="20170809 05:13:09.358" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.361" starttime="20170809 05:13:09.358" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:09.361">Delete All Sessions</msg>
<status endtime="20170809 05:13:09.361" starttime="20170809 05:13:09.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.361">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:09.361" starttime="20170809 05:13:08.950" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.362">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:09.362" starttime="20170809 05:13:09.362" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.363">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:09.363">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:09.363">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:09.363" starttime="20170809 05:13:09.362" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.363">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:13:09.363" starttime="20170809 05:13:08.949" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.363">${host_state} = Running</msg>
<status endtime="20170809 05:13:09.363" starttime="20170809 05:13:08.949" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:13:09.364" starttime="20170809 05:13:09.364" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.368">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:09.369" starttime="20170809 05:13:09.368" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:09.369" starttime="20170809 05:13:09.369" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.370">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:09.370" starttime="20170809 05:13:09.370" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:09.371" starttime="20170809 05:13:09.370" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.606">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:09.606" starttime="20170809 05:13:09.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.606">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:09.606">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:09.606" starttime="20170809 05:13:09.371" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.607">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:09.607" starttime="20170809 05:13:09.607" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:09.608" starttime="20170809 05:13:09.607" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.608" starttime="20170809 05:13:09.368" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.608" starttime="20170809 05:13:09.367" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.608" starttime="20170809 05:13:09.367" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.609">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:13:09.609" starttime="20170809 05:13:09.608" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.611">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:09.611" starttime="20170809 05:13:09.611" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.612">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:09.612" starttime="20170809 05:13:09.612" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.612" starttime="20170809 05:13:09.611" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.613" starttime="20170809 05:13:09.610" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.613" starttime="20170809 05:13:09.609" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.696">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:09.697">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:09.697" starttime="20170809 05:13:09.613" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.699">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:09.699" starttime="20170809 05:13:09.698" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.700">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:09.700" starttime="20170809 05:13:09.699" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.700" starttime="20170809 05:13:09.699" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.700" starttime="20170809 05:13:09.698" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:09.700" starttime="20170809 05:13:09.697" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:09.700">Delete All Sessions</msg>
<status endtime="20170809 05:13:09.700" starttime="20170809 05:13:09.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:09.701" starttime="20170809 05:13:09.365" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:09.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:09.701" starttime="20170809 05:13:09.701" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:09.702">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:09.702">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:09.702">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:09.702" starttime="20170809 05:13:09.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.702">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:09.702" starttime="20170809 05:13:09.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:09.703">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:09.703" starttime="20170809 05:13:09.364" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:13:09.703">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:13:09.703" starttime="20170809 05:13:09.703" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:09.704" starttime="20170809 05:13:09.364" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:09.704" starttime="20170809 05:13:08.636" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:19.709">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:19.709" starttime="20170809 05:13:19.708" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:19.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:19.710" starttime="20170809 05:13:19.710" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:19.710">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:19.710" starttime="20170809 05:13:19.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:19.711">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:19.711" starttime="20170809 05:13:19.711" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:19.960">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:19.960" starttime="20170809 05:13:19.712" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:19.961">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:19.961">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:19.961" starttime="20170809 05:13:19.711" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:19.961">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:19.961" starttime="20170809 05:13:19.961" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:19.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:19.962" starttime="20170809 05:13:19.962" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:19.962" starttime="20170809 05:13:19.708" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:19.962" starttime="20170809 05:13:19.707" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:19.962" starttime="20170809 05:13:19.707" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:19.963">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:13:19.963" starttime="20170809 05:13:19.963" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:19.965">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:19.965" starttime="20170809 05:13:19.964" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:19.966">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:19.966" starttime="20170809 05:13:19.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:19.967" starttime="20170809 05:13:19.965" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:19.967" starttime="20170809 05:13:19.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:19.967" starttime="20170809 05:13:19.963" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.090">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:20.091">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.091" starttime="20170809 05:13:19.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.093">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:20.093" starttime="20170809 05:13:20.092" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.094">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:20.094" starttime="20170809 05:13:20.093" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.094" starttime="20170809 05:13:20.093" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.094" starttime="20170809 05:13:20.092" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.094" starttime="20170809 05:13:20.091" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:20.094">Delete All Sessions</msg>
<status endtime="20170809 05:13:20.094" starttime="20170809 05:13:20.094" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.095">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.095" starttime="20170809 05:13:19.706" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.095" starttime="20170809 05:13:20.095" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.096">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:20.096">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:20.096">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:20.096" starttime="20170809 05:13:20.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.096">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:13:20.096" starttime="20170809 05:13:19.706" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.097">${power_state} = On</msg>
<status endtime="20170809 05:13:20.097" starttime="20170809 05:13:19.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:13:20.097" starttime="20170809 05:13:20.097" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.097" starttime="20170809 05:13:19.705" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.101">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:20.102" starttime="20170809 05:13:20.101" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.102">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:20.102" starttime="20170809 05:13:20.102" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.103">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:20.103" starttime="20170809 05:13:20.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:20.104" starttime="20170809 05:13:20.103" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.296">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:20.296" starttime="20170809 05:13:20.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:20.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.296" starttime="20170809 05:13:20.104" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.297">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.297" starttime="20170809 05:13:20.297" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.298">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.298" starttime="20170809 05:13:20.297" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.298" starttime="20170809 05:13:20.100" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.298" starttime="20170809 05:13:20.100" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.298" starttime="20170809 05:13:20.099" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.299">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:13:20.299" starttime="20170809 05:13:20.298" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.301">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:20.301" starttime="20170809 05:13:20.300" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.302">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:20.302" starttime="20170809 05:13:20.301" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.302" starttime="20170809 05:13:20.301" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.302" starttime="20170809 05:13:20.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.302" starttime="20170809 05:13:20.299" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.419">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:20.419">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.419" starttime="20170809 05:13:20.302" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.421">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:20.421" starttime="20170809 05:13:20.421" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.422">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:20.422" starttime="20170809 05:13:20.422" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.422" starttime="20170809 05:13:20.421" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.423" starttime="20170809 05:13:20.420" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.423" starttime="20170809 05:13:20.420" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:20.423">Delete All Sessions</msg>
<status endtime="20170809 05:13:20.423" starttime="20170809 05:13:20.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.423">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.423" starttime="20170809 05:13:20.098" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.424" starttime="20170809 05:13:20.424" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.425">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:20.425">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:20.425">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:20.425" starttime="20170809 05:13:20.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.425">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:13:20.425" starttime="20170809 05:13:20.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.425">${host_state} = Running</msg>
<status endtime="20170809 05:13:20.425" starttime="20170809 05:13:20.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:13:20.426" starttime="20170809 05:13:20.426" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.430">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:20.430" starttime="20170809 05:13:20.430" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.431">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:20.431" starttime="20170809 05:13:20.431" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.432">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:20.432" starttime="20170809 05:13:20.431" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:20.432" starttime="20170809 05:13:20.432" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.610">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:20.610" starttime="20170809 05:13:20.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:20.610">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.610" starttime="20170809 05:13:20.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.611">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.611" starttime="20170809 05:13:20.611" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.612" starttime="20170809 05:13:20.611" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.612" starttime="20170809 05:13:20.429" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.612" starttime="20170809 05:13:20.429" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.612" starttime="20170809 05:13:20.428" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.613">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:13:20.613" starttime="20170809 05:13:20.612" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.615">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:20.615" starttime="20170809 05:13:20.614" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.616">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:20.616" starttime="20170809 05:13:20.616" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.616" starttime="20170809 05:13:20.615" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.616" starttime="20170809 05:13:20.613" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.617" starttime="20170809 05:13:20.613" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.684">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:20.684">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.684" starttime="20170809 05:13:20.617" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.686">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:20.686" starttime="20170809 05:13:20.685" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.687">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:20.687" starttime="20170809 05:13:20.687" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.687" starttime="20170809 05:13:20.686" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.687" starttime="20170809 05:13:20.685" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:20.687" starttime="20170809 05:13:20.684" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:20.688">Delete All Sessions</msg>
<status endtime="20170809 05:13:20.688" starttime="20170809 05:13:20.687" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.688">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:20.688" starttime="20170809 05:13:20.427" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:20.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:20.689" starttime="20170809 05:13:20.688" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:20.689">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:20.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:20.689">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:20.689" starttime="20170809 05:13:20.689" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.690">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:20.690" starttime="20170809 05:13:20.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:20.690">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:20.690" starttime="20170809 05:13:20.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:13:20.690">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:13:20.691" starttime="20170809 05:13:20.690" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:20.691" starttime="20170809 05:13:20.426" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:20.691" starttime="20170809 05:13:19.704" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:30.696">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:30.696" starttime="20170809 05:13:30.696" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:30.697" starttime="20170809 05:13:30.697" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.698">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:30.698" starttime="20170809 05:13:30.697" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.698">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:30.698" starttime="20170809 05:13:30.698" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:30.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:30.925" starttime="20170809 05:13:30.699" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:30.925">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:30.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:30.925" starttime="20170809 05:13:30.699" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:30.926">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:30.926" starttime="20170809 05:13:30.926" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:30.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:30.927" starttime="20170809 05:13:30.926" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.927" starttime="20170809 05:13:30.695" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.927" starttime="20170809 05:13:30.695" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.927" starttime="20170809 05:13:30.694" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.928">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:13:30.928" starttime="20170809 05:13:30.927" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.930">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:30.930" starttime="20170809 05:13:30.929" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:30.931">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:30.931" starttime="20170809 05:13:30.930" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.931" starttime="20170809 05:13:30.930" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.931" starttime="20170809 05:13:30.928" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.931" starttime="20170809 05:13:30.928" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.995">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:30.995">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:30.995" starttime="20170809 05:13:30.931" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:30.997">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:30.997" starttime="20170809 05:13:30.997" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:30.998">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:30.998" starttime="20170809 05:13:30.998" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.998" starttime="20170809 05:13:30.997" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.998" starttime="20170809 05:13:30.996" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:30.998" starttime="20170809 05:13:30.995" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:30.999">Delete All Sessions</msg>
<status endtime="20170809 05:13:30.999" starttime="20170809 05:13:30.999" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:30.999">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:30.999" starttime="20170809 05:13:30.693" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.000" starttime="20170809 05:13:30.999" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.000">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:31.001">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:31.001">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:31.001" starttime="20170809 05:13:31.000" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.001">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:13:31.001" starttime="20170809 05:13:30.693" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.001">${power_state} = On</msg>
<status endtime="20170809 05:13:31.001" starttime="20170809 05:13:30.692" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:13:31.002" starttime="20170809 05:13:31.002" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.002" starttime="20170809 05:13:30.692" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.005">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:31.006" starttime="20170809 05:13:31.005" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:31.007" starttime="20170809 05:13:31.006" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.007">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:31.008" starttime="20170809 05:13:31.007" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:31.008" starttime="20170809 05:13:31.008" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.201">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:31.201" starttime="20170809 05:13:31.009" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.201">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:31.202">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:31.202" starttime="20170809 05:13:31.008" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.202">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.202" starttime="20170809 05:13:31.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.203" starttime="20170809 05:13:31.203" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.203" starttime="20170809 05:13:31.005" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.203" starttime="20170809 05:13:31.004" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.203" starttime="20170809 05:13:31.004" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.204">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:13:31.204" starttime="20170809 05:13:31.204" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.206">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:31.206" starttime="20170809 05:13:31.205" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.207">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:31.207" starttime="20170809 05:13:31.207" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.207" starttime="20170809 05:13:31.206" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.207" starttime="20170809 05:13:31.205" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.207" starttime="20170809 05:13:31.204" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.298">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:31.298">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:31.298" starttime="20170809 05:13:31.208" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.300">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:31.300" starttime="20170809 05:13:31.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.301">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:31.301" starttime="20170809 05:13:31.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.301" starttime="20170809 05:13:31.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.301" starttime="20170809 05:13:31.299" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.301" starttime="20170809 05:13:31.298" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:31.301">Delete All Sessions</msg>
<status endtime="20170809 05:13:31.301" starttime="20170809 05:13:31.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.302">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:31.302" starttime="20170809 05:13:31.003" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.302" starttime="20170809 05:13:31.302" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:31.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:31.303">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:31.303" starttime="20170809 05:13:31.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.303">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:13:31.303" starttime="20170809 05:13:31.002" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.304">${host_state} = Running</msg>
<status endtime="20170809 05:13:31.304" starttime="20170809 05:13:31.002" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:13:31.304" starttime="20170809 05:13:31.304" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.308">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:31.309" starttime="20170809 05:13:31.308" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.310">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:31.310" starttime="20170809 05:13:31.309" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.310">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:31.310" starttime="20170809 05:13:31.310" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.311">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:31.311" starttime="20170809 05:13:31.310" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.487">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:31.487" starttime="20170809 05:13:31.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.487">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:31.487">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:31.487" starttime="20170809 05:13:31.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.488">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.488" starttime="20170809 05:13:31.487" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.489" starttime="20170809 05:13:31.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.489" starttime="20170809 05:13:31.307" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.489" starttime="20170809 05:13:31.307" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.489" starttime="20170809 05:13:31.307" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.490">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:13:31.490" starttime="20170809 05:13:31.489" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.492">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:31.492" starttime="20170809 05:13:31.491" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.495">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:31.495" starttime="20170809 05:13:31.492" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.495" starttime="20170809 05:13:31.492" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.496" starttime="20170809 05:13:31.490" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.496" starttime="20170809 05:13:31.490" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.582">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:31.582">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:31.582" starttime="20170809 05:13:31.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.584">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:31.584" starttime="20170809 05:13:31.583" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.585">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:31.586" starttime="20170809 05:13:31.585" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.586" starttime="20170809 05:13:31.584" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.586" starttime="20170809 05:13:31.583" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:31.586" starttime="20170809 05:13:31.582" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:31.586">Delete All Sessions</msg>
<status endtime="20170809 05:13:31.587" starttime="20170809 05:13:31.586" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.587">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:31.587" starttime="20170809 05:13:31.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:31.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:31.588" starttime="20170809 05:13:31.587" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:31.588">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:31.588">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:31.588">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:31.589" starttime="20170809 05:13:31.588" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.589">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:31.589" starttime="20170809 05:13:31.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:31.589">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:31.589" starttime="20170809 05:13:31.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:13:31.590">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:13:31.590" starttime="20170809 05:13:31.589" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:31.590" starttime="20170809 05:13:31.304" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:31.590" starttime="20170809 05:13:30.691" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:41.595">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:41.595" starttime="20170809 05:13:41.595" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:41.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:41.596" starttime="20170809 05:13:41.596" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:41.597">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:41.597" starttime="20170809 05:13:41.596" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:41.597">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:41.597" starttime="20170809 05:13:41.597" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:41.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:41.953" starttime="20170809 05:13:41.598" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:41.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:41.953">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:41.953" starttime="20170809 05:13:41.598" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:41.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:41.954" starttime="20170809 05:13:41.954" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:41.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:41.955" starttime="20170809 05:13:41.954" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:41.955" starttime="20170809 05:13:41.594" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:41.955" starttime="20170809 05:13:41.594" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:41.955" starttime="20170809 05:13:41.593" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:41.956">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:13:41.956" starttime="20170809 05:13:41.955" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:41.958">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:41.958" starttime="20170809 05:13:41.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:41.959">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:41.959" starttime="20170809 05:13:41.959" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:41.959" starttime="20170809 05:13:41.958" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:41.959" starttime="20170809 05:13:41.956" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:41.960" starttime="20170809 05:13:41.956" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.659">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:42.659">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:42.659" starttime="20170809 05:13:41.960" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.661">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:42.661" starttime="20170809 05:13:42.660" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.662">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:42.662" starttime="20170809 05:13:42.662" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.662" starttime="20170809 05:13:42.661" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.662" starttime="20170809 05:13:42.660" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.662" starttime="20170809 05:13:42.660" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:42.663">Delete All Sessions</msg>
<status endtime="20170809 05:13:42.663" starttime="20170809 05:13:42.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:42.663">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:42.663" starttime="20170809 05:13:41.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.664">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:42.664" starttime="20170809 05:13:42.663" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.664">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:42.664">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:42.664">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:42.664" starttime="20170809 05:13:42.664" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:42.665">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:13:42.665" starttime="20170809 05:13:41.592" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:42.665">${power_state} = On</msg>
<status endtime="20170809 05:13:42.665" starttime="20170809 05:13:41.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:13:42.666" starttime="20170809 05:13:42.665" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.666" starttime="20170809 05:13:41.591" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.670">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:42.670" starttime="20170809 05:13:42.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:42.671" starttime="20170809 05:13:42.670" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.671">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:42.671" starttime="20170809 05:13:42.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.672">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:42.672" starttime="20170809 05:13:42.671" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.939">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:42.939" starttime="20170809 05:13:42.673" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:42.939">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:42.939">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:42.940" starttime="20170809 05:13:42.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.940">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:42.940" starttime="20170809 05:13:42.940" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:42.941" starttime="20170809 05:13:42.941" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.941" starttime="20170809 05:13:42.669" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.941" starttime="20170809 05:13:42.668" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.941" starttime="20170809 05:13:42.668" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.942">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:13:42.942" starttime="20170809 05:13:42.941" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:42.944">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:42.944" starttime="20170809 05:13:42.943" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:42.945">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:42.945" starttime="20170809 05:13:42.945" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.945" starttime="20170809 05:13:42.944" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.945" starttime="20170809 05:13:42.943" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:42.945" starttime="20170809 05:13:42.942" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.039">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:43.039">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:43.039" starttime="20170809 05:13:42.945" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.042">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:43.042" starttime="20170809 05:13:43.041" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.042">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:43.043" starttime="20170809 05:13:43.042" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.043" starttime="20170809 05:13:43.042" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.043" starttime="20170809 05:13:43.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.043" starttime="20170809 05:13:43.040" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:43.043">Delete All Sessions</msg>
<status endtime="20170809 05:13:43.043" starttime="20170809 05:13:43.043" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.043">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:43.044" starttime="20170809 05:13:42.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:43.044" starttime="20170809 05:13:43.044" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.045">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:43.045">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:43.045">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:43.045" starttime="20170809 05:13:43.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.045">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:13:43.045" starttime="20170809 05:13:42.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.046">${host_state} = Running</msg>
<status endtime="20170809 05:13:43.046" starttime="20170809 05:13:42.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:13:43.046" starttime="20170809 05:13:43.046" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.050">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:43.051" starttime="20170809 05:13:43.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.051">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:43.051" starttime="20170809 05:13:43.051" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.052">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:43.052" starttime="20170809 05:13:43.051" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.052">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:43.053" starttime="20170809 05:13:43.052" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.258">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:43.258" starttime="20170809 05:13:43.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:43.258">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:43.258" starttime="20170809 05:13:43.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.259">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:43.259" starttime="20170809 05:13:43.259" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:43.260" starttime="20170809 05:13:43.260" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.261" starttime="20170809 05:13:43.049" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.261" starttime="20170809 05:13:43.049" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.261" starttime="20170809 05:13:43.048" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.262">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:13:43.262" starttime="20170809 05:13:43.261" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.265">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:43.265" starttime="20170809 05:13:43.264" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.266">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:43.266" starttime="20170809 05:13:43.266" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.266" starttime="20170809 05:13:43.265" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.266" starttime="20170809 05:13:43.263" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.267" starttime="20170809 05:13:43.262" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.349">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:43.350">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:43.350" starttime="20170809 05:13:43.267" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.351">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:43.352" starttime="20170809 05:13:43.351" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.352">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:43.353" starttime="20170809 05:13:43.352" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.353" starttime="20170809 05:13:43.352" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.353" starttime="20170809 05:13:43.350" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:43.353" starttime="20170809 05:13:43.350" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:43.353">Delete All Sessions</msg>
<status endtime="20170809 05:13:43.353" starttime="20170809 05:13:43.353" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.353">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:43.354" starttime="20170809 05:13:43.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:43.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:43.354" starttime="20170809 05:13:43.354" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:43.355">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:43.355">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:43.355">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:43.355" starttime="20170809 05:13:43.354" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.355">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:43.355" starttime="20170809 05:13:43.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:43.355">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:43.355" starttime="20170809 05:13:43.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:13:43.356">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:13:43.356" starttime="20170809 05:13:43.356" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:43.356" starttime="20170809 05:13:43.046" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:43.357" starttime="20170809 05:13:41.591" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.362">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:53.362" starttime="20170809 05:13:53.362" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.363">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:53.363" starttime="20170809 05:13:53.363" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.364">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:53.364" starttime="20170809 05:13:53.363" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.364">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:53.364" starttime="20170809 05:13:53.364" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:53.628" starttime="20170809 05:13:53.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:53.629">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:53.629">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:53.629" starttime="20170809 05:13:53.365" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:53.629" starttime="20170809 05:13:53.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:53.630" starttime="20170809 05:13:53.630" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.630" starttime="20170809 05:13:53.361" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.630" starttime="20170809 05:13:53.360" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.630" starttime="20170809 05:13:53.360" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.631">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:13:53.631" starttime="20170809 05:13:53.631" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.633">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:53.633" starttime="20170809 05:13:53.632" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.634">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:53.634" starttime="20170809 05:13:53.634" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.634" starttime="20170809 05:13:53.633" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.634" starttime="20170809 05:13:53.632" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.634" starttime="20170809 05:13:53.631" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.700">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:53.700">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:53.700" starttime="20170809 05:13:53.635" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.702">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:53.702" starttime="20170809 05:13:53.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.703">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:53.703" starttime="20170809 05:13:53.703" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.703" starttime="20170809 05:13:53.702" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.703" starttime="20170809 05:13:53.701" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.703" starttime="20170809 05:13:53.700" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:53.704">Delete All Sessions</msg>
<status endtime="20170809 05:13:53.704" starttime="20170809 05:13:53.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:53.704">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:53.704" starttime="20170809 05:13:53.359" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.705">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:53.705" starttime="20170809 05:13:53.704" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.705">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:53.705">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:53.705">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:53.705" starttime="20170809 05:13:53.705" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:53.706">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:13:53.706" starttime="20170809 05:13:53.358" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:53.706">${power_state} = On</msg>
<status endtime="20170809 05:13:53.706" starttime="20170809 05:13:53.358" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:13:53.707" starttime="20170809 05:13:53.706" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.707" starttime="20170809 05:13:53.358" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.710">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:53.711" starttime="20170809 05:13:53.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:53.711" starttime="20170809 05:13:53.711" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.712">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:53.712" starttime="20170809 05:13:53.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.713">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:53.713" starttime="20170809 05:13:53.712" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.910">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:53.910" starttime="20170809 05:13:53.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:53.910">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:53.910">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:53.911" starttime="20170809 05:13:53.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.911">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:53.911" starttime="20170809 05:13:53.911" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:53.912" starttime="20170809 05:13:53.912" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.912" starttime="20170809 05:13:53.709" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.912" starttime="20170809 05:13:53.709" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.913" starttime="20170809 05:13:53.708" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.913">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:13:53.913" starttime="20170809 05:13:53.913" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:53.916">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:53.916" starttime="20170809 05:13:53.914" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:53.916">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:13:53.917" starttime="20170809 05:13:53.916" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.917" starttime="20170809 05:13:53.916" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.917" starttime="20170809 05:13:53.914" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:53.917" starttime="20170809 05:13:53.913" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.007">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:54.007">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:54.008" starttime="20170809 05:13:53.917" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.009">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:54.009" starttime="20170809 05:13:54.009" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.010">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:54.010" starttime="20170809 05:13:54.010" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.011" starttime="20170809 05:13:54.010" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.011" starttime="20170809 05:13:54.008" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.011" starttime="20170809 05:13:54.008" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:54.011">Delete All Sessions</msg>
<status endtime="20170809 05:13:54.011" starttime="20170809 05:13:54.011" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.011">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:54.011" starttime="20170809 05:13:53.708" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.012">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:54.013" starttime="20170809 05:13:54.012" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.013">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:54.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:54.013">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:54.013" starttime="20170809 05:13:54.013" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.014">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:13:54.014" starttime="20170809 05:13:53.707" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.014">${host_state} = Running</msg>
<status endtime="20170809 05:13:54.014" starttime="20170809 05:13:53.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:13:54.015" starttime="20170809 05:13:54.014" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.018">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:13:54.019" starttime="20170809 05:13:54.018" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.019">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:13:54.019" starttime="20170809 05:13:54.019" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.020">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:13:54.020" starttime="20170809 05:13:54.020" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.021">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:13:54.021" starttime="20170809 05:13:54.020" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.200">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:13:54.201" starttime="20170809 05:13:54.022" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.201">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:13:54.201">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:54.201" starttime="20170809 05:13:54.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.202">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:54.202" starttime="20170809 05:13:54.201" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:54.202" starttime="20170809 05:13:54.202" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.202" starttime="20170809 05:13:54.017" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.203" starttime="20170809 05:13:54.017" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.203" starttime="20170809 05:13:54.017" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.203">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:13:54.203" starttime="20170809 05:13:54.203" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.205">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:54.205" starttime="20170809 05:13:54.205" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.206">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:13:54.206" starttime="20170809 05:13:54.206" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.207" starttime="20170809 05:13:54.206" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.207" starttime="20170809 05:13:54.204" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.207" starttime="20170809 05:13:54.204" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.274">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:13:54.274">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:54.274" starttime="20170809 05:13:54.207" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.275">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:54.275" starttime="20170809 05:13:54.275" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.276">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:13:54.276" starttime="20170809 05:13:54.276" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.277" starttime="20170809 05:13:54.276" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.277" starttime="20170809 05:13:54.274" status="PASS"></status>
</kw>
<status endtime="20170809 05:13:54.277" starttime="20170809 05:13:54.274" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:13:54.277">Delete All Sessions</msg>
<status endtime="20170809 05:13:54.277" starttime="20170809 05:13:54.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.277">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:13:54.277" starttime="20170809 05:13:54.016" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:13:54.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:13:54.278" starttime="20170809 05:13:54.278" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:13:54.279">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:13:54.279">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:13:54.279">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:13:54.279" starttime="20170809 05:13:54.278" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.279">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:54.279" starttime="20170809 05:13:54.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:13:54.279">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:13:54.279" starttime="20170809 05:13:54.015" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:13:54.280">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:13:54.280" starttime="20170809 05:13:54.280" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:54.280" starttime="20170809 05:13:54.015" status="FAIL"></status>
</kw>
<status endtime="20170809 05:13:54.280" starttime="20170809 05:13:53.357" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.286">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:04.286" starttime="20170809 05:14:04.286" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:04.287" starttime="20170809 05:14:04.287" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.288">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:04.288" starttime="20170809 05:14:04.287" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.288">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:04.288" starttime="20170809 05:14:04.288" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.583">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:04.583" starttime="20170809 05:14:04.289" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.583">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:04.583">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:04.583" starttime="20170809 05:14:04.289" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.584">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:04.584" starttime="20170809 05:14:04.584" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.585">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:04.585" starttime="20170809 05:14:04.584" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.585" starttime="20170809 05:14:04.285" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.585" starttime="20170809 05:14:04.285" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.585" starttime="20170809 05:14:04.284" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.586">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:14:04.586" starttime="20170809 05:14:04.585" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.588">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:04.588" starttime="20170809 05:14:04.587" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.589">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:04.589" starttime="20170809 05:14:04.589" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.589" starttime="20170809 05:14:04.588" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.589" starttime="20170809 05:14:04.587" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.589" starttime="20170809 05:14:04.586" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.654">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:04.654">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:04.655" starttime="20170809 05:14:04.589" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.656">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:04.656" starttime="20170809 05:14:04.656" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.657">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:04.657" starttime="20170809 05:14:04.657" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.657" starttime="20170809 05:14:04.657" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.658" starttime="20170809 05:14:04.655" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.658" starttime="20170809 05:14:04.655" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:04.658">Delete All Sessions</msg>
<status endtime="20170809 05:14:04.658" starttime="20170809 05:14:04.658" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.659">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:04.659" starttime="20170809 05:14:04.283" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:04.660" starttime="20170809 05:14:04.659" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.660">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:04.661">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:04.661">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:04.661" starttime="20170809 05:14:04.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.661">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:14:04.661" starttime="20170809 05:14:04.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.662">${power_state} = On</msg>
<status endtime="20170809 05:14:04.662" starttime="20170809 05:14:04.282" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:14:04.662" starttime="20170809 05:14:04.662" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.663" starttime="20170809 05:14:04.282" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.668">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:04.668" starttime="20170809 05:14:04.667" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.669">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:04.669" starttime="20170809 05:14:04.669" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.670">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:04.670" starttime="20170809 05:14:04.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.671">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:04.671" starttime="20170809 05:14:04.670" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:04.858" starttime="20170809 05:14:04.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:04.858">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:04.858" starttime="20170809 05:14:04.671" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.859">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:04.859" starttime="20170809 05:14:04.858" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:04.859" starttime="20170809 05:14:04.859" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.860" starttime="20170809 05:14:04.666" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.860" starttime="20170809 05:14:04.666" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.860" starttime="20170809 05:14:04.665" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.860">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:14:04.860" starttime="20170809 05:14:04.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.862">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:04.863" starttime="20170809 05:14:04.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.863">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:04.864" starttime="20170809 05:14:04.863" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.864" starttime="20170809 05:14:04.863" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.864" starttime="20170809 05:14:04.861" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.864" starttime="20170809 05:14:04.861" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.955">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:04.955">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:04.955" starttime="20170809 05:14:04.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.957">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:04.957" starttime="20170809 05:14:04.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.958">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:04.958" starttime="20170809 05:14:04.958" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.958" starttime="20170809 05:14:04.957" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.958" starttime="20170809 05:14:04.956" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:04.958" starttime="20170809 05:14:04.956" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:04.959">Delete All Sessions</msg>
<status endtime="20170809 05:14:04.959" starttime="20170809 05:14:04.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:04.959" starttime="20170809 05:14:04.664" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:04.960" starttime="20170809 05:14:04.959" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.960">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:04.960">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:04.960">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:04.961" starttime="20170809 05:14:04.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.961">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:14:04.961" starttime="20170809 05:14:04.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:04.961">${host_state} = Running</msg>
<status endtime="20170809 05:14:04.961" starttime="20170809 05:14:04.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:14:04.962" starttime="20170809 05:14:04.961" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:04.966">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:04.966" starttime="20170809 05:14:04.965" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.967">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:04.967" starttime="20170809 05:14:04.967" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.967">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:04.967" starttime="20170809 05:14:04.967" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:04.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:04.968" starttime="20170809 05:14:04.968" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:05.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:05.149" starttime="20170809 05:14:04.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:05.149">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:05.149">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:05.149" starttime="20170809 05:14:04.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:05.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:05.150" starttime="20170809 05:14:05.149" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:05.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:05.150" starttime="20170809 05:14:05.150" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.150" starttime="20170809 05:14:04.965" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.151" starttime="20170809 05:14:04.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.151" starttime="20170809 05:14:04.964" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:05.151">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:14:05.151" starttime="20170809 05:14:05.151" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:05.153">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:05.153" starttime="20170809 05:14:05.153" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:05.154">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:05.154" starttime="20170809 05:14:05.154" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.154" starttime="20170809 05:14:05.153" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.155" starttime="20170809 05:14:05.152" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.155" starttime="20170809 05:14:05.151" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:05.242">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:05.242">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:05.242" starttime="20170809 05:14:05.155" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:05.245">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:05.245" starttime="20170809 05:14:05.244" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:05.249">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:05.249" starttime="20170809 05:14:05.248" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.249" starttime="20170809 05:14:05.245" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.249" starttime="20170809 05:14:05.243" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:05.249" starttime="20170809 05:14:05.243" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:05.250">Delete All Sessions</msg>
<status endtime="20170809 05:14:05.250" starttime="20170809 05:14:05.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:05.250">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:05.250" starttime="20170809 05:14:04.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:05.251">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:05.251" starttime="20170809 05:14:05.250" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:05.251">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:05.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:05.251">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:05.252" starttime="20170809 05:14:05.251" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:05.252">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:05.252" starttime="20170809 05:14:04.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:05.252">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:05.252" starttime="20170809 05:14:04.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:14:05.253">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:14:05.253" starttime="20170809 05:14:05.252" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:05.253" starttime="20170809 05:14:04.962" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:05.253" starttime="20170809 05:14:04.281" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.258">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:15.259" starttime="20170809 05:14:15.258" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.259">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:15.259" starttime="20170809 05:14:15.259" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.260">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:15.260" starttime="20170809 05:14:15.259" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.261">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:15.261" starttime="20170809 05:14:15.260" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.515">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:15.515" starttime="20170809 05:14:15.261" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:15.516">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:15.516" starttime="20170809 05:14:15.261" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.516">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:15.516" starttime="20170809 05:14:15.516" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:15.517" starttime="20170809 05:14:15.517" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.517" starttime="20170809 05:14:15.257" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.517" starttime="20170809 05:14:15.257" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.517" starttime="20170809 05:14:15.256" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.518">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:14:15.518" starttime="20170809 05:14:15.518" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.520">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:15.520" starttime="20170809 05:14:15.519" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.521">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:15.521" starttime="20170809 05:14:15.521" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.521" starttime="20170809 05:14:15.520" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.521" starttime="20170809 05:14:15.519" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.522" starttime="20170809 05:14:15.518" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.587">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:15.587">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:15.587" starttime="20170809 05:14:15.522" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.589">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:15.589" starttime="20170809 05:14:15.588" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.590">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:15.590" starttime="20170809 05:14:15.590" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.590" starttime="20170809 05:14:15.589" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.590" starttime="20170809 05:14:15.588" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.590" starttime="20170809 05:14:15.587" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:15.591">Delete All Sessions</msg>
<status endtime="20170809 05:14:15.591" starttime="20170809 05:14:15.591" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.591">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:15.591" starttime="20170809 05:14:15.256" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.592">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:15.592" starttime="20170809 05:14:15.591" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.593">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:15.593">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:15.593">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:15.593" starttime="20170809 05:14:15.592" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.593">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:14:15.594" starttime="20170809 05:14:15.255" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.594">${power_state} = On</msg>
<status endtime="20170809 05:14:15.594" starttime="20170809 05:14:15.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:14:15.595" starttime="20170809 05:14:15.595" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.595" starttime="20170809 05:14:15.254" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.600">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:15.600" starttime="20170809 05:14:15.599" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.601">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:15.601" starttime="20170809 05:14:15.601" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.602">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:15.602" starttime="20170809 05:14:15.601" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.602">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:15.602" starttime="20170809 05:14:15.602" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:15.791" starttime="20170809 05:14:15.603" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.791">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:15.791">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:15.791" starttime="20170809 05:14:15.603" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:15.792" starttime="20170809 05:14:15.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:15.793" starttime="20170809 05:14:15.792" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.793" starttime="20170809 05:14:15.599" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.793" starttime="20170809 05:14:15.598" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.793" starttime="20170809 05:14:15.598" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.794">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:14:15.794" starttime="20170809 05:14:15.793" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.796">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:15.796" starttime="20170809 05:14:15.795" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.797">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:15.797" starttime="20170809 05:14:15.797" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.797" starttime="20170809 05:14:15.796" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.797" starttime="20170809 05:14:15.794" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.797" starttime="20170809 05:14:15.794" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.901">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:15.902">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:15.902" starttime="20170809 05:14:15.798" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.909">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:15.909" starttime="20170809 05:14:15.907" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.913">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:15.913" starttime="20170809 05:14:15.912" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.913" starttime="20170809 05:14:15.910" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.914" starttime="20170809 05:14:15.905" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:15.914" starttime="20170809 05:14:15.903" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:15.914">Delete All Sessions</msg>
<status endtime="20170809 05:14:15.915" starttime="20170809 05:14:15.914" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.915">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:15.915" starttime="20170809 05:14:15.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:15.916" starttime="20170809 05:14:15.915" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.917">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:15.917">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:15.917">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:15.917" starttime="20170809 05:14:15.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.917">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:14:15.917" starttime="20170809 05:14:15.596" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:15.918">${host_state} = Running</msg>
<status endtime="20170809 05:14:15.918" starttime="20170809 05:14:15.595" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:14:15.919" starttime="20170809 05:14:15.918" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:15.925">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:15.925" starttime="20170809 05:14:15.925" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.926">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:15.926" starttime="20170809 05:14:15.926" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.926">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:15.927" starttime="20170809 05:14:15.926" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:15.927">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:15.927" starttime="20170809 05:14:15.927" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:16.108">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:16.108" starttime="20170809 05:14:15.928" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:16.108">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:16.108">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:16.108" starttime="20170809 05:14:15.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:16.109">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:16.109" starttime="20170809 05:14:16.109" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:16.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:16.110" starttime="20170809 05:14:16.109" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.110" starttime="20170809 05:14:15.924" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.110" starttime="20170809 05:14:15.924" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.110" starttime="20170809 05:14:15.923" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:16.111">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:14:16.111" starttime="20170809 05:14:16.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:16.113">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:16.113" starttime="20170809 05:14:16.112" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:16.115">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:16.115" starttime="20170809 05:14:16.114" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.115" starttime="20170809 05:14:16.113" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.115" starttime="20170809 05:14:16.112" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.115" starttime="20170809 05:14:16.111" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:16.183">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:16.183">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:16.183" starttime="20170809 05:14:16.115" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:16.185">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:16.185" starttime="20170809 05:14:16.185" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:16.186">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:16.186" starttime="20170809 05:14:16.186" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.186" starttime="20170809 05:14:16.185" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.186" starttime="20170809 05:14:16.184" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:16.186" starttime="20170809 05:14:16.184" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:16.187">Delete All Sessions</msg>
<status endtime="20170809 05:14:16.187" starttime="20170809 05:14:16.187" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:16.187">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:16.187" starttime="20170809 05:14:15.921" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:16.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:16.188" starttime="20170809 05:14:16.188" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:16.189">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:16.189">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:16.189">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:16.189" starttime="20170809 05:14:16.188" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:16.189">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:16.189" starttime="20170809 05:14:15.920" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:16.189">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:16.189" starttime="20170809 05:14:15.920" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:14:16.190">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:14:16.190" starttime="20170809 05:14:16.189" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:16.190" starttime="20170809 05:14:15.919" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:16.190" starttime="20170809 05:14:15.254" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.195">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:26.196" starttime="20170809 05:14:26.195" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:26.196" starttime="20170809 05:14:26.196" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.197">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:26.197" starttime="20170809 05:14:26.197" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.198">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:26.198" starttime="20170809 05:14:26.197" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.377">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:26.377" starttime="20170809 05:14:26.198" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.377">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:26.377">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.377" starttime="20170809 05:14:26.198" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.378">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.378" starttime="20170809 05:14:26.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.379">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.379" starttime="20170809 05:14:26.378" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.379" starttime="20170809 05:14:26.194" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.379" starttime="20170809 05:14:26.194" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.379" starttime="20170809 05:14:26.193" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.380">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:14:26.380" starttime="20170809 05:14:26.379" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.382">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:26.382" starttime="20170809 05:14:26.381" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.383">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:26.383" starttime="20170809 05:14:26.383" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.383" starttime="20170809 05:14:26.382" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.383" starttime="20170809 05:14:26.381" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.383" starttime="20170809 05:14:26.380" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.446">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:26.447">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.447" starttime="20170809 05:14:26.384" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.448">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:26.448" starttime="20170809 05:14:26.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.449">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:26.449" starttime="20170809 05:14:26.449" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.450" starttime="20170809 05:14:26.449" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.450" starttime="20170809 05:14:26.447" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.450" starttime="20170809 05:14:26.447" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:26.451">Delete All Sessions</msg>
<status endtime="20170809 05:14:26.451" starttime="20170809 05:14:26.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.451">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.451" starttime="20170809 05:14:26.193" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.452">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.452" starttime="20170809 05:14:26.451" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.452">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:26.452">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:26.452">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:26.452" starttime="20170809 05:14:26.452" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.453">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:14:26.453" starttime="20170809 05:14:26.192" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.453">${power_state} = On</msg>
<status endtime="20170809 05:14:26.453" starttime="20170809 05:14:26.192" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:14:26.454" starttime="20170809 05:14:26.453" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.454" starttime="20170809 05:14:26.191" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.457">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:26.458" starttime="20170809 05:14:26.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.459">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:26.459" starttime="20170809 05:14:26.458" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.459">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:26.459" starttime="20170809 05:14:26.459" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.460">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:26.460" starttime="20170809 05:14:26.459" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.638">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:26.639" starttime="20170809 05:14:26.461" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.639">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:26.639">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.639" starttime="20170809 05:14:26.460" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.639">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.640" starttime="20170809 05:14:26.639" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.640" starttime="20170809 05:14:26.640" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.640" starttime="20170809 05:14:26.456" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.641" starttime="20170809 05:14:26.456" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.641" starttime="20170809 05:14:26.455" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.641">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:14:26.641" starttime="20170809 05:14:26.641" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.643">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:26.643" starttime="20170809 05:14:26.643" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.644">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:26.644" starttime="20170809 05:14:26.644" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.644" starttime="20170809 05:14:26.643" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.645" starttime="20170809 05:14:26.642" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.645" starttime="20170809 05:14:26.642" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.735">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:26.735">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.735" starttime="20170809 05:14:26.645" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.737">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:26.737" starttime="20170809 05:14:26.737" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.738">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:26.738" starttime="20170809 05:14:26.738" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.738" starttime="20170809 05:14:26.737" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.738" starttime="20170809 05:14:26.736" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.738" starttime="20170809 05:14:26.736" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:26.739">Delete All Sessions</msg>
<status endtime="20170809 05:14:26.739" starttime="20170809 05:14:26.739" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.739">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.739" starttime="20170809 05:14:26.455" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.740">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.740" starttime="20170809 05:14:26.739" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.740">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:26.740">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:26.741">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:26.741" starttime="20170809 05:14:26.740" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.741">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:14:26.741" starttime="20170809 05:14:26.454" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.741">${host_state} = Running</msg>
<status endtime="20170809 05:14:26.741" starttime="20170809 05:14:26.454" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:14:26.742" starttime="20170809 05:14:26.742" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.746">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:26.746" starttime="20170809 05:14:26.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:26.747" starttime="20170809 05:14:26.747" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.747">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:26.748" starttime="20170809 05:14:26.747" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.748">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:26.748" starttime="20170809 05:14:26.748" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:26.965" starttime="20170809 05:14:26.749" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:26.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:26.965">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:26.965" starttime="20170809 05:14:26.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.966">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.966" starttime="20170809 05:14:26.966" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:26.967" starttime="20170809 05:14:26.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.967" starttime="20170809 05:14:26.745" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.967" starttime="20170809 05:14:26.745" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.967" starttime="20170809 05:14:26.744" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.968">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:14:26.968" starttime="20170809 05:14:26.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:26.970">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:26.970" starttime="20170809 05:14:26.969" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:26.971">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:26.971" starttime="20170809 05:14:26.971" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.971" starttime="20170809 05:14:26.970" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.971" starttime="20170809 05:14:26.969" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:26.971" starttime="20170809 05:14:26.968" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:27.038">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:27.039">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:27.039" starttime="20170809 05:14:26.972" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:27.040">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:27.041" starttime="20170809 05:14:27.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:27.041">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:27.041" starttime="20170809 05:14:27.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:27.042" starttime="20170809 05:14:27.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:27.042" starttime="20170809 05:14:27.039" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:27.042" starttime="20170809 05:14:27.039" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:27.042">Delete All Sessions</msg>
<status endtime="20170809 05:14:27.042" starttime="20170809 05:14:27.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:27.042">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:27.042" starttime="20170809 05:14:26.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:27.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:27.043" starttime="20170809 05:14:27.043" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:27.044">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:27.044">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:27.044">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:27.044" starttime="20170809 05:14:27.043" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:27.044">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:27.044" starttime="20170809 05:14:26.743" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:27.045">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:27.045" starttime="20170809 05:14:26.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:14:27.045">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:14:27.045" starttime="20170809 05:14:27.045" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:27.045" starttime="20170809 05:14:26.742" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:27.046" starttime="20170809 05:14:26.191" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.052">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:37.052" starttime="20170809 05:14:37.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:37.053" starttime="20170809 05:14:37.053" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.054">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:37.054" starttime="20170809 05:14:37.053" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.055">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:37.055" starttime="20170809 05:14:37.054" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:37.241" starttime="20170809 05:14:37.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.241">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:37.241">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.241" starttime="20170809 05:14:37.055" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.242" starttime="20170809 05:14:37.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.243" starttime="20170809 05:14:37.242" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.243" starttime="20170809 05:14:37.051" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.243" starttime="20170809 05:14:37.049" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.243" starttime="20170809 05:14:37.049" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.244">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:14:37.244" starttime="20170809 05:14:37.243" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.246">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:37.247" starttime="20170809 05:14:37.245" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.248">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:37.248" starttime="20170809 05:14:37.247" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.248" starttime="20170809 05:14:37.247" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.248" starttime="20170809 05:14:37.245" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.248" starttime="20170809 05:14:37.244" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.334">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:37.334">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.334" starttime="20170809 05:14:37.248" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.336">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:37.336" starttime="20170809 05:14:37.335" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.337">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:37.337" starttime="20170809 05:14:37.336" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.337" starttime="20170809 05:14:37.336" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.337" starttime="20170809 05:14:37.335" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.337" starttime="20170809 05:14:37.334" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:37.337">Delete All Sessions</msg>
<status endtime="20170809 05:14:37.337" starttime="20170809 05:14:37.337" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.338">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.338" starttime="20170809 05:14:37.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.338" starttime="20170809 05:14:37.338" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.339">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:37.339">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:37.339">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:37.339" starttime="20170809 05:14:37.339" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.339">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:14:37.339" starttime="20170809 05:14:37.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.340">${power_state} = On</msg>
<status endtime="20170809 05:14:37.340" starttime="20170809 05:14:37.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:14:37.340" starttime="20170809 05:14:37.340" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.340" starttime="20170809 05:14:37.047" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.344">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:37.345" starttime="20170809 05:14:37.344" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.345">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:37.345" starttime="20170809 05:14:37.345" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.346">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:37.346" starttime="20170809 05:14:37.346" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.346">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:37.347" starttime="20170809 05:14:37.346" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:37.552" starttime="20170809 05:14:37.347" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:37.552">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.552" starttime="20170809 05:14:37.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.553" starttime="20170809 05:14:37.552" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.554" starttime="20170809 05:14:37.553" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.554" starttime="20170809 05:14:37.343" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.554" starttime="20170809 05:14:37.343" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.554" starttime="20170809 05:14:37.342" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.554">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:14:37.554" starttime="20170809 05:14:37.554" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.557">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:37.557" starttime="20170809 05:14:37.556" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.557">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:37.558" starttime="20170809 05:14:37.557" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.558" starttime="20170809 05:14:37.557" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.558" starttime="20170809 05:14:37.555" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.558" starttime="20170809 05:14:37.555" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.648">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:37.648">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.648" starttime="20170809 05:14:37.558" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.651">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:37.651" starttime="20170809 05:14:37.650" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.652">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:37.652" starttime="20170809 05:14:37.651" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.652" starttime="20170809 05:14:37.651" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.652" starttime="20170809 05:14:37.649" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.652" starttime="20170809 05:14:37.649" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:37.652">Delete All Sessions</msg>
<status endtime="20170809 05:14:37.652" starttime="20170809 05:14:37.652" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.653">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.653" starttime="20170809 05:14:37.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.653" starttime="20170809 05:14:37.653" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.654">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:37.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:37.654">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:37.654" starttime="20170809 05:14:37.654" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.655">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:14:37.655" starttime="20170809 05:14:37.341" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.655">${host_state} = Running</msg>
<status endtime="20170809 05:14:37.655" starttime="20170809 05:14:37.341" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:14:37.655" starttime="20170809 05:14:37.655" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.660">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:37.660" starttime="20170809 05:14:37.659" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.660">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:37.661" starttime="20170809 05:14:37.660" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.661">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:37.661" starttime="20170809 05:14:37.661" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.662">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:37.662" starttime="20170809 05:14:37.662" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.837">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:37.837" starttime="20170809 05:14:37.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:37.838">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.838" starttime="20170809 05:14:37.662" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.838">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.838" starttime="20170809 05:14:37.838" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.839" starttime="20170809 05:14:37.839" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.839" starttime="20170809 05:14:37.659" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.839" starttime="20170809 05:14:37.658" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.839" starttime="20170809 05:14:37.658" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.840">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:14:37.840" starttime="20170809 05:14:37.840" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.845">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:37.845" starttime="20170809 05:14:37.841" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.846">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:37.846" starttime="20170809 05:14:37.846" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.846" starttime="20170809 05:14:37.845" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.846" starttime="20170809 05:14:37.841" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.846" starttime="20170809 05:14:37.840" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.933">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:37.933">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.933" starttime="20170809 05:14:37.847" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.935">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:37.935" starttime="20170809 05:14:37.934" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.936">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:37.936" starttime="20170809 05:14:37.935" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.936" starttime="20170809 05:14:37.935" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.936" starttime="20170809 05:14:37.934" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:37.936" starttime="20170809 05:14:37.933" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:37.936">Delete All Sessions</msg>
<status endtime="20170809 05:14:37.937" starttime="20170809 05:14:37.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.937">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:37.937" starttime="20170809 05:14:37.657" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:37.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:37.937" starttime="20170809 05:14:37.937" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:37.938">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:37.938">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:37.938">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:37.938" starttime="20170809 05:14:37.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.938">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:37.939" starttime="20170809 05:14:37.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:37.939">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:37.939" starttime="20170809 05:14:37.656" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:14:37.939">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:14:37.939" starttime="20170809 05:14:37.939" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:37.940" starttime="20170809 05:14:37.656" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:37.940" starttime="20170809 05:14:37.046" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:47.946">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:47.946" starttime="20170809 05:14:47.945" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:47.947">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:47.947" starttime="20170809 05:14:47.947" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:47.948">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:47.948" starttime="20170809 05:14:47.948" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:47.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:47.949" starttime="20170809 05:14:47.949" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.137">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:48.138" starttime="20170809 05:14:47.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.138">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:48.138">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.138" starttime="20170809 05:14:47.950" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.138">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.139" starttime="20170809 05:14:48.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.139" starttime="20170809 05:14:48.139" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.139" starttime="20170809 05:14:47.944" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.139" starttime="20170809 05:14:47.944" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.140" starttime="20170809 05:14:47.943" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.140">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:14:48.140" starttime="20170809 05:14:48.140" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.142">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:48.143" starttime="20170809 05:14:48.142" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.143">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:48.143" starttime="20170809 05:14:48.143" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.144" starttime="20170809 05:14:48.143" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.144" starttime="20170809 05:14:48.141" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.144" starttime="20170809 05:14:48.141" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:48.208">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.208" starttime="20170809 05:14:48.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.210">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:48.210" starttime="20170809 05:14:48.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.211">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:48.211" starttime="20170809 05:14:48.211" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.211" starttime="20170809 05:14:48.210" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.212" starttime="20170809 05:14:48.209" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.212" starttime="20170809 05:14:48.208" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:48.212">Delete All Sessions</msg>
<status endtime="20170809 05:14:48.212" starttime="20170809 05:14:48.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.212">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.212" starttime="20170809 05:14:47.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.213" starttime="20170809 05:14:48.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.213">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:48.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:48.214">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:48.214" starttime="20170809 05:14:48.213" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.214">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:14:48.214" starttime="20170809 05:14:47.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.214">${power_state} = On</msg>
<status endtime="20170809 05:14:48.214" starttime="20170809 05:14:47.941" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:14:48.215" starttime="20170809 05:14:48.215" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.215" starttime="20170809 05:14:47.941" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.219">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:48.219" starttime="20170809 05:14:48.218" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.220">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:48.220" starttime="20170809 05:14:48.220" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.220">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:48.221" starttime="20170809 05:14:48.220" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:48.221" starttime="20170809 05:14:48.221" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:48.398" starttime="20170809 05:14:48.222" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:48.398">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.398" starttime="20170809 05:14:48.221" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.399" starttime="20170809 05:14:48.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.400" starttime="20170809 05:14:48.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.400" starttime="20170809 05:14:48.218" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.400" starttime="20170809 05:14:48.217" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.400" starttime="20170809 05:14:48.217" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.400">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:14:48.401" starttime="20170809 05:14:48.400" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.403">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:48.403" starttime="20170809 05:14:48.402" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.403">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:48.404" starttime="20170809 05:14:48.403" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.404" starttime="20170809 05:14:48.403" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.404" starttime="20170809 05:14:48.401" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.404" starttime="20170809 05:14:48.401" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.495">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:48.495">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.495" starttime="20170809 05:14:48.404" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.497">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:48.497" starttime="20170809 05:14:48.496" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.498">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:48.498" starttime="20170809 05:14:48.497" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.498" starttime="20170809 05:14:48.497" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.498" starttime="20170809 05:14:48.496" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.498" starttime="20170809 05:14:48.495" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:48.498">Delete All Sessions</msg>
<status endtime="20170809 05:14:48.498" starttime="20170809 05:14:48.498" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.499">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.499" starttime="20170809 05:14:48.216" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.499">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.499" starttime="20170809 05:14:48.499" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.500">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:48.500">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:48.500">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:48.500" starttime="20170809 05:14:48.500" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.500">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:14:48.500" starttime="20170809 05:14:48.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.501">${host_state} = Running</msg>
<status endtime="20170809 05:14:48.501" starttime="20170809 05:14:48.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:14:48.501" starttime="20170809 05:14:48.501" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.505">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:48.506" starttime="20170809 05:14:48.505" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:48.506" starttime="20170809 05:14:48.506" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.507">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:48.507" starttime="20170809 05:14:48.507" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:48.508" starttime="20170809 05:14:48.507" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:48.685" starttime="20170809 05:14:48.508" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.686">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:48.686">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.686" starttime="20170809 05:14:48.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.686" starttime="20170809 05:14:48.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.687" starttime="20170809 05:14:48.687" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.687" starttime="20170809 05:14:48.505" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.687" starttime="20170809 05:14:48.504" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.687" starttime="20170809 05:14:48.504" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.688">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:14:48.688" starttime="20170809 05:14:48.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.690">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:48.690" starttime="20170809 05:14:48.689" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.691">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:48.692" starttime="20170809 05:14:48.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.692" starttime="20170809 05:14:48.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.692" starttime="20170809 05:14:48.689" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.692" starttime="20170809 05:14:48.688" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.759">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:48.760">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.760" starttime="20170809 05:14:48.692" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.762">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:48.762" starttime="20170809 05:14:48.761" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.762">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:48.763" starttime="20170809 05:14:48.762" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.763" starttime="20170809 05:14:48.762" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.763" starttime="20170809 05:14:48.760" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:48.763" starttime="20170809 05:14:48.760" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:48.763">Delete All Sessions</msg>
<status endtime="20170809 05:14:48.763" starttime="20170809 05:14:48.763" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.764">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:48.764" starttime="20170809 05:14:48.503" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:48.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:48.765" starttime="20170809 05:14:48.764" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:48.765">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:48.766">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:48.766">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:48.766" starttime="20170809 05:14:48.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.766">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:48.766" starttime="20170809 05:14:48.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:48.766">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:48.767" starttime="20170809 05:14:48.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:14:48.767">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:14:48.768" starttime="20170809 05:14:48.767" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:48.768" starttime="20170809 05:14:48.501" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:48.768" starttime="20170809 05:14:47.940" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:58.773">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:58.774" starttime="20170809 05:14:58.773" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:58.774">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:58.774" starttime="20170809 05:14:58.774" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:58.775">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:58.775" starttime="20170809 05:14:58.774" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:58.775">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:58.775" starttime="20170809 05:14:58.775" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:58.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:58.952" starttime="20170809 05:14:58.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:58.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:58.953">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:58.953" starttime="20170809 05:14:58.776" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:58.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:58.953" starttime="20170809 05:14:58.953" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:58.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:58.954" starttime="20170809 05:14:58.954" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:58.954" starttime="20170809 05:14:58.772" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:58.954" starttime="20170809 05:14:58.772" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:58.954" starttime="20170809 05:14:58.771" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:58.955">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:14:58.955" starttime="20170809 05:14:58.955" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:58.957">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:58.957" starttime="20170809 05:14:58.956" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:58.958">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:58.958" starttime="20170809 05:14:58.958" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:58.958" starttime="20170809 05:14:58.957" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:58.958" starttime="20170809 05:14:58.956" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:58.958" starttime="20170809 05:14:58.955" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.035">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:59.036">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.036" starttime="20170809 05:14:58.959" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.038">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:59.038" starttime="20170809 05:14:59.037" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.038">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:59.039" starttime="20170809 05:14:59.038" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.039" starttime="20170809 05:14:59.038" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.039" starttime="20170809 05:14:59.037" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.039" starttime="20170809 05:14:59.036" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:59.039">Delete All Sessions</msg>
<status endtime="20170809 05:14:59.039" starttime="20170809 05:14:59.039" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.040">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.040" starttime="20170809 05:14:58.770" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.040" starttime="20170809 05:14:59.040" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.041">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:59.041">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:59.041">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:59.041" starttime="20170809 05:14:59.040" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.041">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:14:59.041" starttime="20170809 05:14:58.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.042">${power_state} = On</msg>
<status endtime="20170809 05:14:59.042" starttime="20170809 05:14:58.769" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:14:59.042" starttime="20170809 05:14:59.042" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.042" starttime="20170809 05:14:58.769" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.046">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:59.046" starttime="20170809 05:14:59.045" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.047">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:59.047" starttime="20170809 05:14:59.047" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.048">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:59.048" starttime="20170809 05:14:59.047" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:59.048" starttime="20170809 05:14:59.048" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.250">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:59.250" starttime="20170809 05:14:59.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.251">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:59.251">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.251" starttime="20170809 05:14:59.049" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.252">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.252" starttime="20170809 05:14:59.251" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.252" starttime="20170809 05:14:59.252" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.253" starttime="20170809 05:14:59.045" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.253" starttime="20170809 05:14:59.045" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.253" starttime="20170809 05:14:59.044" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.253">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:14:59.253" starttime="20170809 05:14:59.253" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.255">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:59.255" starttime="20170809 05:14:59.255" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.256">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:14:59.256" starttime="20170809 05:14:59.256" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.257" starttime="20170809 05:14:59.256" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.257" starttime="20170809 05:14:59.254" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.257" starttime="20170809 05:14:59.254" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.387">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:59.387">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.387" starttime="20170809 05:14:59.257" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.389">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:59.389" starttime="20170809 05:14:59.388" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.390">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:59.390" starttime="20170809 05:14:59.389" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.390" starttime="20170809 05:14:59.389" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.390" starttime="20170809 05:14:59.388" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.390" starttime="20170809 05:14:59.387" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:59.390">Delete All Sessions</msg>
<status endtime="20170809 05:14:59.390" starttime="20170809 05:14:59.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.391">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.391" starttime="20170809 05:14:59.043" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.391" starttime="20170809 05:14:59.391" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.392">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:59.392">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:59.392">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:59.392" starttime="20170809 05:14:59.392" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.392">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:14:59.392" starttime="20170809 05:14:59.043" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.393">${host_state} = Running</msg>
<status endtime="20170809 05:14:59.393" starttime="20170809 05:14:59.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:14:59.393" starttime="20170809 05:14:59.393" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.398">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:14:59.398" starttime="20170809 05:14:59.397" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:14:59.399" starttime="20170809 05:14:59.398" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.399">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:14:59.399" starttime="20170809 05:14:59.399" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:14:59.400" starttime="20170809 05:14:59.400" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:14:59.585" starttime="20170809 05:14:59.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:14:59.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.585" starttime="20170809 05:14:59.400" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.586" starttime="20170809 05:14:59.585" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.586" starttime="20170809 05:14:59.586" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.587" starttime="20170809 05:14:59.397" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.587" starttime="20170809 05:14:59.396" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.587" starttime="20170809 05:14:59.396" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.587">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:14:59.587" starttime="20170809 05:14:59.587" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.590">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:59.590" starttime="20170809 05:14:59.589" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.591">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:14:59.591" starttime="20170809 05:14:59.590" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.591" starttime="20170809 05:14:59.590" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.591" starttime="20170809 05:14:59.588" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.591" starttime="20170809 05:14:59.588" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.661">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:14:59.661">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.661" starttime="20170809 05:14:59.591" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.663">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:59.663" starttime="20170809 05:14:59.663" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.664">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:14:59.664" starttime="20170809 05:14:59.664" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.664" starttime="20170809 05:14:59.663" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.664" starttime="20170809 05:14:59.662" status="PASS"></status>
</kw>
<status endtime="20170809 05:14:59.664" starttime="20170809 05:14:59.661" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:14:59.665">Delete All Sessions</msg>
<status endtime="20170809 05:14:59.665" starttime="20170809 05:14:59.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.665">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:14:59.665" starttime="20170809 05:14:59.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:14:59.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:14:59.666" starttime="20170809 05:14:59.665" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:14:59.666">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:14:59.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:14:59.666">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:14:59.666" starttime="20170809 05:14:59.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.667">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:59.667" starttime="20170809 05:14:59.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:14:59.667">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:14:59.667" starttime="20170809 05:14:59.394" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:14:59.668">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:14:59.668" starttime="20170809 05:14:59.667" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:59.668" starttime="20170809 05:14:59.393" status="FAIL"></status>
</kw>
<status endtime="20170809 05:14:59.668" starttime="20170809 05:14:58.768" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:09.673">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:09.674" starttime="20170809 05:15:09.673" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:09.674">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:09.674" starttime="20170809 05:15:09.674" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:09.675">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:09.675" starttime="20170809 05:15:09.675" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:09.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:09.676" starttime="20170809 05:15:09.675" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:11.040">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:11.040" starttime="20170809 05:15:09.676" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:11.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:11.040">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:11.040" starttime="20170809 05:15:09.676" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:11.041">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:11.041" starttime="20170809 05:15:11.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:11.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:11.042" starttime="20170809 05:15:11.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:11.042" starttime="20170809 05:15:09.673" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:11.042" starttime="20170809 05:15:09.672" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:11.042" starttime="20170809 05:15:09.671" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:11.043">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:15:11.043" starttime="20170809 05:15:11.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:11.045">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:11.045" starttime="20170809 05:15:11.044" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:11.046">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:11.046" starttime="20170809 05:15:11.046" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:11.046" starttime="20170809 05:15:11.045" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:11.046" starttime="20170809 05:15:11.044" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:11.046" starttime="20170809 05:15:11.043" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:15.664">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:15.665">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:15.665" starttime="20170809 05:15:11.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:15.667">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:15.667" starttime="20170809 05:15:15.666" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:15.668">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:15.668" starttime="20170809 05:15:15.668" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:15.668" starttime="20170809 05:15:15.667" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:15.668" starttime="20170809 05:15:15.666" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:15.668" starttime="20170809 05:15:15.665" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:15.669">Delete All Sessions</msg>
<status endtime="20170809 05:15:15.669" starttime="20170809 05:15:15.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:15.669">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:15.669" starttime="20170809 05:15:09.671" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:15.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:15.670" starttime="20170809 05:15:15.669" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:15.670">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:15.670">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:15.670">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:15.670" starttime="20170809 05:15:15.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:15.671">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:15:15.671" starttime="20170809 05:15:09.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:15.671">${power_state} = On</msg>
<status endtime="20170809 05:15:15.671" starttime="20170809 05:15:09.670" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:15:15.672" starttime="20170809 05:15:15.671" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:15.672" starttime="20170809 05:15:09.669" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:15.676">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:15.676" starttime="20170809 05:15:15.675" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:15.677">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:15.677" starttime="20170809 05:15:15.676" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:15.677">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:15.677" starttime="20170809 05:15:15.677" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:15.678">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:15.678" starttime="20170809 05:15:15.678" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.127">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:16.128" starttime="20170809 05:15:15.679" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:16.128">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:16.128">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:16.128" starttime="20170809 05:15:15.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.128">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:16.129" starttime="20170809 05:15:16.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:16.129" starttime="20170809 05:15:16.129" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.129" starttime="20170809 05:15:15.674" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.129" starttime="20170809 05:15:15.674" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.130" starttime="20170809 05:15:15.673" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.130">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:15:16.130" starttime="20170809 05:15:16.130" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.132">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:16.132" starttime="20170809 05:15:16.132" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.133">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:16.133" starttime="20170809 05:15:16.133" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.134" starttime="20170809 05:15:16.133" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.134" starttime="20170809 05:15:16.131" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.134" starttime="20170809 05:15:16.130" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.660">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:16.661">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:16.661" starttime="20170809 05:15:16.134" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.663">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:16.663" starttime="20170809 05:15:16.662" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.664">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:16.664" starttime="20170809 05:15:16.663" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.664" starttime="20170809 05:15:16.663" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.664" starttime="20170809 05:15:16.662" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:16.664" starttime="20170809 05:15:16.661" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:16.665">Delete All Sessions</msg>
<status endtime="20170809 05:15:16.665" starttime="20170809 05:15:16.665" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:16.665">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:16.665" starttime="20170809 05:15:15.673" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:16.666" starttime="20170809 05:15:16.665" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.666">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:16.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:16.666">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:16.667" starttime="20170809 05:15:16.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:16.667">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:15:16.667" starttime="20170809 05:15:15.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:16.667">${host_state} = Running</msg>
<status endtime="20170809 05:15:16.667" starttime="20170809 05:15:15.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:15:16.668" starttime="20170809 05:15:16.667" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:16.671">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:16.672" starttime="20170809 05:15:16.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.673">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:16.673" starttime="20170809 05:15:16.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.673">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:16.674" starttime="20170809 05:15:16.673" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:16.674">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:16.674" starttime="20170809 05:15:16.674" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:17.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:17.051" starttime="20170809 05:15:16.675" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:17.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:17.051">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:17.051" starttime="20170809 05:15:16.675" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:17.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:17.052" starttime="20170809 05:15:17.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:17.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:17.053" starttime="20170809 05:15:17.053" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.053" starttime="20170809 05:15:16.671" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.053" starttime="20170809 05:15:16.670" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.053" starttime="20170809 05:15:16.670" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:17.054">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:15:17.054" starttime="20170809 05:15:17.054" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:17.056">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:15:17.056" starttime="20170809 05:15:17.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:17.057">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:15:17.057" starttime="20170809 05:15:17.057" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.057" starttime="20170809 05:15:17.056" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.058" starttime="20170809 05:15:17.055" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.058" starttime="20170809 05:15:17.054" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:17.732">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:17.733">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:17.733" starttime="20170809 05:15:17.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:17.735">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:17.735" starttime="20170809 05:15:17.734" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:17.735">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:17.736" starttime="20170809 05:15:17.735" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.736" starttime="20170809 05:15:17.735" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.736" starttime="20170809 05:15:17.734" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:17.736" starttime="20170809 05:15:17.733" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:17.736">Delete All Sessions</msg>
<status endtime="20170809 05:15:17.736" starttime="20170809 05:15:17.736" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:17.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:17.737" starttime="20170809 05:15:16.669" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:17.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:17.737" starttime="20170809 05:15:17.737" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:17.738">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:17.738">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:17.738">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:17.738" starttime="20170809 05:15:17.738" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:17.738">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:15:17.738" starttime="20170809 05:15:16.668" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:17.739">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:15:17.739" starttime="20170809 05:15:16.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:15:17.739">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:15:17.739" starttime="20170809 05:15:17.739" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:17.739" starttime="20170809 05:15:16.668" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:17.740" starttime="20170809 05:15:09.669" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:27.745">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:27.745" starttime="20170809 05:15:27.745" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:27.746">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:27.746" starttime="20170809 05:15:27.746" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:27.747">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:27.747" starttime="20170809 05:15:27.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:27.747">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:27.747" starttime="20170809 05:15:27.747" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:28.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:28.286" starttime="20170809 05:15:27.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:28.286">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:28.286">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:28.286" starttime="20170809 05:15:27.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:28.287">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:28.287" starttime="20170809 05:15:28.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:28.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:28.287" starttime="20170809 05:15:28.287" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:28.287" starttime="20170809 05:15:27.744" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:28.288" starttime="20170809 05:15:27.743" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:28.288" starttime="20170809 05:15:27.743" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:28.288">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:15:28.288" starttime="20170809 05:15:28.288" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:28.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:28.290" starttime="20170809 05:15:28.290" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:28.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:28.291" starttime="20170809 05:15:28.291" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:28.292" starttime="20170809 05:15:28.291" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:28.292" starttime="20170809 05:15:28.289" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:28.292" starttime="20170809 05:15:28.289" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:32.688">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:32.688">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:32.689" starttime="20170809 05:15:28.292" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:32.690">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:32.690" starttime="20170809 05:15:32.690" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:32.692">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:32.692" starttime="20170809 05:15:32.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:32.692" starttime="20170809 05:15:32.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:32.692" starttime="20170809 05:15:32.689" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:32.692" starttime="20170809 05:15:32.689" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:32.693">Delete All Sessions</msg>
<status endtime="20170809 05:15:32.693" starttime="20170809 05:15:32.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:32.693">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:32.693" starttime="20170809 05:15:27.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:32.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:32.694" starttime="20170809 05:15:32.693" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:32.694">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:32.694">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:32.694">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:32.694" starttime="20170809 05:15:32.694" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:32.695">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 05:15:32.695" starttime="20170809 05:15:27.741" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:32.695">${power_state} = Off</msg>
<status endtime="20170809 05:15:32.695" starttime="20170809 05:15:27.741" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:15:32.696">On != Off</msg>
<status endtime="20170809 05:15:32.696" starttime="20170809 05:15:32.695" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:32.696" starttime="20170809 05:15:27.741" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:32.696" starttime="20170809 05:15:27.740" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:42.701">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:42.701" starttime="20170809 05:15:42.701" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:42.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:42.702" starttime="20170809 05:15:42.702" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:42.703">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:42.703" starttime="20170809 05:15:42.702" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:42.703">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:42.703" starttime="20170809 05:15:42.703" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.207">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:43.207" starttime="20170809 05:15:42.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:43.208">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:43.208">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:43.208" starttime="20170809 05:15:42.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.208">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:43.208" starttime="20170809 05:15:43.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.209">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:43.209" starttime="20170809 05:15:43.209" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.209" starttime="20170809 05:15:42.700" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.209" starttime="20170809 05:15:42.700" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.209" starttime="20170809 05:15:42.699" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.210">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:15:43.210" starttime="20170809 05:15:43.210" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.212">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:43.212" starttime="20170809 05:15:43.211" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.213">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:43.213" starttime="20170809 05:15:43.213" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.213" starttime="20170809 05:15:43.212" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.213" starttime="20170809 05:15:43.211" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.214" starttime="20170809 05:15:43.210" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.911">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:43.911">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:43.911" starttime="20170809 05:15:43.214" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.913">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:43.914" starttime="20170809 05:15:43.913" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.914">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:43.915" starttime="20170809 05:15:43.914" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.915" starttime="20170809 05:15:43.914" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.915" starttime="20170809 05:15:43.912" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.915" starttime="20170809 05:15:43.912" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:43.915">Delete All Sessions</msg>
<status endtime="20170809 05:15:43.915" starttime="20170809 05:15:43.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:43.915">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:43.916" starttime="20170809 05:15:42.698" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:43.916" starttime="20170809 05:15:43.916" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.917">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:43.917">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:43.917">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:43.917" starttime="20170809 05:15:43.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:43.917">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:15:43.917" starttime="20170809 05:15:42.698" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:43.917">${power_state} = On</msg>
<status endtime="20170809 05:15:43.918" starttime="20170809 05:15:42.697" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:15:43.918" starttime="20170809 05:15:43.918" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:43.918" starttime="20170809 05:15:42.697" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:43.922">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:43.923" starttime="20170809 05:15:43.921" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.923">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:43.923" starttime="20170809 05:15:43.923" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.924">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:43.924" starttime="20170809 05:15:43.923" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:43.924">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:43.924" starttime="20170809 05:15:43.924" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.535">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:44.535" starttime="20170809 05:15:43.925" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:44.535">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:44.535">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:44.535" starttime="20170809 05:15:43.925" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.536">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:44.536" starttime="20170809 05:15:44.536" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:44.537" starttime="20170809 05:15:44.537" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.537" starttime="20170809 05:15:43.921" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.537" starttime="20170809 05:15:43.920" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.537" starttime="20170809 05:15:43.920" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.538">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:15:44.538" starttime="20170809 05:15:44.538" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.541">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:44.541" starttime="20170809 05:15:44.540" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.542">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:44.542" starttime="20170809 05:15:44.542" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.543" starttime="20170809 05:15:44.541" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.543" starttime="20170809 05:15:44.539" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.543" starttime="20170809 05:15:44.538" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.923">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:44.923">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:44.923" starttime="20170809 05:15:44.543" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.925">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:44.925" starttime="20170809 05:15:44.925" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.926">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:44.926" starttime="20170809 05:15:44.926" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.927" starttime="20170809 05:15:44.926" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.927" starttime="20170809 05:15:44.924" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:44.927" starttime="20170809 05:15:44.924" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:44.927">Delete All Sessions</msg>
<status endtime="20170809 05:15:44.927" starttime="20170809 05:15:44.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:44.927">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:44.927" starttime="20170809 05:15:43.919" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:44.928" starttime="20170809 05:15:44.928" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.929">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:44.929">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:44.929">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:44.929" starttime="20170809 05:15:44.928" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:44.929">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:15:44.929" starttime="20170809 05:15:43.919" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:44.930">${host_state} = Running</msg>
<status endtime="20170809 05:15:44.930" starttime="20170809 05:15:43.918" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:15:44.930" starttime="20170809 05:15:44.930" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:44.935">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:44.935" starttime="20170809 05:15:44.935" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:44.936" starttime="20170809 05:15:44.936" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.937">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:44.937" starttime="20170809 05:15:44.936" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:44.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:44.937" starttime="20170809 05:15:44.937" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:45.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:45.283" starttime="20170809 05:15:44.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:45.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:45.283">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:45.283" starttime="20170809 05:15:44.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:45.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:45.284" starttime="20170809 05:15:45.284" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:45.285">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:45.285" starttime="20170809 05:15:45.284" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.285" starttime="20170809 05:15:44.934" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.285" starttime="20170809 05:15:44.934" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.285" starttime="20170809 05:15:44.933" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:45.286">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:15:45.286" starttime="20170809 05:15:45.285" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:45.288">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:15:45.288" starttime="20170809 05:15:45.287" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:45.289">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:15:45.289" starttime="20170809 05:15:45.288" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.289" starttime="20170809 05:15:45.288" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.289" starttime="20170809 05:15:45.286" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.289" starttime="20170809 05:15:45.286" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:45.356">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:45.356">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:45.356" starttime="20170809 05:15:45.289" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:45.358">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:45.358" starttime="20170809 05:15:45.358" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:45.359">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:45.359" starttime="20170809 05:15:45.359" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.359" starttime="20170809 05:15:45.358" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.359" starttime="20170809 05:15:45.357" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:45.359" starttime="20170809 05:15:45.357" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:45.360">Delete All Sessions</msg>
<status endtime="20170809 05:15:45.360" starttime="20170809 05:15:45.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:45.360">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:45.360" starttime="20170809 05:15:44.932" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:45.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:45.361" starttime="20170809 05:15:45.360" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:45.361">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:45.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:45.362">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:45.362" starttime="20170809 05:15:45.361" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:45.362">${state} = Off</msg>
<status endtime="20170809 05:15:45.362" starttime="20170809 05:15:44.932" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:45.362">${boot_progress} = Off</msg>
<status endtime="20170809 05:15:45.362" starttime="20170809 05:15:44.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:15:45.363">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 05:15:45.363" starttime="20170809 05:15:45.362" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:45.363" starttime="20170809 05:15:44.931" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:45.363" starttime="20170809 05:15:42.696" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.368">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:55.368" starttime="20170809 05:15:55.368" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:55.369" starttime="20170809 05:15:55.369" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.370">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:55.370" starttime="20170809 05:15:55.369" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.370">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:55.370" starttime="20170809 05:15:55.370" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.652">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:55.653" starttime="20170809 05:15:55.371" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:55.653">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:55.653">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:55.653" starttime="20170809 05:15:55.371" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.654">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:55.654" starttime="20170809 05:15:55.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:55.655" starttime="20170809 05:15:55.654" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.655" starttime="20170809 05:15:55.367" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.655" starttime="20170809 05:15:55.367" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.655" starttime="20170809 05:15:55.366" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.656">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:15:55.656" starttime="20170809 05:15:55.655" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.658">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:55.658" starttime="20170809 05:15:55.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.660">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:55.660" starttime="20170809 05:15:55.659" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.660" starttime="20170809 05:15:55.658" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.660" starttime="20170809 05:15:55.656" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.660" starttime="20170809 05:15:55.656" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.748">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:55.748">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:55.748" starttime="20170809 05:15:55.660" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.750">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:55.750" starttime="20170809 05:15:55.749" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.750">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:55.751" starttime="20170809 05:15:55.750" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.751" starttime="20170809 05:15:55.750" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.751" starttime="20170809 05:15:55.749" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.751" starttime="20170809 05:15:55.748" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:55.751">Delete All Sessions</msg>
<status endtime="20170809 05:15:55.751" starttime="20170809 05:15:55.751" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:55.752">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:55.752" starttime="20170809 05:15:55.365" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.752">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:55.752" starttime="20170809 05:15:55.752" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.753">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:55.753">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:55.753">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:55.753" starttime="20170809 05:15:55.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:55.753">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:15:55.753" starttime="20170809 05:15:55.365" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:55.754">${power_state} = On</msg>
<status endtime="20170809 05:15:55.754" starttime="20170809 05:15:55.365" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:15:55.754" starttime="20170809 05:15:55.754" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.754" starttime="20170809 05:15:55.364" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.758">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:55.759" starttime="20170809 05:15:55.758" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.759">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:55.759" starttime="20170809 05:15:55.759" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.760">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:55.760" starttime="20170809 05:15:55.760" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.761">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:55.761" starttime="20170809 05:15:55.761" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.993">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:55.993" starttime="20170809 05:15:55.762" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:55.993">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:55.993">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:55.993" starttime="20170809 05:15:55.762" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.994">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:55.994" starttime="20170809 05:15:55.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:55.995" starttime="20170809 05:15:55.994" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.995" starttime="20170809 05:15:55.757" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.995" starttime="20170809 05:15:55.757" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.995" starttime="20170809 05:15:55.756" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.996">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:15:55.996" starttime="20170809 05:15:55.995" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:55.998">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:55.998" starttime="20170809 05:15:55.997" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:55.999">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:15:55.999" starttime="20170809 05:15:55.999" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.999" starttime="20170809 05:15:55.998" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.999" starttime="20170809 05:15:55.997" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:55.999" starttime="20170809 05:15:55.996" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.096">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:56.097">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:56.097" starttime="20170809 05:15:56.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.098">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:56.098" starttime="20170809 05:15:56.098" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.099">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:56.099" starttime="20170809 05:15:56.099" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.100" starttime="20170809 05:15:56.099" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.100" starttime="20170809 05:15:56.097" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.100" starttime="20170809 05:15:56.097" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:56.100">Delete All Sessions</msg>
<status endtime="20170809 05:15:56.100" starttime="20170809 05:15:56.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.100">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:56.100" starttime="20170809 05:15:55.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:56.101" starttime="20170809 05:15:56.101" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.102">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:56.102">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:56.102">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:56.102" starttime="20170809 05:15:56.101" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.102">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:15:56.102" starttime="20170809 05:15:55.755" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.102">${host_state} = Running</msg>
<status endtime="20170809 05:15:56.102" starttime="20170809 05:15:55.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:15:56.103" starttime="20170809 05:15:56.103" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.107">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:15:56.107" starttime="20170809 05:15:56.107" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:15:56.108" starttime="20170809 05:15:56.108" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.109">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:15:56.109" starttime="20170809 05:15:56.108" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.109">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:15:56.109" starttime="20170809 05:15:56.109" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.489">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:15:56.489" starttime="20170809 05:15:56.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.489">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:15:56.489">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:56.489" starttime="20170809 05:15:56.110" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.490">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:56.490" starttime="20170809 05:15:56.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:56.491" starttime="20170809 05:15:56.490" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.491" starttime="20170809 05:15:56.106" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.491" starttime="20170809 05:15:56.106" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.491" starttime="20170809 05:15:56.105" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.491">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:15:56.492" starttime="20170809 05:15:56.491" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.494">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:15:56.494" starttime="20170809 05:15:56.493" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.494">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:15:56.495" starttime="20170809 05:15:56.494" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.495" starttime="20170809 05:15:56.494" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.495" starttime="20170809 05:15:56.492" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.495" starttime="20170809 05:15:56.492" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.679">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:15:56.679">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:56.680" starttime="20170809 05:15:56.495" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.681">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:56.681" starttime="20170809 05:15:56.681" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.682">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:15:56.682" starttime="20170809 05:15:56.682" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.683" starttime="20170809 05:15:56.682" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.683" starttime="20170809 05:15:56.680" status="PASS"></status>
</kw>
<status endtime="20170809 05:15:56.683" starttime="20170809 05:15:56.680" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:15:56.683">Delete All Sessions</msg>
<status endtime="20170809 05:15:56.683" starttime="20170809 05:15:56.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.683">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:15:56.683" starttime="20170809 05:15:56.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:15:56.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:15:56.684" starttime="20170809 05:15:56.684" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:15:56.685">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:15:56.685">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:15:56.685">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:15:56.685" starttime="20170809 05:15:56.684" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.685">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:15:56.685" starttime="20170809 05:15:56.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:15:56.685">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:15:56.686" starttime="20170809 05:15:56.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:15:56.686">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:15:56.686" starttime="20170809 05:15:56.686" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:56.686" starttime="20170809 05:15:56.103" status="FAIL"></status>
</kw>
<status endtime="20170809 05:15:56.687" starttime="20170809 05:15:55.364" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.691">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:06.692" starttime="20170809 05:16:06.691" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:06.693" starttime="20170809 05:16:06.692" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.693">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:06.693" starttime="20170809 05:16:06.693" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:06.694" starttime="20170809 05:16:06.694" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:06.875" starttime="20170809 05:16:06.695" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:06.875">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:06.875">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:06.875" starttime="20170809 05:16:06.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.876">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:06.876" starttime="20170809 05:16:06.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:06.876" starttime="20170809 05:16:06.876" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.876" starttime="20170809 05:16:06.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.877" starttime="20170809 05:16:06.690" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.877" starttime="20170809 05:16:06.690" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.877">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:16:06.877" starttime="20170809 05:16:06.877" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.880">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:06.880" starttime="20170809 05:16:06.879" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.881">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:06.881" starttime="20170809 05:16:06.881" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.881" starttime="20170809 05:16:06.881" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.882" starttime="20170809 05:16:06.878" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.882" starttime="20170809 05:16:06.878" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.946">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:06.946">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:06.946" starttime="20170809 05:16:06.882" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.948">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:06.948" starttime="20170809 05:16:06.948" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.949">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:06.949" starttime="20170809 05:16:06.949" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.949" starttime="20170809 05:16:06.948" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.949" starttime="20170809 05:16:06.947" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.949" starttime="20170809 05:16:06.947" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:06.950">Delete All Sessions</msg>
<status endtime="20170809 05:16:06.950" starttime="20170809 05:16:06.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:06.950">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:06.950" starttime="20170809 05:16:06.689" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.951">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:06.951" starttime="20170809 05:16:06.950" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.951">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:06.951">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:06.951">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:06.952" starttime="20170809 05:16:06.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:06.952">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:16:06.952" starttime="20170809 05:16:06.688" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:06.952">${power_state} = On</msg>
<status endtime="20170809 05:16:06.952" starttime="20170809 05:16:06.688" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:16:06.953" starttime="20170809 05:16:06.952" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:06.953" starttime="20170809 05:16:06.688" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:06.956">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:06.960" starttime="20170809 05:16:06.956" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.961">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:06.961" starttime="20170809 05:16:06.960" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.962">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:06.962" starttime="20170809 05:16:06.962" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:06.963">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:06.963" starttime="20170809 05:16:06.962" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.171">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:07.172" starttime="20170809 05:16:06.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.172">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:07.172">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:07.172" starttime="20170809 05:16:06.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.172">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:07.173" starttime="20170809 05:16:07.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:07.173" starttime="20170809 05:16:07.173" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.173" starttime="20170809 05:16:06.955" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.173" starttime="20170809 05:16:06.955" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.174" starttime="20170809 05:16:06.955" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.174">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:16:07.174" starttime="20170809 05:16:07.174" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.176">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:07.176" starttime="20170809 05:16:07.176" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.177">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:07.177" starttime="20170809 05:16:07.177" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.177" starttime="20170809 05:16:07.176" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.178" starttime="20170809 05:16:07.175" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.178" starttime="20170809 05:16:07.175" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.297">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:07.298">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:07.298" starttime="20170809 05:16:07.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.300">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:07.300" starttime="20170809 05:16:07.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:07.301" starttime="20170809 05:16:07.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.301" starttime="20170809 05:16:07.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.301" starttime="20170809 05:16:07.299" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.301" starttime="20170809 05:16:07.298" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:07.301">Delete All Sessions</msg>
<status endtime="20170809 05:16:07.301" starttime="20170809 05:16:07.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.302">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:07.302" starttime="20170809 05:16:06.954" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:07.302" starttime="20170809 05:16:07.302" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:07.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:07.303">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:07.303" starttime="20170809 05:16:07.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.303">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:16:07.303" starttime="20170809 05:16:06.953" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.304">${host_state} = Running</msg>
<status endtime="20170809 05:16:07.304" starttime="20170809 05:16:06.953" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:16:07.304" starttime="20170809 05:16:07.304" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.309">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:07.309" starttime="20170809 05:16:07.309" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.310">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:07.310" starttime="20170809 05:16:07.310" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.310">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:07.311" starttime="20170809 05:16:07.310" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.311">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:07.311" starttime="20170809 05:16:07.311" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.628">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:07.628" starttime="20170809 05:16:07.312" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.628">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:07.628">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:07.628" starttime="20170809 05:16:07.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.629">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:07.629" starttime="20170809 05:16:07.628" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.629">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:07.629" starttime="20170809 05:16:07.629" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.630" starttime="20170809 05:16:07.308" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.630" starttime="20170809 05:16:07.308" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.630" starttime="20170809 05:16:07.307" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.630">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:16:07.630" starttime="20170809 05:16:07.630" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.633">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:07.633" starttime="20170809 05:16:07.632" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.634">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:07.634" starttime="20170809 05:16:07.633" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.634" starttime="20170809 05:16:07.633" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.634" starttime="20170809 05:16:07.631" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.634" starttime="20170809 05:16:07.631" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.712">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:07.712">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:07.712" starttime="20170809 05:16:07.634" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.714">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:07.714" starttime="20170809 05:16:07.713" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.715">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:07.715" starttime="20170809 05:16:07.715" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.715" starttime="20170809 05:16:07.714" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.715" starttime="20170809 05:16:07.713" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:07.715" starttime="20170809 05:16:07.712" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:07.716">Delete All Sessions</msg>
<status endtime="20170809 05:16:07.716" starttime="20170809 05:16:07.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.716">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:07.716" starttime="20170809 05:16:07.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:07.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:07.717" starttime="20170809 05:16:07.716" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:07.717">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:07.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:07.717">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:07.717" starttime="20170809 05:16:07.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.718">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:07.718" starttime="20170809 05:16:07.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:07.718">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:07.718" starttime="20170809 05:16:07.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:16:07.718">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:16:07.718" starttime="20170809 05:16:07.718" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:07.719" starttime="20170809 05:16:07.304" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:07.719" starttime="20170809 05:16:06.687" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:17.724">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:17.724" starttime="20170809 05:16:17.723" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:17.725">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:17.725" starttime="20170809 05:16:17.725" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:17.726">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:17.726" starttime="20170809 05:16:17.725" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:17.726">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:17.726" starttime="20170809 05:16:17.726" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:17.928">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:17.928" starttime="20170809 05:16:17.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:17.928">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:17.928">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:17.928" starttime="20170809 05:16:17.726" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:17.929">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:17.929" starttime="20170809 05:16:17.929" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:17.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:17.930" starttime="20170809 05:16:17.929" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:17.930" starttime="20170809 05:16:17.723" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:17.930" starttime="20170809 05:16:17.722" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:17.930" starttime="20170809 05:16:17.722" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:17.931">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:16:17.931" starttime="20170809 05:16:17.930" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:17.933">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:17.933" starttime="20170809 05:16:17.932" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:17.934">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:17.934" starttime="20170809 05:16:17.933" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:17.934" starttime="20170809 05:16:17.933" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:17.934" starttime="20170809 05:16:17.931" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:17.934" starttime="20170809 05:16:17.931" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.042">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:18.042">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.042" starttime="20170809 05:16:17.934" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.044">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:18.044" starttime="20170809 05:16:18.043" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.045">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:18.045" starttime="20170809 05:16:18.045" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.045" starttime="20170809 05:16:18.044" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.045" starttime="20170809 05:16:18.043" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.045" starttime="20170809 05:16:18.042" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:18.046">Delete All Sessions</msg>
<status endtime="20170809 05:16:18.046" starttime="20170809 05:16:18.046" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.046">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.046" starttime="20170809 05:16:17.721" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.047" starttime="20170809 05:16:18.046" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.047">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:18.047">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:18.047">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:18.047" starttime="20170809 05:16:18.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.048">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:16:18.048" starttime="20170809 05:16:17.721" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.048">${power_state} = On</msg>
<status endtime="20170809 05:16:18.048" starttime="20170809 05:16:17.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:16:18.049" starttime="20170809 05:16:18.048" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.049" starttime="20170809 05:16:17.720" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.053">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:18.053" starttime="20170809 05:16:18.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:18.054" starttime="20170809 05:16:18.053" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.054">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:18.054" starttime="20170809 05:16:18.054" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.055">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:18.055" starttime="20170809 05:16:18.055" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:18.298" starttime="20170809 05:16:18.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.298">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:18.298">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.298" starttime="20170809 05:16:18.055" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.299">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.299" starttime="20170809 05:16:18.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.300" starttime="20170809 05:16:18.299" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.300" starttime="20170809 05:16:18.051" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.300" starttime="20170809 05:16:18.051" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.300" starttime="20170809 05:16:18.050" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.301">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:16:18.301" starttime="20170809 05:16:18.300" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.303">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:18.303" starttime="20170809 05:16:18.302" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.304">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:18.304" starttime="20170809 05:16:18.304" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.304" starttime="20170809 05:16:18.303" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.304" starttime="20170809 05:16:18.302" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.304" starttime="20170809 05:16:18.301" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.395">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:18.395">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.395" starttime="20170809 05:16:18.305" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.397">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:18.397" starttime="20170809 05:16:18.397" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.399">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:18.399" starttime="20170809 05:16:18.398" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.399" starttime="20170809 05:16:18.398" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.399" starttime="20170809 05:16:18.396" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.399" starttime="20170809 05:16:18.395" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:18.400">Delete All Sessions</msg>
<status endtime="20170809 05:16:18.400" starttime="20170809 05:16:18.399" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.400">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.400" starttime="20170809 05:16:18.050" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.401" starttime="20170809 05:16:18.400" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.401">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:18.401">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:18.401">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:18.401" starttime="20170809 05:16:18.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.402">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:16:18.402" starttime="20170809 05:16:18.049" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.402">${host_state} = Running</msg>
<status endtime="20170809 05:16:18.402" starttime="20170809 05:16:18.049" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:16:18.402" starttime="20170809 05:16:18.402" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.407">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:18.407" starttime="20170809 05:16:18.406" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.408">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:18.408" starttime="20170809 05:16:18.407" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.408">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:18.408" starttime="20170809 05:16:18.408" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.409">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:18.409" starttime="20170809 05:16:18.409" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.602">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:18.602" starttime="20170809 05:16:18.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.602">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:18.602">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.602" starttime="20170809 05:16:18.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.603">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.603" starttime="20170809 05:16:18.603" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.604">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.604" starttime="20170809 05:16:18.603" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.604" starttime="20170809 05:16:18.406" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.604" starttime="20170809 05:16:18.405" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.604" starttime="20170809 05:16:18.405" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.605">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:16:18.605" starttime="20170809 05:16:18.604" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.607">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:18.607" starttime="20170809 05:16:18.606" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.608">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:18.608" starttime="20170809 05:16:18.608" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.608" starttime="20170809 05:16:18.607" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.608" starttime="20170809 05:16:18.605" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.608" starttime="20170809 05:16:18.605" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.676">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:18.676">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.676" starttime="20170809 05:16:18.609" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.679">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:18.679" starttime="20170809 05:16:18.678" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.679">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:18.680" starttime="20170809 05:16:18.679" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.680" starttime="20170809 05:16:18.679" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.680" starttime="20170809 05:16:18.677" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:18.680" starttime="20170809 05:16:18.676" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:18.680">Delete All Sessions</msg>
<status endtime="20170809 05:16:18.680" starttime="20170809 05:16:18.680" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.681">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:18.681" starttime="20170809 05:16:18.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:18.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:18.681" starttime="20170809 05:16:18.681" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:18.682">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:18.682">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:18.682">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:18.682" starttime="20170809 05:16:18.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.682">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:18.682" starttime="20170809 05:16:18.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:18.682">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:18.682" starttime="20170809 05:16:18.403" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:16:18.683">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:16:18.683" starttime="20170809 05:16:18.683" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:18.683" starttime="20170809 05:16:18.403" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:18.683" starttime="20170809 05:16:17.719" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.689">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:28.689" starttime="20170809 05:16:28.688" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.690">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:28.690" starttime="20170809 05:16:28.689" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.690">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:28.690" starttime="20170809 05:16:28.690" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.691">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:28.691" starttime="20170809 05:16:28.690" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:28.884" starttime="20170809 05:16:28.692" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:28.885">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:28.885">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:28.885" starttime="20170809 05:16:28.691" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.886">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:28.886" starttime="20170809 05:16:28.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:28.886" starttime="20170809 05:16:28.886" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.887" starttime="20170809 05:16:28.688" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.887" starttime="20170809 05:16:28.687" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.887" starttime="20170809 05:16:28.687" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.887">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:16:28.887" starttime="20170809 05:16:28.887" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.889">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:28.890" starttime="20170809 05:16:28.889" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.890">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:28.890" starttime="20170809 05:16:28.890" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.891" starttime="20170809 05:16:28.890" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.891" starttime="20170809 05:16:28.888" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.891" starttime="20170809 05:16:28.888" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.955">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:28.955">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:28.955" starttime="20170809 05:16:28.891" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.957">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:28.957" starttime="20170809 05:16:28.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.958">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:28.958" starttime="20170809 05:16:28.958" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.958" starttime="20170809 05:16:28.957" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.958" starttime="20170809 05:16:28.956" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.958" starttime="20170809 05:16:28.956" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:28.959">Delete All Sessions</msg>
<status endtime="20170809 05:16:28.959" starttime="20170809 05:16:28.959" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:28.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:28.959" starttime="20170809 05:16:28.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:28.960" starttime="20170809 05:16:28.959" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.960">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:28.960">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:28.961">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:28.961" starttime="20170809 05:16:28.960" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:28.961">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:16:28.961" starttime="20170809 05:16:28.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:28.961">${power_state} = On</msg>
<status endtime="20170809 05:16:28.961" starttime="20170809 05:16:28.685" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:16:28.962" starttime="20170809 05:16:28.961" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:28.962" starttime="20170809 05:16:28.685" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:28.966">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:28.966" starttime="20170809 05:16:28.965" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.967">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:28.967" starttime="20170809 05:16:28.966" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.967">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:28.967" starttime="20170809 05:16:28.967" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:28.968">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:28.968" starttime="20170809 05:16:28.968" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.145">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:29.145" starttime="20170809 05:16:28.969" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.145">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:29.145">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:29.145" starttime="20170809 05:16:28.968" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.146">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:29.146" starttime="20170809 05:16:29.146" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:29.147" starttime="20170809 05:16:29.146" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.147" starttime="20170809 05:16:28.965" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.147" starttime="20170809 05:16:28.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.147" starttime="20170809 05:16:28.964" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.148">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:16:29.148" starttime="20170809 05:16:29.147" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.150">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:29.150" starttime="20170809 05:16:29.149" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.151">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:29.151" starttime="20170809 05:16:29.151" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.151" starttime="20170809 05:16:29.150" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.151" starttime="20170809 05:16:29.149" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.151" starttime="20170809 05:16:29.148" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.241">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:29.241">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:29.241" starttime="20170809 05:16:29.151" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.243">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:29.243" starttime="20170809 05:16:29.243" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.244">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:29.244" starttime="20170809 05:16:29.244" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.244" starttime="20170809 05:16:29.243" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.245" starttime="20170809 05:16:29.242" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.245" starttime="20170809 05:16:29.242" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:29.245">Delete All Sessions</msg>
<status endtime="20170809 05:16:29.245" starttime="20170809 05:16:29.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.245">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:29.245" starttime="20170809 05:16:28.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.246">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:29.246" starttime="20170809 05:16:29.246" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.247">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:29.247">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:29.247">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:29.247" starttime="20170809 05:16:29.246" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.247">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:16:29.247" starttime="20170809 05:16:28.962" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.247">${host_state} = Running</msg>
<status endtime="20170809 05:16:29.247" starttime="20170809 05:16:28.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:16:29.248" starttime="20170809 05:16:29.248" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.252">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:29.252" starttime="20170809 05:16:29.252" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:29.253" starttime="20170809 05:16:29.253" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.254">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:29.254" starttime="20170809 05:16:29.253" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.254">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:29.254" starttime="20170809 05:16:29.254" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.442">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:29.442" starttime="20170809 05:16:29.255" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.442">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:29.442">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:29.442" starttime="20170809 05:16:29.255" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:29.443" starttime="20170809 05:16:29.442" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:29.444" starttime="20170809 05:16:29.443" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.444" starttime="20170809 05:16:29.251" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.444" starttime="20170809 05:16:29.251" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.444" starttime="20170809 05:16:29.250" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.444">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:16:29.444" starttime="20170809 05:16:29.444" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.447">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:29.447" starttime="20170809 05:16:29.446" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.448">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:29.448" starttime="20170809 05:16:29.448" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.448" starttime="20170809 05:16:29.447" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.448" starttime="20170809 05:16:29.445" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.448" starttime="20170809 05:16:29.445" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.560">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:29.560">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:29.560" starttime="20170809 05:16:29.448" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.562">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:29.562" starttime="20170809 05:16:29.562" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.563">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:29.563" starttime="20170809 05:16:29.563" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.563" starttime="20170809 05:16:29.562" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.563" starttime="20170809 05:16:29.561" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:29.563" starttime="20170809 05:16:29.561" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:29.564">Delete All Sessions</msg>
<status endtime="20170809 05:16:29.564" starttime="20170809 05:16:29.564" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.564">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:29.564" starttime="20170809 05:16:29.250" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:29.565">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:29.565" starttime="20170809 05:16:29.564" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:29.565">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:29.565">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:29.566">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:29.566" starttime="20170809 05:16:29.565" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.566">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:29.566" starttime="20170809 05:16:29.249" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:29.566">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:29.566" starttime="20170809 05:16:29.248" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:16:29.567">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:16:29.567" starttime="20170809 05:16:29.567" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:29.567" starttime="20170809 05:16:29.248" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:29.567" starttime="20170809 05:16:28.684" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.572">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:39.573" starttime="20170809 05:16:39.572" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:39.573" starttime="20170809 05:16:39.573" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.574">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:39.574" starttime="20170809 05:16:39.574" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.575">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:39.575" starttime="20170809 05:16:39.574" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.772">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:39.772" starttime="20170809 05:16:39.575" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:39.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:39.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:39.772" starttime="20170809 05:16:39.575" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:39.773" starttime="20170809 05:16:39.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:39.774" starttime="20170809 05:16:39.773" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.774" starttime="20170809 05:16:39.571" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.774" starttime="20170809 05:16:39.571" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.774" starttime="20170809 05:16:39.570" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.774">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:16:39.775" starttime="20170809 05:16:39.774" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.777">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:39.777" starttime="20170809 05:16:39.776" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.778">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:39.778" starttime="20170809 05:16:39.777" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.778" starttime="20170809 05:16:39.777" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.778" starttime="20170809 05:16:39.775" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.778" starttime="20170809 05:16:39.775" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.852">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:39.852">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:39.853" starttime="20170809 05:16:39.778" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.854">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:39.854" starttime="20170809 05:16:39.854" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.855">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:39.856" starttime="20170809 05:16:39.855" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.856" starttime="20170809 05:16:39.855" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.856" starttime="20170809 05:16:39.853" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.856" starttime="20170809 05:16:39.853" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:39.856">Delete All Sessions</msg>
<status endtime="20170809 05:16:39.856" starttime="20170809 05:16:39.856" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:39.857">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:39.857" starttime="20170809 05:16:39.570" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:39.857" starttime="20170809 05:16:39.857" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.858">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:39.858">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:39.858">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:39.858" starttime="20170809 05:16:39.858" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:39.858">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:16:39.858" starttime="20170809 05:16:39.569" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:39.859">${power_state} = On</msg>
<status endtime="20170809 05:16:39.859" starttime="20170809 05:16:39.569" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:16:39.859" starttime="20170809 05:16:39.859" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:39.859" starttime="20170809 05:16:39.568" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:39.866">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:39.866" starttime="20170809 05:16:39.865" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:39.867" starttime="20170809 05:16:39.866" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.867">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:39.868" starttime="20170809 05:16:39.867" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:39.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:39.868" starttime="20170809 05:16:39.868" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.088">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:40.088" starttime="20170809 05:16:39.869" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.088">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:40.088">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:40.088" starttime="20170809 05:16:39.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.089">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:40.089" starttime="20170809 05:16:40.089" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:40.090" starttime="20170809 05:16:40.089" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.090" starttime="20170809 05:16:39.862" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.090" starttime="20170809 05:16:39.861" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.090" starttime="20170809 05:16:39.861" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.091">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:16:40.091" starttime="20170809 05:16:40.090" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.093">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:40.093" starttime="20170809 05:16:40.092" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.094">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:40.094" starttime="20170809 05:16:40.093" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.094" starttime="20170809 05:16:40.093" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.094" starttime="20170809 05:16:40.091" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.094" starttime="20170809 05:16:40.091" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.185">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:40.185">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:40.185" starttime="20170809 05:16:40.094" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.187">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:40.187" starttime="20170809 05:16:40.187" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.188">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:40.189" starttime="20170809 05:16:40.188" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.189" starttime="20170809 05:16:40.187" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.189" starttime="20170809 05:16:40.186" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.189" starttime="20170809 05:16:40.186" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:40.189">Delete All Sessions</msg>
<status endtime="20170809 05:16:40.189" starttime="20170809 05:16:40.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.190">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:40.190" starttime="20170809 05:16:39.860" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:40.190" starttime="20170809 05:16:40.190" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.191">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:40.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:40.191">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:40.191" starttime="20170809 05:16:40.191" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.191">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:16:40.191" starttime="20170809 05:16:39.860" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.192">${host_state} = Running</msg>
<status endtime="20170809 05:16:40.192" starttime="20170809 05:16:39.859" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:16:40.192" starttime="20170809 05:16:40.192" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.196">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:40.196" starttime="20170809 05:16:40.196" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.197">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:40.197" starttime="20170809 05:16:40.197" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.198">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:40.198" starttime="20170809 05:16:40.197" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.198">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:40.198" starttime="20170809 05:16:40.198" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.387">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:40.387" starttime="20170809 05:16:40.199" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.387">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:40.387">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:40.387" starttime="20170809 05:16:40.199" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.388">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:40.388" starttime="20170809 05:16:40.387" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:40.389" starttime="20170809 05:16:40.388" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.389" starttime="20170809 05:16:40.195" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.389" starttime="20170809 05:16:40.195" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.389" starttime="20170809 05:16:40.194" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.390">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:16:40.390" starttime="20170809 05:16:40.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.392">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:40.392" starttime="20170809 05:16:40.391" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.393">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:40.393" starttime="20170809 05:16:40.393" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.393" starttime="20170809 05:16:40.392" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.393" starttime="20170809 05:16:40.391" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.393" starttime="20170809 05:16:40.390" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.477">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:40.477">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:40.477" starttime="20170809 05:16:40.394" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.479">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:40.479" starttime="20170809 05:16:40.478" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.480">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:40.480" starttime="20170809 05:16:40.479" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.480" starttime="20170809 05:16:40.479" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.480" starttime="20170809 05:16:40.478" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:40.480" starttime="20170809 05:16:40.477" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:40.480">Delete All Sessions</msg>
<status endtime="20170809 05:16:40.480" starttime="20170809 05:16:40.480" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.481">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:40.481" starttime="20170809 05:16:40.194" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:40.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:40.481" starttime="20170809 05:16:40.481" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:40.482">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:40.482">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:40.482">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:40.482" starttime="20170809 05:16:40.482" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.482">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:40.482" starttime="20170809 05:16:40.193" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:40.483">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:40.483" starttime="20170809 05:16:40.193" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:16:40.483">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:16:40.484" starttime="20170809 05:16:40.483" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:40.484" starttime="20170809 05:16:40.192" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:40.484" starttime="20170809 05:16:39.568" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.489">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:50.490" starttime="20170809 05:16:50.489" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.491">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:50.491" starttime="20170809 05:16:50.490" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.491">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:50.491" starttime="20170809 05:16:50.491" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.492">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:50.492" starttime="20170809 05:16:50.492" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.681">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:50.681" starttime="20170809 05:16:50.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:50.681">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:50.681">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:50.681" starttime="20170809 05:16:50.492" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.682">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:50.682" starttime="20170809 05:16:50.682" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:50.683" starttime="20170809 05:16:50.682" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.683" starttime="20170809 05:16:50.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.683" starttime="20170809 05:16:50.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.683" starttime="20170809 05:16:50.487" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.684">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:16:50.684" starttime="20170809 05:16:50.683" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.686">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:50.686" starttime="20170809 05:16:50.685" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.687">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:50.687" starttime="20170809 05:16:50.687" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.687" starttime="20170809 05:16:50.686" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.687" starttime="20170809 05:16:50.684" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.687" starttime="20170809 05:16:50.684" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.752">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:50.752">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:50.752" starttime="20170809 05:16:50.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.754">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:50.754" starttime="20170809 05:16:50.753" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.755">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:50.755" starttime="20170809 05:16:50.754" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.755" starttime="20170809 05:16:50.754" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.756" starttime="20170809 05:16:50.753" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.756" starttime="20170809 05:16:50.752" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:50.756">Delete All Sessions</msg>
<status endtime="20170809 05:16:50.756" starttime="20170809 05:16:50.756" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:50.756">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:50.756" starttime="20170809 05:16:50.486" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.757">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:50.757" starttime="20170809 05:16:50.757" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.758">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:50.758">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:50.758">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:50.758" starttime="20170809 05:16:50.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:50.758">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:16:50.758" starttime="20170809 05:16:50.486" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:50.758">${power_state} = On</msg>
<status endtime="20170809 05:16:50.758" starttime="20170809 05:16:50.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:16:50.759" starttime="20170809 05:16:50.759" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.759" starttime="20170809 05:16:50.485" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.762">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:50.763" starttime="20170809 05:16:50.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:50.763" starttime="20170809 05:16:50.763" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.764">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:50.764" starttime="20170809 05:16:50.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:50.765" starttime="20170809 05:16:50.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.945">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:50.945" starttime="20170809 05:16:50.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:50.946">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:50.946">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:50.946" starttime="20170809 05:16:50.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:50.946" starttime="20170809 05:16:50.946" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:50.947" starttime="20170809 05:16:50.947" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.947" starttime="20170809 05:16:50.762" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.947" starttime="20170809 05:16:50.761" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.947" starttime="20170809 05:16:50.761" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.948">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:16:50.948" starttime="20170809 05:16:50.948" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:50.951">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:50.951" starttime="20170809 05:16:50.950" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:50.951">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:16:50.952" starttime="20170809 05:16:50.951" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.952" starttime="20170809 05:16:50.951" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.952" starttime="20170809 05:16:50.949" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:50.952" starttime="20170809 05:16:50.948" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.055">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:51.055">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:51.055" starttime="20170809 05:16:50.952" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.057">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:51.057" starttime="20170809 05:16:51.057" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.058">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:51.058" starttime="20170809 05:16:51.058" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.058" starttime="20170809 05:16:51.057" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.058" starttime="20170809 05:16:51.056" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.058" starttime="20170809 05:16:51.055" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:51.059">Delete All Sessions</msg>
<status endtime="20170809 05:16:51.059" starttime="20170809 05:16:51.059" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.059">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:51.059" starttime="20170809 05:16:50.760" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:51.060" starttime="20170809 05:16:51.059" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.060">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:51.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:51.061">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:51.061" starttime="20170809 05:16:51.060" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.061">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:16:51.061" starttime="20170809 05:16:50.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.061">${host_state} = Running</msg>
<status endtime="20170809 05:16:51.061" starttime="20170809 05:16:50.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:16:51.062" starttime="20170809 05:16:51.061" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.066">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:16:51.066" starttime="20170809 05:16:51.065" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.067">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:16:51.067" starttime="20170809 05:16:51.066" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.067">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:16:51.067" starttime="20170809 05:16:51.067" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:16:51.068" starttime="20170809 05:16:51.067" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:16:51.257" starttime="20170809 05:16:51.069" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.257">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:16:51.257">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:51.257" starttime="20170809 05:16:51.068" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.258">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:51.258" starttime="20170809 05:16:51.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:51.258" starttime="20170809 05:16:51.258" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.258" starttime="20170809 05:16:51.065" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.258" starttime="20170809 05:16:51.064" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.259" starttime="20170809 05:16:51.064" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.259">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:16:51.259" starttime="20170809 05:16:51.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.261">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:51.261" starttime="20170809 05:16:51.261" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.262">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:16:51.262" starttime="20170809 05:16:51.262" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.262" starttime="20170809 05:16:51.261" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.262" starttime="20170809 05:16:51.260" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.263" starttime="20170809 05:16:51.259" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.360">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:16:51.361">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:51.361" starttime="20170809 05:16:51.263" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.362">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:51.363" starttime="20170809 05:16:51.362" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.363">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:16:51.364" starttime="20170809 05:16:51.363" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.364" starttime="20170809 05:16:51.363" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.364" starttime="20170809 05:16:51.361" status="PASS"></status>
</kw>
<status endtime="20170809 05:16:51.364" starttime="20170809 05:16:51.361" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:16:51.364">Delete All Sessions</msg>
<status endtime="20170809 05:16:51.364" starttime="20170809 05:16:51.364" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:16:51.365" starttime="20170809 05:16:51.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:16:51.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:16:51.365" starttime="20170809 05:16:51.365" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:16:51.366">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:16:51.366">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:16:51.366">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:16:51.366" starttime="20170809 05:16:51.366" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.366">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:51.366" starttime="20170809 05:16:51.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:16:51.367">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:16:51.367" starttime="20170809 05:16:51.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:16:51.367">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:16:51.367" starttime="20170809 05:16:51.367" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:51.367" starttime="20170809 05:16:51.062" status="FAIL"></status>
</kw>
<status endtime="20170809 05:16:51.368" starttime="20170809 05:16:50.484" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.373">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:01.374" starttime="20170809 05:17:01.373" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.374">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:01.374" starttime="20170809 05:17:01.374" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.375">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:01.375" starttime="20170809 05:17:01.375" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:01.376" starttime="20170809 05:17:01.375" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.551">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:01.551" starttime="20170809 05:17:01.376" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:01.552">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:01.552">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:01.552" starttime="20170809 05:17:01.376" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.552">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:01.553" starttime="20170809 05:17:01.552" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:01.553" starttime="20170809 05:17:01.553" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.553" starttime="20170809 05:17:01.372" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.554" starttime="20170809 05:17:01.372" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.554" starttime="20170809 05:17:01.371" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.554">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:17:01.554" starttime="20170809 05:17:01.554" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.557">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:01.557" starttime="20170809 05:17:01.556" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.559">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:01.559" starttime="20170809 05:17:01.558" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.559" starttime="20170809 05:17:01.558" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.559" starttime="20170809 05:17:01.555" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.559" starttime="20170809 05:17:01.555" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.696">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:01.696">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:01.696" starttime="20170809 05:17:01.559" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.699">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:01.699" starttime="20170809 05:17:01.698" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.700">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:01.700" starttime="20170809 05:17:01.699" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.700" starttime="20170809 05:17:01.699" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.700" starttime="20170809 05:17:01.697" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.700" starttime="20170809 05:17:01.697" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:01.700">Delete All Sessions</msg>
<status endtime="20170809 05:17:01.700" starttime="20170809 05:17:01.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:01.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:01.701" starttime="20170809 05:17:01.370" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:01.701" starttime="20170809 05:17:01.701" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.702">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:01.702">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:01.702">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:01.702" starttime="20170809 05:17:01.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:01.702">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:17:01.702" starttime="20170809 05:17:01.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:01.703">${power_state} = On</msg>
<status endtime="20170809 05:17:01.703" starttime="20170809 05:17:01.369" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:17:01.703" starttime="20170809 05:17:01.703" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.703" starttime="20170809 05:17:01.369" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.707">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:01.707" starttime="20170809 05:17:01.707" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.708">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:01.708" starttime="20170809 05:17:01.708" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.709">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:01.709" starttime="20170809 05:17:01.708" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:01.709" starttime="20170809 05:17:01.709" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:01.926" starttime="20170809 05:17:01.710" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:01.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:01.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:01.926" starttime="20170809 05:17:01.710" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.926">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:01.927" starttime="20170809 05:17:01.926" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:01.927" starttime="20170809 05:17:01.927" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.927" starttime="20170809 05:17:01.706" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.927" starttime="20170809 05:17:01.706" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.928" starttime="20170809 05:17:01.705" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.928">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:17:01.928" starttime="20170809 05:17:01.928" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:01.931">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:01.931" starttime="20170809 05:17:01.930" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:01.932">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:01.932" starttime="20170809 05:17:01.931" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.932" starttime="20170809 05:17:01.931" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.932" starttime="20170809 05:17:01.929" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:01.932" starttime="20170809 05:17:01.928" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.038">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:02.038">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:02.038" starttime="20170809 05:17:01.932" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.040">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:02.040" starttime="20170809 05:17:02.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.042">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:02.042" starttime="20170809 05:17:02.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.042" starttime="20170809 05:17:02.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.042" starttime="20170809 05:17:02.039" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.042" starttime="20170809 05:17:02.039" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:02.042">Delete All Sessions</msg>
<status endtime="20170809 05:17:02.043" starttime="20170809 05:17:02.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.043">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:02.043" starttime="20170809 05:17:01.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:02.043" starttime="20170809 05:17:02.043" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.044">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:02.044">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:02.044">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:02.044" starttime="20170809 05:17:02.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.044">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:17:02.044" starttime="20170809 05:17:01.704" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.045">${host_state} = Running</msg>
<status endtime="20170809 05:17:02.045" starttime="20170809 05:17:01.704" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:17:02.045" starttime="20170809 05:17:02.045" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.049">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:02.050" starttime="20170809 05:17:02.049" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.051">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:02.051" starttime="20170809 05:17:02.050" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.051">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:02.051" starttime="20170809 05:17:02.051" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.052">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:02.052" starttime="20170809 05:17:02.051" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:02.290" starttime="20170809 05:17:02.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:02.290">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:02.290" starttime="20170809 05:17:02.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:02.291" starttime="20170809 05:17:02.290" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:02.291" starttime="20170809 05:17:02.291" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.292" starttime="20170809 05:17:02.048" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.292" starttime="20170809 05:17:02.048" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.292" starttime="20170809 05:17:02.047" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.292">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:17:02.292" starttime="20170809 05:17:02.292" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.294">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:02.294" starttime="20170809 05:17:02.294" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.295">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:02.295" starttime="20170809 05:17:02.295" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.296" starttime="20170809 05:17:02.295" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.296" starttime="20170809 05:17:02.293" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.296" starttime="20170809 05:17:02.293" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.397">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:02.397">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:02.397" starttime="20170809 05:17:02.296" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.399">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:02.399" starttime="20170809 05:17:02.398" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.400">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:02.400" starttime="20170809 05:17:02.400" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.400" starttime="20170809 05:17:02.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.400" starttime="20170809 05:17:02.398" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:02.400" starttime="20170809 05:17:02.397" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:02.401">Delete All Sessions</msg>
<status endtime="20170809 05:17:02.401" starttime="20170809 05:17:02.400" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.401">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:02.401" starttime="20170809 05:17:02.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:02.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:02.402" starttime="20170809 05:17:02.401" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:02.402">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:02.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:02.402">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:02.402" starttime="20170809 05:17:02.402" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.403">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:02.403" starttime="20170809 05:17:02.046" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:02.403">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:02.403" starttime="20170809 05:17:02.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:17:02.404">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:17:02.404" starttime="20170809 05:17:02.403" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:02.404" starttime="20170809 05:17:02.045" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:02.404" starttime="20170809 05:17:01.368" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.410">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:12.410" starttime="20170809 05:17:12.409" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.411">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:12.411" starttime="20170809 05:17:12.410" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.411">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:12.411" starttime="20170809 05:17:12.411" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:12.412" starttime="20170809 05:17:12.412" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:12.619" starttime="20170809 05:17:12.413" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:12.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:12.619">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:12.619" starttime="20170809 05:17:12.412" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:12.620" starttime="20170809 05:17:12.620" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:12.621" starttime="20170809 05:17:12.620" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.621" starttime="20170809 05:17:12.409" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.621" starttime="20170809 05:17:12.408" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.621" starttime="20170809 05:17:12.407" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.622">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:17:12.622" starttime="20170809 05:17:12.621" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.624">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:12.624" starttime="20170809 05:17:12.623" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.625">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:12.625" starttime="20170809 05:17:12.625" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.625" starttime="20170809 05:17:12.624" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.625" starttime="20170809 05:17:12.623" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.625" starttime="20170809 05:17:12.622" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.690">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:12.690">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:12.690" starttime="20170809 05:17:12.626" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:12.695" starttime="20170809 05:17:12.691" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.698">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:12.698" starttime="20170809 05:17:12.696" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.698" starttime="20170809 05:17:12.696" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.698" starttime="20170809 05:17:12.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.698" starttime="20170809 05:17:12.691" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:12.699">Delete All Sessions</msg>
<status endtime="20170809 05:17:12.699" starttime="20170809 05:17:12.698" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:12.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:12.699" starttime="20170809 05:17:12.407" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.700">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:12.700" starttime="20170809 05:17:12.699" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.700">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:12.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:12.701">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:12.701" starttime="20170809 05:17:12.700" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:12.701">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:17:12.701" starttime="20170809 05:17:12.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:12.701">${power_state} = On</msg>
<status endtime="20170809 05:17:12.701" starttime="20170809 05:17:12.405" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:17:12.702" starttime="20170809 05:17:12.701" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.702" starttime="20170809 05:17:12.405" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.706">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:12.707" starttime="20170809 05:17:12.706" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.707">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:12.707" starttime="20170809 05:17:12.707" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.708">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:12.708" starttime="20170809 05:17:12.707" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:12.709" starttime="20170809 05:17:12.708" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.894">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:12.895" starttime="20170809 05:17:12.709" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:12.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:12.895">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:12.895" starttime="20170809 05:17:12.709" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.896">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:12.896" starttime="20170809 05:17:12.895" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:12.897" starttime="20170809 05:17:12.896" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.897" starttime="20170809 05:17:12.705" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.897" starttime="20170809 05:17:12.704" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.897" starttime="20170809 05:17:12.704" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.898">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:17:12.898" starttime="20170809 05:17:12.897" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:12.900">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:12.900" starttime="20170809 05:17:12.899" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:12.901">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:12.901" starttime="20170809 05:17:12.901" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.901" starttime="20170809 05:17:12.900" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.901" starttime="20170809 05:17:12.898" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:12.901" starttime="20170809 05:17:12.898" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.006">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:13.006">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:13.007" starttime="20170809 05:17:12.902" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.008">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:13.008" starttime="20170809 05:17:13.008" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.009">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:13.009" starttime="20170809 05:17:13.009" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.009" starttime="20170809 05:17:13.009" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.010" starttime="20170809 05:17:13.007" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.010" starttime="20170809 05:17:13.007" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:13.010">Delete All Sessions</msg>
<status endtime="20170809 05:17:13.010" starttime="20170809 05:17:13.010" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.010">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:13.010" starttime="20170809 05:17:12.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:13.011" starttime="20170809 05:17:13.011" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.012">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:13.012">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:13.012">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:13.012" starttime="20170809 05:17:13.011" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.012">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:17:13.012" starttime="20170809 05:17:12.702" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.012">${host_state} = Running</msg>
<status endtime="20170809 05:17:13.012" starttime="20170809 05:17:12.702" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:17:13.013" starttime="20170809 05:17:13.013" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.017">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:13.017" starttime="20170809 05:17:13.017" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.018">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:13.018" starttime="20170809 05:17:13.017" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.018">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:13.018" starttime="20170809 05:17:13.018" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:13.019" starttime="20170809 05:17:13.019" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.288">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:13.288" starttime="20170809 05:17:13.020" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.288">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:13.288">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:13.288" starttime="20170809 05:17:13.019" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.289">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:13.289" starttime="20170809 05:17:13.289" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:13.290" starttime="20170809 05:17:13.289" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.290" starttime="20170809 05:17:13.016" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.290" starttime="20170809 05:17:13.016" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.290" starttime="20170809 05:17:13.015" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.291">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:17:13.291" starttime="20170809 05:17:13.290" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.293">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:13.293" starttime="20170809 05:17:13.292" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.294">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:13.294" starttime="20170809 05:17:13.294" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.294" starttime="20170809 05:17:13.293" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.294" starttime="20170809 05:17:13.291" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.294" starttime="20170809 05:17:13.291" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.390">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:13.390">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:13.390" starttime="20170809 05:17:13.295" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.392">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:13.392" starttime="20170809 05:17:13.392" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.393">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:13.393" starttime="20170809 05:17:13.393" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.393" starttime="20170809 05:17:13.392" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.393" starttime="20170809 05:17:13.391" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:13.393" starttime="20170809 05:17:13.391" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:13.394">Delete All Sessions</msg>
<status endtime="20170809 05:17:13.394" starttime="20170809 05:17:13.394" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.394">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:13.394" starttime="20170809 05:17:13.014" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:13.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:13.395" starttime="20170809 05:17:13.394" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:13.395">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:13.395">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:13.395">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:13.396" starttime="20170809 05:17:13.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.396">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:13.396" starttime="20170809 05:17:13.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:13.396">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:13.396" starttime="20170809 05:17:13.013" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:17:13.397">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:17:13.397" starttime="20170809 05:17:13.396" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:13.397" starttime="20170809 05:17:13.013" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:13.397" starttime="20170809 05:17:12.404" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.403">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:23.403" starttime="20170809 05:17:23.402" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.404">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:23.404" starttime="20170809 05:17:23.403" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.405">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:23.405" starttime="20170809 05:17:23.404" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.405">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:23.405" starttime="20170809 05:17:23.405" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:23.604" starttime="20170809 05:17:23.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:23.604">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:23.604">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:23.604" starttime="20170809 05:17:23.406" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.605">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:23.605" starttime="20170809 05:17:23.604" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:23.606" starttime="20170809 05:17:23.605" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.606" starttime="20170809 05:17:23.402" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.606" starttime="20170809 05:17:23.401" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.606" starttime="20170809 05:17:23.400" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.607">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:17:23.607" starttime="20170809 05:17:23.606" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.609">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:23.609" starttime="20170809 05:17:23.608" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.609">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:23.610" starttime="20170809 05:17:23.609" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.610" starttime="20170809 05:17:23.609" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.610" starttime="20170809 05:17:23.607" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.610" starttime="20170809 05:17:23.607" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.679">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:23.680">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:23.680" starttime="20170809 05:17:23.610" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.682">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:23.682" starttime="20170809 05:17:23.681" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.683">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:23.683" starttime="20170809 05:17:23.682" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.683" starttime="20170809 05:17:23.682" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.683" starttime="20170809 05:17:23.680" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.683" starttime="20170809 05:17:23.680" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:23.684">Delete All Sessions</msg>
<status endtime="20170809 05:17:23.684" starttime="20170809 05:17:23.683" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:23.684">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:23.684" starttime="20170809 05:17:23.400" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.684">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:23.685" starttime="20170809 05:17:23.684" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.685">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:23.685">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:23.685">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:23.685" starttime="20170809 05:17:23.685" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:23.686">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:17:23.686" starttime="20170809 05:17:23.399" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:23.686">${power_state} = On</msg>
<status endtime="20170809 05:17:23.686" starttime="20170809 05:17:23.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:17:23.687" starttime="20170809 05:17:23.686" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.687" starttime="20170809 05:17:23.398" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.691">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:23.692" starttime="20170809 05:17:23.691" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:23.693" starttime="20170809 05:17:23.693" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.694">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:23.694" starttime="20170809 05:17:23.694" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.695">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:23.695" starttime="20170809 05:17:23.695" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.953">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:23.953" starttime="20170809 05:17:23.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:23.953">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:23.953">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:23.953" starttime="20170809 05:17:23.696" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.954">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:23.954" starttime="20170809 05:17:23.953" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:23.955" starttime="20170809 05:17:23.954" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.955" starttime="20170809 05:17:23.690" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.955" starttime="20170809 05:17:23.690" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.955" starttime="20170809 05:17:23.689" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.956">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:17:23.956" starttime="20170809 05:17:23.955" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:23.958">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:23.958" starttime="20170809 05:17:23.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:23.959">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:23.959" starttime="20170809 05:17:23.959" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.959" starttime="20170809 05:17:23.958" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.959" starttime="20170809 05:17:23.956" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:23.959" starttime="20170809 05:17:23.956" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.144">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:24.144">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:24.144" starttime="20170809 05:17:23.960" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.146">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:24.146" starttime="20170809 05:17:24.146" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.147">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:24.147" starttime="20170809 05:17:24.147" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.147" starttime="20170809 05:17:24.146" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.148" starttime="20170809 05:17:24.145" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.148" starttime="20170809 05:17:24.145" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:24.148">Delete All Sessions</msg>
<status endtime="20170809 05:17:24.148" starttime="20170809 05:17:24.148" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.148">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:24.148" starttime="20170809 05:17:23.688" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:24.149" starttime="20170809 05:17:24.149" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.149">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:24.150">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:24.150">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:24.150" starttime="20170809 05:17:24.149" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.150">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:17:24.150" starttime="20170809 05:17:23.687" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.150">${host_state} = Running</msg>
<status endtime="20170809 05:17:24.150" starttime="20170809 05:17:23.687" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:17:24.151" starttime="20170809 05:17:24.151" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.155">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:24.155" starttime="20170809 05:17:24.155" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.156">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:24.156" starttime="20170809 05:17:24.156" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.157">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:24.157" starttime="20170809 05:17:24.156" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.157">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:24.157" starttime="20170809 05:17:24.157" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.350">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:24.350" starttime="20170809 05:17:24.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.350">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:24.350">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:24.350" starttime="20170809 05:17:24.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.351">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:24.351" starttime="20170809 05:17:24.350" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:24.351" starttime="20170809 05:17:24.351" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.352" starttime="20170809 05:17:24.154" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.352" starttime="20170809 05:17:24.154" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.352" starttime="20170809 05:17:24.153" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.353">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:17:24.353" starttime="20170809 05:17:24.352" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.355">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:24.355" starttime="20170809 05:17:24.354" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.356">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:24.356" starttime="20170809 05:17:24.356" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.356" starttime="20170809 05:17:24.355" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.356" starttime="20170809 05:17:24.354" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.356" starttime="20170809 05:17:24.353" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.424">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:24.424">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:24.424" starttime="20170809 05:17:24.357" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.426">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:24.426" starttime="20170809 05:17:24.425" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.427">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:24.427" starttime="20170809 05:17:24.426" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.427" starttime="20170809 05:17:24.426" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.427" starttime="20170809 05:17:24.425" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:24.427" starttime="20170809 05:17:24.424" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:24.427">Delete All Sessions</msg>
<status endtime="20170809 05:17:24.427" starttime="20170809 05:17:24.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.428">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:24.428" starttime="20170809 05:17:24.153" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:24.428">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:24.428" starttime="20170809 05:17:24.428" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:24.429">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:24.429">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:24.429">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:24.429" starttime="20170809 05:17:24.429" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.429">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:24.429" starttime="20170809 05:17:24.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:24.430">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:24.430" starttime="20170809 05:17:24.152" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:17:24.430">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:17:24.430" starttime="20170809 05:17:24.430" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:24.431" starttime="20170809 05:17:24.151" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:24.431" starttime="20170809 05:17:23.398" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.437">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:34.437" starttime="20170809 05:17:34.436" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:34.438" starttime="20170809 05:17:34.437" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.438">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:34.438" starttime="20170809 05:17:34.438" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.439">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:34.439" starttime="20170809 05:17:34.439" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.634">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:34.634" starttime="20170809 05:17:34.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:34.634">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:34.634">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:34.634" starttime="20170809 05:17:34.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.635">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:34.635" starttime="20170809 05:17:34.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.636">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:34.636" starttime="20170809 05:17:34.635" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.636" starttime="20170809 05:17:34.436" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.636" starttime="20170809 05:17:34.435" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.636" starttime="20170809 05:17:34.434" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.637">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:17:34.637" starttime="20170809 05:17:34.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.639">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:34.639" starttime="20170809 05:17:34.638" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.640">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:34.640" starttime="20170809 05:17:34.640" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.640" starttime="20170809 05:17:34.639" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.640" starttime="20170809 05:17:34.638" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.640" starttime="20170809 05:17:34.637" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.715">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:34.716">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:34.716" starttime="20170809 05:17:34.641" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.719">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:34.719" starttime="20170809 05:17:34.717" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.720">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:34.720" starttime="20170809 05:17:34.720" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.720" starttime="20170809 05:17:34.719" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.720" starttime="20170809 05:17:34.717" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.720" starttime="20170809 05:17:34.716" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:34.721">Delete All Sessions</msg>
<status endtime="20170809 05:17:34.721" starttime="20170809 05:17:34.721" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:34.721">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:34.721" starttime="20170809 05:17:34.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:34.722" starttime="20170809 05:17:34.721" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.722">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:34.722">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:34.722">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:34.722" starttime="20170809 05:17:34.722" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:34.723">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:17:34.723" starttime="20170809 05:17:34.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:34.723">${power_state} = On</msg>
<status endtime="20170809 05:17:34.723" starttime="20170809 05:17:34.433" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:17:34.724" starttime="20170809 05:17:34.723" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:34.724" starttime="20170809 05:17:34.432" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:34.727">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:34.728" starttime="20170809 05:17:34.727" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.728">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:34.728" starttime="20170809 05:17:34.728" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.729">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:34.729" starttime="20170809 05:17:34.728" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:34.729">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:34.729" starttime="20170809 05:17:34.729" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:35.016" starttime="20170809 05:17:34.730" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.016">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:35.016">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:35.016" starttime="20170809 05:17:34.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.017">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:35.017" starttime="20170809 05:17:35.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:35.018" starttime="20170809 05:17:35.017" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.018" starttime="20170809 05:17:34.726" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.018" starttime="20170809 05:17:34.726" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.018" starttime="20170809 05:17:34.725" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.019">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:17:35.019" starttime="20170809 05:17:35.018" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.021">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:35.021" starttime="20170809 05:17:35.020" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.023">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:35.023" starttime="20170809 05:17:35.022" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.023" starttime="20170809 05:17:35.022" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.023" starttime="20170809 05:17:35.019" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.023" starttime="20170809 05:17:35.019" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.120">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:35.120">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:35.120" starttime="20170809 05:17:35.023" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.122">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:35.122" starttime="20170809 05:17:35.121" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.123">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:35.123" starttime="20170809 05:17:35.123" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.123" starttime="20170809 05:17:35.122" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.123" starttime="20170809 05:17:35.121" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.123" starttime="20170809 05:17:35.120" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:35.124">Delete All Sessions</msg>
<status endtime="20170809 05:17:35.124" starttime="20170809 05:17:35.124" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.124">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:35.124" starttime="20170809 05:17:34.725" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:35.125" starttime="20170809 05:17:35.124" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.125">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:35.125">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:35.125">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:35.125" starttime="20170809 05:17:35.125" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.126">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:17:35.126" starttime="20170809 05:17:34.724" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.126">${host_state} = Running</msg>
<status endtime="20170809 05:17:35.126" starttime="20170809 05:17:34.724" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:17:35.127" starttime="20170809 05:17:35.126" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.130">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:35.131" starttime="20170809 05:17:35.130" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.131">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:35.131" starttime="20170809 05:17:35.131" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.132">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:35.132" starttime="20170809 05:17:35.132" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.133">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:35.133" starttime="20170809 05:17:35.132" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:35.342" starttime="20170809 05:17:35.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:35.342">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:35.342" starttime="20170809 05:17:35.133" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.343">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:35.343" starttime="20170809 05:17:35.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:35.343" starttime="20170809 05:17:35.343" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.343" starttime="20170809 05:17:35.130" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.344" starttime="20170809 05:17:35.129" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.344" starttime="20170809 05:17:35.129" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.344">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:17:35.344" starttime="20170809 05:17:35.344" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.346">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:35.346" starttime="20170809 05:17:35.346" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.347">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:35.347" starttime="20170809 05:17:35.347" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.348" starttime="20170809 05:17:35.346" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.348" starttime="20170809 05:17:35.345" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.348" starttime="20170809 05:17:35.345" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.431">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:35.431">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:35.431" starttime="20170809 05:17:35.348" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.433">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:35.433" starttime="20170809 05:17:35.432" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.434">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:35.434" starttime="20170809 05:17:35.434" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.434" starttime="20170809 05:17:35.433" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.434" starttime="20170809 05:17:35.432" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:35.434" starttime="20170809 05:17:35.431" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:35.435">Delete All Sessions</msg>
<status endtime="20170809 05:17:35.435" starttime="20170809 05:17:35.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.435">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:35.435" starttime="20170809 05:17:35.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:35.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:35.436" starttime="20170809 05:17:35.435" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:35.436">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:35.436">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:35.436">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:35.436" starttime="20170809 05:17:35.436" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.437">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:35.437" starttime="20170809 05:17:35.127" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:35.437">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:35.437" starttime="20170809 05:17:35.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:17:35.438">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:17:35.438" starttime="20170809 05:17:35.437" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:35.438" starttime="20170809 05:17:35.127" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:35.438" starttime="20170809 05:17:34.431" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.444">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:45.444" starttime="20170809 05:17:45.443" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:45.445" starttime="20170809 05:17:45.444" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.445">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:45.445" starttime="20170809 05:17:45.445" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:45.446" starttime="20170809 05:17:45.445" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:45.743" starttime="20170809 05:17:45.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:45.743">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:45.743">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:45.743" starttime="20170809 05:17:45.446" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.744">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:45.744" starttime="20170809 05:17:45.744" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:45.745" starttime="20170809 05:17:45.744" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.745" starttime="20170809 05:17:45.443" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.745" starttime="20170809 05:17:45.442" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.745" starttime="20170809 05:17:45.441" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.746">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:17:45.746" starttime="20170809 05:17:45.745" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.748">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:45.748" starttime="20170809 05:17:45.747" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.749">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:45.749" starttime="20170809 05:17:45.749" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.749" starttime="20170809 05:17:45.748" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.749" starttime="20170809 05:17:45.746" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.749" starttime="20170809 05:17:45.746" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.840">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:45.840">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:45.840" starttime="20170809 05:17:45.750" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.846">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:45.846" starttime="20170809 05:17:45.846" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.847">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:45.848" starttime="20170809 05:17:45.847" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.848" starttime="20170809 05:17:45.847" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.848" starttime="20170809 05:17:45.841" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.848" starttime="20170809 05:17:45.840" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:45.848">Delete All Sessions</msg>
<status endtime="20170809 05:17:45.848" starttime="20170809 05:17:45.848" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:45.849">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:45.849" starttime="20170809 05:17:45.440" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:45.849" starttime="20170809 05:17:45.849" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.850">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:45.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:45.851">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:45.851" starttime="20170809 05:17:45.849" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:45.851">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:17:45.851" starttime="20170809 05:17:45.440" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:45.852">${power_state} = On</msg>
<status endtime="20170809 05:17:45.852" starttime="20170809 05:17:45.439" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:17:45.852" starttime="20170809 05:17:45.852" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:45.852" starttime="20170809 05:17:45.439" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:45.859">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:45.860" starttime="20170809 05:17:45.859" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.860">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:45.860" starttime="20170809 05:17:45.860" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.862">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:45.862" starttime="20170809 05:17:45.862" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:45.863">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:45.863" starttime="20170809 05:17:45.862" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:46.051" starttime="20170809 05:17:45.865" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:46.051">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:46.051" starttime="20170809 05:17:45.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:46.052" starttime="20170809 05:17:46.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.053">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:46.053" starttime="20170809 05:17:46.052" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.053" starttime="20170809 05:17:45.858" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.053" starttime="20170809 05:17:45.855" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.053" starttime="20170809 05:17:45.854" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.054">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:17:46.054" starttime="20170809 05:17:46.053" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.056">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:46.056" starttime="20170809 05:17:46.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.057">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:46.057" starttime="20170809 05:17:46.057" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.058" starttime="20170809 05:17:46.056" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.058" starttime="20170809 05:17:46.054" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.058" starttime="20170809 05:17:46.054" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.149">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:46.149">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:46.149" starttime="20170809 05:17:46.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.151">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:46.151" starttime="20170809 05:17:46.150" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.152">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:46.152" starttime="20170809 05:17:46.151" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.152" starttime="20170809 05:17:46.151" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.152" starttime="20170809 05:17:46.150" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.152" starttime="20170809 05:17:46.149" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:46.152">Delete All Sessions</msg>
<status endtime="20170809 05:17:46.153" starttime="20170809 05:17:46.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.153">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:46.153" starttime="20170809 05:17:45.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:46.153" starttime="20170809 05:17:46.153" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.154">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:46.154">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:46.154">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:46.154" starttime="20170809 05:17:46.154" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.155">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:17:46.155" starttime="20170809 05:17:45.853" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.155">${host_state} = Running</msg>
<status endtime="20170809 05:17:46.155" starttime="20170809 05:17:45.852" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:17:46.155" starttime="20170809 05:17:46.155" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.159">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:46.160" starttime="20170809 05:17:46.159" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:46.160" starttime="20170809 05:17:46.160" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.161">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:46.161" starttime="20170809 05:17:46.161" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.162">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:46.162" starttime="20170809 05:17:46.161" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:46.352" starttime="20170809 05:17:46.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:46.353">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:46.353" starttime="20170809 05:17:46.162" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:46.354" starttime="20170809 05:17:46.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:46.354" starttime="20170809 05:17:46.354" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.354" starttime="20170809 05:17:46.158" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.354" starttime="20170809 05:17:46.158" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.355" starttime="20170809 05:17:46.158" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.355">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:17:46.355" starttime="20170809 05:17:46.355" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.357">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:46.357" starttime="20170809 05:17:46.357" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.358">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:17:46.358" starttime="20170809 05:17:46.358" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.359" starttime="20170809 05:17:46.358" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.359" starttime="20170809 05:17:46.356" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.359" starttime="20170809 05:17:46.355" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.426">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:17:46.426">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:46.426" starttime="20170809 05:17:46.359" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.428">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:46.428" starttime="20170809 05:17:46.428" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.429">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:17:46.429" starttime="20170809 05:17:46.429" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.430" starttime="20170809 05:17:46.429" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.430" starttime="20170809 05:17:46.427" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:46.430" starttime="20170809 05:17:46.427" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:17:46.430">Delete All Sessions</msg>
<status endtime="20170809 05:17:46.430" starttime="20170809 05:17:46.430" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.430">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:46.430" starttime="20170809 05:17:46.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:46.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:46.431" starttime="20170809 05:17:46.431" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:46.432">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:17:46.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:17:46.432">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:17:46.432" starttime="20170809 05:17:46.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.432">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:46.432" starttime="20170809 05:17:46.156" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:46.432">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:17:46.432" starttime="20170809 05:17:46.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:17:46.433">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:17:46.433" starttime="20170809 05:17:46.433" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:46.433" starttime="20170809 05:17:46.156" status="FAIL"></status>
</kw>
<status endtime="20170809 05:17:46.433" starttime="20170809 05:17:45.438" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:56.439">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:17:56.439" starttime="20170809 05:17:56.439" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:56.440">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:17:56.440" starttime="20170809 05:17:56.440" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:56.441">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:17:56.441" starttime="20170809 05:17:56.440" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:56.441">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:17:56.441" starttime="20170809 05:17:56.441" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:56.925">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:17:56.925" starttime="20170809 05:17:56.442" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:17:56.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:17:56.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:17:56.926" starttime="20170809 05:17:56.442" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:56.926">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:56.927" starttime="20170809 05:17:56.926" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:56.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:17:56.927" starttime="20170809 05:17:56.927" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:56.927" starttime="20170809 05:17:56.438" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:56.927" starttime="20170809 05:17:56.437" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:56.928" starttime="20170809 05:17:56.436" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:56.928">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:17:56.928" starttime="20170809 05:17:56.928" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:17:56.930">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:56.930" starttime="20170809 05:17:56.930" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:17:56.931">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:17:56.931" starttime="20170809 05:17:56.931" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:56.932" starttime="20170809 05:17:56.931" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:56.932" starttime="20170809 05:17:56.929" status="PASS"></status>
</kw>
<status endtime="20170809 05:17:56.932" starttime="20170809 05:17:56.929" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:01.798">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:01.799">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:01.799" starttime="20170809 05:17:56.932" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:01.801">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:01.801" starttime="20170809 05:18:01.800" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:01.802">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:01.802" starttime="20170809 05:18:01.802" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:01.802" starttime="20170809 05:18:01.801" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:01.802" starttime="20170809 05:18:01.800" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:01.802" starttime="20170809 05:18:01.799" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:01.803">Delete All Sessions</msg>
<status endtime="20170809 05:18:01.803" starttime="20170809 05:18:01.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:01.803">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:01.803" starttime="20170809 05:17:56.436" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:01.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:01.804" starttime="20170809 05:18:01.803" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:01.805">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:01.805">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:01.805">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:01.805" starttime="20170809 05:18:01.804" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:01.805">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:18:01.805" starttime="20170809 05:17:56.435" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:01.806">${power_state} = On</msg>
<status endtime="20170809 05:18:01.806" starttime="20170809 05:17:56.435" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:18:01.806" starttime="20170809 05:18:01.806" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:01.806" starttime="20170809 05:17:56.435" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:01.811">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:01.811" starttime="20170809 05:18:01.811" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:01.812">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:01.812" starttime="20170809 05:18:01.812" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:01.813">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:01.813" starttime="20170809 05:18:01.812" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:01.813">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:01.813" starttime="20170809 05:18:01.813" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.331">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:02.331" starttime="20170809 05:18:01.814" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:02.331">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:02.331">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:02.331" starttime="20170809 05:18:01.814" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.332">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:02.332" starttime="20170809 05:18:02.331" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.333">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:02.333" starttime="20170809 05:18:02.332" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.333" starttime="20170809 05:18:01.810" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.333" starttime="20170809 05:18:01.810" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.333" starttime="20170809 05:18:01.809" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.334">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:18:02.334" starttime="20170809 05:18:02.333" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.336">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:02.336" starttime="20170809 05:18:02.335" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.337">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:02.337" starttime="20170809 05:18:02.337" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.337" starttime="20170809 05:18:02.336" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.338" starttime="20170809 05:18:02.334" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.338" starttime="20170809 05:18:02.334" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:02.439">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:02.439" starttime="20170809 05:18:02.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.441">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:02.441" starttime="20170809 05:18:02.440" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.442">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:02.442" starttime="20170809 05:18:02.442" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.442" starttime="20170809 05:18:02.441" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.443" starttime="20170809 05:18:02.440" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:02.443" starttime="20170809 05:18:02.439" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:02.443">Delete All Sessions</msg>
<status endtime="20170809 05:18:02.443" starttime="20170809 05:18:02.443" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:02.443">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:02.443" starttime="20170809 05:18:01.807" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:02.444" starttime="20170809 05:18:02.444" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.445">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:02.445">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:02.445">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:02.445" starttime="20170809 05:18:02.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:02.445">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:18:02.445" starttime="20170809 05:18:01.807" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:02.445">${host_state} = Running</msg>
<status endtime="20170809 05:18:02.445" starttime="20170809 05:18:01.807" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:18:02.446" starttime="20170809 05:18:02.446" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:02.450">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:02.450" starttime="20170809 05:18:02.450" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.451">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:02.451" starttime="20170809 05:18:02.451" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.452">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:02.452" starttime="20170809 05:18:02.451" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:02.452">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:02.452" starttime="20170809 05:18:02.452" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:03.390">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:03.390" starttime="20170809 05:18:02.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:03.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:03.390">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:03.390" starttime="20170809 05:18:02.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:03.391">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:03.391" starttime="20170809 05:18:03.390" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:03.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:03.391" starttime="20170809 05:18:03.391" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:03.392" starttime="20170809 05:18:02.449" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:03.392" starttime="20170809 05:18:02.449" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:03.392" starttime="20170809 05:18:02.448" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:03.392">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:18:03.392" starttime="20170809 05:18:03.392" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:03.394">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:03.394" starttime="20170809 05:18:03.394" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:03.395">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:03.395" starttime="20170809 05:18:03.395" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:03.396" starttime="20170809 05:18:03.395" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:03.396" starttime="20170809 05:18:03.393" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:03.396" starttime="20170809 05:18:03.393" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:04.208">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:04.208">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:04.208" starttime="20170809 05:18:03.396" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:04.210">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:04.210" starttime="20170809 05:18:04.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:04.211">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:04.212" starttime="20170809 05:18:04.211" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:04.212" starttime="20170809 05:18:04.211" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:04.212" starttime="20170809 05:18:04.209" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:04.212" starttime="20170809 05:18:04.209" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:04.212">Delete All Sessions</msg>
<status endtime="20170809 05:18:04.212" starttime="20170809 05:18:04.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:04.212">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:04.213" starttime="20170809 05:18:02.447" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:04.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:04.213" starttime="20170809 05:18:04.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:04.214">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:04.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:04.214">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:04.214" starttime="20170809 05:18:04.213" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:04.214">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:18:04.214" starttime="20170809 05:18:02.447" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:04.214">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:18:04.214" starttime="20170809 05:18:02.446" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:18:04.215">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:18:04.215" starttime="20170809 05:18:04.215" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:04.215" starttime="20170809 05:18:02.446" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:04.215" starttime="20170809 05:17:56.434" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:14.221">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:14.221" starttime="20170809 05:18:14.221" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:14.222">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:14.222" starttime="20170809 05:18:14.222" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:14.223">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:14.223" starttime="20170809 05:18:14.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:14.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:14.223" starttime="20170809 05:18:14.223" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:14.981">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:14.982" starttime="20170809 05:18:14.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:14.982">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:14.982">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:14.982" starttime="20170809 05:18:14.224" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:14.983">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:14.983" starttime="20170809 05:18:14.982" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:14.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:14.983" starttime="20170809 05:18:14.983" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:14.984" starttime="20170809 05:18:14.220" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:14.984" starttime="20170809 05:18:14.219" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:14.984" starttime="20170809 05:18:14.219" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:14.984">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:18:14.984" starttime="20170809 05:18:14.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:14.986">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:14.987" starttime="20170809 05:18:14.986" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:14.987">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:14.988" starttime="20170809 05:18:14.987" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:14.988" starttime="20170809 05:18:14.987" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:14.988" starttime="20170809 05:18:14.985" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:14.988" starttime="20170809 05:18:14.985" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:17.271">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:17.271">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:17.271" starttime="20170809 05:18:14.988" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:17.273">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:17.273" starttime="20170809 05:18:17.272" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:17.274">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:17.274" starttime="20170809 05:18:17.274" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:17.275" starttime="20170809 05:18:17.274" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:17.275" starttime="20170809 05:18:17.272" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:17.275" starttime="20170809 05:18:17.271" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:17.275">Delete All Sessions</msg>
<status endtime="20170809 05:18:17.275" starttime="20170809 05:18:17.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:17.275">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:17.275" starttime="20170809 05:18:14.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:17.276">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:17.276" starttime="20170809 05:18:17.276" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:17.277">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:17.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:17.277">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:17.277" starttime="20170809 05:18:17.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:17.277">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 05:18:17.277" starttime="20170809 05:18:14.217" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:17.278">${power_state} = Off</msg>
<status endtime="20170809 05:18:17.278" starttime="20170809 05:18:14.217" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:18:17.278">On != Off</msg>
<status endtime="20170809 05:18:17.278" starttime="20170809 05:18:17.278" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:17.279" starttime="20170809 05:18:14.217" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:17.279" starttime="20170809 05:18:14.216" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:27.284">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:27.284" starttime="20170809 05:18:27.284" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:27.285">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:27.285" starttime="20170809 05:18:27.285" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:27.286">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:27.286" starttime="20170809 05:18:27.285" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:27.286">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:27.286" starttime="20170809 05:18:27.286" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:27.624">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:27.624" starttime="20170809 05:18:27.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:27.625">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:27.625">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:27.625" starttime="20170809 05:18:27.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:27.625">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:27.625" starttime="20170809 05:18:27.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:27.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:27.626" starttime="20170809 05:18:27.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:27.626" starttime="20170809 05:18:27.283" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:27.626" starttime="20170809 05:18:27.283" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:27.626" starttime="20170809 05:18:27.282" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:27.627">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:18:27.627" starttime="20170809 05:18:27.627" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:27.629">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:27.629" starttime="20170809 05:18:27.628" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:27.630">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:27.630" starttime="20170809 05:18:27.630" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:27.630" starttime="20170809 05:18:27.629" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:27.630" starttime="20170809 05:18:27.628" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:27.630" starttime="20170809 05:18:27.627" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.098">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:28.098">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.098" starttime="20170809 05:18:27.631" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.100">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:28.100" starttime="20170809 05:18:28.100" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.101">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:28.101" starttime="20170809 05:18:28.101" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.101" starttime="20170809 05:18:28.101" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.102" starttime="20170809 05:18:28.099" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.102" starttime="20170809 05:18:28.099" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:28.102">Delete All Sessions</msg>
<status endtime="20170809 05:18:28.102" starttime="20170809 05:18:28.102" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.102">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.102" starttime="20170809 05:18:27.281" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.103" starttime="20170809 05:18:28.103" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.104">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:28.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:28.104">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:28.104" starttime="20170809 05:18:28.103" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.104">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:18:28.104" starttime="20170809 05:18:27.281" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.104">${power_state} = On</msg>
<status endtime="20170809 05:18:28.104" starttime="20170809 05:18:27.280" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:18:28.105" starttime="20170809 05:18:28.105" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.105" starttime="20170809 05:18:27.280" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.109">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:28.110" starttime="20170809 05:18:28.108" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:28.110" starttime="20170809 05:18:28.110" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.111">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:28.111" starttime="20170809 05:18:28.111" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.112">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:28.112" starttime="20170809 05:18:28.111" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.289">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:28.290" starttime="20170809 05:18:28.112" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:28.290">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.290" starttime="20170809 05:18:28.112" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.291">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.291" starttime="20170809 05:18:28.290" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.291">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.291" starttime="20170809 05:18:28.291" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.292" starttime="20170809 05:18:28.108" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.292" starttime="20170809 05:18:28.108" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.292" starttime="20170809 05:18:28.107" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.292">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:18:28.292" starttime="20170809 05:18:28.292" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.294">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:28.295" starttime="20170809 05:18:28.294" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.295">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:28.296" starttime="20170809 05:18:28.295" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.296" starttime="20170809 05:18:28.295" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.296" starttime="20170809 05:18:28.293" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.296" starttime="20170809 05:18:28.293" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.625">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:28.625">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.625" starttime="20170809 05:18:28.296" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.627">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:28.627" starttime="20170809 05:18:28.627" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.628">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:28.628" starttime="20170809 05:18:28.628" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.629" starttime="20170809 05:18:28.627" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.629" starttime="20170809 05:18:28.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.629" starttime="20170809 05:18:28.626" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:28.629">Delete All Sessions</msg>
<status endtime="20170809 05:18:28.629" starttime="20170809 05:18:28.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.629">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.629" starttime="20170809 05:18:28.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.630" starttime="20170809 05:18:28.630" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.631">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:28.631">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:28.631">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:28.631" starttime="20170809 05:18:28.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.631">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:18:28.631" starttime="20170809 05:18:28.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.632">${host_state} = Running</msg>
<status endtime="20170809 05:18:28.632" starttime="20170809 05:18:28.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:18:28.632" starttime="20170809 05:18:28.632" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.636">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:28.637" starttime="20170809 05:18:28.636" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.637">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:28.637" starttime="20170809 05:18:28.637" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.638">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:28.638" starttime="20170809 05:18:28.638" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.639">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:28.639" starttime="20170809 05:18:28.638" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.842">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:28.842" starttime="20170809 05:18:28.639" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.843">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:28.843">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.843" starttime="20170809 05:18:28.639" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.843">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.843" starttime="20170809 05:18:28.843" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.844" starttime="20170809 05:18:28.844" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.845" starttime="20170809 05:18:28.636" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.845" starttime="20170809 05:18:28.635" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.845" starttime="20170809 05:18:28.635" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.845">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:18:28.845" starttime="20170809 05:18:28.845" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.847">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:28.847" starttime="20170809 05:18:28.847" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.848">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:28.848" starttime="20170809 05:18:28.848" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.849" starttime="20170809 05:18:28.848" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.849" starttime="20170809 05:18:28.846" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.849" starttime="20170809 05:18:28.846" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.921">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:28.921">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.921" starttime="20170809 05:18:28.849" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.923">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:28.923" starttime="20170809 05:18:28.923" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.924">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:28.924" starttime="20170809 05:18:28.924" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.924" starttime="20170809 05:18:28.923" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.924" starttime="20170809 05:18:28.922" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:28.924" starttime="20170809 05:18:28.922" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:28.925">Delete All Sessions</msg>
<status endtime="20170809 05:18:28.925" starttime="20170809 05:18:28.925" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.925">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:28.925" starttime="20170809 05:18:28.634" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:28.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:28.926" starttime="20170809 05:18:28.925" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:28.926">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:28.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:28.927">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:28.927" starttime="20170809 05:18:28.926" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.927">${state} = Off</msg>
<status endtime="20170809 05:18:28.927" starttime="20170809 05:18:28.633" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:28.927">${boot_progress} = Off</msg>
<status endtime="20170809 05:18:28.927" starttime="20170809 05:18:28.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:18:28.928">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 05:18:28.928" starttime="20170809 05:18:28.927" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:28.928" starttime="20170809 05:18:28.632" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:28.928" starttime="20170809 05:18:27.279" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:38.934">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:38.934" starttime="20170809 05:18:38.933" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:38.935">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:38.935" starttime="20170809 05:18:38.934" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:38.935">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:38.935" starttime="20170809 05:18:38.935" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:38.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:38.936" starttime="20170809 05:18:38.936" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.444">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:39.444" starttime="20170809 05:18:38.937" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:39.444">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:39.444">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:39.444" starttime="20170809 05:18:38.936" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.445">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:39.445" starttime="20170809 05:18:39.444" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:39.446" starttime="20170809 05:18:39.445" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.446" starttime="20170809 05:18:38.933" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.446" starttime="20170809 05:18:38.932" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.446" starttime="20170809 05:18:38.931" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.447">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:18:39.447" starttime="20170809 05:18:39.446" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.449">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:39.449" starttime="20170809 05:18:39.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.450">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:39.450" starttime="20170809 05:18:39.449" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.450" starttime="20170809 05:18:39.449" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.450" starttime="20170809 05:18:39.447" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.450" starttime="20170809 05:18:39.447" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:39.693">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:39.693" starttime="20170809 05:18:39.450" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:39.695" starttime="20170809 05:18:39.695" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.696">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:39.696" starttime="20170809 05:18:39.696" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.696" starttime="20170809 05:18:39.695" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.696" starttime="20170809 05:18:39.694" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.696" starttime="20170809 05:18:39.694" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:39.697">Delete All Sessions</msg>
<status endtime="20170809 05:18:39.697" starttime="20170809 05:18:39.697" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:39.697">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:39.697" starttime="20170809 05:18:38.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:39.698" starttime="20170809 05:18:39.697" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:39.699">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:39.699">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:39.699" starttime="20170809 05:18:39.698" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:39.699">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:18:39.699" starttime="20170809 05:18:38.930" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:39.699">${power_state} = On</msg>
<status endtime="20170809 05:18:39.699" starttime="20170809 05:18:38.930" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:18:39.700" starttime="20170809 05:18:39.700" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.700" starttime="20170809 05:18:38.929" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.704">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:39.705" starttime="20170809 05:18:39.703" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:39.705" starttime="20170809 05:18:39.705" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.706">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:39.706" starttime="20170809 05:18:39.705" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:39.707" starttime="20170809 05:18:39.706" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.912">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:39.912" starttime="20170809 05:18:39.707" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:39.912">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:39.912">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:39.912" starttime="20170809 05:18:39.707" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.913">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:39.913" starttime="20170809 05:18:39.913" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.914">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:39.914" starttime="20170809 05:18:39.913" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.914" starttime="20170809 05:18:39.703" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.914" starttime="20170809 05:18:39.702" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.914" starttime="20170809 05:18:39.702" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.915">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:18:39.915" starttime="20170809 05:18:39.914" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:39.917">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:39.917" starttime="20170809 05:18:39.916" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:39.918">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:39.918" starttime="20170809 05:18:39.917" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.918" starttime="20170809 05:18:39.917" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.918" starttime="20170809 05:18:39.915" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:39.918" starttime="20170809 05:18:39.915" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:40.009">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:40.009" starttime="20170809 05:18:39.918" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.012">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:40.012" starttime="20170809 05:18:40.011" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.013">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:40.013" starttime="20170809 05:18:40.013" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.013" starttime="20170809 05:18:40.012" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.013" starttime="20170809 05:18:40.010" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.014" starttime="20170809 05:18:40.010" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:40.014">Delete All Sessions</msg>
<status endtime="20170809 05:18:40.014" starttime="20170809 05:18:40.014" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.014">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:40.014" starttime="20170809 05:18:39.701" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.015">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:40.015" starttime="20170809 05:18:40.014" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.015">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:40.015">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:40.016">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:40.016" starttime="20170809 05:18:40.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.016">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:18:40.016" starttime="20170809 05:18:39.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.016">${host_state} = Running</msg>
<status endtime="20170809 05:18:40.016" starttime="20170809 05:18:39.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:18:40.017" starttime="20170809 05:18:40.016" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.021">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:40.021" starttime="20170809 05:18:40.021" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.022">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:40.022" starttime="20170809 05:18:40.022" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.023">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:40.023" starttime="20170809 05:18:40.022" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.023">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:40.023" starttime="20170809 05:18:40.023" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.211">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:40.211" starttime="20170809 05:18:40.024" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.212">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:40.212">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:40.212" starttime="20170809 05:18:40.024" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.212">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:40.212" starttime="20170809 05:18:40.212" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:40.213" starttime="20170809 05:18:40.213" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.213" starttime="20170809 05:18:40.020" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.213" starttime="20170809 05:18:40.020" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.213" starttime="20170809 05:18:40.019" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.214">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:18:40.214" starttime="20170809 05:18:40.214" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.216">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:40.216" starttime="20170809 05:18:40.215" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.217">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:40.217" starttime="20170809 05:18:40.217" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.217" starttime="20170809 05:18:40.216" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.217" starttime="20170809 05:18:40.215" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.217" starttime="20170809 05:18:40.214" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.285">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:40.286">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:40.286" starttime="20170809 05:18:40.218" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.287">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:40.288" starttime="20170809 05:18:40.287" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.288">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:40.288" starttime="20170809 05:18:40.288" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.289" starttime="20170809 05:18:40.288" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.289" starttime="20170809 05:18:40.286" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:40.289" starttime="20170809 05:18:40.286" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:40.289">Delete All Sessions</msg>
<status endtime="20170809 05:18:40.289" starttime="20170809 05:18:40.289" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.290">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:40.290" starttime="20170809 05:18:40.018" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:40.290">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:40.290" starttime="20170809 05:18:40.290" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:40.291">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:40.291">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:40.291">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:40.291" starttime="20170809 05:18:40.291" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.291">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:18:40.291" starttime="20170809 05:18:40.018" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:40.292">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:18:40.292" starttime="20170809 05:18:40.017" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:18:40.292">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:18:40.292" starttime="20170809 05:18:40.292" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:40.292" starttime="20170809 05:18:40.017" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:40.293" starttime="20170809 05:18:38.929" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.298">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:50.299" starttime="20170809 05:18:50.298" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:50.300" starttime="20170809 05:18:50.299" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.301">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:50.301" starttime="20170809 05:18:50.300" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.302">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:50.302" starttime="20170809 05:18:50.301" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.561">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:50.561" starttime="20170809 05:18:50.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:50.562">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:50.562" starttime="20170809 05:18:50.302" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:50.562" starttime="20170809 05:18:50.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:50.563" starttime="20170809 05:18:50.563" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.563" starttime="20170809 05:18:50.297" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.563" starttime="20170809 05:18:50.296" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.563" starttime="20170809 05:18:50.296" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.564">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:18:50.564" starttime="20170809 05:18:50.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.566">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:50.566" starttime="20170809 05:18:50.565" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.567">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:50.567" starttime="20170809 05:18:50.567" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.567" starttime="20170809 05:18:50.566" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.567" starttime="20170809 05:18:50.565" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.567" starttime="20170809 05:18:50.564" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.632">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:50.632">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:50.632" starttime="20170809 05:18:50.568" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.634">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:50.634" starttime="20170809 05:18:50.634" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.635">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:50.635" starttime="20170809 05:18:50.635" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.635" starttime="20170809 05:18:50.634" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.636" starttime="20170809 05:18:50.633" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.636" starttime="20170809 05:18:50.633" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:50.636">Delete All Sessions</msg>
<status endtime="20170809 05:18:50.636" starttime="20170809 05:18:50.636" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.636">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:50.636" starttime="20170809 05:18:50.295" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.637">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:50.637" starttime="20170809 05:18:50.637" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.637">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:50.638">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:50.638">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:50.638" starttime="20170809 05:18:50.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.638">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:18:50.638" starttime="20170809 05:18:50.294" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.638">${power_state} = On</msg>
<status endtime="20170809 05:18:50.638" starttime="20170809 05:18:50.294" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:18:50.639" starttime="20170809 05:18:50.639" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.639" starttime="20170809 05:18:50.294" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.643">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:50.643" starttime="20170809 05:18:50.642" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.644">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:50.644" starttime="20170809 05:18:50.644" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.645">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:50.645" starttime="20170809 05:18:50.644" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.645">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:50.645" starttime="20170809 05:18:50.645" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.834">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:50.834" starttime="20170809 05:18:50.646" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.835">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:50.835">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:50.835" starttime="20170809 05:18:50.646" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.835">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:50.835" starttime="20170809 05:18:50.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:50.836" starttime="20170809 05:18:50.836" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.836" starttime="20170809 05:18:50.642" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.836" starttime="20170809 05:18:50.641" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.837" starttime="20170809 05:18:50.641" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.837">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:18:50.837" starttime="20170809 05:18:50.837" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.839">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:50.839" starttime="20170809 05:18:50.839" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.840">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:18:50.840" starttime="20170809 05:18:50.840" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.840" starttime="20170809 05:18:50.839" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.841" starttime="20170809 05:18:50.838" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.841" starttime="20170809 05:18:50.837" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.934">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:50.934">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:50.934" starttime="20170809 05:18:50.841" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.936">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:50.936" starttime="20170809 05:18:50.936" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.937">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:50.937" starttime="20170809 05:18:50.937" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.937" starttime="20170809 05:18:50.936" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.938" starttime="20170809 05:18:50.935" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:50.938" starttime="20170809 05:18:50.935" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:50.938">Delete All Sessions</msg>
<status endtime="20170809 05:18:50.938" starttime="20170809 05:18:50.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.938">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:50.938" starttime="20170809 05:18:50.640" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:50.939" starttime="20170809 05:18:50.939" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.940">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:50.940">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:50.940">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:50.940" starttime="20170809 05:18:50.939" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.940">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:18:50.940" starttime="20170809 05:18:50.640" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:50.940">${host_state} = Running</msg>
<status endtime="20170809 05:18:50.940" starttime="20170809 05:18:50.639" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:18:50.941" starttime="20170809 05:18:50.941" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:50.945">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:18:50.945" starttime="20170809 05:18:50.945" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:18:50.946" starttime="20170809 05:18:50.946" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.947">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:18:50.947" starttime="20170809 05:18:50.946" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:50.947">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:18:50.947" starttime="20170809 05:18:50.947" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:51.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:18:51.135" starttime="20170809 05:18:50.948" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:51.135">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:18:51.135">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:51.135" starttime="20170809 05:18:50.948" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:51.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:51.136" starttime="20170809 05:18:51.136" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:51.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:51.137" starttime="20170809 05:18:51.136" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.137" starttime="20170809 05:18:50.944" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.137" starttime="20170809 05:18:50.944" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.137" starttime="20170809 05:18:50.943" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:51.138">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:18:51.138" starttime="20170809 05:18:51.137" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:51.140">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:51.140" starttime="20170809 05:18:51.139" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:51.141">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:18:51.141" starttime="20170809 05:18:51.141" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.141" starttime="20170809 05:18:51.140" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.141" starttime="20170809 05:18:51.139" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.141" starttime="20170809 05:18:51.138" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:51.209">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:18:51.209">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:51.209" starttime="20170809 05:18:51.142" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:51.211">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:51.211" starttime="20170809 05:18:51.211" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:51.212">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:18:51.212" starttime="20170809 05:18:51.212" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.213" starttime="20170809 05:18:51.212" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.213" starttime="20170809 05:18:51.210" status="PASS"></status>
</kw>
<status endtime="20170809 05:18:51.213" starttime="20170809 05:18:51.210" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:18:51.213">Delete All Sessions</msg>
<status endtime="20170809 05:18:51.213" starttime="20170809 05:18:51.213" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:51.213">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:18:51.213" starttime="20170809 05:18:50.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:18:51.214">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:18:51.214" starttime="20170809 05:18:51.214" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:18:51.215">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:18:51.215">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:18:51.215">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:18:51.215" starttime="20170809 05:18:51.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:51.215">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:18:51.215" starttime="20170809 05:18:50.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:18:51.215">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:18:51.215" starttime="20170809 05:18:50.941" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:18:51.216">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:18:51.216" starttime="20170809 05:18:51.216" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:51.216" starttime="20170809 05:18:50.941" status="FAIL"></status>
</kw>
<status endtime="20170809 05:18:51.216" starttime="20170809 05:18:50.293" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.222">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:01.222" starttime="20170809 05:19:01.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.223">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:01.223" starttime="20170809 05:19:01.223" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.224">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:01.224" starttime="20170809 05:19:01.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.224">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:01.224" starttime="20170809 05:19:01.224" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.532">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:01.532" starttime="20170809 05:19:01.225" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.532">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:01.532">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:01.532" starttime="20170809 05:19:01.225" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.533">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:01.533" starttime="20170809 05:19:01.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:01.534" starttime="20170809 05:19:01.533" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.534" starttime="20170809 05:19:01.221" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.534" starttime="20170809 05:19:01.221" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.534" starttime="20170809 05:19:01.220" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.535">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:19:01.535" starttime="20170809 05:19:01.534" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.537">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:01.537" starttime="20170809 05:19:01.536" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.538">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:01.538" starttime="20170809 05:19:01.537" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.538" starttime="20170809 05:19:01.537" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.538" starttime="20170809 05:19:01.535" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.538" starttime="20170809 05:19:01.535" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.618">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:01.619">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:01.619" starttime="20170809 05:19:01.538" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.621">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:01.621" starttime="20170809 05:19:01.621" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.623">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:01.623" starttime="20170809 05:19:01.622" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.623" starttime="20170809 05:19:01.622" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.623" starttime="20170809 05:19:01.620" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.623" starttime="20170809 05:19:01.619" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:01.624">Delete All Sessions</msg>
<status endtime="20170809 05:19:01.624" starttime="20170809 05:19:01.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.624">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:01.624" starttime="20170809 05:19:01.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:01.625" starttime="20170809 05:19:01.624" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.625">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:01.625">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:01.625">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:01.625" starttime="20170809 05:19:01.625" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.626">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:19:01.626" starttime="20170809 05:19:01.218" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.626">${power_state} = On</msg>
<status endtime="20170809 05:19:01.626" starttime="20170809 05:19:01.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:19:01.627" starttime="20170809 05:19:01.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.627" starttime="20170809 05:19:01.217" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.630">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:01.631" starttime="20170809 05:19:01.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:01.632" starttime="20170809 05:19:01.631" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.632">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:01.632" starttime="20170809 05:19:01.632" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:01.633" starttime="20170809 05:19:01.633" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.813">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:01.814" starttime="20170809 05:19:01.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.814">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:01.814">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:01.814" starttime="20170809 05:19:01.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.815">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:01.815" starttime="20170809 05:19:01.814" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:01.815" starttime="20170809 05:19:01.815" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.815" starttime="20170809 05:19:01.629" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.816" starttime="20170809 05:19:01.629" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.816" starttime="20170809 05:19:01.628" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.816">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:19:01.816" starttime="20170809 05:19:01.816" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.818">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:01.818" starttime="20170809 05:19:01.818" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.819">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:01.819" starttime="20170809 05:19:01.819" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.820" starttime="20170809 05:19:01.819" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.820" starttime="20170809 05:19:01.817" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.820" starttime="20170809 05:19:01.817" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.911">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:01.912">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:01.912" starttime="20170809 05:19:01.820" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.913">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:01.914" starttime="20170809 05:19:01.913" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.914">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:01.915" starttime="20170809 05:19:01.914" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.915" starttime="20170809 05:19:01.914" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.915" starttime="20170809 05:19:01.912" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:01.915" starttime="20170809 05:19:01.912" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:01.915">Delete All Sessions</msg>
<status endtime="20170809 05:19:01.915" starttime="20170809 05:19:01.915" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.915">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:01.916" starttime="20170809 05:19:01.628" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.916">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:01.916" starttime="20170809 05:19:01.916" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.917">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:01.917">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:01.917">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:01.917" starttime="20170809 05:19:01.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.917">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:19:01.917" starttime="20170809 05:19:01.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:01.917">${host_state} = Running</msg>
<status endtime="20170809 05:19:01.918" starttime="20170809 05:19:01.627" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:19:01.918" starttime="20170809 05:19:01.918" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:01.923">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:01.924" starttime="20170809 05:19:01.923" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.924">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:01.925" starttime="20170809 05:19:01.924" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.925">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:01.926" starttime="20170809 05:19:01.925" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:01.926">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:01.926" starttime="20170809 05:19:01.926" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:02.105">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:02.105" starttime="20170809 05:19:01.927" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:02.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:02.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:02.106" starttime="20170809 05:19:01.927" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:02.106">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:02.106" starttime="20170809 05:19:02.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:02.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:02.107" starttime="20170809 05:19:02.107" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.107" starttime="20170809 05:19:01.922" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.107" starttime="20170809 05:19:01.921" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.107" starttime="20170809 05:19:01.921" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:02.108">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:19:02.108" starttime="20170809 05:19:02.108" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:02.110">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:02.110" starttime="20170809 05:19:02.110" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:02.114">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:02.114" starttime="20170809 05:19:02.111" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.114" starttime="20170809 05:19:02.110" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.115" starttime="20170809 05:19:02.109" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.115" starttime="20170809 05:19:02.108" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:02.185">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:02.185">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:02.185" starttime="20170809 05:19:02.115" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:02.187">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:02.187" starttime="20170809 05:19:02.187" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:02.188">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:02.188" starttime="20170809 05:19:02.188" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.189" starttime="20170809 05:19:02.188" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.189" starttime="20170809 05:19:02.186" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:02.189" starttime="20170809 05:19:02.186" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:02.189">Delete All Sessions</msg>
<status endtime="20170809 05:19:02.189" starttime="20170809 05:19:02.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:02.189">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:02.190" starttime="20170809 05:19:01.920" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:02.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:02.190" starttime="20170809 05:19:02.190" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:02.191">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:02.191">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:02.191">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:02.191" starttime="20170809 05:19:02.190" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:02.191">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:02.191" starttime="20170809 05:19:01.919" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:02.191">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:02.191" starttime="20170809 05:19:01.919" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:19:02.192">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:19:02.192" starttime="20170809 05:19:02.192" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:02.192" starttime="20170809 05:19:01.918" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:02.192" starttime="20170809 05:19:01.217" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.198">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:12.198" starttime="20170809 05:19:12.198" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.199">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:12.199" starttime="20170809 05:19:12.199" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.200">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:12.200" starttime="20170809 05:19:12.199" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.200">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:12.200" starttime="20170809 05:19:12.200" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.383">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:12.383" starttime="20170809 05:19:12.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:12.383">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:12.383" starttime="20170809 05:19:12.201" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.384">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:12.384" starttime="20170809 05:19:12.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:12.385" starttime="20170809 05:19:12.384" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.385" starttime="20170809 05:19:12.197" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.385" starttime="20170809 05:19:12.196" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.385" starttime="20170809 05:19:12.196" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.385">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:19:12.385" starttime="20170809 05:19:12.385" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.388">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:12.388" starttime="20170809 05:19:12.387" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.388">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:12.389" starttime="20170809 05:19:12.388" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.389" starttime="20170809 05:19:12.388" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.389" starttime="20170809 05:19:12.386" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.389" starttime="20170809 05:19:12.386" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.454">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:12.454">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:12.454" starttime="20170809 05:19:12.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.456">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:12.456" starttime="20170809 05:19:12.456" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.458">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:12.458" starttime="20170809 05:19:12.457" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.458" starttime="20170809 05:19:12.456" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.458" starttime="20170809 05:19:12.455" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.458" starttime="20170809 05:19:12.455" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:12.458">Delete All Sessions</msg>
<status endtime="20170809 05:19:12.458" starttime="20170809 05:19:12.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:12.459" starttime="20170809 05:19:12.195" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.459">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:12.459" starttime="20170809 05:19:12.459" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.460">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:12.460">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:12.460">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:12.460" starttime="20170809 05:19:12.460" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.461">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:19:12.461" starttime="20170809 05:19:12.194" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.461">${power_state} = On</msg>
<status endtime="20170809 05:19:12.461" starttime="20170809 05:19:12.194" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:19:12.462" starttime="20170809 05:19:12.461" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.462" starttime="20170809 05:19:12.194" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.466">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:12.466" starttime="20170809 05:19:12.465" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.467">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:12.467" starttime="20170809 05:19:12.466" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.467">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:12.467" starttime="20170809 05:19:12.467" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.468">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:12.468" starttime="20170809 05:19:12.467" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:12.746" starttime="20170809 05:19:12.469" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:12.747">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:12.747" starttime="20170809 05:19:12.468" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:12.748" starttime="20170809 05:19:12.747" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:12.748" starttime="20170809 05:19:12.748" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.748" starttime="20170809 05:19:12.464" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.748" starttime="20170809 05:19:12.464" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.749" starttime="20170809 05:19:12.463" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.749">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:19:12.749" starttime="20170809 05:19:12.749" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.751">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:12.751" starttime="20170809 05:19:12.751" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.752">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:12.752" starttime="20170809 05:19:12.752" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.753" starttime="20170809 05:19:12.752" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.753" starttime="20170809 05:19:12.750" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.753" starttime="20170809 05:19:12.749" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.866">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:12.867">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:12.867" starttime="20170809 05:19:12.753" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.868">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:12.869" starttime="20170809 05:19:12.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.869">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:12.870" starttime="20170809 05:19:12.869" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.870" starttime="20170809 05:19:12.869" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.870" starttime="20170809 05:19:12.867" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:12.870" starttime="20170809 05:19:12.867" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:12.870">Delete All Sessions</msg>
<status endtime="20170809 05:19:12.870" starttime="20170809 05:19:12.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.871">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:12.871" starttime="20170809 05:19:12.463" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:12.871" starttime="20170809 05:19:12.871" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.872">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:12.872">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:12.872">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:12.872" starttime="20170809 05:19:12.871" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.872">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:19:12.872" starttime="20170809 05:19:12.462" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:12.873">${host_state} = Running</msg>
<status endtime="20170809 05:19:12.873" starttime="20170809 05:19:12.462" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:19:12.873" starttime="20170809 05:19:12.873" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:12.877">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:12.878" starttime="20170809 05:19:12.877" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.878">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:12.878" starttime="20170809 05:19:12.878" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.879">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:12.879" starttime="20170809 05:19:12.878" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:12.880">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:12.880" starttime="20170809 05:19:12.879" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:13.074">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:13.074" starttime="20170809 05:19:12.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:13.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:13.075">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:13.075" starttime="20170809 05:19:12.880" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:13.075">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:13.075" starttime="20170809 05:19:13.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:13.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:13.076" starttime="20170809 05:19:13.076" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.076" starttime="20170809 05:19:12.876" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.076" starttime="20170809 05:19:12.876" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.076" starttime="20170809 05:19:12.875" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:13.077">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:19:13.077" starttime="20170809 05:19:13.077" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:13.079">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:13.079" starttime="20170809 05:19:13.078" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:13.080">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:13.081" starttime="20170809 05:19:13.080" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.081" starttime="20170809 05:19:13.079" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.081" starttime="20170809 05:19:13.078" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.081" starttime="20170809 05:19:13.077" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:13.148">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:13.148">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:13.148" starttime="20170809 05:19:13.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:13.150">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:13.150" starttime="20170809 05:19:13.149" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:13.151">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:13.151" starttime="20170809 05:19:13.151" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.151" starttime="20170809 05:19:13.150" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.151" starttime="20170809 05:19:13.149" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:13.151" starttime="20170809 05:19:13.148" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:13.152">Delete All Sessions</msg>
<status endtime="20170809 05:19:13.152" starttime="20170809 05:19:13.152" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:13.152">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:13.152" starttime="20170809 05:19:12.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:13.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:13.153" starttime="20170809 05:19:13.152" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:13.153">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:13.153">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:13.153">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:13.154" starttime="20170809 05:19:13.153" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:13.154">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:13.154" starttime="20170809 05:19:12.874" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:13.154">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:13.154" starttime="20170809 05:19:12.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:19:13.155">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:19:13.155" starttime="20170809 05:19:13.154" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:13.155" starttime="20170809 05:19:12.873" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:13.155" starttime="20170809 05:19:12.193" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.161">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:23.161" starttime="20170809 05:19:23.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.162">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:23.162" starttime="20170809 05:19:23.161" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.163">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:23.163" starttime="20170809 05:19:23.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.164">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:23.164" starttime="20170809 05:19:23.163" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.398">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:23.398" starttime="20170809 05:19:23.165" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.398">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:23.398">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:23.398" starttime="20170809 05:19:23.164" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.399">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:23.399" starttime="20170809 05:19:23.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:23.400" starttime="20170809 05:19:23.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.400" starttime="20170809 05:19:23.159" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.400" starttime="20170809 05:19:23.159" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.400" starttime="20170809 05:19:23.158" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.401">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:19:23.401" starttime="20170809 05:19:23.400" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.403">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:23.403" starttime="20170809 05:19:23.402" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.404">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:23.404" starttime="20170809 05:19:23.404" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.404" starttime="20170809 05:19:23.403" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.404" starttime="20170809 05:19:23.402" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.404" starttime="20170809 05:19:23.401" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.544">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:23.544">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:23.545" starttime="20170809 05:19:23.405" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.546">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:23.546" starttime="20170809 05:19:23.546" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.547">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:23.547" starttime="20170809 05:19:23.547" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.548" starttime="20170809 05:19:23.547" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.548" starttime="20170809 05:19:23.545" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.548" starttime="20170809 05:19:23.545" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:23.548">Delete All Sessions</msg>
<status endtime="20170809 05:19:23.548" starttime="20170809 05:19:23.548" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.548">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:23.548" starttime="20170809 05:19:23.158" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:23.549" starttime="20170809 05:19:23.549" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.550">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:23.550">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:23.550">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:23.550" starttime="20170809 05:19:23.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.551">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:19:23.551" starttime="20170809 05:19:23.157" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.551">${power_state} = On</msg>
<status endtime="20170809 05:19:23.551" starttime="20170809 05:19:23.157" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:19:23.551" starttime="20170809 05:19:23.551" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.552" starttime="20170809 05:19:23.156" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.555">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:23.556" starttime="20170809 05:19:23.555" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.557">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:23.557" starttime="20170809 05:19:23.556" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.557">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:23.557" starttime="20170809 05:19:23.557" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.558">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:23.558" starttime="20170809 05:19:23.557" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:23.746" starttime="20170809 05:19:23.559" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.746">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:23.746">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:23.746" starttime="20170809 05:19:23.558" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:23.747" starttime="20170809 05:19:23.746" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:23.747" starttime="20170809 05:19:23.747" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.747" starttime="20170809 05:19:23.554" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.747" starttime="20170809 05:19:23.554" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.748" starttime="20170809 05:19:23.553" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.748">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:19:23.748" starttime="20170809 05:19:23.748" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.750">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:23.750" starttime="20170809 05:19:23.750" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.752">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:23.752" starttime="20170809 05:19:23.751" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.752" starttime="20170809 05:19:23.751" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.752" starttime="20170809 05:19:23.749" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.752" starttime="20170809 05:19:23.749" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.843">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:23.843">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:23.843" starttime="20170809 05:19:23.752" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.845">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:23.845" starttime="20170809 05:19:23.844" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.846">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:23.846" starttime="20170809 05:19:23.845" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.846" starttime="20170809 05:19:23.845" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.846" starttime="20170809 05:19:23.844" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:23.846" starttime="20170809 05:19:23.843" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:23.846">Delete All Sessions</msg>
<status endtime="20170809 05:19:23.847" starttime="20170809 05:19:23.846" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.847">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:23.847" starttime="20170809 05:19:23.553" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:23.847" starttime="20170809 05:19:23.847" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.848">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:23.848">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:23.848">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:23.848" starttime="20170809 05:19:23.848" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.848">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:19:23.849" starttime="20170809 05:19:23.552" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:23.849">${host_state} = Running</msg>
<status endtime="20170809 05:19:23.849" starttime="20170809 05:19:23.552" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:19:23.849" starttime="20170809 05:19:23.849" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:23.854">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:23.854" starttime="20170809 05:19:23.854" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.855">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:23.855" starttime="20170809 05:19:23.855" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.856">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:23.856" starttime="20170809 05:19:23.855" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:23.856">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:23.856" starttime="20170809 05:19:23.856" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:24.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:24.045" starttime="20170809 05:19:23.857" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:24.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:24.045">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:24.045" starttime="20170809 05:19:23.857" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:24.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:24.046" starttime="20170809 05:19:24.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:24.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:24.047" starttime="20170809 05:19:24.046" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.047" starttime="20170809 05:19:23.853" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.047" starttime="20170809 05:19:23.853" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.047" starttime="20170809 05:19:23.852" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:24.048">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:19:24.048" starttime="20170809 05:19:24.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:24.050">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:24.050" starttime="20170809 05:19:24.049" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:24.051">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:24.052" starttime="20170809 05:19:24.051" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.052" starttime="20170809 05:19:24.050" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.052" starttime="20170809 05:19:24.049" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.052" starttime="20170809 05:19:24.048" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:24.129">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:24.130">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:24.130" starttime="20170809 05:19:24.052" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:24.131">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:24.132" starttime="20170809 05:19:24.131" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:24.132">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:24.133" starttime="20170809 05:19:24.132" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.133" starttime="20170809 05:19:24.132" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.133" starttime="20170809 05:19:24.130" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:24.133" starttime="20170809 05:19:24.130" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:24.133">Delete All Sessions</msg>
<status endtime="20170809 05:19:24.133" starttime="20170809 05:19:24.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:24.133">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:24.134" starttime="20170809 05:19:23.851" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:24.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:24.134" starttime="20170809 05:19:24.134" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:24.135">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:24.135">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:24.135">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:24.135" starttime="20170809 05:19:24.134" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:24.135">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:24.135" starttime="20170809 05:19:23.851" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:24.135">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:24.135" starttime="20170809 05:19:23.850" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:19:24.136">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:19:24.136" starttime="20170809 05:19:24.136" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:24.136" starttime="20170809 05:19:23.849" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:24.136" starttime="20170809 05:19:23.156" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.142">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:34.142" starttime="20170809 05:19:34.141" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.143">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:34.143" starttime="20170809 05:19:34.142" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.143">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:34.143" starttime="20170809 05:19:34.143" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.144">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:34.144" starttime="20170809 05:19:34.144" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.393">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:34.394" starttime="20170809 05:19:34.145" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.394">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:34.394">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:34.394" starttime="20170809 05:19:34.144" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.395">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:34.395" starttime="20170809 05:19:34.394" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:34.396" starttime="20170809 05:19:34.395" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.396" starttime="20170809 05:19:34.141" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.396" starttime="20170809 05:19:34.140" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.396" starttime="20170809 05:19:34.140" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.397">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:19:34.397" starttime="20170809 05:19:34.396" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.399">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:34.399" starttime="20170809 05:19:34.398" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.400">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:34.400" starttime="20170809 05:19:34.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.400" starttime="20170809 05:19:34.399" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.400" starttime="20170809 05:19:34.397" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.400" starttime="20170809 05:19:34.397" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.485">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:34.485">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:34.485" starttime="20170809 05:19:34.401" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.487">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:34.488" starttime="20170809 05:19:34.487" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.488">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:34.489" starttime="20170809 05:19:34.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.489" starttime="20170809 05:19:34.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.489" starttime="20170809 05:19:34.486" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.489" starttime="20170809 05:19:34.485" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:34.489">Delete All Sessions</msg>
<status endtime="20170809 05:19:34.489" starttime="20170809 05:19:34.489" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.489">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:34.490" starttime="20170809 05:19:34.139" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:34.490" starttime="20170809 05:19:34.490" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.491">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:34.491">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:34.491">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:34.491" starttime="20170809 05:19:34.490" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.491">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:19:34.491" starttime="20170809 05:19:34.138" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.492">${power_state} = On</msg>
<status endtime="20170809 05:19:34.492" starttime="20170809 05:19:34.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:19:34.492" starttime="20170809 05:19:34.492" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.492" starttime="20170809 05:19:34.138" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.496">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:34.497" starttime="20170809 05:19:34.496" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.497">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:34.497" starttime="20170809 05:19:34.497" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.498">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:34.498" starttime="20170809 05:19:34.498" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.499">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:34.499" starttime="20170809 05:19:34.498" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:34.697" starttime="20170809 05:19:34.499" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.697">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:34.697">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:34.697" starttime="20170809 05:19:34.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.697">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:34.698" starttime="20170809 05:19:34.697" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:34.698" starttime="20170809 05:19:34.698" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.698" starttime="20170809 05:19:34.495" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.699" starttime="20170809 05:19:34.495" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.699" starttime="20170809 05:19:34.494" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.699">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:19:34.699" starttime="20170809 05:19:34.699" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.701">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:34.701" starttime="20170809 05:19:34.701" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.702">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:34.703" starttime="20170809 05:19:34.702" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.703" starttime="20170809 05:19:34.702" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.703" starttime="20170809 05:19:34.700" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.703" starttime="20170809 05:19:34.700" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:34.817">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:34.817" starttime="20170809 05:19:34.703" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:34.819" starttime="20170809 05:19:34.818" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:34.820" starttime="20170809 05:19:34.819" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.820" starttime="20170809 05:19:34.819" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.820" starttime="20170809 05:19:34.818" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:34.820" starttime="20170809 05:19:34.817" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:34.820">Delete All Sessions</msg>
<status endtime="20170809 05:19:34.821" starttime="20170809 05:19:34.820" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.821">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:34.821" starttime="20170809 05:19:34.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:34.822" starttime="20170809 05:19:34.821" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:34.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:34.822">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:34.822" starttime="20170809 05:19:34.822" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.823">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:19:34.823" starttime="20170809 05:19:34.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:34.823">${host_state} = Running</msg>
<status endtime="20170809 05:19:34.823" starttime="20170809 05:19:34.492" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:19:34.823" starttime="20170809 05:19:34.823" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:34.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:34.828" starttime="20170809 05:19:34.827" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:34.829" starttime="20170809 05:19:34.828" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.829">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:34.829" starttime="20170809 05:19:34.829" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:34.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:34.830" starttime="20170809 05:19:34.830" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:35.006">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:35.007" starttime="20170809 05:19:34.831" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:35.007">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:35.007">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:35.007" starttime="20170809 05:19:34.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:35.007">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:35.008" starttime="20170809 05:19:35.007" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:35.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:35.008" starttime="20170809 05:19:35.008" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.008" starttime="20170809 05:19:34.827" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.009" starttime="20170809 05:19:34.826" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.009" starttime="20170809 05:19:34.826" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:35.009">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:19:35.009" starttime="20170809 05:19:35.009" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:35.014">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:35.015" starttime="20170809 05:19:35.011" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:35.015">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:35.016" starttime="20170809 05:19:35.015" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.016" starttime="20170809 05:19:35.015" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.016" starttime="20170809 05:19:35.010" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.016" starttime="20170809 05:19:35.010" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:35.102">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:35.102">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:35.102" starttime="20170809 05:19:35.016" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:35.104">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:35.104" starttime="20170809 05:19:35.103" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:35.105">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:35.105" starttime="20170809 05:19:35.104" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.105" starttime="20170809 05:19:35.104" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.105" starttime="20170809 05:19:35.103" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:35.105" starttime="20170809 05:19:35.102" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:35.106">Delete All Sessions</msg>
<status endtime="20170809 05:19:35.106" starttime="20170809 05:19:35.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:35.106">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:35.106" starttime="20170809 05:19:34.825" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:35.107">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:35.107" starttime="20170809 05:19:35.107" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:35.108">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:35.108">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:35.108">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:35.108" starttime="20170809 05:19:35.107" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:35.108">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:35.108" starttime="20170809 05:19:34.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:35.108">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:35.108" starttime="20170809 05:19:34.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:19:35.109">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:19:35.109" starttime="20170809 05:19:35.109" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:35.109" starttime="20170809 05:19:34.824" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:35.109" starttime="20170809 05:19:34.137" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.115">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:45.115" starttime="20170809 05:19:45.114" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.116">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:45.116" starttime="20170809 05:19:45.115" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.116">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:45.116" starttime="20170809 05:19:45.116" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.117">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:45.117" starttime="20170809 05:19:45.117" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:45.366" starttime="20170809 05:19:45.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.366">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:45.367">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:45.367" starttime="20170809 05:19:45.117" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:45.367" starttime="20170809 05:19:45.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.368">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:45.368" starttime="20170809 05:19:45.368" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.368" starttime="20170809 05:19:45.114" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.368" starttime="20170809 05:19:45.113" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.368" starttime="20170809 05:19:45.113" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.369">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:19:45.369" starttime="20170809 05:19:45.369" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.371">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:45.371" starttime="20170809 05:19:45.370" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.372">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:45.372" starttime="20170809 05:19:45.372" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.372" starttime="20170809 05:19:45.371" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.372" starttime="20170809 05:19:45.370" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.373" starttime="20170809 05:19:45.369" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.449">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:45.449">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:45.449" starttime="20170809 05:19:45.373" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.451">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:45.451" starttime="20170809 05:19:45.451" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.452">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:45.452" starttime="20170809 05:19:45.452" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.452" starttime="20170809 05:19:45.451" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.452" starttime="20170809 05:19:45.450" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.452" starttime="20170809 05:19:45.450" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:45.453">Delete All Sessions</msg>
<status endtime="20170809 05:19:45.453" starttime="20170809 05:19:45.453" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.453">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:45.453" starttime="20170809 05:19:45.112" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:45.454" starttime="20170809 05:19:45.453" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.454">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:45.454">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:45.455">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:45.455" starttime="20170809 05:19:45.454" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.455">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:19:45.455" starttime="20170809 05:19:45.111" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.455">${power_state} = On</msg>
<status endtime="20170809 05:19:45.455" starttime="20170809 05:19:45.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:19:45.456" starttime="20170809 05:19:45.456" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.456" starttime="20170809 05:19:45.111" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.461">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:45.461" starttime="20170809 05:19:45.460" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.462">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:45.462" starttime="20170809 05:19:45.461" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.462">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:45.462" starttime="20170809 05:19:45.462" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.463">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:45.463" starttime="20170809 05:19:45.463" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.713">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:45.713" starttime="20170809 05:19:45.464" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.714">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:45.714">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:45.714" starttime="20170809 05:19:45.463" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.714">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:45.714" starttime="20170809 05:19:45.714" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.715">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:45.715" starttime="20170809 05:19:45.715" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.715" starttime="20170809 05:19:45.459" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.715" starttime="20170809 05:19:45.459" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.716" starttime="20170809 05:19:45.458" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.716">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:19:45.716" starttime="20170809 05:19:45.716" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.718">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:45.718" starttime="20170809 05:19:45.717" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.719">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:45.719" starttime="20170809 05:19:45.719" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.720" starttime="20170809 05:19:45.718" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.720" starttime="20170809 05:19:45.717" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.720" starttime="20170809 05:19:45.716" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.811">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:45.811">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:45.811" starttime="20170809 05:19:45.720" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.813">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:45.813" starttime="20170809 05:19:45.812" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.814">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:45.814" starttime="20170809 05:19:45.814" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.814" starttime="20170809 05:19:45.813" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.814" starttime="20170809 05:19:45.812" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:45.814" starttime="20170809 05:19:45.811" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:45.815">Delete All Sessions</msg>
<status endtime="20170809 05:19:45.815" starttime="20170809 05:19:45.814" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.815">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:45.815" starttime="20170809 05:19:45.457" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.815">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:45.816" starttime="20170809 05:19:45.815" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.816">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:45.816">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:45.816">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:45.816" starttime="20170809 05:19:45.816" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.817">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:19:45.817" starttime="20170809 05:19:45.457" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:45.817">${host_state} = Running</msg>
<status endtime="20170809 05:19:45.817" starttime="20170809 05:19:45.456" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:19:45.817" starttime="20170809 05:19:45.817" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:45.822">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:45.822" starttime="20170809 05:19:45.821" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.823">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:45.823" starttime="20170809 05:19:45.822" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.823">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:45.823" starttime="20170809 05:19:45.823" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:45.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:45.824" starttime="20170809 05:19:45.824" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:46.027">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:46.027" starttime="20170809 05:19:45.825" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:46.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:46.027">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:46.027" starttime="20170809 05:19:45.824" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:46.028">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:46.028" starttime="20170809 05:19:46.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:46.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:46.029" starttime="20170809 05:19:46.028" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.029" starttime="20170809 05:19:45.821" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.029" starttime="20170809 05:19:45.820" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.029" starttime="20170809 05:19:45.820" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:46.029">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:19:46.029" starttime="20170809 05:19:46.029" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:46.032">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:46.032" starttime="20170809 05:19:46.031" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:46.033">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:46.033" starttime="20170809 05:19:46.033" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.033" starttime="20170809 05:19:46.032" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.033" starttime="20170809 05:19:46.030" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.033" starttime="20170809 05:19:46.030" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:46.128">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:46.128">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:46.128" starttime="20170809 05:19:46.034" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:46.130">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:46.130" starttime="20170809 05:19:46.129" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:46.131">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:46.131" starttime="20170809 05:19:46.131" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.131" starttime="20170809 05:19:46.130" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.131" starttime="20170809 05:19:46.129" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:46.131" starttime="20170809 05:19:46.128" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:46.132">Delete All Sessions</msg>
<status endtime="20170809 05:19:46.132" starttime="20170809 05:19:46.131" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:46.132">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:46.132" starttime="20170809 05:19:45.819" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:46.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:46.133" starttime="20170809 05:19:46.132" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:46.133">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:46.133">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:46.133">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:46.133" starttime="20170809 05:19:46.133" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:46.134">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:46.134" starttime="20170809 05:19:45.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:46.134">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:46.134" starttime="20170809 05:19:45.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:19:46.135">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:19:46.135" starttime="20170809 05:19:46.134" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:46.135" starttime="20170809 05:19:45.818" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:46.135" starttime="20170809 05:19:45.110" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.140">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:56.141" starttime="20170809 05:19:56.140" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:56.141" starttime="20170809 05:19:56.141" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.142">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:56.142" starttime="20170809 05:19:56.141" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:56.142" starttime="20170809 05:19:56.142" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.382">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:56.382" starttime="20170809 05:19:56.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.383">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:56.383">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.383" starttime="20170809 05:19:56.143" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.383" starttime="20170809 05:19:56.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.384">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.384" starttime="20170809 05:19:56.384" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.384" starttime="20170809 05:19:56.139" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.384" starttime="20170809 05:19:56.139" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.384" starttime="20170809 05:19:56.138" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.385">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:19:56.385" starttime="20170809 05:19:56.385" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.387">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:56.387" starttime="20170809 05:19:56.386" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.388">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:56.388" starttime="20170809 05:19:56.388" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.388" starttime="20170809 05:19:56.387" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.388" starttime="20170809 05:19:56.386" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.389" starttime="20170809 05:19:56.385" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.463">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:56.463">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.463" starttime="20170809 05:19:56.389" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.465">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:56.465" starttime="20170809 05:19:56.464" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.466">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:56.466" starttime="20170809 05:19:56.465" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.466" starttime="20170809 05:19:56.465" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.466" starttime="20170809 05:19:56.464" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.466" starttime="20170809 05:19:56.463" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:56.466">Delete All Sessions</msg>
<status endtime="20170809 05:19:56.466" starttime="20170809 05:19:56.466" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.467">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.467" starttime="20170809 05:19:56.137" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.467" starttime="20170809 05:19:56.467" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.468">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:56.468">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:56.468">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:56.468" starttime="20170809 05:19:56.468" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.468">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:19:56.468" starttime="20170809 05:19:56.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.469">${power_state} = On</msg>
<status endtime="20170809 05:19:56.469" starttime="20170809 05:19:56.137" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:19:56.469" starttime="20170809 05:19:56.469" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.469" starttime="20170809 05:19:56.136" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.473">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:56.474" starttime="20170809 05:19:56.473" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:56.475" starttime="20170809 05:19:56.474" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.475">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:56.475" starttime="20170809 05:19:56.475" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.476">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:56.476" starttime="20170809 05:19:56.475" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.672">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:56.672" starttime="20170809 05:19:56.477" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:56.672">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.672" starttime="20170809 05:19:56.476" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.673">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.673" starttime="20170809 05:19:56.673" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.674" starttime="20170809 05:19:56.673" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.674" starttime="20170809 05:19:56.472" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.674" starttime="20170809 05:19:56.472" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.674" starttime="20170809 05:19:56.471" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.675">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:19:56.675" starttime="20170809 05:19:56.674" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.677">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:56.677" starttime="20170809 05:19:56.676" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.678">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:19:56.678" starttime="20170809 05:19:56.677" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.678" starttime="20170809 05:19:56.677" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.678" starttime="20170809 05:19:56.675" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.678" starttime="20170809 05:19:56.675" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.769">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:56.769">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.769" starttime="20170809 05:19:56.678" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.771">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:56.771" starttime="20170809 05:19:56.771" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.772">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:56.772" starttime="20170809 05:19:56.772" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.772" starttime="20170809 05:19:56.771" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.772" starttime="20170809 05:19:56.770" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.773" starttime="20170809 05:19:56.770" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:56.773">Delete All Sessions</msg>
<status endtime="20170809 05:19:56.773" starttime="20170809 05:19:56.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.773">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.773" starttime="20170809 05:19:56.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.774">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.774" starttime="20170809 05:19:56.774" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.774">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:56.775">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:56.775">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:56.775" starttime="20170809 05:19:56.774" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.775">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:19:56.775" starttime="20170809 05:19:56.470" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.775">${host_state} = Running</msg>
<status endtime="20170809 05:19:56.775" starttime="20170809 05:19:56.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:19:56.776" starttime="20170809 05:19:56.776" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.780">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:19:56.780" starttime="20170809 05:19:56.780" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.781">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:19:56.781" starttime="20170809 05:19:56.781" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.782">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:19:56.782" starttime="20170809 05:19:56.781" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.782">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:19:56.782" starttime="20170809 05:19:56.782" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.959">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:19:56.960" starttime="20170809 05:19:56.783" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:56.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:19:56.960">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:56.960" starttime="20170809 05:19:56.783" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.961">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.961" starttime="20170809 05:19:56.960" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.961">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:56.961" starttime="20170809 05:19:56.961" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.962" starttime="20170809 05:19:56.779" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.962" starttime="20170809 05:19:56.779" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.962" starttime="20170809 05:19:56.778" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.962">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:19:56.962" starttime="20170809 05:19:56.962" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:56.965">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:56.965" starttime="20170809 05:19:56.964" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:56.966">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:19:56.966" starttime="20170809 05:19:56.966" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.966" starttime="20170809 05:19:56.965" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.966" starttime="20170809 05:19:56.963" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:56.966" starttime="20170809 05:19:56.963" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:57.033">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:19:57.033">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:57.033" starttime="20170809 05:19:56.966" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:57.035">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:57.035" starttime="20170809 05:19:57.035" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:57.036">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:19:57.036" starttime="20170809 05:19:57.036" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:57.036" starttime="20170809 05:19:57.035" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:57.036" starttime="20170809 05:19:57.034" status="PASS"></status>
</kw>
<status endtime="20170809 05:19:57.036" starttime="20170809 05:19:57.034" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:19:57.037">Delete All Sessions</msg>
<status endtime="20170809 05:19:57.037" starttime="20170809 05:19:57.037" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:57.037">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:19:57.037" starttime="20170809 05:19:56.778" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:19:57.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:19:57.038" starttime="20170809 05:19:57.037" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:19:57.038">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:19:57.038">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:19:57.038">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:19:57.039" starttime="20170809 05:19:57.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:57.039">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:57.039" starttime="20170809 05:19:56.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:19:57.039">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:19:57.039" starttime="20170809 05:19:56.776" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:19:57.040">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:19:57.040" starttime="20170809 05:19:57.039" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:57.040" starttime="20170809 05:19:56.776" status="FAIL"></status>
</kw>
<status endtime="20170809 05:19:57.040" starttime="20170809 05:19:56.135" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.045">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:07.046" starttime="20170809 05:20:07.045" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:07.047" starttime="20170809 05:20:07.046" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.047">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:07.047" starttime="20170809 05:20:07.047" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:07.048" starttime="20170809 05:20:07.047" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.226">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:07.226" starttime="20170809 05:20:07.048" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.226">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:07.226">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.226" starttime="20170809 05:20:07.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.227" starttime="20170809 05:20:07.227" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.228">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.228" starttime="20170809 05:20:07.227" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.228" starttime="20170809 05:20:07.045" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.228" starttime="20170809 05:20:07.044" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.228" starttime="20170809 05:20:07.043" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.229">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:20:07.229" starttime="20170809 05:20:07.229" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.231">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:07.231" starttime="20170809 05:20:07.230" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.233">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:07.233" starttime="20170809 05:20:07.232" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.233" starttime="20170809 05:20:07.231" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.233" starttime="20170809 05:20:07.230" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.233" starttime="20170809 05:20:07.229" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.297">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:07.297">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.297" starttime="20170809 05:20:07.233" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.299">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:07.299" starttime="20170809 05:20:07.299" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.300">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:07.300" starttime="20170809 05:20:07.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.300" starttime="20170809 05:20:07.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.301" starttime="20170809 05:20:07.298" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.301" starttime="20170809 05:20:07.298" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:07.301">Delete All Sessions</msg>
<status endtime="20170809 05:20:07.301" starttime="20170809 05:20:07.301" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.301">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.301" starttime="20170809 05:20:07.043" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.302" starttime="20170809 05:20:07.302" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:07.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:07.303">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:07.303" starttime="20170809 05:20:07.302" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.303">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:20:07.303" starttime="20170809 05:20:07.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.303">${power_state} = On</msg>
<status endtime="20170809 05:20:07.303" starttime="20170809 05:20:07.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:20:07.304" starttime="20170809 05:20:07.304" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.304" starttime="20170809 05:20:07.041" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.309">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:07.309" starttime="20170809 05:20:07.308" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.309">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:07.309" starttime="20170809 05:20:07.309" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.310">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:07.310" starttime="20170809 05:20:07.310" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.311">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:07.311" starttime="20170809 05:20:07.310" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:07.488" starttime="20170809 05:20:07.311" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:07.488">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.488" starttime="20170809 05:20:07.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.489">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.489" starttime="20170809 05:20:07.489" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.490" starttime="20170809 05:20:07.489" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.490" starttime="20170809 05:20:07.307" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.490" starttime="20170809 05:20:07.307" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.490" starttime="20170809 05:20:07.306" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.491">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:20:07.491" starttime="20170809 05:20:07.490" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.493">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:07.493" starttime="20170809 05:20:07.492" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.494">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:07.494" starttime="20170809 05:20:07.494" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.494" starttime="20170809 05:20:07.493" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.494" starttime="20170809 05:20:07.492" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.494" starttime="20170809 05:20:07.491" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.602">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:07.602">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.602" starttime="20170809 05:20:07.495" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.604">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:07.604" starttime="20170809 05:20:07.604" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.605">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:07.606" starttime="20170809 05:20:07.605" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.606" starttime="20170809 05:20:07.604" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.606" starttime="20170809 05:20:07.603" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.606" starttime="20170809 05:20:07.603" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:07.606">Delete All Sessions</msg>
<status endtime="20170809 05:20:07.606" starttime="20170809 05:20:07.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.607">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.607" starttime="20170809 05:20:07.306" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.607">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.607" starttime="20170809 05:20:07.607" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.608">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:07.608">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:07.608">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:07.608" starttime="20170809 05:20:07.608" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.608">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:20:07.608" starttime="20170809 05:20:07.305" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.609">${host_state} = Running</msg>
<status endtime="20170809 05:20:07.609" starttime="20170809 05:20:07.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:20:07.609" starttime="20170809 05:20:07.609" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.614">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:07.614" starttime="20170809 05:20:07.613" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:07.615" starttime="20170809 05:20:07.614" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.615">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:07.615" starttime="20170809 05:20:07.615" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:07.616" starttime="20170809 05:20:07.615" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.803">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:07.803" starttime="20170809 05:20:07.617" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.803">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:07.803">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.803" starttime="20170809 05:20:07.616" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.804">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.804" starttime="20170809 05:20:07.803" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.805" starttime="20170809 05:20:07.804" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.805" starttime="20170809 05:20:07.613" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.805" starttime="20170809 05:20:07.612" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.805" starttime="20170809 05:20:07.612" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.806">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:20:07.806" starttime="20170809 05:20:07.805" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.811">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:07.811" starttime="20170809 05:20:07.810" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.812">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:07.812" starttime="20170809 05:20:07.812" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.813" starttime="20170809 05:20:07.811" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.813" starttime="20170809 05:20:07.807" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.813" starttime="20170809 05:20:07.806" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.900">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:07.900">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.900" starttime="20170809 05:20:07.813" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.902">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:07.902" starttime="20170809 05:20:07.901" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.903">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:07.903" starttime="20170809 05:20:07.903" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.903" starttime="20170809 05:20:07.902" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.903" starttime="20170809 05:20:07.901" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:07.903" starttime="20170809 05:20:07.900" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:07.904">Delete All Sessions</msg>
<status endtime="20170809 05:20:07.904" starttime="20170809 05:20:07.903" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.904">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:07.904" starttime="20170809 05:20:07.611" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:07.904">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:07.905" starttime="20170809 05:20:07.904" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:07.905">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:07.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:07.905">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:07.905" starttime="20170809 05:20:07.905" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.906">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:20:07.906" starttime="20170809 05:20:07.610" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:07.906">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:20:07.906" starttime="20170809 05:20:07.610" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:20:07.907">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:20:07.907" starttime="20170809 05:20:07.906" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:07.907" starttime="20170809 05:20:07.609" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:07.907" starttime="20170809 05:20:07.041" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:17.912">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:17.913" starttime="20170809 05:20:17.912" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:17.913">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:17.913" starttime="20170809 05:20:17.913" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:17.914">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:17.914" starttime="20170809 05:20:17.913" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:17.915">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:17.915" starttime="20170809 05:20:17.914" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.127">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:18.127" starttime="20170809 05:20:17.916" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.127">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:18.127">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.127" starttime="20170809 05:20:17.915" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.128">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.128" starttime="20170809 05:20:18.128" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.129" starttime="20170809 05:20:18.129" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.129" starttime="20170809 05:20:17.911" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.129" starttime="20170809 05:20:17.911" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.129" starttime="20170809 05:20:17.910" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.130">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:20:18.130" starttime="20170809 05:20:18.130" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.132">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:18.132" starttime="20170809 05:20:18.131" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.133">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:18.133" starttime="20170809 05:20:18.133" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.133" starttime="20170809 05:20:18.132" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.133" starttime="20170809 05:20:18.131" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.133" starttime="20170809 05:20:18.130" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.198">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:18.198">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.198" starttime="20170809 05:20:18.134" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.200">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:18.200" starttime="20170809 05:20:18.200" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.201">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:18.201" starttime="20170809 05:20:18.201" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.201" starttime="20170809 05:20:18.200" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.201" starttime="20170809 05:20:18.199" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.201" starttime="20170809 05:20:18.199" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:18.202">Delete All Sessions</msg>
<status endtime="20170809 05:20:18.202" starttime="20170809 05:20:18.202" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.202">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.202" starttime="20170809 05:20:17.910" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.203" starttime="20170809 05:20:18.202" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.203">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:18.203">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:18.203">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:18.204" starttime="20170809 05:20:18.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.204">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:20:18.204" starttime="20170809 05:20:17.909" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.204">${power_state} = On</msg>
<status endtime="20170809 05:20:18.204" starttime="20170809 05:20:17.909" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:20:18.205" starttime="20170809 05:20:18.204" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.205" starttime="20170809 05:20:17.908" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.209">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:18.209" starttime="20170809 05:20:18.209" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.210">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:18.210" starttime="20170809 05:20:18.210" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.211">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:18.211" starttime="20170809 05:20:18.210" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:18.211" starttime="20170809 05:20:18.211" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.415">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:18.415" starttime="20170809 05:20:18.212" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.415">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:18.415">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.415" starttime="20170809 05:20:18.211" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.416">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.416" starttime="20170809 05:20:18.415" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.416">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.416" starttime="20170809 05:20:18.416" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.417" starttime="20170809 05:20:18.208" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.417" starttime="20170809 05:20:18.207" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.417" starttime="20170809 05:20:18.207" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.417">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:20:18.417" starttime="20170809 05:20:18.417" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.419">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:18.419" starttime="20170809 05:20:18.419" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.420">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:18.420" starttime="20170809 05:20:18.420" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.421" starttime="20170809 05:20:18.420" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.421" starttime="20170809 05:20:18.418" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.421" starttime="20170809 05:20:18.418" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.512">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:18.512">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.512" starttime="20170809 05:20:18.421" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.514">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:18.514" starttime="20170809 05:20:18.513" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.515">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:18.515" starttime="20170809 05:20:18.515" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.516" starttime="20170809 05:20:18.514" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.516" starttime="20170809 05:20:18.513" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.516" starttime="20170809 05:20:18.512" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:18.516">Delete All Sessions</msg>
<status endtime="20170809 05:20:18.516" starttime="20170809 05:20:18.516" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.516">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.516" starttime="20170809 05:20:18.206" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.517" starttime="20170809 05:20:18.517" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.518">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:18.518">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:18.518">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:18.518" starttime="20170809 05:20:18.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.518">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:20:18.518" starttime="20170809 05:20:18.205" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.518">${host_state} = Running</msg>
<status endtime="20170809 05:20:18.518" starttime="20170809 05:20:18.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:20:18.519" starttime="20170809 05:20:18.519" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.523">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:18.523" starttime="20170809 05:20:18.522" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:18.524" starttime="20170809 05:20:18.523" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.524">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:18.524" starttime="20170809 05:20:18.524" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.525">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:18.525" starttime="20170809 05:20:18.525" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:18.702" starttime="20170809 05:20:18.526" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.702">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:18.702">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.702" starttime="20170809 05:20:18.525" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.703">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.703" starttime="20170809 05:20:18.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.704" starttime="20170809 05:20:18.703" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.704" starttime="20170809 05:20:18.522" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.704" starttime="20170809 05:20:18.521" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.704" starttime="20170809 05:20:18.521" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.705">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:20:18.705" starttime="20170809 05:20:18.705" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.707">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:18.707" starttime="20170809 05:20:18.707" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.708">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:18.708" starttime="20170809 05:20:18.708" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.708" starttime="20170809 05:20:18.707" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.709" starttime="20170809 05:20:18.706" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.709" starttime="20170809 05:20:18.705" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.776">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:18.776">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.776" starttime="20170809 05:20:18.709" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.778">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:18.778" starttime="20170809 05:20:18.777" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.779">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:18.779" starttime="20170809 05:20:18.779" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.779" starttime="20170809 05:20:18.778" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.779" starttime="20170809 05:20:18.777" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:18.779" starttime="20170809 05:20:18.776" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:18.780">Delete All Sessions</msg>
<status endtime="20170809 05:20:18.780" starttime="20170809 05:20:18.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.780">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:18.780" starttime="20170809 05:20:18.520" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:18.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:18.781" starttime="20170809 05:20:18.780" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:18.781">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:18.781">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:18.781">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:18.782" starttime="20170809 05:20:18.781" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.782">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:20:18.782" starttime="20170809 05:20:18.520" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:18.782">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:20:18.782" starttime="20170809 05:20:18.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:20:18.783">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:20:18.783" starttime="20170809 05:20:18.782" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:18.783" starttime="20170809 05:20:18.519" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:18.783" starttime="20170809 05:20:17.908" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:28.789">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:28.789" starttime="20170809 05:20:28.788" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:28.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:28.790" starttime="20170809 05:20:28.789" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:28.790">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:28.790" starttime="20170809 05:20:28.790" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:28.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:28.791" starttime="20170809 05:20:28.791" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:28.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:28.968" starttime="20170809 05:20:28.792" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:28.968">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:28.968">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:28.968" starttime="20170809 05:20:28.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:28.969">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:28.969" starttime="20170809 05:20:28.969" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:28.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:28.970" starttime="20170809 05:20:28.969" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:28.970" starttime="20170809 05:20:28.787" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:28.970" starttime="20170809 05:20:28.787" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:28.970" starttime="20170809 05:20:28.786" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:28.971">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:20:28.971" starttime="20170809 05:20:28.970" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:28.973">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:28.973" starttime="20170809 05:20:28.972" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:28.974">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:28.974" starttime="20170809 05:20:28.974" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:28.974" starttime="20170809 05:20:28.973" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:28.974" starttime="20170809 05:20:28.971" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:28.974" starttime="20170809 05:20:28.971" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.038">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:29.039">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.039" starttime="20170809 05:20:28.975" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.041">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:29.041" starttime="20170809 05:20:29.040" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.042">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:29.042" starttime="20170809 05:20:29.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.042" starttime="20170809 05:20:29.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.042" starttime="20170809 05:20:29.040" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.042" starttime="20170809 05:20:29.039" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:29.043">Delete All Sessions</msg>
<status endtime="20170809 05:20:29.043" starttime="20170809 05:20:29.043" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.043">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.043" starttime="20170809 05:20:28.786" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.044">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.044" starttime="20170809 05:20:29.043" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.044">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:29.044">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:29.044">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:29.045" starttime="20170809 05:20:29.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.045">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:20:29.045" starttime="20170809 05:20:28.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.045">${power_state} = On</msg>
<status endtime="20170809 05:20:29.045" starttime="20170809 05:20:28.785" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:20:29.046" starttime="20170809 05:20:29.045" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.046" starttime="20170809 05:20:28.784" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.049">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:29.050" starttime="20170809 05:20:29.049" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.050">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:29.050" starttime="20170809 05:20:29.050" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.051">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:29.051" starttime="20170809 05:20:29.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.052">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:29.052" starttime="20170809 05:20:29.051" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:29.263" starttime="20170809 05:20:29.052" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.263">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:29.263">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.263" starttime="20170809 05:20:29.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.264">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.264" starttime="20170809 05:20:29.263" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.265" starttime="20170809 05:20:29.264" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.265" starttime="20170809 05:20:29.048" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.265" starttime="20170809 05:20:29.048" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.265" starttime="20170809 05:20:29.047" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.266">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:20:29.266" starttime="20170809 05:20:29.265" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.268">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:29.268" starttime="20170809 05:20:29.267" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.270">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:29.270" starttime="20170809 05:20:29.269" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.270" starttime="20170809 05:20:29.268" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.270" starttime="20170809 05:20:29.266" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.270" starttime="20170809 05:20:29.266" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.378">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:29.378">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.378" starttime="20170809 05:20:29.270" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.380">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:29.380" starttime="20170809 05:20:29.379" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.381">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:29.381" starttime="20170809 05:20:29.380" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.381" starttime="20170809 05:20:29.380" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.381" starttime="20170809 05:20:29.379" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.381" starttime="20170809 05:20:29.378" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:29.382">Delete All Sessions</msg>
<status endtime="20170809 05:20:29.382" starttime="20170809 05:20:29.381" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.382">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.382" starttime="20170809 05:20:29.047" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.383" starttime="20170809 05:20:29.382" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.383">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:29.383">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:29.383">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:29.384" starttime="20170809 05:20:29.383" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.384">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:20:29.384" starttime="20170809 05:20:29.046" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.384">${host_state} = Running</msg>
<status endtime="20170809 05:20:29.384" starttime="20170809 05:20:29.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:20:29.385" starttime="20170809 05:20:29.384" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.388">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:29.389" starttime="20170809 05:20:29.388" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.389">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:29.389" starttime="20170809 05:20:29.389" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.390">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:29.390" starttime="20170809 05:20:29.390" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:29.391" starttime="20170809 05:20:29.390" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.570">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:29.570" starttime="20170809 05:20:29.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.570">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:29.570">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.570" starttime="20170809 05:20:29.391" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.571">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.571" starttime="20170809 05:20:29.571" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.572" starttime="20170809 05:20:29.572" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.573" starttime="20170809 05:20:29.388" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.573" starttime="20170809 05:20:29.387" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.573" starttime="20170809 05:20:29.387" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.573">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:20:29.573" starttime="20170809 05:20:29.573" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.576">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:29.576" starttime="20170809 05:20:29.575" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.577">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:29.577" starttime="20170809 05:20:29.576" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.577" starttime="20170809 05:20:29.576" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.577" starttime="20170809 05:20:29.574" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.577" starttime="20170809 05:20:29.574" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.668">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:29.668">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.668" starttime="20170809 05:20:29.577" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.670">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:29.670" starttime="20170809 05:20:29.669" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.671">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:29.671" starttime="20170809 05:20:29.670" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.671" starttime="20170809 05:20:29.670" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.671" starttime="20170809 05:20:29.669" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:29.671" starttime="20170809 05:20:29.668" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:29.672">Delete All Sessions</msg>
<status endtime="20170809 05:20:29.672" starttime="20170809 05:20:29.671" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.672">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:29.672" starttime="20170809 05:20:29.386" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:29.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:29.673" starttime="20170809 05:20:29.672" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:29.674">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:29.674">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:29.674">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:29.674" starttime="20170809 05:20:29.673" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.674">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:20:29.674" starttime="20170809 05:20:29.385" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:29.675">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:20:29.675" starttime="20170809 05:20:29.385" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:20:29.676">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:20:29.676" starttime="20170809 05:20:29.675" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:29.676" starttime="20170809 05:20:29.385" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:29.676" starttime="20170809 05:20:28.784" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:39.682">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:39.683" starttime="20170809 05:20:39.682" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:39.683">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:39.683" starttime="20170809 05:20:39.683" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:39.684">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:39.684" starttime="20170809 05:20:39.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:39.685">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:39.685" starttime="20170809 05:20:39.684" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:40.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:40.312" starttime="20170809 05:20:39.686" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:40.312">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:40.312">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:40.312" starttime="20170809 05:20:39.685" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:40.313">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:40.313" starttime="20170809 05:20:40.312" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:40.313">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:40.313" starttime="20170809 05:20:40.313" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:40.314" starttime="20170809 05:20:39.681" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:40.314" starttime="20170809 05:20:39.680" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:40.314" starttime="20170809 05:20:39.679" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:40.314">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:20:40.314" starttime="20170809 05:20:40.314" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:40.316">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:40.316" starttime="20170809 05:20:40.316" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:40.317">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:40.317" starttime="20170809 05:20:40.317" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:40.318" starttime="20170809 05:20:40.317" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:40.318" starttime="20170809 05:20:40.315" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:40.318" starttime="20170809 05:20:40.315" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:44.311">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:44.311">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:44.311" starttime="20170809 05:20:40.318" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:44.314">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:44.314" starttime="20170809 05:20:44.313" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:44.315">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:44.315" starttime="20170809 05:20:44.314" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:44.315" starttime="20170809 05:20:44.314" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:44.315" starttime="20170809 05:20:44.312" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:44.315" starttime="20170809 05:20:44.312" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:44.315">Delete All Sessions</msg>
<status endtime="20170809 05:20:44.315" starttime="20170809 05:20:44.315" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:44.316">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:44.316" starttime="20170809 05:20:39.679" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:44.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:44.316" starttime="20170809 05:20:44.316" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:44.317">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:44.317">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:44.317">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:44.317" starttime="20170809 05:20:44.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:44.317">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:20:44.317" starttime="20170809 05:20:39.678" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:44.318">${power_state} = On</msg>
<status endtime="20170809 05:20:44.318" starttime="20170809 05:20:39.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:20:44.318" starttime="20170809 05:20:44.318" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:44.318" starttime="20170809 05:20:39.677" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:44.322">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:44.322" starttime="20170809 05:20:44.322" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:44.323">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:44.323" starttime="20170809 05:20:44.323" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:44.323">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:44.323" starttime="20170809 05:20:44.323" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:44.324">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:44.324" starttime="20170809 05:20:44.324" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:45.608">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:45.608" starttime="20170809 05:20:44.325" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:45.608">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:45.608">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:45.608" starttime="20170809 05:20:44.324" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:45.609">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:45.609" starttime="20170809 05:20:45.608" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:45.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:45.610" starttime="20170809 05:20:45.609" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:45.610" starttime="20170809 05:20:44.321" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:45.610" starttime="20170809 05:20:44.321" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:45.610" starttime="20170809 05:20:44.320" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:45.611">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:20:45.611" starttime="20170809 05:20:45.610" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:45.613">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:45.613" starttime="20170809 05:20:45.612" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:45.614">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:45.614" starttime="20170809 05:20:45.614" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:45.614" starttime="20170809 05:20:45.613" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:45.615" starttime="20170809 05:20:45.611" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:45.615" starttime="20170809 05:20:45.611" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.566">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:46.567">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:46.567" starttime="20170809 05:20:45.615" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.569">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:46.569" starttime="20170809 05:20:46.568" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.570">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:46.570" starttime="20170809 05:20:46.569" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.570" starttime="20170809 05:20:46.569" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.570" starttime="20170809 05:20:46.568" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.570" starttime="20170809 05:20:46.567" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:46.570">Delete All Sessions</msg>
<status endtime="20170809 05:20:46.570" starttime="20170809 05:20:46.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:46.571">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:46.571" starttime="20170809 05:20:44.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.571">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:46.571" starttime="20170809 05:20:46.571" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.572">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:46.572">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:46.572">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:46.572" starttime="20170809 05:20:46.572" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:46.573">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:20:46.573" starttime="20170809 05:20:44.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:46.573">${host_state} = Running</msg>
<status endtime="20170809 05:20:46.573" starttime="20170809 05:20:44.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:20:46.574" starttime="20170809 05:20:46.573" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.578">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:46.578" starttime="20170809 05:20:46.578" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.579">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:46.579" starttime="20170809 05:20:46.579" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.579">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:46.580" starttime="20170809 05:20:46.579" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.583">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:46.583" starttime="20170809 05:20:46.580" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.855">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:46.856" starttime="20170809 05:20:46.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:46.856">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:46.856">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:46.856" starttime="20170809 05:20:46.584" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.856">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:46.857" starttime="20170809 05:20:46.856" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.857">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:46.857" starttime="20170809 05:20:46.857" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.857" starttime="20170809 05:20:46.577" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.857" starttime="20170809 05:20:46.577" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.858" starttime="20170809 05:20:46.576" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.858">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:20:46.858" starttime="20170809 05:20:46.858" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:46.860">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:46.860" starttime="20170809 05:20:46.860" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:46.861">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:20:46.861" starttime="20170809 05:20:46.861" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.861" starttime="20170809 05:20:46.860" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.861" starttime="20170809 05:20:46.859" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:46.862" starttime="20170809 05:20:46.858" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:47.548">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:20:47.548">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:47.548" starttime="20170809 05:20:46.862" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:47.550">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:47.550" starttime="20170809 05:20:47.550" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:47.551">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:20:47.551" starttime="20170809 05:20:47.551" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:47.552" starttime="20170809 05:20:47.551" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:47.552" starttime="20170809 05:20:47.549" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:47.552" starttime="20170809 05:20:47.549" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:20:47.552">Delete All Sessions</msg>
<status endtime="20170809 05:20:47.552" starttime="20170809 05:20:47.552" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:47.552">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:47.552" starttime="20170809 05:20:46.575" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:47.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:47.553" starttime="20170809 05:20:47.553" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:47.554">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:20:47.554">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:20:47.554">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:20:47.554" starttime="20170809 05:20:47.553" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:47.554">${state} = Off</msg>
<status endtime="20170809 05:20:47.554" starttime="20170809 05:20:46.575" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:47.554">${boot_progress} = Off</msg>
<status endtime="20170809 05:20:47.554" starttime="20170809 05:20:46.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:20:47.555">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 05:20:47.555" starttime="20170809 05:20:47.555" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:47.555" starttime="20170809 05:20:46.574" status="FAIL"></status>
</kw>
<status endtime="20170809 05:20:47.555" starttime="20170809 05:20:39.677" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:57.561">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:20:57.562" starttime="20170809 05:20:57.561" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:57.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:20:57.562" starttime="20170809 05:20:57.562" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:57.563">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:20:57.563" starttime="20170809 05:20:57.563" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:57.564">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:20:57.564" starttime="20170809 05:20:57.563" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:57.941">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:20:57.941" starttime="20170809 05:20:57.564" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:20:57.941">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:20:57.942">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:20:57.942" starttime="20170809 05:20:57.564" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:57.942">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:57.942" starttime="20170809 05:20:57.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:57.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:20:57.943" starttime="20170809 05:20:57.943" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:57.943" starttime="20170809 05:20:57.560" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:57.943" starttime="20170809 05:20:57.560" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:57.944" starttime="20170809 05:20:57.559" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:57.944">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:20:57.944" starttime="20170809 05:20:57.944" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:20:57.946">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:57.946" starttime="20170809 05:20:57.946" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:20:57.947">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:20:57.947" starttime="20170809 05:20:57.947" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:57.947" starttime="20170809 05:20:57.946" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:57.948" starttime="20170809 05:20:57.945" status="PASS"></status>
</kw>
<status endtime="20170809 05:20:57.948" starttime="20170809 05:20:57.944" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:00.156">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:00.157">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:00.157" starttime="20170809 05:20:57.948" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:00.159">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:00.159" starttime="20170809 05:21:00.159" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:00.160">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:00.160" starttime="20170809 05:21:00.160" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:00.160" starttime="20170809 05:21:00.159" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:00.160" starttime="20170809 05:21:00.158" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:00.160" starttime="20170809 05:21:00.157" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:00.161">Delete All Sessions</msg>
<status endtime="20170809 05:21:00.161" starttime="20170809 05:21:00.161" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:00.161">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:00.161" starttime="20170809 05:20:57.558" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:00.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:00.162" starttime="20170809 05:21:00.161" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:00.162">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:00.162">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:00.162">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:00.163" starttime="20170809 05:21:00.162" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:00.163">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170809 05:21:00.163" starttime="20170809 05:20:57.557" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:00.163">${power_state} = Off</msg>
<status endtime="20170809 05:21:00.163" starttime="20170809 05:20:57.557" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:21:00.164">On != Off</msg>
<status endtime="20170809 05:21:00.164" starttime="20170809 05:21:00.163" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:00.164" starttime="20170809 05:20:57.557" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:00.164" starttime="20170809 05:20:57.556" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:10.169">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:10.170" starttime="20170809 05:21:10.169" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:10.170">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:10.170" starttime="20170809 05:21:10.170" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:10.171">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:10.171" starttime="20170809 05:21:10.171" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:10.172">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:10.172" starttime="20170809 05:21:10.171" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:10.666">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:10.666" starttime="20170809 05:21:10.172" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:10.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:10.667">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:10.667" starttime="20170809 05:21:10.172" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:10.667">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:10.667" starttime="20170809 05:21:10.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:10.668">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:10.668" starttime="20170809 05:21:10.668" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:10.668" starttime="20170809 05:21:10.169" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:10.668" starttime="20170809 05:21:10.168" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:10.668" starttime="20170809 05:21:10.167" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:10.669">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:21:10.669" starttime="20170809 05:21:10.669" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:10.671">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:10.671" starttime="20170809 05:21:10.670" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:10.672">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:10.672" starttime="20170809 05:21:10.672" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:10.672" starttime="20170809 05:21:10.671" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:10.672" starttime="20170809 05:21:10.670" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:10.672" starttime="20170809 05:21:10.669" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.210">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:11.210">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:11.210" starttime="20170809 05:21:10.673" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.212">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:11.212" starttime="20170809 05:21:11.211" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.213">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:11.213" starttime="20170809 05:21:11.213" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.213" starttime="20170809 05:21:11.212" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.213" starttime="20170809 05:21:11.211" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.213" starttime="20170809 05:21:11.210" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:11.214">Delete All Sessions</msg>
<status endtime="20170809 05:21:11.214" starttime="20170809 05:21:11.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.214">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:11.214" starttime="20170809 05:21:10.167" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.215">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:11.215" starttime="20170809 05:21:11.214" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.215">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:11.215">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:11.215">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:11.215" starttime="20170809 05:21:11.215" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.216">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:21:11.216" starttime="20170809 05:21:10.166" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.216">${power_state} = On</msg>
<status endtime="20170809 05:21:11.216" starttime="20170809 05:21:10.166" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:21:11.217" starttime="20170809 05:21:11.216" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.217" starttime="20170809 05:21:10.165" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.220">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:11.221" starttime="20170809 05:21:11.220" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.222">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:11.222" starttime="20170809 05:21:11.221" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.222">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:11.222" starttime="20170809 05:21:11.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:11.223" starttime="20170809 05:21:11.222" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:11.585" starttime="20170809 05:21:11.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:11.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:11.585" starttime="20170809 05:21:11.223" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:11.586" starttime="20170809 05:21:11.586" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.587">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:11.587" starttime="20170809 05:21:11.587" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.588" starttime="20170809 05:21:11.219" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.588" starttime="20170809 05:21:11.219" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.588" starttime="20170809 05:21:11.218" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.588">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:21:11.588" starttime="20170809 05:21:11.588" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.590">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:11.590" starttime="20170809 05:21:11.590" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.591">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:11.591" starttime="20170809 05:21:11.591" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.592" starttime="20170809 05:21:11.591" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.592" starttime="20170809 05:21:11.589" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.592" starttime="20170809 05:21:11.589" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.829">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:11.829">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:11.829" starttime="20170809 05:21:11.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.831">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:11.831" starttime="20170809 05:21:11.830" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.833">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:11.833" starttime="20170809 05:21:11.832" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.833" starttime="20170809 05:21:11.831" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.833" starttime="20170809 05:21:11.830" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:11.833" starttime="20170809 05:21:11.829" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:11.834">Delete All Sessions</msg>
<status endtime="20170809 05:21:11.834" starttime="20170809 05:21:11.834" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.834">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:11.834" starttime="20170809 05:21:11.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:11.835" starttime="20170809 05:21:11.834" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.835">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:11.835">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:11.835">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:11.836" starttime="20170809 05:21:11.835" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.836">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:21:11.836" starttime="20170809 05:21:11.217" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:11.836">${host_state} = Running</msg>
<status endtime="20170809 05:21:11.836" starttime="20170809 05:21:11.217" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:21:11.837" starttime="20170809 05:21:11.836" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:11.841">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:11.841" starttime="20170809 05:21:11.841" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:11.842" starttime="20170809 05:21:11.842" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.843">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:11.843" starttime="20170809 05:21:11.842" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:11.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:11.843" starttime="20170809 05:21:11.843" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:12.019">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:12.020" starttime="20170809 05:21:11.844" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:12.020">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:12.020">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:12.020" starttime="20170809 05:21:11.844" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:12.021">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:12.021" starttime="20170809 05:21:12.020" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:12.021">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:12.022" starttime="20170809 05:21:12.021" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.022" starttime="20170809 05:21:11.840" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.022" starttime="20170809 05:21:11.840" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.022" starttime="20170809 05:21:11.839" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:12.022">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:21:12.023" starttime="20170809 05:21:12.022" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:12.025">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:12.025" starttime="20170809 05:21:12.024" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:12.026">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:12.026" starttime="20170809 05:21:12.025" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.026" starttime="20170809 05:21:12.025" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.026" starttime="20170809 05:21:12.023" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.026" starttime="20170809 05:21:12.023" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:12.104">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:12.104">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:12.104" starttime="20170809 05:21:12.026" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:12.106">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:12.106" starttime="20170809 05:21:12.106" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:12.107">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:12.107" starttime="20170809 05:21:12.107" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.107" starttime="20170809 05:21:12.106" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.108" starttime="20170809 05:21:12.105" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:12.108" starttime="20170809 05:21:12.105" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:12.108">Delete All Sessions</msg>
<status endtime="20170809 05:21:12.108" starttime="20170809 05:21:12.108" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:12.108">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:12.108" starttime="20170809 05:21:11.838" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:12.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:12.109" starttime="20170809 05:21:12.109" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:12.110">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:12.110">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:12.110">${content} = {u'status': u'ok', u'data': u'Off', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:12.110" starttime="20170809 05:21:12.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:12.110">${state} = Off</msg>
<status endtime="20170809 05:21:12.110" starttime="20170809 05:21:11.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:12.110">${boot_progress} = Off</msg>
<status endtime="20170809 05:21:12.110" starttime="20170809 05:21:11.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:21:12.111">Off != FW Progress, Starting OS</msg>
<status endtime="20170809 05:21:12.111" starttime="20170809 05:21:12.110" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:12.111" starttime="20170809 05:21:11.837" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:12.111" starttime="20170809 05:21:10.165" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.116">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:22.117" starttime="20170809 05:21:22.116" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.117">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:22.117" starttime="20170809 05:21:22.117" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.118">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:22.118" starttime="20170809 05:21:22.118" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.119">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:22.119" starttime="20170809 05:21:22.118" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.310">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:22.310" starttime="20170809 05:21:22.119" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.310">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:22.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:22.311" starttime="20170809 05:21:22.119" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.311">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:22.311" starttime="20170809 05:21:22.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:22.312" starttime="20170809 05:21:22.312" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.312" starttime="20170809 05:21:22.115" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.312" starttime="20170809 05:21:22.115" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.312" starttime="20170809 05:21:22.114" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.313">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:21:22.313" starttime="20170809 05:21:22.313" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.315">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:22.315" starttime="20170809 05:21:22.314" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.316">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:22.316" starttime="20170809 05:21:22.316" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.316" starttime="20170809 05:21:22.315" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.317" starttime="20170809 05:21:22.314" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.317" starttime="20170809 05:21:22.313" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.400">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:22.400">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:22.400" starttime="20170809 05:21:22.317" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.402">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:22.402" starttime="20170809 05:21:22.402" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.403">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:22.403" starttime="20170809 05:21:22.403" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.403" starttime="20170809 05:21:22.402" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.404" starttime="20170809 05:21:22.401" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.404" starttime="20170809 05:21:22.401" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:22.404">Delete All Sessions</msg>
<status endtime="20170809 05:21:22.404" starttime="20170809 05:21:22.404" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.404">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:22.404" starttime="20170809 05:21:22.114" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:22.405" starttime="20170809 05:21:22.405" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.406">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:22.406">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:22.406">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:22.406" starttime="20170809 05:21:22.405" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.406">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:21:22.407" starttime="20170809 05:21:22.113" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.407">${power_state} = On</msg>
<status endtime="20170809 05:21:22.407" starttime="20170809 05:21:22.113" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:21:22.407" starttime="20170809 05:21:22.407" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.407" starttime="20170809 05:21:22.112" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.411">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:22.412" starttime="20170809 05:21:22.411" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.412">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:22.412" starttime="20170809 05:21:22.412" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.413">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:22.413" starttime="20170809 05:21:22.413" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.414">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:22.414" starttime="20170809 05:21:22.413" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.643">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:22.643" starttime="20170809 05:21:22.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.643">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:22.643">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:22.643" starttime="20170809 05:21:22.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.644">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:22.644" starttime="20170809 05:21:22.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:22.645" starttime="20170809 05:21:22.644" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.645" starttime="20170809 05:21:22.410" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.645" starttime="20170809 05:21:22.410" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.645" starttime="20170809 05:21:22.409" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.646">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:21:22.646" starttime="20170809 05:21:22.645" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.648">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:22.648" starttime="20170809 05:21:22.647" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.649">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:22.649" starttime="20170809 05:21:22.648" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.649" starttime="20170809 05:21:22.648" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.649" starttime="20170809 05:21:22.646" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.649" starttime="20170809 05:21:22.646" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.748">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:22.748">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:22.748" starttime="20170809 05:21:22.649" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.750">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:22.750" starttime="20170809 05:21:22.749" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.751">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:22.751" starttime="20170809 05:21:22.750" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.751" starttime="20170809 05:21:22.750" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.751" starttime="20170809 05:21:22.749" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:22.751" starttime="20170809 05:21:22.748" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:22.752">Delete All Sessions</msg>
<status endtime="20170809 05:21:22.752" starttime="20170809 05:21:22.752" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.752">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:22.752" starttime="20170809 05:21:22.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:22.753" starttime="20170809 05:21:22.753" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.754">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:22.754">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:22.754">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:22.754" starttime="20170809 05:21:22.754" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.755">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:21:22.755" starttime="20170809 05:21:22.408" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:22.755">${host_state} = Running</msg>
<status endtime="20170809 05:21:22.755" starttime="20170809 05:21:22.408" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:21:22.756" starttime="20170809 05:21:22.756" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:22.762">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:22.762" starttime="20170809 05:21:22.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:22.763" starttime="20170809 05:21:22.763" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.764">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:22.764" starttime="20170809 05:21:22.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:22.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:22.765" starttime="20170809 05:21:22.764" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:23.465">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:23.465" starttime="20170809 05:21:22.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:23.465">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:23.465">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:23.465" starttime="20170809 05:21:22.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:23.466">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:23.466" starttime="20170809 05:21:23.466" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:23.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:23.467" starttime="20170809 05:21:23.467" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.467" starttime="20170809 05:21:22.761" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.468" starttime="20170809 05:21:22.760" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.468" starttime="20170809 05:21:22.759" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:23.469">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:21:23.469" starttime="20170809 05:21:23.468" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:23.472">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:23.472" starttime="20170809 05:21:23.471" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:23.473">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:23.473" starttime="20170809 05:21:23.473" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.474" starttime="20170809 05:21:23.472" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.474" starttime="20170809 05:21:23.470" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.474" starttime="20170809 05:21:23.469" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:23.771">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:23.771">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:23.771" starttime="20170809 05:21:23.474" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:23.773">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:23.773" starttime="20170809 05:21:23.772" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:23.774">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:23.774" starttime="20170809 05:21:23.774" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.774" starttime="20170809 05:21:23.773" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.774" starttime="20170809 05:21:23.772" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:23.775" starttime="20170809 05:21:23.771" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:23.775">Delete All Sessions</msg>
<status endtime="20170809 05:21:23.775" starttime="20170809 05:21:23.775" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:23.775">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:23.775" starttime="20170809 05:21:22.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:23.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:23.776" starttime="20170809 05:21:23.776" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:23.776">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:23.777">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:23.777">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:23.777" starttime="20170809 05:21:23.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:23.777">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:23.777" starttime="20170809 05:21:22.757" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:23.777">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:23.777" starttime="20170809 05:21:22.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:21:23.778">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:21:23.778" starttime="20170809 05:21:23.777" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:23.778" starttime="20170809 05:21:22.756" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:23.778" starttime="20170809 05:21:22.112" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:33.783">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:33.784" starttime="20170809 05:21:33.783" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:33.784">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:33.784" starttime="20170809 05:21:33.784" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:33.785">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:33.785" starttime="20170809 05:21:33.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:33.786">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:33.786" starttime="20170809 05:21:33.785" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:33.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:33.962" starttime="20170809 05:21:33.786" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:33.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:33.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:33.963" starttime="20170809 05:21:33.786" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:33.963">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:33.963" starttime="20170809 05:21:33.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:33.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:33.964" starttime="20170809 05:21:33.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:33.964" starttime="20170809 05:21:33.782" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:33.964" starttime="20170809 05:21:33.782" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:33.965" starttime="20170809 05:21:33.781" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:33.966">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:21:33.966" starttime="20170809 05:21:33.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:33.969">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:33.969" starttime="20170809 05:21:33.968" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:33.970">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:33.970" starttime="20170809 05:21:33.970" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:33.970" starttime="20170809 05:21:33.969" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:33.971" starttime="20170809 05:21:33.967" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:33.971" starttime="20170809 05:21:33.966" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.034">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:34.035">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.035" starttime="20170809 05:21:33.971" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.036">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:34.037" starttime="20170809 05:21:34.036" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.038">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:34.038" starttime="20170809 05:21:34.037" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.038" starttime="20170809 05:21:34.037" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.038" starttime="20170809 05:21:34.035" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.038" starttime="20170809 05:21:34.035" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:34.038">Delete All Sessions</msg>
<status endtime="20170809 05:21:34.039" starttime="20170809 05:21:34.038" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.039">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.039" starttime="20170809 05:21:33.781" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.039" starttime="20170809 05:21:34.039" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.040">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:34.040">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:34.040">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:34.040" starttime="20170809 05:21:34.040" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.040">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:21:34.041" starttime="20170809 05:21:33.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.041">${power_state} = On</msg>
<status endtime="20170809 05:21:34.041" starttime="20170809 05:21:33.780" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:21:34.041" starttime="20170809 05:21:34.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.041" starttime="20170809 05:21:33.779" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.045">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:34.048" starttime="20170809 05:21:34.045" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:34.049" starttime="20170809 05:21:34.049" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.050">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:34.050" starttime="20170809 05:21:34.049" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.051">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:34.051" starttime="20170809 05:21:34.050" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.286">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:34.286" starttime="20170809 05:21:34.051" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.286">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:34.286">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.287" starttime="20170809 05:21:34.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.287">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.287" starttime="20170809 05:21:34.287" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.288">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.288" starttime="20170809 05:21:34.288" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.288" starttime="20170809 05:21:34.044" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.288" starttime="20170809 05:21:34.044" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.288" starttime="20170809 05:21:34.043" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.289">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:21:34.289" starttime="20170809 05:21:34.289" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.292">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:34.292" starttime="20170809 05:21:34.291" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.293">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:34.294" starttime="20170809 05:21:34.293" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.294" starttime="20170809 05:21:34.292" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.294" starttime="20170809 05:21:34.290" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.294" starttime="20170809 05:21:34.289" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.488">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:34.489">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.489" starttime="20170809 05:21:34.294" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.491">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:34.491" starttime="20170809 05:21:34.490" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.491">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:34.492" starttime="20170809 05:21:34.491" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.492" starttime="20170809 05:21:34.491" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.492" starttime="20170809 05:21:34.489" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.492" starttime="20170809 05:21:34.489" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:34.492">Delete All Sessions</msg>
<status endtime="20170809 05:21:34.492" starttime="20170809 05:21:34.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.493">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.493" starttime="20170809 05:21:34.043" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.493" starttime="20170809 05:21:34.493" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.494">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:34.494">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:34.494">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:34.494" starttime="20170809 05:21:34.493" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.495">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:21:34.495" starttime="20170809 05:21:34.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.495">${host_state} = Running</msg>
<status endtime="20170809 05:21:34.495" starttime="20170809 05:21:34.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:21:34.496" starttime="20170809 05:21:34.495" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.502">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:34.503" starttime="20170809 05:21:34.502" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.504">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:34.504" starttime="20170809 05:21:34.503" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.505">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:34.505" starttime="20170809 05:21:34.504" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.506">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:34.506" starttime="20170809 05:21:34.505" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.712">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:34.712" starttime="20170809 05:21:34.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.712">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:34.712">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.712" starttime="20170809 05:21:34.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.713">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.713" starttime="20170809 05:21:34.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.714">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.714" starttime="20170809 05:21:34.714" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.714" starttime="20170809 05:21:34.501" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.714" starttime="20170809 05:21:34.500" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.714" starttime="20170809 05:21:34.499" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.715">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:21:34.715" starttime="20170809 05:21:34.715" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.717">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:34.717" starttime="20170809 05:21:34.716" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.718">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:34.718" starttime="20170809 05:21:34.718" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.719" starttime="20170809 05:21:34.717" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.719" starttime="20170809 05:21:34.716" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.719" starttime="20170809 05:21:34.715" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.785">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:34.785">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.785" starttime="20170809 05:21:34.719" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.787">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:34.787" starttime="20170809 05:21:34.786" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.787">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:34.788" starttime="20170809 05:21:34.787" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.788" starttime="20170809 05:21:34.787" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.788" starttime="20170809 05:21:34.786" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:34.788" starttime="20170809 05:21:34.785" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:34.788">Delete All Sessions</msg>
<status endtime="20170809 05:21:34.788" starttime="20170809 05:21:34.788" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.789">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:34.789" starttime="20170809 05:21:34.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:34.789">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:34.789" starttime="20170809 05:21:34.789" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:34.790">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:34.790">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:34.790">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:34.790" starttime="20170809 05:21:34.789" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.790">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:34.790" starttime="20170809 05:21:34.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:34.790">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:34.790" starttime="20170809 05:21:34.497" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:21:34.791">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:21:34.791" starttime="20170809 05:21:34.791" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:34.791" starttime="20170809 05:21:34.496" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:34.791" starttime="20170809 05:21:33.779" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:44.797">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:44.797" starttime="20170809 05:21:44.796" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:44.798">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:44.798" starttime="20170809 05:21:44.797" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:44.798">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:44.798" starttime="20170809 05:21:44.798" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:44.799">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:44.799" starttime="20170809 05:21:44.798" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.021">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:45.021" starttime="20170809 05:21:44.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.021">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:45.021">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.021" starttime="20170809 05:21:44.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.022">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.022" starttime="20170809 05:21:45.022" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.023" starttime="20170809 05:21:45.023" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.024" starttime="20170809 05:21:44.796" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.024" starttime="20170809 05:21:44.795" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.024" starttime="20170809 05:21:44.795" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.025">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:21:45.025" starttime="20170809 05:21:45.024" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.028">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:45.028" starttime="20170809 05:21:45.027" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.029">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:45.029" starttime="20170809 05:21:45.029" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.029" starttime="20170809 05:21:45.028" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.029" starttime="20170809 05:21:45.026" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.030" starttime="20170809 05:21:45.025" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.232">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:45.232">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.232" starttime="20170809 05:21:45.030" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.234">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:45.234" starttime="20170809 05:21:45.233" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.235">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:45.235" starttime="20170809 05:21:45.235" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.235" starttime="20170809 05:21:45.234" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.235" starttime="20170809 05:21:45.233" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.235" starttime="20170809 05:21:45.232" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:45.236">Delete All Sessions</msg>
<status endtime="20170809 05:21:45.236" starttime="20170809 05:21:45.235" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.236">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.236" starttime="20170809 05:21:44.794" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.237">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.237" starttime="20170809 05:21:45.236" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.237">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:45.237">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:45.237">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:45.237" starttime="20170809 05:21:45.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.238">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:21:45.238" starttime="20170809 05:21:44.793" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.238">${power_state} = On</msg>
<status endtime="20170809 05:21:45.238" starttime="20170809 05:21:44.793" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:21:45.238" starttime="20170809 05:21:45.238" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.239" starttime="20170809 05:21:44.793" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.242">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:45.243" starttime="20170809 05:21:45.242" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.243">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:45.243" starttime="20170809 05:21:45.243" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.244">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:45.244" starttime="20170809 05:21:45.244" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.245">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:45.245" starttime="20170809 05:21:45.244" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.629">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:45.629" starttime="20170809 05:21:45.245" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.629">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:45.629">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.629" starttime="20170809 05:21:45.245" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.630">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.630" starttime="20170809 05:21:45.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.630">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.631" starttime="20170809 05:21:45.630" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.631" starttime="20170809 05:21:45.241" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.631" starttime="20170809 05:21:45.241" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.631" starttime="20170809 05:21:45.240" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.632">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:21:45.632" starttime="20170809 05:21:45.631" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.635">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:45.635" starttime="20170809 05:21:45.634" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.636">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:45.636" starttime="20170809 05:21:45.636" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.637" starttime="20170809 05:21:45.635" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.637" starttime="20170809 05:21:45.633" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.637" starttime="20170809 05:21:45.632" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.756">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:45.756">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.756" starttime="20170809 05:21:45.637" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.758">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:45.758" starttime="20170809 05:21:45.758" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.759">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:45.759" starttime="20170809 05:21:45.759" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.759" starttime="20170809 05:21:45.758" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.760" starttime="20170809 05:21:45.757" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.760" starttime="20170809 05:21:45.757" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:45.760">Delete All Sessions</msg>
<status endtime="20170809 05:21:45.760" starttime="20170809 05:21:45.760" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.760">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.760" starttime="20170809 05:21:45.240" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.761" starttime="20170809 05:21:45.761" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.761">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:45.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:45.762">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:45.762" starttime="20170809 05:21:45.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.762">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:21:45.762" starttime="20170809 05:21:45.239" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.762">${host_state} = Running</msg>
<status endtime="20170809 05:21:45.762" starttime="20170809 05:21:45.239" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:21:45.763" starttime="20170809 05:21:45.763" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.767">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:45.767" starttime="20170809 05:21:45.767" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.768">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:45.768" starttime="20170809 05:21:45.768" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.769">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:45.769" starttime="20170809 05:21:45.768" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.769">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:45.769" starttime="20170809 05:21:45.769" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.989">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:45.989" starttime="20170809 05:21:45.770" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:45.989">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:45.989">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:45.989" starttime="20170809 05:21:45.770" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.990">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.990" starttime="20170809 05:21:45.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:45.990" starttime="20170809 05:21:45.990" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.991" starttime="20170809 05:21:45.766" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.991" starttime="20170809 05:21:45.766" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.991" starttime="20170809 05:21:45.765" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.991">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:21:45.991" starttime="20170809 05:21:45.991" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:45.994">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:45.994" starttime="20170809 05:21:45.993" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:45.995">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:45.995" starttime="20170809 05:21:45.995" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.995" starttime="20170809 05:21:45.994" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.995" starttime="20170809 05:21:45.992" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:45.995" starttime="20170809 05:21:45.992" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:46.071">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:46.071">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:46.071" starttime="20170809 05:21:45.996" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:46.073">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:46.073" starttime="20170809 05:21:46.073" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:46.074">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:46.074" starttime="20170809 05:21:46.074" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:46.075" starttime="20170809 05:21:46.073" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:46.075" starttime="20170809 05:21:46.072" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:46.075" starttime="20170809 05:21:46.072" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:46.075">Delete All Sessions</msg>
<status endtime="20170809 05:21:46.075" starttime="20170809 05:21:46.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:46.075">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:46.075" starttime="20170809 05:21:45.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:46.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:46.076" starttime="20170809 05:21:46.076" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:46.077">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:46.077">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:46.077">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:46.077" starttime="20170809 05:21:46.076" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:46.077">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:46.077" starttime="20170809 05:21:45.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:46.077">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:46.077" starttime="20170809 05:21:45.763" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:21:46.078">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:21:46.078" starttime="20170809 05:21:46.078" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:46.078" starttime="20170809 05:21:45.763" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:46.078" starttime="20170809 05:21:44.792" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.083">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:56.084" starttime="20170809 05:21:56.083" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.084">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:56.084" starttime="20170809 05:21:56.084" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.085">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:56.085" starttime="20170809 05:21:56.085" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.086">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:56.086" starttime="20170809 05:21:56.085" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.309">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:56.310" starttime="20170809 05:21:56.086" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.310">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:56.310">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.310" starttime="20170809 05:21:56.086" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.310">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.311" starttime="20170809 05:21:56.310" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.311" starttime="20170809 05:21:56.311" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.311" starttime="20170809 05:21:56.082" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.311" starttime="20170809 05:21:56.082" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.312" starttime="20170809 05:21:56.081" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.312">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:21:56.312" starttime="20170809 05:21:56.312" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.314">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:56.314" starttime="20170809 05:21:56.314" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.315">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:56.315" starttime="20170809 05:21:56.315" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.315" starttime="20170809 05:21:56.315" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.316" starttime="20170809 05:21:56.313" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.316" starttime="20170809 05:21:56.312" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.420">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:56.420">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.420" starttime="20170809 05:21:56.316" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.422">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:56.422" starttime="20170809 05:21:56.422" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.423">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:56.423" starttime="20170809 05:21:56.423" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.423" starttime="20170809 05:21:56.422" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.423" starttime="20170809 05:21:56.421" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.424" starttime="20170809 05:21:56.421" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:56.424">Delete All Sessions</msg>
<status endtime="20170809 05:21:56.424" starttime="20170809 05:21:56.424" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.424">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.424" starttime="20170809 05:21:56.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.425" starttime="20170809 05:21:56.425" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.426">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:56.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:56.426">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:56.426" starttime="20170809 05:21:56.425" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.426">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:21:56.426" starttime="20170809 05:21:56.080" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.426">${power_state} = On</msg>
<status endtime="20170809 05:21:56.426" starttime="20170809 05:21:56.080" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:21:56.427" starttime="20170809 05:21:56.427" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.427" starttime="20170809 05:21:56.079" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.431">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:56.431" starttime="20170809 05:21:56.430" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.432">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:56.432" starttime="20170809 05:21:56.432" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.433">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:56.433" starttime="20170809 05:21:56.432" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.433">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:56.433" starttime="20170809 05:21:56.433" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.689">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:56.689" starttime="20170809 05:21:56.434" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.689">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:56.689">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.689" starttime="20170809 05:21:56.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.690">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.690" starttime="20170809 05:21:56.690" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.691" starttime="20170809 05:21:56.690" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.691" starttime="20170809 05:21:56.430" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.691" starttime="20170809 05:21:56.429" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.691" starttime="20170809 05:21:56.429" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.692">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:21:56.692" starttime="20170809 05:21:56.691" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.694">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:56.694" starttime="20170809 05:21:56.693" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.695">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:21:56.695" starttime="20170809 05:21:56.695" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.695" starttime="20170809 05:21:56.694" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.695" starttime="20170809 05:21:56.693" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.695" starttime="20170809 05:21:56.692" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.792">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:56.792">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.792" starttime="20170809 05:21:56.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.794">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:56.794" starttime="20170809 05:21:56.794" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.795">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:56.795" starttime="20170809 05:21:56.795" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.795" starttime="20170809 05:21:56.794" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.795" starttime="20170809 05:21:56.793" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.795" starttime="20170809 05:21:56.793" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:56.796">Delete All Sessions</msg>
<status endtime="20170809 05:21:56.796" starttime="20170809 05:21:56.796" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.796">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.796" starttime="20170809 05:21:56.428" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.797" starttime="20170809 05:21:56.796" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.797">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:56.797">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:56.798">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:56.798" starttime="20170809 05:21:56.797" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.798">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:21:56.798" starttime="20170809 05:21:56.428" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.798">${host_state} = Running</msg>
<status endtime="20170809 05:21:56.798" starttime="20170809 05:21:56.427" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:21:56.799" starttime="20170809 05:21:56.798" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.804">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:21:56.805" starttime="20170809 05:21:56.803" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.805">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:21:56.806" starttime="20170809 05:21:56.805" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.806">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:21:56.806" starttime="20170809 05:21:56.806" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:21:56.807" starttime="20170809 05:21:56.806" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.987">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:21:56.987" starttime="20170809 05:21:56.808" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:56.987">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:21:56.987">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:56.987" starttime="20170809 05:21:56.807" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.988" starttime="20170809 05:21:56.988" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.989">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:56.989" starttime="20170809 05:21:56.988" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.989" starttime="20170809 05:21:56.802" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.989" starttime="20170809 05:21:56.802" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.989" starttime="20170809 05:21:56.801" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.990">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:21:56.990" starttime="20170809 05:21:56.990" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:56.992">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:56.992" starttime="20170809 05:21:56.991" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:56.993">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:21:56.993" starttime="20170809 05:21:56.993" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.993" starttime="20170809 05:21:56.992" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.994" starttime="20170809 05:21:56.991" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:56.994" starttime="20170809 05:21:56.990" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:57.061">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:21:57.061">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:57.061" starttime="20170809 05:21:56.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:57.063">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:57.063" starttime="20170809 05:21:57.062" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:57.064">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:21:57.064" starttime="20170809 05:21:57.064" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:57.065" starttime="20170809 05:21:57.063" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:57.065" starttime="20170809 05:21:57.062" status="PASS"></status>
</kw>
<status endtime="20170809 05:21:57.065" starttime="20170809 05:21:57.061" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:21:57.065">Delete All Sessions</msg>
<status endtime="20170809 05:21:57.065" starttime="20170809 05:21:57.065" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:57.066">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:21:57.066" starttime="20170809 05:21:56.800" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:21:57.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:21:57.066" starttime="20170809 05:21:57.066" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:21:57.067">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:21:57.067">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:21:57.067">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:21:57.067" starttime="20170809 05:21:57.067" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:57.067">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:57.067" starttime="20170809 05:21:56.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:21:57.067">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:21:57.068" starttime="20170809 05:21:56.799" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:21:57.068">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:21:57.068" starttime="20170809 05:21:57.068" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:57.068" starttime="20170809 05:21:56.799" status="FAIL"></status>
</kw>
<status endtime="20170809 05:21:57.069" starttime="20170809 05:21:56.079" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.074">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:07.074" starttime="20170809 05:22:07.073" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.075">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:07.075" starttime="20170809 05:22:07.074" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.075">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:07.075" starttime="20170809 05:22:07.075" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.076">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:07.076" starttime="20170809 05:22:07.075" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:07.336" starttime="20170809 05:22:07.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:07.337">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.337" starttime="20170809 05:22:07.076" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.337" starttime="20170809 05:22:07.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.338" starttime="20170809 05:22:07.338" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.338" starttime="20170809 05:22:07.073" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.338" starttime="20170809 05:22:07.072" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.339" starttime="20170809 05:22:07.072" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.339">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:22:07.339" starttime="20170809 05:22:07.339" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.341">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:07.341" starttime="20170809 05:22:07.341" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.342">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:07.342" starttime="20170809 05:22:07.342" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.342" starttime="20170809 05:22:07.341" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.343" starttime="20170809 05:22:07.340" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.343" starttime="20170809 05:22:07.340" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:07.407">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.407" starttime="20170809 05:22:07.343" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.409">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:07.409" starttime="20170809 05:22:07.408" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.410">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:07.410" starttime="20170809 05:22:07.409" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.410" starttime="20170809 05:22:07.409" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.410" starttime="20170809 05:22:07.408" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.410" starttime="20170809 05:22:07.407" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:07.410">Delete All Sessions</msg>
<status endtime="20170809 05:22:07.410" starttime="20170809 05:22:07.410" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.411">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.411" starttime="20170809 05:22:07.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.411" starttime="20170809 05:22:07.411" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.412">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:07.412">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:07.412">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:07.412" starttime="20170809 05:22:07.412" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.412">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:22:07.412" starttime="20170809 05:22:07.070" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.413">${power_state} = On</msg>
<status endtime="20170809 05:22:07.413" starttime="20170809 05:22:07.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:22:07.413" starttime="20170809 05:22:07.413" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.413" starttime="20170809 05:22:07.070" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.420">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:07.421" starttime="20170809 05:22:07.420" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:07.422" starttime="20170809 05:22:07.421" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.423">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:07.423" starttime="20170809 05:22:07.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:07.424" starttime="20170809 05:22:07.423" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.647">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:07.647" starttime="20170809 05:22:07.425" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.647">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:07.648">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.648" starttime="20170809 05:22:07.424" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.648">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.648" starttime="20170809 05:22:07.648" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.649">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.649" starttime="20170809 05:22:07.649" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.649" starttime="20170809 05:22:07.416" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.650" starttime="20170809 05:22:07.416" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.650" starttime="20170809 05:22:07.415" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.650">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:22:07.650" starttime="20170809 05:22:07.650" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.652">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:07.652" starttime="20170809 05:22:07.652" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.653">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:07.653" starttime="20170809 05:22:07.653" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.654" starttime="20170809 05:22:07.653" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.654" starttime="20170809 05:22:07.651" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.654" starttime="20170809 05:22:07.651" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.760">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:07.760">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.760" starttime="20170809 05:22:07.654" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.762">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:07.762" starttime="20170809 05:22:07.761" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.763">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:07.763" starttime="20170809 05:22:07.763" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.763" starttime="20170809 05:22:07.762" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.764" starttime="20170809 05:22:07.761" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.764" starttime="20170809 05:22:07.760" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:07.764">Delete All Sessions</msg>
<status endtime="20170809 05:22:07.764" starttime="20170809 05:22:07.764" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.764">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.764" starttime="20170809 05:22:07.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.765">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.765" starttime="20170809 05:22:07.765" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.766">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:07.766">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:07.766">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:07.766" starttime="20170809 05:22:07.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.766">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:22:07.766" starttime="20170809 05:22:07.414" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.767">${host_state} = Running</msg>
<status endtime="20170809 05:22:07.767" starttime="20170809 05:22:07.413" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:22:07.768" starttime="20170809 05:22:07.767" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.773">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:07.774" starttime="20170809 05:22:07.773" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.775">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:07.775" starttime="20170809 05:22:07.774" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.776">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:07.776" starttime="20170809 05:22:07.775" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.777">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:07.777" starttime="20170809 05:22:07.776" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.977">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:07.977" starttime="20170809 05:22:07.778" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:07.978">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:07.978">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:07.978" starttime="20170809 05:22:07.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.978">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.978" starttime="20170809 05:22:07.978" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:07.980" starttime="20170809 05:22:07.979" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.980" starttime="20170809 05:22:07.772" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.980" starttime="20170809 05:22:07.771" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.980" starttime="20170809 05:22:07.771" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.981">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:22:07.981" starttime="20170809 05:22:07.980" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:07.983">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:07.983" starttime="20170809 05:22:07.982" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:07.984">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:07.984" starttime="20170809 05:22:07.984" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.984" starttime="20170809 05:22:07.983" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.984" starttime="20170809 05:22:07.982" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:07.984" starttime="20170809 05:22:07.981" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:08.052">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:08.052">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:08.052" starttime="20170809 05:22:07.985" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:08.054">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:08.054" starttime="20170809 05:22:08.054" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:08.055">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:08.055" starttime="20170809 05:22:08.055" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:08.056" starttime="20170809 05:22:08.055" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:08.056" starttime="20170809 05:22:08.053" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:08.056" starttime="20170809 05:22:08.053" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:08.056">Delete All Sessions</msg>
<status endtime="20170809 05:22:08.056" starttime="20170809 05:22:08.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:08.056">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:08.056" starttime="20170809 05:22:07.770" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:08.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:08.057" starttime="20170809 05:22:08.057" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:08.058">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:08.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:08.058">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:08.058" starttime="20170809 05:22:08.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:08.058">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:08.058" starttime="20170809 05:22:07.769" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:08.058">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:08.058" starttime="20170809 05:22:07.768" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:22:08.059">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:22:08.059" starttime="20170809 05:22:08.059" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:08.059" starttime="20170809 05:22:07.768" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:08.059" starttime="20170809 05:22:07.069" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.065">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:18.066" starttime="20170809 05:22:18.065" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:18.066" starttime="20170809 05:22:18.066" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.067">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:18.067" starttime="20170809 05:22:18.067" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:18.068" starttime="20170809 05:22:18.067" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.293">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:18.293" starttime="20170809 05:22:18.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.293">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:18.293">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.293" starttime="20170809 05:22:18.068" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.294">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.294" starttime="20170809 05:22:18.294" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.295" starttime="20170809 05:22:18.295" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.295" starttime="20170809 05:22:18.064" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.295" starttime="20170809 05:22:18.063" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.295" starttime="20170809 05:22:18.063" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.296">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:22:18.296" starttime="20170809 05:22:18.296" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.299">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:18.299" starttime="20170809 05:22:18.298" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.300">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:18.300" starttime="20170809 05:22:18.299" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.300" starttime="20170809 05:22:18.299" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.300" starttime="20170809 05:22:18.297" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.300" starttime="20170809 05:22:18.296" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.365">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:18.365">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.365" starttime="20170809 05:22:18.300" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.367">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:18.367" starttime="20170809 05:22:18.366" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.368">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:18.369" starttime="20170809 05:22:18.368" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.369" starttime="20170809 05:22:18.367" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.369" starttime="20170809 05:22:18.366" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.369" starttime="20170809 05:22:18.365" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:18.369">Delete All Sessions</msg>
<status endtime="20170809 05:22:18.369" starttime="20170809 05:22:18.369" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.369">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.370" starttime="20170809 05:22:18.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.370" starttime="20170809 05:22:18.370" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.371">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:18.371">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:18.371">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:18.371" starttime="20170809 05:22:18.370" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.371">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:22:18.371" starttime="20170809 05:22:18.061" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.371">${power_state} = On</msg>
<status endtime="20170809 05:22:18.372" starttime="20170809 05:22:18.061" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:22:18.372" starttime="20170809 05:22:18.372" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.372" starttime="20170809 05:22:18.060" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.376">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:18.376" starttime="20170809 05:22:18.375" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.377">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:18.377" starttime="20170809 05:22:18.376" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.377">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:18.377" starttime="20170809 05:22:18.377" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.378">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:18.378" starttime="20170809 05:22:18.378" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.561">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:18.561" starttime="20170809 05:22:18.379" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.561">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:18.561">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.561" starttime="20170809 05:22:18.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.562">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.562" starttime="20170809 05:22:18.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.563">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.563" starttime="20170809 05:22:18.563" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.563" starttime="20170809 05:22:18.375" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.563" starttime="20170809 05:22:18.374" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.563" starttime="20170809 05:22:18.374" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.564">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:22:18.564" starttime="20170809 05:22:18.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.566">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:18.566" starttime="20170809 05:22:18.565" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.567">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:18.567" starttime="20170809 05:22:18.567" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.568" starttime="20170809 05:22:18.567" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.568" starttime="20170809 05:22:18.565" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.568" starttime="20170809 05:22:18.564" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.658">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:18.659">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.659" starttime="20170809 05:22:18.568" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.661">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:18.661" starttime="20170809 05:22:18.660" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.661">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:18.662" starttime="20170809 05:22:18.661" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.662" starttime="20170809 05:22:18.661" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.662" starttime="20170809 05:22:18.660" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.662" starttime="20170809 05:22:18.659" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:18.662">Delete All Sessions</msg>
<status endtime="20170809 05:22:18.662" starttime="20170809 05:22:18.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.663">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.663" starttime="20170809 05:22:18.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.663">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.663" starttime="20170809 05:22:18.663" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.664">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:18.664">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:18.664">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:18.664" starttime="20170809 05:22:18.663" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.664">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:22:18.664" starttime="20170809 05:22:18.373" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.665">${host_state} = Running</msg>
<status endtime="20170809 05:22:18.665" starttime="20170809 05:22:18.372" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:22:18.665" starttime="20170809 05:22:18.665" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.669">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:18.670" starttime="20170809 05:22:18.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.670">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:18.670" starttime="20170809 05:22:18.670" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.671">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:18.671" starttime="20170809 05:22:18.670" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.671">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:18.671" starttime="20170809 05:22:18.671" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:18.858" starttime="20170809 05:22:18.672" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.858">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:18.858">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.858" starttime="20170809 05:22:18.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.859">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.859" starttime="20170809 05:22:18.859" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.860">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.860" starttime="20170809 05:22:18.859" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.860" starttime="20170809 05:22:18.668" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.860" starttime="20170809 05:22:18.668" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.860" starttime="20170809 05:22:18.667" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.861">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:22:18.861" starttime="20170809 05:22:18.860" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.863">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:18.863" starttime="20170809 05:22:18.862" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.864">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:18.864" starttime="20170809 05:22:18.864" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.864" starttime="20170809 05:22:18.863" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.864" starttime="20170809 05:22:18.862" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.864" starttime="20170809 05:22:18.861" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.932">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:18.932">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.933" starttime="20170809 05:22:18.865" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.934">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:18.934" starttime="20170809 05:22:18.934" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.936">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:18.936" starttime="20170809 05:22:18.935" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.936" starttime="20170809 05:22:18.935" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.936" starttime="20170809 05:22:18.933" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:18.936" starttime="20170809 05:22:18.933" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:18.936">Delete All Sessions</msg>
<status endtime="20170809 05:22:18.937" starttime="20170809 05:22:18.936" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.937">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:18.937" starttime="20170809 05:22:18.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:18.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:18.937" starttime="20170809 05:22:18.937" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:18.938">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:18.938">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:18.938">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:18.938" starttime="20170809 05:22:18.938" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.938">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:18.938" starttime="20170809 05:22:18.666" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:18.939">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:18.939" starttime="20170809 05:22:18.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:22:18.939">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:22:18.939" starttime="20170809 05:22:18.939" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:18.940" starttime="20170809 05:22:18.666" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:18.940" starttime="20170809 05:22:18.060" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:28.945">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:28.946" starttime="20170809 05:22:28.945" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:28.946">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:28.946" starttime="20170809 05:22:28.946" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:28.947">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:28.947" starttime="20170809 05:22:28.947" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:28.948">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:28.948" starttime="20170809 05:22:28.947" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.158">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:29.158" starttime="20170809 05:22:28.948" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.158">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:29.158">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.158" starttime="20170809 05:22:28.948" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.159">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.159" starttime="20170809 05:22:29.159" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.160">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.160" starttime="20170809 05:22:29.159" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.160" starttime="20170809 05:22:28.944" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.160" starttime="20170809 05:22:28.943" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.160" starttime="20170809 05:22:28.943" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.161">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:22:29.161" starttime="20170809 05:22:29.161" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.163">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:29.163" starttime="20170809 05:22:29.162" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.164">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:29.164" starttime="20170809 05:22:29.164" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.164" starttime="20170809 05:22:29.163" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.164" starttime="20170809 05:22:29.162" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.164" starttime="20170809 05:22:29.161" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.229">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:29.229">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.229" starttime="20170809 05:22:29.165" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.231">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:29.231" starttime="20170809 05:22:29.230" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.232">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:29.232" starttime="20170809 05:22:29.232" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.232" starttime="20170809 05:22:29.231" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.232" starttime="20170809 05:22:29.229" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.232" starttime="20170809 05:22:29.229" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:29.233">Delete All Sessions</msg>
<status endtime="20170809 05:22:29.233" starttime="20170809 05:22:29.232" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.233">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.233" starttime="20170809 05:22:28.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.234" starttime="20170809 05:22:29.233" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.234">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:29.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:29.234">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:29.234" starttime="20170809 05:22:29.234" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.235">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:22:29.235" starttime="20170809 05:22:28.942" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.235">${power_state} = On</msg>
<status endtime="20170809 05:22:29.235" starttime="20170809 05:22:28.941" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:22:29.236" starttime="20170809 05:22:29.235" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.236" starttime="20170809 05:22:28.941" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.239">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:29.239" starttime="20170809 05:22:29.239" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.240">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:29.240" starttime="20170809 05:22:29.240" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.241">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:29.241" starttime="20170809 05:22:29.240" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.241">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:29.241" starttime="20170809 05:22:29.241" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.418">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:29.418" starttime="20170809 05:22:29.242" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.418">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:29.419">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.419" starttime="20170809 05:22:29.242" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.419">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.419" starttime="20170809 05:22:29.419" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.420">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.420" starttime="20170809 05:22:29.420" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.420" starttime="20170809 05:22:29.238" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.420" starttime="20170809 05:22:29.238" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.420" starttime="20170809 05:22:29.237" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.421">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:22:29.421" starttime="20170809 05:22:29.421" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.423">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:29.424" starttime="20170809 05:22:29.422" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.424">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:29.425" starttime="20170809 05:22:29.424" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.425" starttime="20170809 05:22:29.424" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.425" starttime="20170809 05:22:29.422" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.425" starttime="20170809 05:22:29.421" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.541">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:29.541">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.541" starttime="20170809 05:22:29.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.543">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:29.543" starttime="20170809 05:22:29.543" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.544">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:29.544" starttime="20170809 05:22:29.544" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.544" starttime="20170809 05:22:29.543" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.544" starttime="20170809 05:22:29.542" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.545" starttime="20170809 05:22:29.542" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:29.545">Delete All Sessions</msg>
<status endtime="20170809 05:22:29.545" starttime="20170809 05:22:29.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.545">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.545" starttime="20170809 05:22:29.237" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.546">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.546" starttime="20170809 05:22:29.546" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.546">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:29.547">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:29.547">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:29.547" starttime="20170809 05:22:29.546" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.547">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:22:29.547" starttime="20170809 05:22:29.236" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.547">${host_state} = Running</msg>
<status endtime="20170809 05:22:29.547" starttime="20170809 05:22:29.236" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:22:29.548" starttime="20170809 05:22:29.548" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.553">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:29.553" starttime="20170809 05:22:29.552" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.554">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:29.554" starttime="20170809 05:22:29.553" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.555">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:29.556" starttime="20170809 05:22:29.555" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.556">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:29.556" starttime="20170809 05:22:29.556" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.771">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:29.772" starttime="20170809 05:22:29.557" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:29.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.772" starttime="20170809 05:22:29.556" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.772">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.773" starttime="20170809 05:22:29.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.773" starttime="20170809 05:22:29.773" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.773" starttime="20170809 05:22:29.551" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.773" starttime="20170809 05:22:29.550" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.774" starttime="20170809 05:22:29.550" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.774">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:22:29.774" starttime="20170809 05:22:29.774" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.776">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:29.776" starttime="20170809 05:22:29.776" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.777">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:29.777" starttime="20170809 05:22:29.777" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.777" starttime="20170809 05:22:29.776" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.778" starttime="20170809 05:22:29.775" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.778" starttime="20170809 05:22:29.774" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.845">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:29.845">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.845" starttime="20170809 05:22:29.778" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.847">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:29.847" starttime="20170809 05:22:29.847" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.848">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:29.848" starttime="20170809 05:22:29.848" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.848" starttime="20170809 05:22:29.847" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.848" starttime="20170809 05:22:29.846" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:29.848" starttime="20170809 05:22:29.846" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:29.849">Delete All Sessions</msg>
<status endtime="20170809 05:22:29.849" starttime="20170809 05:22:29.849" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.849">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:29.849" starttime="20170809 05:22:29.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:29.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:29.850" starttime="20170809 05:22:29.850" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:29.850">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:29.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:29.851">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:29.851" starttime="20170809 05:22:29.850" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.851">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:29.851" starttime="20170809 05:22:29.549" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:29.851">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:29.851" starttime="20170809 05:22:29.548" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:22:29.852">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:22:29.852" starttime="20170809 05:22:29.851" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:29.852" starttime="20170809 05:22:29.548" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:29.852" starttime="20170809 05:22:28.940" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:39.858">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:39.858" starttime="20170809 05:22:39.857" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:39.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:39.859" starttime="20170809 05:22:39.858" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:39.859">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:39.859" starttime="20170809 05:22:39.859" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:39.860">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:39.860" starttime="20170809 05:22:39.860" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.174">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:40.174" starttime="20170809 05:22:39.861" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.174">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:40.174">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.175" starttime="20170809 05:22:39.860" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.175">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.175" starttime="20170809 05:22:40.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.176">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.176" starttime="20170809 05:22:40.176" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.176" starttime="20170809 05:22:39.857" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.176" starttime="20170809 05:22:39.856" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.176" starttime="20170809 05:22:39.855" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.177">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170809 05:22:40.177" starttime="20170809 05:22:40.177" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.179">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:40.179" starttime="20170809 05:22:40.179" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.180">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:40.180" starttime="20170809 05:22:40.180" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.180" starttime="20170809 05:22:40.179" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.180" starttime="20170809 05:22:40.178" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.181" starttime="20170809 05:22:40.177" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.263">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:40.263">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.263" starttime="20170809 05:22:40.181" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.268">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:40.268" starttime="20170809 05:22:40.264" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.269">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:40.269" starttime="20170809 05:22:40.269" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.269" starttime="20170809 05:22:40.268" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.269" starttime="20170809 05:22:40.264" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.270" starttime="20170809 05:22:40.263" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:40.270">Delete All Sessions</msg>
<status endtime="20170809 05:22:40.270" starttime="20170809 05:22:40.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.270">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.271" starttime="20170809 05:22:39.855" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.272" starttime="20170809 05:22:40.271" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.272">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:40.272">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:40.273">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:40.273" starttime="20170809 05:22:40.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.273">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170809 05:22:40.273" starttime="20170809 05:22:39.854" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.274">${power_state} = On</msg>
<status endtime="20170809 05:22:40.274" starttime="20170809 05:22:39.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170809 05:22:40.274" starttime="20170809 05:22:40.274" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.275" starttime="20170809 05:22:39.853" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.279">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:40.279" starttime="20170809 05:22:40.279" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:40.280" starttime="20170809 05:22:40.280" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.281">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:40.281" starttime="20170809 05:22:40.280" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.281">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:40.281" starttime="20170809 05:22:40.281" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.480">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:40.480" starttime="20170809 05:22:40.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.480">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:40.480">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.480" starttime="20170809 05:22:40.282" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.481">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.481" starttime="20170809 05:22:40.480" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.482" starttime="20170809 05:22:40.481" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.482" starttime="20170809 05:22:40.278" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.482" starttime="20170809 05:22:40.278" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.482" starttime="20170809 05:22:40.277" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.482">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:22:40.482" starttime="20170809 05:22:40.482" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.485">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:40.485" starttime="20170809 05:22:40.484" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.486">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:40.486" starttime="20170809 05:22:40.486" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.486" starttime="20170809 05:22:40.485" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.486" starttime="20170809 05:22:40.483" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.486" starttime="20170809 05:22:40.483" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.579">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:40.579">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.579" starttime="20170809 05:22:40.487" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.581">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:40.581" starttime="20170809 05:22:40.581" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.582">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:40.582" starttime="20170809 05:22:40.582" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.582" starttime="20170809 05:22:40.581" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.582" starttime="20170809 05:22:40.580" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.582" starttime="20170809 05:22:40.580" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:40.583">Delete All Sessions</msg>
<status endtime="20170809 05:22:40.583" starttime="20170809 05:22:40.583" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.583">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.583" starttime="20170809 05:22:40.276" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.584" starttime="20170809 05:22:40.583" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.584">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:40.584">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:40.585">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:40.585" starttime="20170809 05:22:40.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.585">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:22:40.585" starttime="20170809 05:22:40.276" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.585">${host_state} = Running</msg>
<status endtime="20170809 05:22:40.585" starttime="20170809 05:22:40.275" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170809 05:22:40.586" starttime="20170809 05:22:40.585" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.590">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:40.590" starttime="20170809 05:22:40.589" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.590">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:40.591" starttime="20170809 05:22:40.590" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.591">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:40.591" starttime="20170809 05:22:40.591" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.592">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:40.592" starttime="20170809 05:22:40.591" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.791">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:40.792" starttime="20170809 05:22:40.592" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:40.792">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.792" starttime="20170809 05:22:40.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.792">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.793" starttime="20170809 05:22:40.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.793" starttime="20170809 05:22:40.793" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.793" starttime="20170809 05:22:40.589" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.793" starttime="20170809 05:22:40.588" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.794" starttime="20170809 05:22:40.588" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.794">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170809 05:22:40.794" starttime="20170809 05:22:40.794" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.796">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:40.796" starttime="20170809 05:22:40.796" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.797">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170809 05:22:40.797" starttime="20170809 05:22:40.797" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.798" starttime="20170809 05:22:40.797" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.798" starttime="20170809 05:22:40.795" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.798" starttime="20170809 05:22:40.795" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.903">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:40.904">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.904" starttime="20170809 05:22:40.798" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.905">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:40.906" starttime="20170809 05:22:40.905" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.907">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:40.907" starttime="20170809 05:22:40.907" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.907" starttime="20170809 05:22:40.906" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.907" starttime="20170809 05:22:40.904" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:40.907" starttime="20170809 05:22:40.904" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:40.908">Delete All Sessions</msg>
<status endtime="20170809 05:22:40.908" starttime="20170809 05:22:40.907" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.908">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:40.908" starttime="20170809 05:22:40.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:40.909" starttime="20170809 05:22:40.908" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.909">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:40.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:40.909">${content} = {u'status': u'ok', u'data': u'FW Progress, Baseboard Init', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:40.909" starttime="20170809 05:22:40.909" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.910">${state} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:40.910" starttime="20170809 05:22:40.587" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:40.910">${boot_progress} = FW Progress, Baseboard Init</msg>
<status endtime="20170809 05:22:40.910" starttime="20170809 05:22:40.586" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:22:40.910">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:22:40.910" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:22:40.586" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:22:39.853" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170809 05:22:40.911">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:12:38.887" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:12:38.276" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:12:30.165" status="FAIL"></status>
</kw>
<status endtime="20170809 05:22:40.911" starttime="20170809 05:12:30.165" status="FAIL"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:40.917">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:40.917" starttime="20170809 05:22:40.917" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.918">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:40.918" starttime="20170809 05:22:40.918" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.918">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:40.918" starttime="20170809 05:22:40.918" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:40.919">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:40.919" starttime="20170809 05:22:40.919" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.175">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:41.175" starttime="20170809 05:22:40.920" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:41.175">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:41.175">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:41.175" starttime="20170809 05:22:40.919" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.176">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:41.176" starttime="20170809 05:22:41.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:41.177" starttime="20170809 05:22:41.176" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.177" starttime="20170809 05:22:40.916" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.177" starttime="20170809 05:22:40.915" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.177" starttime="20170809 05:22:40.914" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:41.178">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170809 05:22:41.178" starttime="20170809 05:22:41.177" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:41.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:41.181" starttime="20170809 05:22:41.180" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.182">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170809 05:22:41.182" starttime="20170809 05:22:41.182" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.183" starttime="20170809 05:22:41.181" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.183" starttime="20170809 05:22:41.179" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.183" starttime="20170809 05:22:41.178" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:41.313">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:41.313">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:41.313" starttime="20170809 05:22:41.183" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:41.315">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:41.315" starttime="20170809 05:22:41.315" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170809 05:22:41.317" starttime="20170809 05:22:41.316" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.317" starttime="20170809 05:22:41.316" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.317" starttime="20170809 05:22:41.314" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:41.317" starttime="20170809 05:22:41.314" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:41.318">Delete All Sessions</msg>
<status endtime="20170809 05:22:41.318" starttime="20170809 05:22:41.317" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:41.318">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:41.318" starttime="20170809 05:22:40.914" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:41.319" starttime="20170809 05:22:41.318" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:41.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:41.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:41.319">${content} = {u'status': u'ok', u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:41.319" starttime="20170809 05:22:41.319" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:41.320">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170809 05:22:41.320" starttime="20170809 05:22:40.913" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:41.320">${host_state} = Running</msg>
<status endtime="20170809 05:22:41.320" starttime="20170809 05:22:40.913" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:22:41.321">Running != Quiesced</msg>
<status endtime="20170809 05:22:41.321" starttime="20170809 05:22:41.321" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:41.321">${status} = False</msg>
<status endtime="20170809 05:22:41.321" starttime="20170809 05:22:41.320" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:41.321">${status} = False</msg>
<status endtime="20170809 05:22:41.321" starttime="20170809 05:22:40.913" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:41.357">Length is 10</msg>
<status endtime="20170809 05:22:41.358" starttime="20170809 05:22:41.357" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:41.370">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:22:44.371">${RC} = 0</msg>
<msg level="INFO" timestamp="20170809 05:22:44.371">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.631 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status endtime="20170809 05:22:44.371" starttime="20170809 05:22:41.358" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.374">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.728 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.631 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.607 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.627 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.607/0.648/0.728/0.050 ms</msg>
<status endtime="20170809 05:22:44.374" starttime="20170809 05:22:44.373" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170809 05:22:44.375" starttime="20170809 05:22:44.374" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.375" starttime="20170809 05:22:41.356" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.393">${cur_time} = 2017-08-09 05:22:44:392304</msg>
<status endtime="20170809 05:22:44.393" starttime="20170809 05:22:44.392" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.393">${cur_time} = 20170809052244392304</msg>
<status endtime="20170809 05:22:44.393" starttime="20170809 05:22:44.393" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.393" starttime="20170809 05:22:44.391" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.394">${FFDC_TIME} = 20170809052244392304</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.406">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170809 05:22:44.406" starttime="20170809 05:22:44.404" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.406">${suite_name} = 20170809052244392304_TestsTestBasicPoweron</msg>
<status endtime="20170809 05:22:44.406" starttime="20170809 05:22:44.406" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.407">${test_name} = PowerOnTest</msg>
<status endtime="20170809 05:22:44.407" starttime="20170809 05:22:44.407" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.408">${test_name} = 20170809052244392304_PowerOnTest</msg>
<status endtime="20170809 05:22:44.408" starttime="20170809 05:22:44.407" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.408" starttime="20170809 05:22:44.403" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.408">${FFDC_DIR_PATH} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170809 05:22:44.409">${FFDC_PREFIX} = 20170809052244392304_</msg>
<msg level="INFO" timestamp="20170809 05:22:44.438">${LOG_PREFIX} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.440">Created directory '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.440" starttime="20170809 05:22:44.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.444">${FFDC_FILE_PATH} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.474">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.474" starttime="20170809 05:22:44.473" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.474" starttime="20170809 05:22:44.473" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.475">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.475" starttime="20170809 05:22:44.475" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.476" starttime="20170809 05:22:44.474" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.477">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.477" starttime="20170809 05:22:44.476" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.477" starttime="20170809 05:22:44.476" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.478">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.478" starttime="20170809 05:22:44.478" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.478" starttime="20170809 05:22:44.477" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.480">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.480" starttime="20170809 05:22:44.479" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.480" starttime="20170809 05:22:44.479" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.483">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.483" starttime="20170809 05:22:44.482" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.483" starttime="20170809 05:22:44.480" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.484">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.484" starttime="20170809 05:22:44.484" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.484" starttime="20170809 05:22:44.483" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.485">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.486" starttime="20170809 05:22:44.485" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.486" starttime="20170809 05:22:44.484" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.487">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.487" starttime="20170809 05:22:44.486" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.487" starttime="20170809 05:22:44.486" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.490">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.490" starttime="20170809 05:22:44.489" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.490" starttime="20170809 05:22:44.487" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.491">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.491" starttime="20170809 05:22:44.491" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.491" starttime="20170809 05:22:44.490" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.493">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.493" starttime="20170809 05:22:44.492" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.493" starttime="20170809 05:22:44.492" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.494">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.494" starttime="20170809 05:22:44.494" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.494" starttime="20170809 05:22:44.493" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.535">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:44.536">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 05:22:44.664">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 05:22:44.680">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 05:22:44.680">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 05:22:44.680">${rc} = 0</msg>
<status endtime="20170809 05:22:44.680" starttime="20170809 05:22:44.495" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.681">Length is 0</msg>
<status endtime="20170809 05:22:44.681" starttime="20170809 05:22:44.681" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.681">Length is 11</msg>
<status endtime="20170809 05:22:44.682" starttime="20170809 05:22:44.681" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.682">${model_name} = Witherspoon</msg>
<status endtime="20170809 05:22:44.682" starttime="20170809 05:22:44.494" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.683">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.683" starttime="20170809 05:22:44.683" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.683" starttime="20170809 05:22:44.682" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.683" starttime="20170809 05:22:44.487" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.685">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.685" starttime="20170809 05:22:44.684" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.685" starttime="20170809 05:22:44.684" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.685">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170809 05:22:44.685" starttime="20170809 05:22:44.685" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.687">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.687" starttime="20170809 05:22:44.687" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.687" starttime="20170809 05:22:44.686" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.688">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.688" starttime="20170809 05:22:44.688" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.688" starttime="20170809 05:22:44.687" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.688" starttime="20170809 05:22:44.686" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.690">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.690" starttime="20170809 05:22:44.689" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.690" starttime="20170809 05:22:44.689" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.691">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.692" starttime="20170809 05:22:44.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.692" starttime="20170809 05:22:44.691" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.692" starttime="20170809 05:22:44.689" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.694">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.694" starttime="20170809 05:22:44.694" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.694" starttime="20170809 05:22:44.692" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.695">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.695" starttime="20170809 05:22:44.695" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.695" starttime="20170809 05:22:44.694" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.695" starttime="20170809 05:22:44.692" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.696" starttime="20170809 05:22:44.685" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:44.697">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:44.697" starttime="20170809 05:22:44.696" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.697" starttime="20170809 05:22:44.696" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.697" starttime="20170809 05:22:44.472" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.709">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170809 05:22:44.709" starttime="20170809 05:22:44.709" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.710">@{method_list} = [ ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') |...</msg>
<status endtime="20170809 05:22:44.710" starttime="20170809 05:22:44.710" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170809 05:22:44.711" starttime="20170809 05:22:44.711" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.711">@{ffdc_function_list} = [ SEL Log | Core Files | OS FFDC | FFDC Generic Report | Get Request FFDC | BMC Specific Files ]</msg>
<status endtime="20170809 05:22:44.711" starttime="20170809 05:22:44.710" status="PASS"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 05:22:44.715" starttime="20170809 05:22:44.715" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.715">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:44.715">${ret_values} = None</msg>
<status endtime="20170809 05:22:44.715" starttime="20170809 05:22:44.714" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 05:22:44.716" starttime="20170809 05:22:44.715" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.768">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:44.769" starttime="20170809 05:22:44.768" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:44.770" starttime="20170809 05:22:44.769" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.771">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:44.771" starttime="20170809 05:22:44.770" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:44.772" starttime="20170809 05:22:44.771" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.963">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:44.963" starttime="20170809 05:22:44.773" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:44.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:44.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:44.963" starttime="20170809 05:22:44.772" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.964">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:44.964" starttime="20170809 05:22:44.963" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:44.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:44.964" starttime="20170809 05:22:44.964" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.965" starttime="20170809 05:22:44.767" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.965" starttime="20170809 05:22:44.764" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:44.965" starttime="20170809 05:22:44.763" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:44.965">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170809 05:22:44.965" starttime="20170809 05:22:44.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:44.966" starttime="20170809 05:22:44.966" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.271">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:45.271">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.271" starttime="20170809 05:22:44.966" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:45.272" starttime="20170809 05:22:45.271" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:45.273">Delete All Sessions</msg>
<status endtime="20170809 05:22:45.273" starttime="20170809 05:22:45.272" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.273">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.273" starttime="20170809 05:22:44.762" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.274">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.274" starttime="20170809 05:22:45.274" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.274">${status} = True</msg>
<status endtime="20170809 05:22:45.274" starttime="20170809 05:22:45.273" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170809 05:22:45.275" starttime="20170809 05:22:45.274" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.276">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 80 f5 08 00 00 00 00 9f ac a5 80 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 00 7d 38 84 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 96 e5 16 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 98 0f bf 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 99 28 07 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 99 2f 3b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 99 3d d5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 99 47 f9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 9b 0d e6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 9b 17 f2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 9b 34 96 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9b 7c ee 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 9b 87 4c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 00 9c c8 2d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 9c d2 9d 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 9d 19 75 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9d 24 18 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 00 9d 2d 9a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 00 9e a6 bf 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 9e ae ea 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d 81 d2 6c 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d 81 da b1 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 00 7d 38 84 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 96 e5 16 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 98 0f bf 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 99 28 07 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 99 2f 3b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 99 3d d5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 99 47 f9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 9b 0d e6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 9b 17 f2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 9b 34 96 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9b 7c ee 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 9b 87 4c"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502256088606, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502254632497, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255269631, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 6a 2a a5 00 00 00 00 d1 95 0c 4f 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 17 37 5f 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 50 f5 62 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 52 22 04 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 53 3c 77 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 53 43 c8 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 53 53 0e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 53 5d ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 55 1f 6e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 55 29 65 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 55 46 cc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 55 91 25 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 55 9b 2a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 17 56 da ce 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 56 e4 da 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 2c 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 57 36 a9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 17 57 3f fc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 17 58 bc e0 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 58 c5 29 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 33 62 8c 93 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 33 62 94 8a 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 17 37 5f 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 50 f5 62 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 52 22 04 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 53 3c 77 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 53 43 c8 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 53 53 0e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 53 5d ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 55 1f 6e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 55 29 65 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 55 46 cc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 55 91 25 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 55 9b 2a"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255596282, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255713901, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f8 d2 79 00 00 00 00 a1 26 68 39 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 03 ab bc 67 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 c5 7c 13 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 c6 a8 72 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c7 c0 24 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 c7 c8 01 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 c7 d6 88 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 c7 e0 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 c9 a3 2e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 c9 ad 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c9 ca 7c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 ca 13 66 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 ca 24 fa 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 cb 5f 09 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 cb 69 44 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 cb b1 2c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 cb bb 6f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 cb c4 b2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 cd 42 8a 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 cd 4a c5 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 5f ee 93 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 5f f7 76 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 03 ab bc 67 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 c5 7c 13 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 c6 a8 72 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c7 c0 24 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 c7 c8 01 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 c7 d6 88 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 c7 e0 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 c9 a3 2e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 c9 ad 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c9 ca 7c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 ca 13 66 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 ca 24 fa"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255762038, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255879814, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 48 f5 6e 00 00 00 00 a0 74 1e 69 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 33 f1 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 4d 98 53 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 4e cb eb 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 4f ec d0 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 4f f3 ec 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 50 02 cf 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 50 0d 83 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 51 d0 47 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 51 db 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 51 f7 f0 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 52 42 4b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 52 53 0c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 53 8d 9b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 53 98 69 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 53 de 77 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 53 e9 29 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 53 f2 89 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 55 6d bb 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 55 75 f7 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 08 71 aa 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 08 7a a1 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255924226, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502256042315, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:45.277">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:45.278">${content} = {u'status': u'ok', u'data': {u'/xyz/openbmc_project/logging/entry/10': {u'Timestamp': 1502256088606, u'Id': 10, u'Resolved': 0, u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Additio...</msg>
<status endtime="20170809 05:22:45.278" starttime="20170809 05:22:45.275" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.278">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/4', u'/xyz/openbmc_project/logging/ent...</msg>
<status endtime="20170809 05:22:45.278" starttime="20170809 05:22:45.278" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.279">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel</msg>
<status endtime="20170809 05:22:45.279" starttime="20170809 05:22:45.279" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:45.280">Created file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:45.280" starttime="20170809 05:22:45.279" status="PASS"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/10">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:45.281" starttime="20170809 05:22:45.280" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.284">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:45.285" starttime="20170809 05:22:45.284" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.285">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:45.285" starttime="20170809 05:22:45.285" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.286">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:45.286" starttime="20170809 05:22:45.285" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.286">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:45.286" starttime="20170809 05:22:45.286" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.516">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:45.516" starttime="20170809 05:22:45.287" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:45.516">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.516" starttime="20170809 05:22:45.287" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.517">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.517" starttime="20170809 05:22:45.517" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.518">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.518" starttime="20170809 05:22:45.517" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.518" starttime="20170809 05:22:45.283" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.518" starttime="20170809 05:22:45.283" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.518" starttime="20170809 05:22:45.282" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.519">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170809 05:22:45.519" starttime="20170809 05:22:45.518" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:45.520" starttime="20170809 05:22:45.519" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.615">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:45.615">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.615" starttime="20170809 05:22:45.520" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:45.616" starttime="20170809 05:22:45.615" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:45.616">Delete All Sessions</msg>
<status endtime="20170809 05:22:45.616" starttime="20170809 05:22:45.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.616">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.616" starttime="20170809 05:22:45.282" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.617" starttime="20170809 05:22:45.617" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.618">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 80 f5 08 00 00 00 00 9f ac a5 80 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 00 7d 38 84 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 96 e5 16 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 98 0f bf 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 99 28 07 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 99 2f 3b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 99 3d d5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 99 47 f9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 9b 0d e6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 9b 17 f2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 9b 34 96 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9b 7c ee 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 9b 87 4c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 00 9c c8 2d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 9c d2 9d 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 9d 19 75 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9d 24 18 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 00 9d 2d 9a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 00 9e a6 bf 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 9e ae ea 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d 81 d2 6c 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d 81 da b1 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 00 7d 38 84 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 96 e5 16 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 98 0f bf 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 99 28 07 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 99 2f 3b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 99 3d d5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 99 47 f9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 9b 0d e6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 9b 17 f2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 9b 34 96 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9b 7c ee 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 9b 87 4c"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:45.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:45.618">${content} = {u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00...</msg>
<status endtime="20170809 05:22:45.618" starttime="20170809 05:22:45.617" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.619">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 80 f5 08 00 00 ...</msg>
<status endtime="20170809 05:22:45.619" starttime="20170809 05:22:45.281" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.619">Length is 2</msg>
<msg level="INFO" timestamp="20170809 05:22:45.619">${length} = 2</msg>
<status endtime="20170809 05:22:45.619" starttime="20170809 05:22:45.619" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 05:22:45.620" starttime="20170809 05:22:45.619" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.620">${index} = 1</msg>
<status endtime="20170809 05:22:45.620" starttime="20170809 05:22:45.620" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:45.622">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:45.622" starttime="20170809 05:22:45.621" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.622" starttime="20170809 05:22:45.620" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:45.623">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:45.623" starttime="20170809 05:22:45.623" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.623" starttime="20170809 05:22:45.622" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.623" starttime="20170809 05:22:45.280" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:45.624" starttime="20170809 05:22:45.624" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.628">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:45.631" starttime="20170809 05:22:45.627" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:45.632" starttime="20170809 05:22:45.631" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.632">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:45.632" starttime="20170809 05:22:45.632" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:45.633" starttime="20170809 05:22:45.633" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.904">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:45.904" starttime="20170809 05:22:45.634" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.904">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:45.904">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.904" starttime="20170809 05:22:45.633" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.905">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.905" starttime="20170809 05:22:45.905" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.906" starttime="20170809 05:22:45.905" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.906" starttime="20170809 05:22:45.627" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.906" starttime="20170809 05:22:45.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.906" starttime="20170809 05:22:45.625" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.907">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170809 05:22:45.907" starttime="20170809 05:22:45.906" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:45.907" starttime="20170809 05:22:45.907" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.990">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:45.990">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.990" starttime="20170809 05:22:45.908" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:45.991" starttime="20170809 05:22:45.990" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:45.991">Delete All Sessions</msg>
<status endtime="20170809 05:22:45.991" starttime="20170809 05:22:45.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.991">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:45.992" starttime="20170809 05:22:45.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:45.992" starttime="20170809 05:22:45.992" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.993">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:45.993">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:45.993">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:45.993" starttime="20170809 05:22:45.992" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:45.993">${esel_data} = []</msg>
<status endtime="20170809 05:22:45.993" starttime="20170809 05:22:45.624" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:45.994">Length is 0</msg>
<msg level="INFO" timestamp="20170809 05:22:45.994">${length} = 0</msg>
<status endtime="20170809 05:22:45.994" starttime="20170809 05:22:45.994" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.994">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:45.995" starttime="20170809 05:22:45.994" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:45.995" starttime="20170809 05:22:45.623" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:45.995" starttime="20170809 05:22:45.995" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:45.999">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:46.030" starttime="20170809 05:22:45.998" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:46.031" starttime="20170809 05:22:46.031" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.032">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:46.032" starttime="20170809 05:22:46.031" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.033">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:46.033" starttime="20170809 05:22:46.032" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.276">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:46.276" starttime="20170809 05:22:46.033" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.276">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:46.276">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.277" starttime="20170809 05:22:46.033" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.277">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.277" starttime="20170809 05:22:46.277" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.278" starttime="20170809 05:22:46.277" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.278" starttime="20170809 05:22:45.998" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.278" starttime="20170809 05:22:45.998" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.278" starttime="20170809 05:22:45.997" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.279">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170809 05:22:46.279" starttime="20170809 05:22:46.279" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:46.280" starttime="20170809 05:22:46.279" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.385">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:46.386">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.386" starttime="20170809 05:22:46.280" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:46.386" starttime="20170809 05:22:46.386" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:46.387">Delete All Sessions</msg>
<status endtime="20170809 05:22:46.387" starttime="20170809 05:22:46.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.387">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.387" starttime="20170809 05:22:45.996" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.388" starttime="20170809 05:22:46.387" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.388">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:46.388">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:46.389">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:46.389" starttime="20170809 05:22:46.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.389">${esel_data} = []</msg>
<status endtime="20170809 05:22:46.389" starttime="20170809 05:22:45.996" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.389">Length is 0</msg>
<msg level="INFO" timestamp="20170809 05:22:46.389">${length} = 0</msg>
<status endtime="20170809 05:22:46.390" starttime="20170809 05:22:46.389" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.390">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:46.390" starttime="20170809 05:22:46.390" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.390" starttime="20170809 05:22:45.995" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/4">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:46.391" starttime="20170809 05:22:46.391" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.396">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:46.396" starttime="20170809 05:22:46.395" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:46.397" starttime="20170809 05:22:46.396" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.398">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:46.398" starttime="20170809 05:22:46.397" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:46.399" starttime="20170809 05:22:46.398" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.608">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:46.608" starttime="20170809 05:22:46.400" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.609">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:46.609">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.609" starttime="20170809 05:22:46.400" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.609">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.609" starttime="20170809 05:22:46.609" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.610">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.610" starttime="20170809 05:22:46.610" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.610" starttime="20170809 05:22:46.394" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.610" starttime="20170809 05:22:46.394" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.611" starttime="20170809 05:22:46.393" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.611">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170809 05:22:46.611" starttime="20170809 05:22:46.611" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:46.612" starttime="20170809 05:22:46.611" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.699">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:46.700">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.700" starttime="20170809 05:22:46.612" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:46.701" starttime="20170809 05:22:46.700" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:46.701">Delete All Sessions</msg>
<status endtime="20170809 05:22:46.701" starttime="20170809 05:22:46.701" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.701">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.701" starttime="20170809 05:22:46.392" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.702">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.702" starttime="20170809 05:22:46.702" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.703">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 6a 2a a5 00 00 00 00 d1 95 0c 4f 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 17 37 5f 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 50 f5 62 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 52 22 04 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 53 3c 77 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 53 43 c8 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 53 53 0e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 53 5d ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 55 1f 6e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 55 29 65 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 55 46 cc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 55 91 25 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 55 9b 2a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 17 56 da ce 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 56 e4 da 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 2c 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 57 36 a9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 17 57 3f fc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 17 58 bc e0 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 58 c5 29 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 33 62 8c 93 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 33 62 94 8a 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 17 37 5f 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 50 f5 62 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 52 22 04 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 53 3c 77 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 53 43 c8 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 53 53 0e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 53 5d ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 55 1f 6e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 55 29 65 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 55 46 cc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 55 91 25 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 55 9b 2a"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:46.703">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:46.704">${content} = {u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00...</msg>
<status endtime="20170809 05:22:46.704" starttime="20170809 05:22:46.703" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.704">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 6a 2a a5 00 00 ...</msg>
<status endtime="20170809 05:22:46.704" starttime="20170809 05:22:46.391" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.705">Length is 2</msg>
<msg level="INFO" timestamp="20170809 05:22:46.705">${length} = 2</msg>
<status endtime="20170809 05:22:46.705" starttime="20170809 05:22:46.704" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 05:22:46.705" starttime="20170809 05:22:46.705" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.706">${index} = 1</msg>
<status endtime="20170809 05:22:46.706" starttime="20170809 05:22:46.705" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:46.707">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:46.707" starttime="20170809 05:22:46.707" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.708" starttime="20170809 05:22:46.706" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:46.709">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:46.709" starttime="20170809 05:22:46.708" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.709" starttime="20170809 05:22:46.708" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.709" starttime="20170809 05:22:46.390" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/5">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:46.710" starttime="20170809 05:22:46.710" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.713">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:46.714" starttime="20170809 05:22:46.713" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.714">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:46.714" starttime="20170809 05:22:46.714" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.715">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:46.715" starttime="20170809 05:22:46.714" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.715">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:46.715" starttime="20170809 05:22:46.715" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.937">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:46.937" starttime="20170809 05:22:46.716" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:46.937">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:46.937">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:46.937" starttime="20170809 05:22:46.716" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.938">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.938" starttime="20170809 05:22:46.938" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:46.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:46.939" starttime="20170809 05:22:46.938" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.939" starttime="20170809 05:22:46.712" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.939" starttime="20170809 05:22:46.712" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:46.939" starttime="20170809 05:22:46.711" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:46.940">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170809 05:22:46.940" starttime="20170809 05:22:46.940" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:46.941" starttime="20170809 05:22:46.941" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.115">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:47.115">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.115" starttime="20170809 05:22:46.941" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:47.116" starttime="20170809 05:22:47.116" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:47.117">Delete All Sessions</msg>
<status endtime="20170809 05:22:47.117" starttime="20170809 05:22:47.117" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.117">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.117" starttime="20170809 05:22:46.711" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.118" starttime="20170809 05:22:47.117" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.118">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:47.118">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:47.118">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:47.118" starttime="20170809 05:22:47.118" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.119">${esel_data} = []</msg>
<status endtime="20170809 05:22:47.119" starttime="20170809 05:22:46.710" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.119">Length is 0</msg>
<msg level="INFO" timestamp="20170809 05:22:47.119">${length} = 0</msg>
<status endtime="20170809 05:22:47.119" starttime="20170809 05:22:47.119" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.120">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:47.120" starttime="20170809 05:22:47.120" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.120" starttime="20170809 05:22:46.709" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/6">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:47.121" starttime="20170809 05:22:47.121" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.124">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:47.125" starttime="20170809 05:22:47.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:47.125" starttime="20170809 05:22:47.125" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.126">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:47.126" starttime="20170809 05:22:47.125" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.127">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:47.127" starttime="20170809 05:22:47.126" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.390">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:47.391" starttime="20170809 05:22:47.127" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.391">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:47.391">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.391" starttime="20170809 05:22:47.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.392">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.392" starttime="20170809 05:22:47.391" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.393" starttime="20170809 05:22:47.392" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.393" starttime="20170809 05:22:47.123" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.393" starttime="20170809 05:22:47.123" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.393" starttime="20170809 05:22:47.122" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.394">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170809 05:22:47.394" starttime="20170809 05:22:47.393" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:47.394" starttime="20170809 05:22:47.394" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.500">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:47.500">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.500" starttime="20170809 05:22:47.395" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:47.501" starttime="20170809 05:22:47.500" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:47.501">Delete All Sessions</msg>
<status endtime="20170809 05:22:47.501" starttime="20170809 05:22:47.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.501">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.501" starttime="20170809 05:22:47.122" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.502" starttime="20170809 05:22:47.502" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.503">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f8 d2 79 00 00 00 00 a1 26 68 39 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 03 ab bc 67 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 c5 7c 13 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 c6 a8 72 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c7 c0 24 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 c7 c8 01 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 c7 d6 88 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 c7 e0 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 c9 a3 2e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 c9 ad 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c9 ca 7c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 ca 13 66 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 ca 24 fa 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 cb 5f 09 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 cb 69 44 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 cb b1 2c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 cb bb 6f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 cb c4 b2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 cd 42 8a 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 cd 4a c5 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 5f ee 93 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 5f f7 76 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 03 ab bc 67 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 c5 7c 13 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 c6 a8 72 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c7 c0 24 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 c7 c8 01 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 c7 d6 88 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 c7 e0 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 c9 a3 2e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 c9 ad 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c9 ca 7c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 ca 13 66 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 ca 24 fa"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:47.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:47.503">${content} = {u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00...</msg>
<status endtime="20170809 05:22:47.503" starttime="20170809 05:22:47.502" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.504">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f8 d2 79 00 00 ...</msg>
<status endtime="20170809 05:22:47.504" starttime="20170809 05:22:47.121" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.504">Length is 2</msg>
<msg level="INFO" timestamp="20170809 05:22:47.504">${length} = 2</msg>
<status endtime="20170809 05:22:47.504" starttime="20170809 05:22:47.504" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 05:22:47.505" starttime="20170809 05:22:47.505" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.506">${index} = 1</msg>
<status endtime="20170809 05:22:47.506" starttime="20170809 05:22:47.506" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:47.508">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:47.508" starttime="20170809 05:22:47.507" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.508" starttime="20170809 05:22:47.506" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:47.509">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:47.509" starttime="20170809 05:22:47.509" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.510" starttime="20170809 05:22:47.508" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.510" starttime="20170809 05:22:47.120" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/7">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:47.510" starttime="20170809 05:22:47.510" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.514">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:47.514" starttime="20170809 05:22:47.513" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.515">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:47.515" starttime="20170809 05:22:47.515" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.516">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:47.516" starttime="20170809 05:22:47.515" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.516">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:47.516" starttime="20170809 05:22:47.516" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.736">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:47.736" starttime="20170809 05:22:47.517" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.736">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:47.736">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.736" starttime="20170809 05:22:47.517" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.737">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.737" starttime="20170809 05:22:47.736" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.738" starttime="20170809 05:22:47.737" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.738" starttime="20170809 05:22:47.513" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.738" starttime="20170809 05:22:47.512" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.738" starttime="20170809 05:22:47.512" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.738">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170809 05:22:47.738" starttime="20170809 05:22:47.738" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:47.739" starttime="20170809 05:22:47.739" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.826">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:47.826">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.826" starttime="20170809 05:22:47.739" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:47.827" starttime="20170809 05:22:47.826" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:47.827">Delete All Sessions</msg>
<status endtime="20170809 05:22:47.827" starttime="20170809 05:22:47.827" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.827">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:47.827" starttime="20170809 05:22:47.511" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:47.828" starttime="20170809 05:22:47.827" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.828">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:47.828">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:47.829">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:47.829" starttime="20170809 05:22:47.828" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:47.829">${esel_data} = []</msg>
<status endtime="20170809 05:22:47.829" starttime="20170809 05:22:47.511" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.829">Length is 0</msg>
<msg level="INFO" timestamp="20170809 05:22:47.830">${length} = 0</msg>
<status endtime="20170809 05:22:47.830" starttime="20170809 05:22:47.829" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.830">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:47.830" starttime="20170809 05:22:47.830" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:47.830" starttime="20170809 05:22:47.510" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/8">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:47.831" starttime="20170809 05:22:47.831" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:47.834">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:47.835" starttime="20170809 05:22:47.834" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.836">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:47.836" starttime="20170809 05:22:47.835" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.836">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:47.836" starttime="20170809 05:22:47.836" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:47.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:47.837" starttime="20170809 05:22:47.837" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:48.030" starttime="20170809 05:22:47.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.030">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:48.030">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:48.030" starttime="20170809 05:22:47.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:48.031" starttime="20170809 05:22:48.031" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:48.032" starttime="20170809 05:22:48.031" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.032" starttime="20170809 05:22:47.833" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.032" starttime="20170809 05:22:47.833" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.032" starttime="20170809 05:22:47.832" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.033">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170809 05:22:48.033" starttime="20170809 05:22:48.032" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:48.033" starttime="20170809 05:22:48.033" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.124">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:48.124">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:48.124" starttime="20170809 05:22:48.034" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:48.125" starttime="20170809 05:22:48.125" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:48.126">Delete All Sessions</msg>
<status endtime="20170809 05:22:48.126" starttime="20170809 05:22:48.125" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.126">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:48.126" starttime="20170809 05:22:47.832" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:48.127" starttime="20170809 05:22:48.126" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.127">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 48 f5 6e 00 00 00 00 a0 74 1e 69 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 33 f1 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 4d 98 53 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 4e cb eb 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 4f ec d0 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 4f f3 ec 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 50 02 cf 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 50 0d 83 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 51 d0 47 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 51 db 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 51 f7 f0 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 52 42 4b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 52 53 0c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 53 8d 9b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 53 98 69 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 53 de 77 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 53 e9 29 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 53 f2 89 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 55 6d bb 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 55 75 f7 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 08 71 aa 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 08 7a a1 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:48.128">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:48.128">${content} = {u'status': u'ok', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00...</msg>
<status endtime="20170809 05:22:48.128" starttime="20170809 05:22:48.127" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.128">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1', u'ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 48 f5 6e 00 00 ...</msg>
<status endtime="20170809 05:22:48.128" starttime="20170809 05:22:47.831" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.129">Length is 2</msg>
<msg level="INFO" timestamp="20170809 05:22:48.129">${length} = 2</msg>
<status endtime="20170809 05:22:48.129" starttime="20170809 05:22:48.128" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170809 05:22:48.129" starttime="20170809 05:22:48.129" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.130">${index} = 1</msg>
<status endtime="20170809 05:22:48.130" starttime="20170809 05:22:48.130" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:48.131">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:48.132" starttime="20170809 05:22:48.131" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.132" starttime="20170809 05:22:48.130" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:48.133">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_esel&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:48.133" starttime="20170809 05:22:48.132" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.133" starttime="20170809 05:22:48.132" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.133" starttime="20170809 05:22:47.830" status="PASS"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/9">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170809 05:22:48.134" starttime="20170809 05:22:48.133" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.137">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:48.138" starttime="20170809 05:22:48.137" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.138">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:48.138" starttime="20170809 05:22:48.138" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.139">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:48.139" starttime="20170809 05:22:48.139" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:48.140" starttime="20170809 05:22:48.139" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.424">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:48.424" starttime="20170809 05:22:48.140" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.424">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:48.424">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:48.424" starttime="20170809 05:22:48.140" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.425">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:48.425" starttime="20170809 05:22:48.425" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:48.426" starttime="20170809 05:22:48.425" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.426" starttime="20170809 05:22:48.137" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.426" starttime="20170809 05:22:48.136" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.426" starttime="20170809 05:22:48.135" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.427">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170809 05:22:48.427" starttime="20170809 05:22:48.427" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:48.428" starttime="20170809 05:22:48.427" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.538">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:48.539">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:48.539" starttime="20170809 05:22:48.428" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:48.540" starttime="20170809 05:22:48.539" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:48.540">Delete All Sessions</msg>
<status endtime="20170809 05:22:48.540" starttime="20170809 05:22:48.540" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.540">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:48.540" starttime="20170809 05:22:48.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:48.541" starttime="20170809 05:22:48.540" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.541">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:48.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 05:22:48.542">${content} = {u'status': u'ok', u'data': [], u'message': u'200 OK'}</msg>
<status endtime="20170809 05:22:48.542" starttime="20170809 05:22:48.541" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.542">${esel_data} = []</msg>
<status endtime="20170809 05:22:48.542" starttime="20170809 05:22:48.134" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.543">Length is 0</msg>
<msg level="INFO" timestamp="20170809 05:22:48.543">${length} = 0</msg>
<status endtime="20170809 05:22:48.543" starttime="20170809 05:22:48.542" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.544">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:48.544" starttime="20170809 05:22:48.543" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.544" starttime="20170809 05:22:48.133" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.544" starttime="20170809 05:22:45.280" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.559">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:22:48.576">${out} = </msg>
<status endtime="20170809 05:22:48.577" starttime="20170809 05:22:48.544" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 05:22:48.592">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170809 05:22:48.592" starttime="20170809 05:22:48.591" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.592">${status} = False</msg>
<status endtime="20170809 05:22:48.592" starttime="20170809 05:22:48.587" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:48.593">Returning from the enclosing user keyword.</msg>
<status endtime="20170809 05:22:48.594" starttime="20170809 05:22:48.593" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.594" starttime="20170809 05:22:44.762" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.594" starttime="20170809 05:22:44.716" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.594" starttime="20170809 05:22:44.712" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:48.594" starttime="20170809 05:22:44.712" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 05:22:48.597" starttime="20170809 05:22:48.597" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:48.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:48.597">${ret_values} = None</msg>
<status endtime="20170809 05:22:48.597" starttime="20170809 05:22:48.596" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 05:22:48.598" starttime="20170809 05:22:48.598" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.710">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:48.710">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170809 05:22:48.758">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 05:22:48.778">${core_files} = /tmp/core_phosphor-hwmon-.2044
/tmp/core_phosphor-hwmon-.2045</msg>
<msg level="INFO" timestamp="20170809 05:22:48.778">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 05:22:48.778">${rc} = 0</msg>
<status endtime="20170809 05:22:48.778" starttime="20170809 05:22:48.644" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:48.779">@{core_list} = [ /tmp/core_phosphor-hwmon-.2044 | /tmp/core_phosphor-hwmon-.2045 ]</msg>
<status endtime="20170809 05:22:48.779" starttime="20170809 05:22:48.778" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170809 05:22:48.820" starttime="20170809 05:22:48.802" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170809 05:22:49.490" starttime="20170809 05:22:48.822" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:49.490" starttime="20170809 05:22:48.821" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:49.490" starttime="20170809 05:22:48.820" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:49.490" starttime="20170809 05:22:48.801" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:49.490" starttime="20170809 05:22:48.779" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2044">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 05:22:49.807" starttime="20170809 05:22:49.491" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:49.855">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:49.856">Executing command 'rm /tmp/core_phosphor-hwmon-.2044'.</msg>
<msg level="INFO" timestamp="20170809 05:22:49.903">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:49.922" starttime="20170809 05:22:49.808" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:49.922" starttime="20170809 05:22:49.491" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-hwmon-.2045">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170809 05:22:50.868" starttime="20170809 05:22:49.923" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:50.915">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:50.916">Executing command 'rm /tmp/core_phosphor-hwmon-.2045'.</msg>
<msg level="INFO" timestamp="20170809 05:22:50.969">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:50.988" starttime="20170809 05:22:50.868" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:50.988" starttime="20170809 05:22:49.923" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:50.988" starttime="20170809 05:22:49.491" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:50.989" starttime="20170809 05:22:48.644" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:50.989" starttime="20170809 05:22:48.598" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:50.989" starttime="20170809 05:22:48.595" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:50.989" starttime="20170809 05:22:48.595" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 05:22:50.991" starttime="20170809 05:22:50.991" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:50.991">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:50.991">${ret_values} = None</msg>
<status endtime="20170809 05:22:50.991" starttime="20170809 05:22:50.990" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 05:22:50.992" starttime="20170809 05:22:50.991" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.040">Returning from the enclosing user keyword.</msg>
<status endtime="20170809 05:22:51.040" starttime="20170809 05:22:51.040" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.040" starttime="20170809 05:22:51.036" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.040" starttime="20170809 05:22:50.992" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.041" starttime="20170809 05:22:50.989" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.041" starttime="20170809 05:22:50.989" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 05:22:51.042" starttime="20170809 05:22:51.042" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:51.043">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:51.043">${ret_values} = None</msg>
<status endtime="20170809 05:22:51.043" starttime="20170809 05:22:51.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 05:22:51.043" starttime="20170809 05:22:51.043" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.086">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170809 05:22:51.086" starttime="20170809 05:22:51.086" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.087">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170809 05:22:51.087" starttime="20170809 05:22:51.087" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.096">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170809 05:22:51.096" starttime="20170809 05:22:51.088" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.100">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.100" starttime="20170809 05:22:51.099" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.100" starttime="20170809 05:22:51.098" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.101">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.101" starttime="20170809 05:22:51.101" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.101" starttime="20170809 05:22:51.100" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.103">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.103" starttime="20170809 05:22:51.102" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.103" starttime="20170809 05:22:51.102" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.104">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.104" starttime="20170809 05:22:51.103" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.104" starttime="20170809 05:22:51.103" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.104" starttime="20170809 05:22:51.098" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.104" starttime="20170809 05:22:51.097" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.105">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170809 05:22:51.105" starttime="20170809 05:22:51.104" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.225">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:51.226">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170809 05:22:51.273">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:51.273" starttime="20170809 05:22:51.158" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:51.273">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:51.273">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-201"\nVERSION_ID="v1.99.8-201-g7bf86a2"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170809 05:22:51.273" starttime="20170809 05:22:51.105" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.274">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-201"
VERSION_ID="v1.99.8-201-g7bf86a2"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170809 05:22:51.274" starttime="20170809 05:22:51.273" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.274">${stderr} = </msg>
<status endtime="20170809 05:22:51.274" starttime="20170809 05:22:51.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.281">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.281" starttime="20170809 05:22:51.280" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.281" starttime="20170809 05:22:51.280" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.281" starttime="20170809 05:22:51.275" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.281" starttime="20170809 05:22:51.097" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.281" starttime="20170809 05:22:51.096" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.281" starttime="20170809 05:22:51.096" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.282" starttime="20170809 05:22:51.086" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.282" starttime="20170809 05:22:51.086" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.283">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170809 05:22:51.283" starttime="20170809 05:22:51.282" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.285">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170809 05:22:51.285" starttime="20170809 05:22:51.283" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.289">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.289" starttime="20170809 05:22:51.289" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.289" starttime="20170809 05:22:51.288" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.294">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.294" starttime="20170809 05:22:51.293" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.294" starttime="20170809 05:22:51.290" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.295">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.296" starttime="20170809 05:22:51.295" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.296" starttime="20170809 05:22:51.294" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.297">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.297" starttime="20170809 05:22:51.296" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.297" starttime="20170809 05:22:51.296" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.297" starttime="20170809 05:22:51.288" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.297" starttime="20170809 05:22:51.287" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.298">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170809 05:22:51.298" starttime="20170809 05:22:51.297" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.410">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:51.410">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170809 05:22:51.473">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:51.473" starttime="20170809 05:22:51.352" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:51.473">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:51.473">${ret_values} = (u'Linux witherspoon 4.10.17-d258c7d343cb8ac910acde46236c59094358c91a #1 Wed Aug 9 04:39:05 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170809 05:22:51.473" starttime="20170809 05:22:51.298" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.474">${stdout} = Linux witherspoon 4.10.17-d258c7d343cb8ac910acde46236c59094358c91a #1 Wed Aug 9 04:39:05 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170809 05:22:51.474" starttime="20170809 05:22:51.474" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.475">${stderr} = </msg>
<status endtime="20170809 05:22:51.475" starttime="20170809 05:22:51.474" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.481">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.481" starttime="20170809 05:22:51.481" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.482" starttime="20170809 05:22:51.480" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.482" starttime="20170809 05:22:51.475" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.482" starttime="20170809 05:22:51.286" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.482" starttime="20170809 05:22:51.285" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.485">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.485" starttime="20170809 05:22:51.484" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.485" starttime="20170809 05:22:51.484" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.486">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.486" starttime="20170809 05:22:51.486" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.486" starttime="20170809 05:22:51.485" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.487">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.488" starttime="20170809 05:22:51.487" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.488" starttime="20170809 05:22:51.487" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.489">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.489" starttime="20170809 05:22:51.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.489" starttime="20170809 05:22:51.488" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.490" starttime="20170809 05:22:51.483" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.490" starttime="20170809 05:22:51.483" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.490">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170809 05:22:51.490" starttime="20170809 05:22:51.490" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.606">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:51.607">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170809 05:22:51.665">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:51.665" starttime="20170809 05:22:51.547" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:51.665">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:51.665">${ret_values} = (u' 05:22:56 up 16 min,  load average: 0.84, 1.09, 0.93', u'', 0)</msg>
<status endtime="20170809 05:22:51.665" starttime="20170809 05:22:51.491" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.666">${stdout} =  05:22:56 up 16 min,  load average: 0.84, 1.09, 0.93</msg>
<status endtime="20170809 05:22:51.666" starttime="20170809 05:22:51.666" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.667">${stderr} = </msg>
<status endtime="20170809 05:22:51.667" starttime="20170809 05:22:51.666" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.673">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.673" starttime="20170809 05:22:51.673" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.674" starttime="20170809 05:22:51.672" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.674" starttime="20170809 05:22:51.667" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.674" starttime="20170809 05:22:51.482" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.674" starttime="20170809 05:22:51.482" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.677">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.677" starttime="20170809 05:22:51.677" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.677" starttime="20170809 05:22:51.676" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.679">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.679" starttime="20170809 05:22:51.678" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.679" starttime="20170809 05:22:51.678" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.680">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.680" starttime="20170809 05:22:51.680" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.680" starttime="20170809 05:22:51.679" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.681">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.682" starttime="20170809 05:22:51.681" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.682" starttime="20170809 05:22:51.681" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.682" starttime="20170809 05:22:51.676" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.682" starttime="20170809 05:22:51.675" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.683">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170809 05:22:51.683" starttime="20170809 05:22:51.682" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.814">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:51.815">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170809 05:22:51.883">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:51.883" starttime="20170809 05:22:51.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:51.883">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:51.883">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170809 05:22:51.883" starttime="20170809 05:22:51.683" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.884">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170809 05:22:51.884" starttime="20170809 05:22:51.884" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.884">${stderr} = </msg>
<status endtime="20170809 05:22:51.885" starttime="20170809 05:22:51.884" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.891">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.891" starttime="20170809 05:22:51.891" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.891" starttime="20170809 05:22:51.890" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.891" starttime="20170809 05:22:51.885" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.892" starttime="20170809 05:22:51.674" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.892" starttime="20170809 05:22:51.674" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.892" starttime="20170809 05:22:51.285" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.892" starttime="20170809 05:22:51.282" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.892" starttime="20170809 05:22:51.282" status="PASS"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.893">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170809 05:22:51.893" starttime="20170809 05:22:51.893" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:51.894">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170809 05:22:51.894" starttime="20170809 05:22:51.893" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.897">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.897" starttime="20170809 05:22:51.896" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.897" starttime="20170809 05:22:51.896" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.898">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.898" starttime="20170809 05:22:51.898" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.899" starttime="20170809 05:22:51.897" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.900">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.900" starttime="20170809 05:22:51.899" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.900" starttime="20170809 05:22:51.899" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:51.901">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:51.901" starttime="20170809 05:22:51.901" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.901" starttime="20170809 05:22:51.900" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.901" starttime="20170809 05:22:51.895" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:51.901" starttime="20170809 05:22:51.895" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:51.902">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170809 05:22:51.902" starttime="20170809 05:22:51.902" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:52.025">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:52.025">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170809 05:22:53.462">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:53.462" starttime="20170809 05:22:51.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:53.463">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:53.463">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.R...</msg>
<status endtime="20170809 05:22:53.463" starttime="20170809 05:22:51.902" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.463">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<status endtime="20170809 05:22:53.464" starttime="20170809 05:22:53.463" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.464">${stderr} = </msg>
<status endtime="20170809 05:22:53.464" starttime="20170809 05:22:53.464" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:53.474">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:53.473" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:53.472" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:53.464" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.894" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.894" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.894" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.892" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.892" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.086" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.085" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.474" starttime="20170809 05:22:51.044" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.475" starttime="20170809 05:22:51.041" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.475" starttime="20170809 05:22:51.041" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 05:22:53.477" starttime="20170809 05:22:53.476" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:53.477">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:53.477">${ret_values} = None</msg>
<status endtime="20170809 05:22:53.477" starttime="20170809 05:22:53.476" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 05:22:53.477" starttime="20170809 05:22:53.477" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.520">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170809 05:22:53.520" starttime="20170809 05:22:53.520" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.525">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170809 05:22:53.525" starttime="20170809 05:22:53.525" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.526">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_record_log.txt</msg>
<status endtime="20170809 05:22:53.526" starttime="20170809 05:22:53.525" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.529">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:53.530" starttime="20170809 05:22:53.528" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:53.530" starttime="20170809 05:22:53.530" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.531">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:53.531" starttime="20170809 05:22:53.531" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.532">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:53.532" starttime="20170809 05:22:53.531" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:53.729" starttime="20170809 05:22:53.532" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:53.729">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:53.729">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:53.730" starttime="20170809 05:22:53.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.730">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:53.730" starttime="20170809 05:22:53.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:53.731" starttime="20170809 05:22:53.731" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.731" starttime="20170809 05:22:53.528" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.731" starttime="20170809 05:22:53.527" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.731" starttime="20170809 05:22:53.527" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.732">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170809 05:22:53.732" starttime="20170809 05:22:53.732" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:53.733" starttime="20170809 05:22:53.732" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.776">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:53.776">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 05:22:53.776" starttime="20170809 05:22:53.733" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:53.777" starttime="20170809 05:22:53.777" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:53.777">Delete All Sessions</msg>
<status endtime="20170809 05:22:53.778" starttime="20170809 05:22:53.777" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:53.778">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 05:22:53.778" starttime="20170809 05:22:53.526" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.779">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 05:22:53.779">404 != 200</msg>
<status endtime="20170809 05:22:53.779" starttime="20170809 05:22:53.778" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:53.779">${status} = False</msg>
<status endtime="20170809 05:22:53.779" starttime="20170809 05:22:53.778" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 05:22:53.780">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:53.780" starttime="20170809 05:22:53.780" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.780" starttime="20170809 05:22:53.779" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:53.780" starttime="20170809 05:22:53.525" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.781">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_led.txt</msg>
<status endtime="20170809 05:22:53.781" starttime="20170809 05:22:53.781" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.784">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:53.784" starttime="20170809 05:22:53.783" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.785">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:53.785" starttime="20170809 05:22:53.785" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.786">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:53.786" starttime="20170809 05:22:53.785" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:53.787">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:53.787" starttime="20170809 05:22:53.786" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.998">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:53.998" starttime="20170809 05:22:53.788" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:53.999">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:53.999">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:53.999" starttime="20170809 05:22:53.787" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:53.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:53.999" starttime="20170809 05:22:53.999" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:54.000" starttime="20170809 05:22:54.000" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.000" starttime="20170809 05:22:53.783" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.000" starttime="20170809 05:22:53.783" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.001" starttime="20170809 05:22:53.782" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.001">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170809 05:22:54.001" starttime="20170809 05:22:54.001" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:54.002" starttime="20170809 05:22:54.001" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.071">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:54.071">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 05:22:54.071" starttime="20170809 05:22:54.002" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:54.072" starttime="20170809 05:22:54.071" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:54.072">Delete All Sessions</msg>
<status endtime="20170809 05:22:54.072" starttime="20170809 05:22:54.072" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:54.072">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170809 05:22:54.073" starttime="20170809 05:22:53.781" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 05:22:54.074">404 != 200</msg>
<status endtime="20170809 05:22:54.074" starttime="20170809 05:22:54.073" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:54.074">${status} = False</msg>
<status endtime="20170809 05:22:54.074" starttime="20170809 05:22:54.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 05:22:54.075">Continuing for loop from the next iteration.</msg>
<status endtime="20170809 05:22:54.075" starttime="20170809 05:22:54.075" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.075" starttime="20170809 05:22:54.074" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.075" starttime="20170809 05:22:53.780" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.077">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_inventory.txt</msg>
<status endtime="20170809 05:22:54.077" starttime="20170809 05:22:54.076" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.081">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:54.081" starttime="20170809 05:22:54.080" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.082">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:54.082" starttime="20170809 05:22:54.082" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.083">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:54.083" starttime="20170809 05:22:54.082" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.084">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:54.084" starttime="20170809 05:22:54.084" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.292">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:54.292" starttime="20170809 05:22:54.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:54.292">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:54.292">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:54.292" starttime="20170809 05:22:54.084" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.293">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:54.293" starttime="20170809 05:22:54.293" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:54.294" starttime="20170809 05:22:54.293" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.294" starttime="20170809 05:22:54.079" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.294" starttime="20170809 05:22:54.079" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.294" starttime="20170809 05:22:54.078" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.295">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170809 05:22:54.295" starttime="20170809 05:22:54.294" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:54.295" starttime="20170809 05:22:54.295" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.616">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:54.617">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:54.617" starttime="20170809 05:22:54.296" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:54.617" starttime="20170809 05:22:54.617" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:54.618">Delete All Sessions</msg>
<status endtime="20170809 05:22:54.618" starttime="20170809 05:22:54.618" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:54.618">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:54.618" starttime="20170809 05:22:54.077" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.619">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:54.619" starttime="20170809 05:22:54.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:54.619">${status} = True</msg>
<status endtime="20170809 05:22:54.619" starttime="20170809 05:22:54.618" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 05:22:54.620" starttime="20170809 05:22:54.620" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.621">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:54.621">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 05:22:54.621">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status endtime="20170809 05:22:54.621" starttime="20170809 05:22:54.620" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:54.623">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_inventory.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:54.623" starttime="20170809 05:22:54.622" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.623" starttime="20170809 05:22:54.621" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.623" starttime="20170809 05:22:54.076" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.624">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_sensor_list.txt</msg>
<status endtime="20170809 05:22:54.624" starttime="20170809 05:22:54.623" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.626">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:54.627" starttime="20170809 05:22:54.626" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.628">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:54.628" starttime="20170809 05:22:54.627" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.628">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:54.628" starttime="20170809 05:22:54.628" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.629">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:54.629" starttime="20170809 05:22:54.629" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.830">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:54.830" starttime="20170809 05:22:54.630" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:54.830">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:54.830">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:54.830" starttime="20170809 05:22:54.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.831">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:54.831" starttime="20170809 05:22:54.830" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:54.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:54.831" starttime="20170809 05:22:54.831" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.832" starttime="20170809 05:22:54.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.832" starttime="20170809 05:22:54.625" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:54.832" starttime="20170809 05:22:54.625" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:54.832">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170809 05:22:54.832" starttime="20170809 05:22:54.832" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:54.833" starttime="20170809 05:22:54.833" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.027">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:55.028">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:55.028" starttime="20170809 05:22:54.833" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:55.028" starttime="20170809 05:22:55.028" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:55.029">Delete All Sessions</msg>
<status endtime="20170809 05:22:55.029" starttime="20170809 05:22:55.029" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.029">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:55.029" starttime="20170809 05:22:54.624" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.030">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:55.030" starttime="20170809 05:22:55.030" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.030">${status} = True</msg>
<status endtime="20170809 05:22:55.030" starttime="20170809 05:22:55.029" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 05:22:55.031" starttime="20170809 05:22:55.031" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.032">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Baseboard Init"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:55.032">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 05:22:55.032">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170809 05:22:55.032" starttime="20170809 05:22:55.031" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:55.033">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_sensor_list.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:55.034" starttime="20170809 05:22:55.033" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.034" starttime="20170809 05:22:55.032" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.034" starttime="20170809 05:22:54.623" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.034">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_elog.txt</msg>
<status endtime="20170809 05:22:55.034" starttime="20170809 05:22:55.034" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.037">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170809 05:22:55.038" starttime="20170809 05:22:55.037" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170809 05:22:55.039" starttime="20170809 05:22:55.038" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.039">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170809 05:22:55.039" starttime="20170809 05:22:55.039" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170809 05:22:55.040" starttime="20170809 05:22:55.039" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170809 05:22:55.256" starttime="20170809 05:22:55.041" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:55.256">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:55.256" starttime="20170809 05:22:55.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:55.257" starttime="20170809 05:22:55.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:55.258" starttime="20170809 05:22:55.257" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.258" starttime="20170809 05:22:55.036" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.258" starttime="20170809 05:22:55.036" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.258" starttime="20170809 05:22:55.035" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.259">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170809 05:22:55.259" starttime="20170809 05:22:55.258" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170809 05:22:55.259" starttime="20170809 05:22:55.259" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.573">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 05:22:55.573">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:55.573" starttime="20170809 05:22:55.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170809 05:22:55.574" starttime="20170809 05:22:55.574" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 05:22:55.574">Delete All Sessions</msg>
<status endtime="20170809 05:22:55.574" starttime="20170809 05:22:55.574" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.575">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170809 05:22:55.575" starttime="20170809 05:22:55.035" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.576">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170809 05:22:55.576" starttime="20170809 05:22:55.575" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.576">${status} = True</msg>
<status endtime="20170809 05:22:55.576" starttime="20170809 05:22:55.575" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170809 05:22:55.577" starttime="20170809 05:22:55.576" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.578">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 9f 80 f5 08 00 00 00 00 9f ac a5 80 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 0b 90 00 00 0b 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 00 7d 38 84 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 96 e5 16 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 98 0f bf 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 99 28 07 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 99 2f 3b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 99 3d d5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 99 47 f9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 9b 0d e6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 9b 17 f2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 9b 34 96 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9b 7c ee 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 9b 87 4c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 00 9c c8 2d 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 9c d2 9d 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 9d 19 75 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9d 24 18 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 00 9d 2d 9a 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 00 9e a6 bf 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 9e ae ea 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0d 81 d2 6c 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0d 81 da b1 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 00 7d 38 84 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 00 96 e5 16 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 00 98 0f bf 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 99 28 07 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 00 99 2f 3b 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 00 99 3d d5 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 00 99 47 f9 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 00 9b 0d e6 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 00 9b 17 f2 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 00 9b 34 96 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 00 9b 7c ee 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 00 9b 87 4c"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502256088606, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502254632497, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255269631, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 d1 6a 2a a5 00 00 00 00 d1 95 0c 4f 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 05 90 00 00 05 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 00 00 00 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 06 17 37 5f 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 50 f5 62 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 52 22 04 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 53 3c 77 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 53 43 c8 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 53 53 0e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 53 5d ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 55 1f 6e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 55 29 65 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 55 46 cc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 55 91 25 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 55 9b 2a 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 06 17 56 da ce 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 56 e4 da 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 57 2c 01 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 57 36 a9 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 06 17 57 3f fc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 06 17 58 bc e0 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 58 c5 29 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 33 62 8c 93 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 06 33 62 94 8a 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 06 17 37 5f 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 06 17 50 f5 62 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 06 17 52 22 04 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 53 3c 77 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 06 17 53 43 c8 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 06 17 53 53 0e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 06 17 53 5d ce 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 06 17 55 1f 6e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 06 17 55 29 65 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 06 17 55 46 cc 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 06 17 55 91 25 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 06 17 55 9b 2a"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255596282, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [], 
      "Id": 5, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255713901, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 f8 d2 79 00 00 00 00 a1 26 68 39 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 07 90 00 00 07 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 00 67 56 46 52 54 3a 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 03 ab bc 67 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 c5 7c 13 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 c6 a8 72 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c7 c0 24 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 c7 c8 01 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 c7 d6 88 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 c7 e0 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 c9 a3 2e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 c9 ad 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c9 ca 7c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 ca 13 66 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 ca 24 fa 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 03 cb 5f 09 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 cb 69 44 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 cb b1 2c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 cb bb 6f 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 03 cb c4 b2 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 03 cd 42 8a 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 cd 4a c5 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 10 5f ee 93 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 10 5f f7 76 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 dc 00 00 00 00 00 00 03 dc 00 00 00 17 00 00 00 00 00 00 00 05 03 ab bc 67 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 03 c5 7c 13 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 03 c6 a8 72 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c7 c0 24 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 03 c7 c8 01 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 03 c7 d6 88 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 03 c7 e0 a0 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 03 c9 a3 2e 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 03 c9 ad 42 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 03 c9 ca 7c 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 03 ca 13 66 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 03 ca 24 fa"
      ], 
      "Id": 6, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255762038, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [], 
      "Id": 7, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255879814, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 07 a4 07 aa 00 00 50 48 00 30 01 00 07 00 00 00 00 00 a0 48 f5 6e 00 00 00 00 a0 74 1e 69 42 00 00 09 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 09 90 00 00 09 55 48 00 18 01 00 0c 00 10 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 07 0c 00 48 00 00 00 e0 00 00 07 00 00 00 00 00 00 20 00 00 08 0e 08 00 00 05 00 01 03 00 00 6c 01 90 00 4d 42 43 31 30 30 37 30 43 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 24 01 06 01 00 01 54 41 4b 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 03 23 01 00 02 00 05 01 00 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 01 00 00 00 55 41 96 fc 88 00 00 00 00 55 44 00 60 02 01 0e 00 00 00 00 03 00 40 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00 a4 01 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 05 00 55 44 00 e0 01 03 01 00 00 00 00 00 00 03 e4 24 00 00 00 00 00 03 a6 fc 00 00 00 00 40 2e 67 70 00 00 00 00 40 2e 68 10 00 00 00 00 40 2e 68 a8 00 00 00 00 40 2e 6a 5c 00 00 00 00 40 2e 7b 1c 00 00 00 00 40 2e 80 44 00 00 00 00 40 2e a3 7c 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 2e 18 2c 00 00 00 00 40 2e 2f c8 00 00 00 00 40 2e 3e d0 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 64 1c 00 00 00 00 40 30 1b 40 00 00 00 00 40 30 28 68 00 00 00 00 40 30 39 68 00 00 00 00 40 30 58 10 00 00 00 00 40 30 67 88 00 00 00 00 00 04 6c 58 00 00 00 00 00 04 66 08 00 00 00 00 40 2d 11 74 00 00 00 00 40 2c 57 8c 00 00 00 00 40 00 72 a4 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 35 32 33 65 61 61 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 a4 01 15 31 00 01 28 00 42 49 32 43 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 9c 00 00 00 00 00 00 03 9c 00 00 00 15 00 00 00 00 00 00 00 05 02 33 f1 41 00 00 00 81 00 10 43 4f 7b c2 43 d6 00 00 0d ac 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 4d 98 53 00 00 00 81 00 20 43 4f 24 27 a1 45 00 00 0b f3 00 00 00 00 00 00 00 0f 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 3c 00 00 00 05 02 4e cb eb 00 00 00 81 00 08 43 4f e5 06 c2 32 00 00 0c 0b 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 4f ec d0 00 00 00 81 00 00 43 4f ae f6 c4 2b 00 00 0c 1c 00 00 00 1c 00 00 00 05 02 4f f3 ec 00 00 00 81 00 08 43 4f ae 65 b0 3a 00 00 0c 21 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 50 02 cf 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 01 00 00 00 2c 00 00 00 05 02 50 0d 83 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 05 02 51 d0 47 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 2c 00 00 00 05 02 51 db 11 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 05 02 51 f7 f0 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 52 42 4b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 03 00 00 00 2c 00 00 00 05 02 52 53 0c 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 03 00 00 00 24 00 00 00 05 02 53 8d 9b 00 00 00 81 00 10 43 4f 10 87 d4 ee 00 00 0c cc 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 53 98 69 00 00 00 81 00 08 43 4f 83 b9 0f 9a 00 00 0d 0f 00 00 00 00 00 00 00 00 00 00 00 24 00 00 00 05 02 53 de 77 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 34 00 00 00 05 02 53 e9 29 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 34 00 00 00 05 02 53 f2 89 00 00 00 81 00 18 43 4f 1b ce fc ec 00 00 0a 1e 00 00 00 00 00 05 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00 34 00 00 00 05 02 55 6d bb 00 00 00 81 00 10 43 4f 7e 82 d1 97 00 00 0d 9a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 02 55 75 f7 00 00 00 81 00 10 43 4f 25 00 5e 3b 00 00 0d b5 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2c 00 00 00 05 0f 08 71 aa 00 00 00 83 00 08 43 4f 87 11 c5 1d 00 00 08 0c 08 0e 08 00 00 00 00 00 00 00 00 24 00 00 00 05 0f 08 7a a1 00 00 00 83 00 00 43 4f 2b a5 5b 0e 00 00 08 9a 00 00 00 1c
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502255924226, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502256042315, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 05:22:55.579">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 05:22:55.579">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu...</msg>
<status endtime="20170809 05:22:55.580" starttime="20170809 05:22:55.577" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:55.581">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_elog.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:55.581" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:55.580" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:55.034" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.525" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.524" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.524" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.523" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.519" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.478" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.475" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.582" starttime="20170809 05:22:53.475" status="PASS"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170809 05:22:55.584" starttime="20170809 05:22:55.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.584">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:55.584">${ret_values} = None</msg>
<status endtime="20170809 05:22:55.584" starttime="20170809 05:22:55.583" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170809 05:22:55.585" starttime="20170809 05:22:55.585" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.626">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170809 05:22:55.626" starttime="20170809 05:22:55.625" status="PASS"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.627">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_meminfo', 'cat /pro...</msg>
<status endtime="20170809 05:22:55.627" starttime="20170809 05:22:55.627" status="PASS"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.634">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_procinfo.txt</msg>
<status endtime="20170809 05:22:55.634" starttime="20170809 05:22:55.628" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 05:22:55.635" starttime="20170809 05:22:55.635" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.636">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170809 05:22:55.636" starttime="20170809 05:22:55.636" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.747">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:55.747">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170809 05:22:55.811">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:55.812" starttime="20170809 05:22:55.688" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:55.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:55.812">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170809 05:22:55.812" starttime="20170809 05:22:55.636" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.813">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170809 05:22:55.813" starttime="20170809 05:22:55.812" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.813">${stderr} = </msg>
<status endtime="20170809 05:22:55.813" starttime="20170809 05:22:55.813" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:55.820">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_procinfo.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:55.820" starttime="20170809 05:22:55.819" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.820" starttime="20170809 05:22:55.819" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.821" starttime="20170809 05:22:55.814" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.821" starttime="20170809 05:22:55.634" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:55.821" starttime="20170809 05:22:55.628" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.821">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_proc_list.txt</msg>
<status endtime="20170809 05:22:55.822" starttime="20170809 05:22:55.821" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 05:22:55.823" starttime="20170809 05:22:55.822" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:55.824">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170809 05:22:55.824" starttime="20170809 05:22:55.823" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:55.948">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:55.948">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170809 05:22:56.289">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:56.290" starttime="20170809 05:22:55.880" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:56.290">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:56.290">${ret_values} = (u'Mem: 182948K used, 249312K free, 14708K shrd, 15604K buff, 69692K cached\nCPU:  10% usr  10% sys   0% nic  80% idle   0% io   0% irq   0% sirq\nLoad average: 1.02 1.13 0.94 1/164 2845\n  PID  PPID ...</msg>
<status endtime="20170809 05:22:56.290" starttime="20170809 05:22:55.824" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:56.291">${stdout} = Mem: 182948K used, 249312K free, 14708K shrd, 15604K buff, 69692K cached
CPU:  10% usr  10% sys   0% nic  80% idle   0% io   0% irq   0% sirq
Load average: 1.02 1.13 0.94 1/164 2845
  PID  PPID USER  ...</msg>
<status endtime="20170809 05:22:56.291" starttime="20170809 05:22:56.291" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:56.292">${stderr} = </msg>
<status endtime="20170809 05:22:56.292" starttime="20170809 05:22:56.291" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:56.298">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_proc_list.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:56.299" starttime="20170809 05:22:56.298" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:56.299" starttime="20170809 05:22:56.297" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:56.299" starttime="20170809 05:22:56.292" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:56.299" starttime="20170809 05:22:55.822" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:56.299" starttime="20170809 05:22:55.821" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:56.300">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_journalctl.txt</msg>
<status endtime="20170809 05:22:56.300" starttime="20170809 05:22:56.299" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 05:22:56.301" starttime="20170809 05:22:56.301" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:56.302">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170809 05:22:56.302" starttime="20170809 05:22:56.301" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:56.424">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:56.424">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170809 05:22:58.978">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:58.978" starttime="20170809 05:22:56.356" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:58.979">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:58.982">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 05:06:42 UTC, end at Wed 2017-08-09 05:23:00 UTC. --\nAug 09 05:06:42 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 05:06:42 witherspoon kernel: Linu...</msg>
<status endtime="20170809 05:22:58.982" starttime="20170809 05:22:56.302" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:58.984">${stdout} = -- Logs begin at Wed 2017-08-09 05:06:42 UTC, end at Wed 2017-08-09 05:23:00 UTC. --
Aug 09 05:06:42 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 05:06:42 witherspoon kernel: Linux ver...</msg>
<status endtime="20170809 05:22:58.984" starttime="20170809 05:22:58.983" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:58.985">${stderr} = </msg>
<status endtime="20170809 05:22:58.985" starttime="20170809 05:22:58.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:58.994">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_journalctl.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:58.994" starttime="20170809 05:22:58.992" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:58.994" starttime="20170809 05:22:58.990" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:58.994" starttime="20170809 05:22:58.985" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:58.994" starttime="20170809 05:22:56.300" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:58.994" starttime="20170809 05:22:56.299" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:58.995">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170809 05:22:58.995" starttime="20170809 05:22:58.994" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 05:22:58.996" starttime="20170809 05:22:58.996" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:58.997">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170809 05:22:58.997" starttime="20170809 05:22:58.997" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:59.122">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:59.123">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170809 05:22:59.774">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:59.774" starttime="20170809 05:22:59.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:59.774">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:59.775">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 05:23 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 05:23 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170809 05:22:59.776" starttime="20170809 05:22:58.997" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.777">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 05:23 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 05:23 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170809 05:22:59.777" starttime="20170809 05:22:59.776" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.777">${stderr} = ls: /proc/2847/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170809 05:22:59.777" starttime="20170809 05:22:59.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:59.785">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:59.785" starttime="20170809 05:22:59.784" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.785" starttime="20170809 05:22:59.783" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.785" starttime="20170809 05:22:59.778" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.785" starttime="20170809 05:22:58.995" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.785" starttime="20170809 05:22:58.994" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.786">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_meminfo.txt</msg>
<status endtime="20170809 05:22:59.786" starttime="20170809 05:22:59.786" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 05:22:59.788" starttime="20170809 05:22:59.787" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.788">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170809 05:22:59.788" starttime="20170809 05:22:59.788" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:22:59.910">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:22:59.911">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170809 05:22:59.960">Command exited with return code 0.</msg>
<status endtime="20170809 05:22:59.960" starttime="20170809 05:22:59.841" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:22:59.960">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:22:59.960">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          249188 kB\nMemAvailable:     318424 kB\nBuffers:           15604 kB\nCached:            69692 kB\nSwapCached:            0 kB\nActive:           12320...</msg>
<status endtime="20170809 05:22:59.961" starttime="20170809 05:22:59.789" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.961">${stdout} = MemTotal:         432260 kB
MemFree:          249188 kB
MemAvailable:     318424 kB
Buffers:           15604 kB
Cached:            69692 kB
SwapCached:            0 kB
Active:           123204 kB
Inac...</msg>
<status endtime="20170809 05:22:59.961" starttime="20170809 05:22:59.961" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.962">${stderr} = </msg>
<status endtime="20170809 05:22:59.962" starttime="20170809 05:22:59.962" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:22:59.969">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_meminfo.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:22:59.970" starttime="20170809 05:22:59.969" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.970" starttime="20170809 05:22:59.968" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.970" starttime="20170809 05:22:59.962" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.970" starttime="20170809 05:22:59.786" status="PASS"></status>
</kw>
<status endtime="20170809 05:22:59.970" starttime="20170809 05:22:59.785" status="PASS"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.971">${logpath} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_dmesg.txt</msg>
<status endtime="20170809 05:22:59.971" starttime="20170809 05:22:59.970" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170809 05:22:59.972" starttime="20170809 05:22:59.972" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:22:59.973">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170809 05:22:59.973" starttime="20170809 05:22:59.972" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:23:00.098">prompt=# 
port=22
encoding=UTF-8
height=24
path_separator=/
newline=

width=80
index=1
term_type=vt100
timeout=25 seconds
alias=bmc_connection
host=9.3.86.161</msg>
<msg level="INFO" timestamp="20170809 05:23:00.098">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170809 05:23:00.165">Command exited with return code 0.</msg>
<status endtime="20170809 05:23:00.165" starttime="20170809 05:23:00.029" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.165">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 05:23:00.166">${ret_values} = (u'[    2.850000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.850000] aspeed-smc 1e630000.flash-controller: CE1 window [ 0x37800000 - 0x38000000 ] 8MB\n[    3.600...</msg>
<status endtime="20170809 05:23:00.166" starttime="20170809 05:22:59.973" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.166">${stdout} = [    2.850000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.850000] aspeed-smc 1e630000.flash-controller: CE1 window [ 0x37800000 - 0x38000000 ] 8MB
[    3.600000] ...</msg>
<status endtime="20170809 05:23:00.167" starttime="20170809 05:23:00.166" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.167">${stderr} = </msg>
<status endtime="20170809 05:23:00.167" starttime="20170809 05:23:00.167" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:23:00.174">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_dmesg.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/20170809052244392304_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:23:00.174" starttime="20170809 05:23:00.173" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.174" starttime="20170809 05:23:00.172" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.174" starttime="20170809 05:23:00.167" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:59.971" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:59.970" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.627" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.626" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.625" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.585" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.583" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:55.582" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:44.712" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.175" starttime="20170809 05:22:44.709" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.176" starttime="20170809 05:22:44.709" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.176" starttime="20170809 05:22:44.709" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170809 05:23:00.188" starttime="20170809 05:23:00.187" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.188" starttime="20170809 05:23:00.176" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.188" starttime="20170809 05:22:44.708" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.188" starttime="20170809 05:22:41.322" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.188" starttime="20170809 05:22:41.322" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170809 05:23:00.189" starttime="20170809 05:23:00.189" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.204">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170809 05:23:00.204" starttime="20170809 05:23:00.190" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.205">${FFDC_DIR_PATH} = /tmp/fspcibld/23984/obmc-robot/logs/20170809052244392304_TestsTestBasicPoweron/20170809052244392304_PowerOnTest/</msg>
<status endtime="20170809 05:23:00.205" starttime="20170809 05:23:00.204" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170809 05:23:00.206" starttime="20170809 05:23:00.205" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170809 05:23:00.206" starttime="20170809 05:23:00.206" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:23:00.207">Directory '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs"&gt;/tmp/fspcibld/23984/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170809 05:23:00.207" starttime="20170809 05:23:00.206" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:23:00.208">File '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170809 05:23:00.208" starttime="20170809 05:23:00.208" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.208">${exist} = True</msg>
<status endtime="20170809 05:23:00.208" starttime="20170809 05:23:00.207" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170809 05:23:00.209" starttime="20170809 05:23:00.208" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170809 05:23:00.209" starttime="20170809 05:23:00.209" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.210">${cur_time} = 2017-08-09 05:23:00:210094</msg>
<status endtime="20170809 05:23:00.210" starttime="20170809 05:23:00.210" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.211">${cur_time} = 20170809052300210094</msg>
<status endtime="20170809 05:23:00.211" starttime="20170809 05:23:00.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.211">${cur_time} = 20170809052300210094</msg>
<status endtime="20170809 05:23:00.211" starttime="20170809 05:23:00.209" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:23:00.212">Appended to file '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23984/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170809 05:23:00.212" starttime="20170809 05:23:00.211" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.212" starttime="20170809 05:23:00.189" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.212" starttime="20170809 05:22:40.912" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.214">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:23:00.214" starttime="20170809 05:23:00.214" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.215">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:23:00.215" starttime="20170809 05:23:00.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.215">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status endtime="20170809 05:23:00.215" starttime="20170809 05:23:00.213" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.216">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170809 05:23:00.216" starttime="20170809 05:23:00.216" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:23:00.216" starttime="20170809 05:23:00.216" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.221">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:23:00.226">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:23:00.226">${output} = /tmp/fspcibld/23984/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170809 05:23:00.226" starttime="20170809 05:23:00.217" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 05:23:00.230" starttime="20170809 05:23:00.229" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170809 05:23:00.231" starttime="20170809 05:23:00.230" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.232">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 05:23:00.232" starttime="20170809 05:23:00.231" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.232">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status endtime="20170809 05:23:00.233" starttime="20170809 05:23:00.215" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.233">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170809 05:23:00.233" starttime="20170809 05:23:00.233" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:23:00.234" starttime="20170809 05:23:00.234" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.238">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 05:23:00.256">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:23:00.257">${os_con_pid} = </msg>
<status endtime="20170809 05:23:00.257" starttime="20170809 05:23:00.234" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170809 05:23:00.260" starttime="20170809 05:23:00.259" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.261">${cmd_buf} = kill -9 </msg>
<status endtime="20170809 05:23:00.261" starttime="20170809 05:23:00.261" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170809 05:23:00.265" starttime="20170809 05:23:00.262" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.267">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 05:23:00.267">${output} = None</msg>
<status endtime="20170809 05:23:00.267" starttime="20170809 05:23:00.266" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170809 05:23:00.268" starttime="20170809 05:23:00.267" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170809 05:23:00.273">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/23984/obmc-robot/logs/9.3.86.161_os_console"&gt;/tmp/fspcibld/23984/obmc-robot/logs/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status endtime="20170809 05:23:00.273" starttime="20170809 05:23:00.270" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.273" starttime="20170809 05:23:00.269" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.273" starttime="20170809 05:23:00.268" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.274">${output} = </msg>
<status endtime="20170809 05:23:00.274" starttime="20170809 05:23:00.274" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 05:23:00.275">${loc_quiet} = 1</msg>
<status endtime="20170809 05:23:00.275" starttime="20170809 05:23:00.274" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170809 05:23:00.319" starttime="20170809 05:23:00.276" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.320">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 05:23:00.321">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170809 05:23:00.321" starttime="20170809 05:23:00.275" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170809 05:23:00.322">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status endtime="20170809 05:23:00.322" starttime="20170809 05:23:00.212" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 05:23:00.324">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85062|secure|Booting in non-secure mode.
  3.85063|secure|SecureROM invalid - skipping functionality
  6.31650|ISTEP  6. 5 - host_init_fsi
  6.39531|ISTEP  6. 6 - host_set_ipl_parms
  6.41723|ISTEP  6. 7 - host_discover_targets
  6.87545|================================================
  6.87725|Error reported by i2c (0x0700) PLID 0x90000005
  6.87909|  Bus Arbitration Lost Error was found in the I2C status register.
  6.87909|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  6.87910|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  6.88092|  UserData1  Status Register Value : 0x080e080000050001
  6.88092|  UserData2  Master Target : 0x0300006c0190004d
  6.88093|------------------------------------------------
  6.88093|  Callout type             : Hardware Callout
  6.88093|  CPU id                   : 0
  6.88094|  Target                   : Physical:/Sys0/Node0/Proc1
  6.88095|  Deconfig State           : NO_DECONFIG
  6.88095|  GARD Error Type          : GARD_NULL
  6.88096|  Priority                 : SRCI_PRIORITY_HIGH
  6.88096|------------------------------------------------
  6.88097|  Callout type             : Procedure Callout
  6.88097|  Procedure                : EPUB_PRC_HB_CODE
  6.88098|  Priority                 : SRCI_PRIORITY_LOW
  6.88098|------------------------------------------------
  6.88099|  
  6.88099|------------------------------------------------
  6.88099|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  6.88100|================================================
164.81574|IPMI: shutdown requested
165.64634|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85019|secure|Booting in non-secure mode.
  3.85019|secure|SecureROM invalid - skipping functionality
  4.98500|ISTEP  6. 5 - host_init_fsi
  5.06766|ISTEP  6. 6 - host_set_ipl_parms
  5.07433|ISTEP  6. 7 - host_discover_targets
  5.28844|================================================
  5.29024|Error reported by i2c (0x0700) PLID 0x90000007
  5.29206|  Bus Arbitration Lost Error was found in the I2C status register.
  5.29206|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.29207|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.29388|  UserData1  Status Register Value : 0x080e080000050001
  5.29389|  UserData2  Master Target : 0x0300006c0190004d
  5.29389|------------------------------------------------
  5.29390|  Callout type             : Hardware Callout
  5.29390|  CPU id                   : 3
  5.29391|  Target                   : Physical:/Sys0/Node0/Proc1
  5.29392|  Deconfig State           : NO_DECONFIG
  5.29392|  GARD Error Type          : GARD_NULL
  5.29392|  Priority                 : SRCI_PRIORITY_HIGH
  5.29393|------------------------------------------------
  5.29393|  Callout type             : Procedure Callout
  5.29394|  Procedure                : EPUB_PRC_HB_CODE
  5.29394|  Priority                 : SRCI_PRIORITY_LOW
  5.29395|------------------------------------------------
  5.29395|  
  5.29396|------------------------------------------------
  5.29396|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.29397|================================================
163.38196|IPMI: shutdown requested
163.38967|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85034|secure|Booting in non-secure mode.
  3.85035|secure|SecureROM invalid - skipping functionality
  4.97097|ISTEP  6. 5 - host_init_fsi
  5.04341|ISTEP  6. 6 - host_set_ipl_parms
  5.05079|ISTEP  6. 7 - host_discover_targets
  5.26551|================================================
  5.26729|Error reported by i2c (0x0700) PLID 0x90000009
  5.26910|  Bus Arbitration Lost Error was found in the I2C status register.
  5.26911|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.26911|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.27094|  UserData1  Status Register Value : 0x080e080000050001
  5.27095|  UserData2  Master Target : 0x0300006c0190004d
  5.27095|------------------------------------------------
  5.27096|  Callout type             : Hardware Callout
  5.27096|  CPU id                   : 3
  5.27097|  Target                   : Physical:/Sys0/Node0/Proc1
  5.27097|  Deconfig State           : NO_DECONFIG
  5.27098|  GARD Error Type          : GARD_NULL
  5.27098|  Priority                 : SRCI_PRIORITY_HIGH
  5.27099|------------------------------------------------
  5.27099|  Callout type             : Procedure Callout
  5.27100|  Procedure                : EPUB_PRC_HB_CODE
  5.27100|  Priority                 : SRCI_PRIORITY_LOW
  5.27101|------------------------------------------------
  5.27101|  
  5.27101|------------------------------------------------
  5.27102|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.27102|================================================
163.47180|IPMI: shutdown requested
163.48079|IPMI: shutdown complete



--== Welcome to Hostboot hostboot-f523eaa/hbicore.bin ==--

  3.85039|secure|Booting in non-secure mode.
  3.85040|secure|SecureROM invalid - skipping functionality
  4.93626|ISTEP  6. 5 - host_init_fsi
  5.01420|ISTEP  6. 6 - host_set_ipl_parms
  5.02093|ISTEP  6. 7 - host_discover_targets
  5.24139|================================================
  5.24320|Error reported by i2c (0x0700) PLID 0x9000000B
  5.24502|  Bus Arbitration Lost Error was found in the I2C status register.
  5.24503|  ModuleId   0x07 I2C_CHECK_FOR_ERRORS
  5.24504|  ReasonCode 0x070c I2C_ARBITRATION_LOST_ONLY_FOUND
  5.24686|  UserData1  Status Register Value : 0x080e080000050001
  5.24687|  UserData2  Master Target : 0x0300006c0190004d
  5.24687|------------------------------------------------
  5.24688|  Callout type             : Hardware Callout
  5.24688|  CPU id                   : 3
  5.24689|  Target                   : Physical:/Sys0/Node0/Proc1
  5.24690|  Deconfig State           : NO_DECONFIG
  5.24690|  GARD Error Type          : GARD_NULL
  5.24691|  Priority                 : SRCI_PRIORITY_HIGH
  5.24691|------------------------------------------------
  5.24692|  Callout type             : Procedure Callout
  5.24692|  Procedure                : EPUB_PRC_HB_CODE
  5.24693|  Priority                 : SRCI_PRIORITY_LOW
  5.24693|------------------------------------------------
  5.24693|  
  5.24694|------------------------------------------------
  5.24694|  Hostboot Build ID: hostboot-f523eaa/hbicore.bin
  5.24695|================================================
</msg>
<status endtime="20170809 05:23:00.324" starttime="20170809 05:23:00.323" status="PASS"></status>
</kw>
<status endtime="20170809 05:23:00.324" starttime="20170809 05:22:40.912" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170809 05:23:00.325" starttime="20170809 05:12:30.029" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: FW Progress, Baseboard Init != FW Progress, Starting OS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170809 05:23:00.326" starttime="20170809 05:12:29.993" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170809 05:23:00.329" starttime="20170809 05:12:23.750" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
