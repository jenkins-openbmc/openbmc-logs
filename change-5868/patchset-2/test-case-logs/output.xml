<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170810 04:41:14.788">
<suite name="Tests" source="/tmp/fspcibld/9928/obmc-robot/tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 04:41:15.287" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 04:41:15.287" starttime="20170810 04:41:15.286" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:41:15.287" level="INFO">${has_host} = False</msg>
<status endtime="20170810 04:41:15.287" starttime="20170810 04:41:15.286" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 04:41:15.288" starttime="20170810 04:41:15.288" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:15.288" starttime="20170810 04:41:15.287" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170810 04:41:15.289" level="INFO">${port_num} = 22</msg>
<status endtime="20170810 04:41:15.289" starttime="20170810 04:41:15.289" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170810 04:41:15.290" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170810 04:41:15.290" starttime="20170810 04:41:15.290" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170810 04:41:15.290" level="INFO">${https_num} = 443</msg>
<status endtime="20170810 04:41:15.290" starttime="20170810 04:41:15.290" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170810 04:41:15.291" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170810 04:41:15.291" starttime="20170810 04:41:15.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:15.291" starttime="20170810 04:41:15.289" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:15.291" starttime="20170810 04:41:15.288" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 04:41:15.292" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 04:41:15.292" starttime="20170810 04:41:15.292" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:41:15.292" level="INFO">${has_port} = False</msg>
<status endtime="20170810 04:41:15.292" starttime="20170810 04:41:15.291" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 04:41:15.294" starttime="20170810 04:41:15.294" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 04:41:15.294" starttime="20170810 04:41:15.294" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:15.295" starttime="20170810 04:41:15.293" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:15.295" starttime="20170810 04:41:15.293" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 04:41:15.295" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170810 04:41:17.022" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 04:41:17.022" starttime="20170810 04:41:15.295" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:17.023" starttime="20170810 04:41:15.285" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:41:17.024" level="INFO">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg timestamp="20170810 04:41:17.113" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:41:17.113" level="INFO">${output} = VERSION_ID="v1.99.8-209-g68ccdfc"</msg>
<msg timestamp="20170810 04:41:17.114" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:41:17.114" starttime="20170810 04:41:17.023" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:41:17.115" level="INFO">Length is 0</msg>
<status endtime="20170810 04:41:17.115" starttime="20170810 04:41:17.114" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20170810 04:41:17.115" level="INFO">VERSION_ID="v1.99.8-209-g68ccdfc"</msg>
<status endtime="20170810 04:41:17.115" starttime="20170810 04:41:17.115" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:17.116" starttime="20170810 04:41:17.023" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:17.116" starttime="20170810 04:41:17.023" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:41:17.117" level="INFO">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg timestamp="20170810 04:41:17.346" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170810 04:41:17.346" level="INFO">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg timestamp="20170810 04:41:17.346" level="INFO">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status endtime="20170810 04:41:17.346" starttime="20170810 04:41:17.117" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:41:17.346" level="INFO">Length is 81</msg>
<msg timestamp="20170810 04:41:17.347" level="FAIL">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status endtime="20170810 04:41:17.347" starttime="20170810 04:41:17.346" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:17.347" starttime="20170810 04:41:17.116" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:17.347" starttime="20170810 04:41:17.116" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:17.347" starttime="20170810 04:41:17.116" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 04:41:17.528" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:41:17.528" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170810 04:41:18.327" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170810 04:41:18.328" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 04:41:18.416" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:41:18.425" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 04:41:18.425" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 04:41:18.425" level="INFO">${rc} = 0</msg>
<status endtime="20170810 04:41:18.425" starttime="20170810 04:41:17.348" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:41:18.426" level="INFO">Length is 0</msg>
<status endtime="20170810 04:41:18.426" starttime="20170810 04:41:18.425" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 04:41:18.426" level="INFO">Length is 11</msg>
<status endtime="20170810 04:41:18.426" starttime="20170810 04:41:18.426" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:18.426" level="INFO">${bmc_model} = Witherspoon</msg>
<status endtime="20170810 04:41:18.426" starttime="20170810 04:41:17.348" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 04:41:18.427" level="INFO">BMC Model=Witherspoon</msg>
<status endtime="20170810 04:41:18.427" starttime="20170810 04:41:18.427" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.427" starttime="20170810 04:41:17.348" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.427" starttime="20170810 04:41:17.347" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 04:41:18.430" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status endtime="20170810 04:41:18.430" starttime="20170810 04:41:18.429" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:41:18.430" level="INFO">${has_host} = False</msg>
<status endtime="20170810 04:41:18.430" starttime="20170810 04:41:18.429" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170810 04:41:18.431" starttime="20170810 04:41:18.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.432" starttime="20170810 04:41:18.431" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg timestamp="20170810 04:41:18.433" level="INFO">${port_num} = 22</msg>
<status endtime="20170810 04:41:18.433" starttime="20170810 04:41:18.433" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg timestamp="20170810 04:41:18.434" level="INFO">${SSH_PORT} = 22</msg>
<status endtime="20170810 04:41:18.434" starttime="20170810 04:41:18.433" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg timestamp="20170810 04:41:18.434" level="INFO">${https_num} = 443</msg>
<status endtime="20170810 04:41:18.434" starttime="20170810 04:41:18.434" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg timestamp="20170810 04:41:18.435" level="INFO">${AUTH_URI} = https://9.41.166.169:443</msg>
<status endtime="20170810 04:41:18.435" starttime="20170810 04:41:18.434" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.435" starttime="20170810 04:41:18.432" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.435" starttime="20170810 04:41:18.432" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 04:41:18.436" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status endtime="20170810 04:41:18.436" starttime="20170810 04:41:18.436" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:41:18.436" level="INFO">${has_port} = False</msg>
<status endtime="20170810 04:41:18.436" starttime="20170810 04:41:18.435" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170810 04:41:18.438" starttime="20170810 04:41:18.438" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170810 04:41:18.439" starttime="20170810 04:41:18.438" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.439" starttime="20170810 04:41:18.437" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:18.439" starttime="20170810 04:41:18.437" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 04:41:18.439" level="INFO">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg timestamp="20170810 04:41:20.182" level="INFO">Read output: root@witherspoon:~#</msg>
<status endtime="20170810 04:41:20.183" starttime="20170810 04:41:18.439" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.183" starttime="20170810 04:41:18.428" status="PASS"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:41:20.184" level="INFO">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg timestamp="20170810 04:41:20.272" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:41:20.273" level="INFO">${stdout} = /tmp/core_%e.%p</msg>
<msg timestamp="20170810 04:41:20.273" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:41:20.273" starttime="20170810 04:41:20.184" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.273" level="INFO">Length is 0</msg>
<status endtime="20170810 04:41:20.274" starttime="20170810 04:41:20.273" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.274" level="INFO">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170810 04:41:20.274" starttime="20170810 04:41:20.183" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170810 04:41:20.274" starttime="20170810 04:41:20.274" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.275" starttime="20170810 04:41:18.428" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.275" starttime="20170810 04:41:18.427" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170810 04:41:20.275" starttime="20170810 04:41:20.275" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.275" starttime="20170810 04:41:15.285" status="PASS"></status>
</kw>
<suite name="Security" source="/tmp/fspcibld/9928/obmc-robot/tests/security" id="s1-s1">
<suite name="Test Ssl" source="/tmp/fspcibld/9928/obmc-robot/tests/security/test_ssl.robot" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:20.358" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:20.358" starttime="20170810 04:41:20.357" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:20.359" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:20.359" starttime="20170810 04:41:20.358" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:20.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:20.359" starttime="20170810 04:41:20.359" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:20.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:20.360" starttime="20170810 04:41:20.360" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.573" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:20.573" starttime="20170810 04:41:20.361" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:20.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:20.574" starttime="20170810 04:41:20.360" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.574" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:20.575" starttime="20170810 04:41:20.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:20.575" starttime="20170810 04:41:20.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.575" starttime="20170810 04:41:20.357" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.575" starttime="20170810 04:41:20.356" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.576" starttime="20170810 04:41:20.356" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:20.580" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:20.581" starttime="20170810 04:41:20.580" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:20.581" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:20.581" starttime="20170810 04:41:20.581" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:20.582" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:20.582" starttime="20170810 04:41:20.581" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:20.582" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:20.582" starttime="20170810 04:41:20.582" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.817" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:20.817" starttime="20170810 04:41:20.583" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:20.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:20.817" starttime="20170810 04:41:20.583" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.818" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:20.818" starttime="20170810 04:41:20.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:20.819" starttime="20170810 04:41:20.818" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.819" starttime="20170810 04:41:20.579" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.819" starttime="20170810 04:41:20.579" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.819" starttime="20170810 04:41:20.578" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:20.820" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:41:20.820" starttime="20170810 04:41:20.819" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:20.822" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:20.822" starttime="20170810 04:41:20.821" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:20.823" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:20.823" starttime="20170810 04:41:20.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.823" starttime="20170810 04:41:20.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.823" starttime="20170810 04:41:20.820" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.823" starttime="20170810 04:41:20.820" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:20.915" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:20.916" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:20.916" starttime="20170810 04:41:20.823" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:20.918" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:20.918" starttime="20170810 04:41:20.917" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:20.919" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:20.920" starttime="20170810 04:41:20.919" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.920" starttime="20170810 04:41:20.918" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.920" starttime="20170810 04:41:20.917" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.920" starttime="20170810 04:41:20.916" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:20.920" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:20.920" starttime="20170810 04:41:20.920" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:20.921" starttime="20170810 04:41:20.578" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.921" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:20.921" starttime="20170810 04:41:20.921" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:20.922" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:20.922" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:20.922" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 04:41:20.922" starttime="20170810 04:41:20.921" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.922" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 04:41:20.922" starttime="20170810 04:41:20.577" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.923" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 04:41:20.923" starttime="20170810 04:41:20.577" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 04:41:20.924" level="FAIL">Off != Quiesced</msg>
<status endtime="20170810 04:41:20.924" starttime="20170810 04:41:20.923" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:41:20.924" level="INFO">${status} = False</msg>
<status endtime="20170810 04:41:20.924" starttime="20170810 04:41:20.923" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.924" level="INFO">${status} = False</msg>
<status endtime="20170810 04:41:20.924" starttime="20170810 04:41:20.576" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170810 04:41:20.925" starttime="20170810 04:41:20.924" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170810 04:41:20.925" starttime="20170810 04:41:20.925" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 04:41:20.935" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 04:41:20.935" starttime="20170810 04:41:20.926" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 04:41:20.943" level="INFO">${FFDC_DIR_PATH} = </msg>
<status endtime="20170810 04:41:20.943" starttime="20170810 04:41:20.935" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:41:20.945" level="INFO">${cur_time} = 2017-08-10 04:41:20:944988</msg>
<status endtime="20170810 04:41:20.945" starttime="20170810 04:41:20.945" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:41:20.946" level="INFO">${cur_time} = 20170810044120944988</msg>
<status endtime="20170810 04:41:20.946" starttime="20170810 04:41:20.945" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.946" starttime="20170810 04:41:20.944" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.950" level="INFO">${FFDC_TIME} = 20170810044120944988</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:41:20.951" level="INFO">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170810 04:41:20.951" starttime="20170810 04:41:20.951" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:41:20.952" level="INFO">${suite_name} = 20170810044120944988_TestsSecurityTestSsl</msg>
<status endtime="20170810 04:41:20.952" starttime="20170810 04:41:20.952" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:41:20.953" level="INFO">${test_name} = TestSSLConnection</msg>
<status endtime="20170810 04:41:20.953" starttime="20170810 04:41:20.952" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:41:20.953" level="INFO">${test_name} = 20170810044120944988_TestSSLConnection</msg>
<status endtime="20170810 04:41:20.953" starttime="20170810 04:41:20.953" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.954" starttime="20170810 04:41:20.951" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.954" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/9928/obmc-robot/logs/20170810044120944988_TestsSecurityTestSsl/20170810044120944988_TestSSLConnection/</msg>
<msg timestamp="20170810 04:41:20.958" level="INFO">${FFDC_PREFIX} = 20170810044120944988_</msg>
<status endtime="20170810 04:41:20.958" starttime="20170810 04:41:20.944" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.958" starttime="20170810 04:41:20.944" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 04:41:20.959" starttime="20170810 04:41:20.959" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:41:20.960" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs"&gt;/tmp/fspcibld/9928/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170810 04:41:20.960" starttime="20170810 04:41:20.959" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 04:41:20.961" level="FAIL">File '/tmp/fspcibld/9928/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170810 04:41:20.961" starttime="20170810 04:41:20.961" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:41:20.961" level="INFO">${exist} = False</msg>
<status endtime="20170810 04:41:20.961" starttime="20170810 04:41:20.960" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:41:20.962" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:41:20.962" starttime="20170810 04:41:20.962" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.962" starttime="20170810 04:41:20.961" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 04:41:20.963" starttime="20170810 04:41:20.963" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:41:20.964" level="INFO">${cur_time} = 2017-08-10 04:41:20:963803</msg>
<status endtime="20170810 04:41:20.964" starttime="20170810 04:41:20.964" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:41:20.965" level="INFO">${cur_time} = 20170810044120963803</msg>
<status endtime="20170810 04:41:20.965" starttime="20170810 04:41:20.965" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:20.965" level="INFO">${cur_time} = 20170810044120963803</msg>
<status endtime="20170810 04:41:20.965" starttime="20170810 04:41:20.963" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:41:20.966" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:41:20.966" starttime="20170810 04:41:20.965" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.966" starttime="20170810 04:41:20.925" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:20.966" starttime="20170810 04:41:20.576" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20170810 04:41:20.966" starttime="20170810 04:41:20.355" critical="yes" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:20.967" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:20.967" starttime="20170810 04:41:20.967" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170810 04:41:20.967" starttime="20170810 04:41:20.278" status="PASS"></status>
</suite>
<status endtime="20170810 04:41:20.968" starttime="20170810 04:41:20.276" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" source="/tmp/fspcibld/9928/obmc-robot/tests/test_basic_poweron.robot" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 04:41:21.004" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:41:21.004" starttime="20170810 04:41:21.004" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 04:41:21.005" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:41:21.005" starttime="20170810 04:41:21.005" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.006" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:41:21.006" starttime="20170810 04:41:21.003" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 04:41:21.008" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:41:21.008" starttime="20170810 04:41:21.007" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 04:41:21.008" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:41:21.008" starttime="20170810 04:41:21.008" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.009" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:41:21.009" starttime="20170810 04:41:21.007" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.009" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 04:41:21.010" starttime="20170810 04:41:21.009" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:41:21.010" starttime="20170810 04:41:21.010" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:41:21.014" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:41:21.018" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:41:21.018" level="INFO">${output} = /tmp/fspcibld/9928/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 04:41:21.018" starttime="20170810 04:41:21.010" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:41:21.021" starttime="20170810 04:41:21.020" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 04:41:21.022" starttime="20170810 04:41:21.021" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.023" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 04:41:21.023" starttime="20170810 04:41:21.022" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.023" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 04:41:21.023" starttime="20170810 04:41:21.009" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.024" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 04:41:21.024" starttime="20170810 04:41:21.024" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:41:21.025" starttime="20170810 04:41:21.025" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170810 04:41:21.029" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:41:21.041" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:41:21.041" level="INFO">${os_con_pid} = </msg>
<status endtime="20170810 04:41:21.041" starttime="20170810 04:41:21.026" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 04:41:21.044" starttime="20170810 04:41:21.043" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.045" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 04:41:21.045" starttime="20170810 04:41:21.044" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:41:21.046" starttime="20170810 04:41:21.045" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:41:21.046" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 04:41:21.046" level="INFO">${output} = None</msg>
<status endtime="20170810 04:41:21.046" starttime="20170810 04:41:21.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:41:21.047" starttime="20170810 04:41:21.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg timestamp="20170810 04:41:21.050" level="FAIL">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status endtime="20170810 04:41:21.050" starttime="20170810 04:41:21.049" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:21.050" starttime="20170810 04:41:21.048" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.050" starttime="20170810 04:41:21.047" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:41:21.051" level="INFO">${output} = </msg>
<status endtime="20170810 04:41:21.051" starttime="20170810 04:41:21.051" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170810 04:41:21.052" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170810 04:41:21.052" starttime="20170810 04:41:21.051" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 04:41:21.099" starttime="20170810 04:41:21.054" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.100" level="INFO">${rc} = 1</msg>
<msg timestamp="20170810 04:41:21.100" level="INFO">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170810 04:41:21.100" starttime="20170810 04:41:21.052" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.100" level="INFO">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status endtime="20170810 04:41:21.100" starttime="20170810 04:41:21.006" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:41:21.102" level="INFO">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 04:41:21.102" starttime="20170810 04:41:21.102" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.103" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 04:41:21.103" starttime="20170810 04:41:21.103" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:41:21.104" starttime="20170810 04:41:21.103" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:41:21.106" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:41:21.191" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:41:21.192" level="INFO">${output} = /tmp/fspcibld/9928/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 04:41:21.192" starttime="20170810 04:41:21.104" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:41:21.197" starttime="20170810 04:41:21.196" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 04:41:21.198" starttime="20170810 04:41:21.197" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.199" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 04:41:21.199" starttime="20170810 04:41:21.198" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.200" level="INFO">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 04:41:21.200" starttime="20170810 04:41:21.102" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:41:21.201" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170810 04:41:21.201" starttime="20170810 04:41:21.200" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:41:21.201" starttime="20170810 04:41:21.201" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:41:21.216" level="INFO">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg timestamp="20170810 04:41:21.232" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:41:21.232" level="INFO">${output} = </msg>
<status endtime="20170810 04:41:21.233" starttime="20170810 04:41:21.202" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 04:41:21.246" starttime="20170810 04:41:21.243" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.247" starttime="20170810 04:41:21.003" status="PASS"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg timestamp="20170810 04:41:21.249" level="INFO">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 04:41:21.255" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170810 04:41:21.255" starttime="20170810 04:41:21.254" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:21.257" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 04:41:21.257" starttime="20170810 04:41:21.256" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:21.265" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:21.270" starttime="20170810 04:41:21.264" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:21.271" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:21.271" starttime="20170810 04:41:21.270" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:21.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:21.271" starttime="20170810 04:41:21.271" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:21.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:21.272" starttime="20170810 04:41:21.272" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:21.796" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:21.796" starttime="20170810 04:41:21.273" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:21.796" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:21.796" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:21.796" starttime="20170810 04:41:21.272" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:21.797" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:21.797" starttime="20170810 04:41:21.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:21.798" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:21.798" starttime="20170810 04:41:21.798" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.798" starttime="20170810 04:41:21.263" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.798" starttime="20170810 04:41:21.261" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.798" starttime="20170810 04:41:21.259" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:21.799" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 04:41:21.799" starttime="20170810 04:41:21.799" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:21.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:21.800" starttime="20170810 04:41:21.799" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 04:41:21.800" starttime="20170810 04:41:21.800" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:21.802" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170810 04:41:21.802" starttime="20170810 04:41:21.801" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:21.803" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 04:41:21.803" starttime="20170810 04:41:21.802" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.803" starttime="20170810 04:41:21.802" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:21.803" starttime="20170810 04:41:21.800" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:22.389" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 04:41:22.389" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:22.389" starttime="20170810 04:41:21.803" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:22.391" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:22.391" starttime="20170810 04:41:22.390" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:22.392" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:22.392" starttime="20170810 04:41:22.391" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.392" starttime="20170810 04:41:22.391" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.392" starttime="20170810 04:41:22.389" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:22.392" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:22.392" starttime="20170810 04:41:22.392" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:22.393" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:22.393" starttime="20170810 04:41:21.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:22.393" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:22.393" starttime="20170810 04:41:22.393" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 04:41:22.394" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:22.394" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:22.394" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170810 04:41:22.394" starttime="20170810 04:41:22.394" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.394" starttime="20170810 04:41:21.256" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 04:41:22.395" starttime="20170810 04:41:22.394" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:22.402" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:22.402" starttime="20170810 04:41:22.401" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:22.403" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:22.403" starttime="20170810 04:41:22.402" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:22.404" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:22.404" starttime="20170810 04:41:22.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:22.405" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:22.405" starttime="20170810 04:41:22.404" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:22.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:22.748" starttime="20170810 04:41:22.406" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:22.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:22.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:22.748" starttime="20170810 04:41:22.406" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:22.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:22.749" starttime="20170810 04:41:22.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:22.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:22.750" starttime="20170810 04:41:22.749" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.750" starttime="20170810 04:41:22.400" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.750" starttime="20170810 04:41:22.400" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.750" starttime="20170810 04:41:22.399" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:22.751" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:41:22.751" starttime="20170810 04:41:22.750" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:22.753" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:22.753" starttime="20170810 04:41:22.752" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:22.754" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:22.754" starttime="20170810 04:41:22.754" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.754" starttime="20170810 04:41:22.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.754" starttime="20170810 04:41:22.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:22.754" starttime="20170810 04:41:22.751" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:23.170" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:23.170" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:23.170" starttime="20170810 04:41:22.755" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:23.172" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:23.172" starttime="20170810 04:41:23.171" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:23.173" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:23.173" starttime="20170810 04:41:23.172" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:23.173" starttime="20170810 04:41:23.172" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:23.173" starttime="20170810 04:41:23.171" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:23.173" starttime="20170810 04:41:23.170" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:23.174" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:23.174" starttime="20170810 04:41:23.173" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:23.174" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:23.174" starttime="20170810 04:41:22.398" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:23.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:23.175" starttime="20170810 04:41:23.174" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:23.175" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:23.175" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:23.175" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:41:23.175" starttime="20170810 04:41:23.175" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:23.176" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:41:23.176" starttime="20170810 04:41:22.397" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:23.176" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:41:23.176" starttime="20170810 04:41:22.397" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:41:23.176" starttime="20170810 04:41:23.176" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:23.177" starttime="20170810 04:41:22.396" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:23.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:23.181" starttime="20170810 04:41:23.180" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:23.181" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:23.181" starttime="20170810 04:41:23.181" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:23.182" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:23.182" starttime="20170810 04:41:23.182" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:23.183" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:23.183" starttime="20170810 04:41:23.182" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:24.474" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:24.474" starttime="20170810 04:41:23.183" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:24.474" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:24.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:24.474" starttime="20170810 04:41:23.183" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:24.475" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:24.475" starttime="20170810 04:41:24.475" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:24.476" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:24.476" starttime="20170810 04:41:24.475" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:24.476" starttime="20170810 04:41:23.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:24.476" starttime="20170810 04:41:23.179" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:24.476" starttime="20170810 04:41:23.178" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:24.477" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:41:24.477" starttime="20170810 04:41:24.476" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:24.479" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:24.479" starttime="20170810 04:41:24.478" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:24.480" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:24.480" starttime="20170810 04:41:24.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:24.480" starttime="20170810 04:41:24.479" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:24.480" starttime="20170810 04:41:24.477" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:24.480" starttime="20170810 04:41:24.477" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:28.873" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:28.874" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:28.874" starttime="20170810 04:41:24.480" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:28.876" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:28.876" starttime="20170810 04:41:28.875" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:28.877" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:28.877" starttime="20170810 04:41:28.877" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:28.877" starttime="20170810 04:41:28.876" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:28.877" starttime="20170810 04:41:28.875" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:28.877" starttime="20170810 04:41:28.874" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:28.878" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:28.878" starttime="20170810 04:41:28.878" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:28.878" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:28.878" starttime="20170810 04:41:23.178" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:28.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:28.879" starttime="20170810 04:41:28.878" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:28.879" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:28.879" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:28.880" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 04:41:28.880" starttime="20170810 04:41:28.879" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:28.880" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 04:41:28.880" starttime="20170810 04:41:23.177" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:28.880" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 04:41:28.880" starttime="20170810 04:41:23.177" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:41:28.881" starttime="20170810 04:41:28.880" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:28.881" starttime="20170810 04:41:22.396" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:28.881" starttime="20170810 04:41:22.395" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:28.881" starttime="20170810 04:41:21.252" status="PASS"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 04:41:28.882" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status endtime="20170810 04:41:28.882" starttime="20170810 04:41:28.882" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:28.883" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 04:41:28.883" starttime="20170810 04:41:28.883" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:28.886" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:28.886" starttime="20170810 04:41:28.885" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:28.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:28.887" starttime="20170810 04:41:28.886" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:28.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:28.887" starttime="20170810 04:41:28.887" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:28.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:28.888" starttime="20170810 04:41:28.888" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:29.259" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:29.259" starttime="20170810 04:41:28.889" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:29.259" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:29.259" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:29.259" starttime="20170810 04:41:28.888" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:29.260" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:29.260" starttime="20170810 04:41:29.260" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:29.261" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:29.261" starttime="20170810 04:41:29.260" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:29.261" starttime="20170810 04:41:28.885" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:29.261" starttime="20170810 04:41:28.884" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:29.261" starttime="20170810 04:41:28.884" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:29.261" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 04:41:29.262" starttime="20170810 04:41:29.261" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:29.262" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:29.262" starttime="20170810 04:41:29.262" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 04:41:29.263" starttime="20170810 04:41:29.262" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:29.265" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status endtime="20170810 04:41:29.265" starttime="20170810 04:41:29.264" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:29.265" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 04:41:29.266" starttime="20170810 04:41:29.265" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:29.266" starttime="20170810 04:41:29.265" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:29.266" starttime="20170810 04:41:29.263" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:30.927" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 04:41:30.927" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:30.927" starttime="20170810 04:41:29.266" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:30.928" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:30.928" starttime="20170810 04:41:30.927" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:30.929" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:30.929" starttime="20170810 04:41:30.929" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:30.929" starttime="20170810 04:41:30.928" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:30.929" starttime="20170810 04:41:30.927" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:30.930" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:30.930" starttime="20170810 04:41:30.930" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:30.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:30.930" starttime="20170810 04:41:28.883" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:30.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:30.931" starttime="20170810 04:41:30.930" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 04:41:30.931" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:30.931" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:30.931" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170810 04:41:30.931" starttime="20170810 04:41:30.931" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:30.932" starttime="20170810 04:41:28.882" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 04:41:30.932" starttime="20170810 04:41:30.932" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:30.937" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:30.937" starttime="20170810 04:41:30.936" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:30.938" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:30.938" starttime="20170810 04:41:30.938" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:30.939" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:30.939" starttime="20170810 04:41:30.938" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:30.939" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:30.939" starttime="20170810 04:41:30.939" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:33.083" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:33.083" starttime="20170810 04:41:30.940" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:33.083" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:33.083" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:33.083" starttime="20170810 04:41:30.940" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:33.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:33.084" starttime="20170810 04:41:33.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:33.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:33.084" starttime="20170810 04:41:33.084" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:33.084" starttime="20170810 04:41:30.936" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:33.084" starttime="20170810 04:41:30.935" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:33.085" starttime="20170810 04:41:30.935" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:33.085" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:41:33.085" starttime="20170810 04:41:33.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:33.087" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:33.087" starttime="20170810 04:41:33.086" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:33.088" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:33.088" starttime="20170810 04:41:33.088" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:33.088" starttime="20170810 04:41:33.087" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:33.089" starttime="20170810 04:41:33.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:33.089" starttime="20170810 04:41:33.085" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:36.689" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:36.690" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:36.690" starttime="20170810 04:41:33.089" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:36.692" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:36.692" starttime="20170810 04:41:36.691" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:36.693" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:36.693" starttime="20170810 04:41:36.692" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:36.693" starttime="20170810 04:41:36.692" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:36.693" starttime="20170810 04:41:36.691" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:36.693" starttime="20170810 04:41:36.690" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:36.693" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:36.694" starttime="20170810 04:41:36.693" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:36.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:36.694" starttime="20170810 04:41:30.934" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:36.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:36.695" starttime="20170810 04:41:36.694" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:36.695" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:36.695" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:36.695" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:41:36.695" starttime="20170810 04:41:36.695" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:36.696" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:41:36.696" starttime="20170810 04:41:30.934" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:36.696" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:41:36.696" starttime="20170810 04:41:30.933" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 04:41:36.697" level="FAIL">On != Off</msg>
<status endtime="20170810 04:41:36.697" starttime="20170810 04:41:36.696" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:36.697" starttime="20170810 04:41:30.933" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:36.697" starttime="20170810 04:41:30.933" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:46.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:46.703" starttime="20170810 04:41:46.702" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:46.703" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:46.703" starttime="20170810 04:41:46.703" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:46.704" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:46.704" starttime="20170810 04:41:46.704" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:46.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:46.705" starttime="20170810 04:41:46.704" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:46.994" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:46.994" starttime="20170810 04:41:46.705" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:46.994" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:46.994" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:46.994" starttime="20170810 04:41:46.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:46.995" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:46.995" starttime="20170810 04:41:46.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:46.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:46.995" starttime="20170810 04:41:46.995" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:46.995" starttime="20170810 04:41:46.702" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:46.996" starttime="20170810 04:41:46.701" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:46.996" starttime="20170810 04:41:46.701" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:46.996" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:41:46.996" starttime="20170810 04:41:46.996" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:46.999" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:46.999" starttime="20170810 04:41:46.998" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:46.999" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:47.000" starttime="20170810 04:41:46.999" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.000" starttime="20170810 04:41:46.999" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.000" starttime="20170810 04:41:46.997" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.000" starttime="20170810 04:41:46.997" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:47.061" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:47.061" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.061" starttime="20170810 04:41:47.000" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:47.063" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:47.063" starttime="20170810 04:41:47.063" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:47.064" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:47.064" starttime="20170810 04:41:47.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.064" starttime="20170810 04:41:47.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.064" starttime="20170810 04:41:47.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.064" starttime="20170810 04:41:47.061" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:47.065" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:47.065" starttime="20170810 04:41:47.065" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.065" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.065" starttime="20170810 04:41:46.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.066" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.066" starttime="20170810 04:41:47.065" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:47.066" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:47.066" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:47.066" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:41:47.066" starttime="20170810 04:41:47.066" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.067" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:41:47.067" starttime="20170810 04:41:46.699" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.067" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:41:47.067" starttime="20170810 04:41:46.699" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:41:47.068" starttime="20170810 04:41:47.067" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.068" starttime="20170810 04:41:46.698" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:47.071" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:47.072" starttime="20170810 04:41:47.071" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:47.072" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:47.072" starttime="20170810 04:41:47.072" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:47.073" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:47.073" starttime="20170810 04:41:47.072" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:47.073" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:47.073" starttime="20170810 04:41:47.073" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.310" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:47.311" starttime="20170810 04:41:47.074" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.311" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:47.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.311" starttime="20170810 04:41:47.074" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.311" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.311" starttime="20170810 04:41:47.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.312" starttime="20170810 04:41:47.312" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.312" starttime="20170810 04:41:47.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.312" starttime="20170810 04:41:47.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.312" starttime="20170810 04:41:47.069" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:47.313" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:41:47.313" starttime="20170810 04:41:47.313" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:47.315" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:47.315" starttime="20170810 04:41:47.314" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:47.316" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:47.316" starttime="20170810 04:41:47.316" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.316" starttime="20170810 04:41:47.315" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.316" starttime="20170810 04:41:47.314" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.316" starttime="20170810 04:41:47.313" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:47.408" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:47.408" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.408" starttime="20170810 04:41:47.317" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:47.410" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:47.410" starttime="20170810 04:41:47.409" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:47.410" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:47.411" starttime="20170810 04:41:47.410" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.411" starttime="20170810 04:41:47.410" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.411" starttime="20170810 04:41:47.409" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.411" starttime="20170810 04:41:47.408" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:47.411" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:47.411" starttime="20170810 04:41:47.411" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.412" starttime="20170810 04:41:47.069" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.412" starttime="20170810 04:41:47.412" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:47.413" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:47.413" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:47.413" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:41:47.413" starttime="20170810 04:41:47.412" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.413" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:41:47.413" starttime="20170810 04:41:47.068" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.413" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:41:47.414" starttime="20170810 04:41:47.068" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:41:47.414" starttime="20170810 04:41:47.414" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:47.420" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:47.421" starttime="20170810 04:41:47.420" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:47.421" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:47.422" starttime="20170810 04:41:47.421" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:47.422" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:47.422" starttime="20170810 04:41:47.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:47.423" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:47.423" starttime="20170810 04:41:47.422" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.646" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:47.646" starttime="20170810 04:41:47.423" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.646" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:47.646" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.646" starttime="20170810 04:41:47.423" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.647" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.647" starttime="20170810 04:41:47.646" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.647" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.647" starttime="20170810 04:41:47.647" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.648" starttime="20170810 04:41:47.417" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.648" starttime="20170810 04:41:47.417" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.648" starttime="20170810 04:41:47.416" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:47.648" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:41:47.648" starttime="20170810 04:41:47.648" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:47.650" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:41:47.650" starttime="20170810 04:41:47.650" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:47.651" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:41:47.651" starttime="20170810 04:41:47.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.651" starttime="20170810 04:41:47.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.652" starttime="20170810 04:41:47.649" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.652" starttime="20170810 04:41:47.649" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:47.719" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:41:47.719" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.719" starttime="20170810 04:41:47.652" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:47.720" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:47.721" starttime="20170810 04:41:47.720" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:47.722" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:47.722" starttime="20170810 04:41:47.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.722" starttime="20170810 04:41:47.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.722" starttime="20170810 04:41:47.720" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:47.722" starttime="20170810 04:41:47.719" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:47.723" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:47.723" starttime="20170810 04:41:47.722" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:47.723" starttime="20170810 04:41:47.415" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:47.723" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:47.723" starttime="20170810 04:41:47.723" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:47.724" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:47.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:47.724" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:41:47.724" starttime="20170810 04:41:47.724" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.724" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:41:47.725" starttime="20170810 04:41:47.415" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:47.725" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:41:47.725" starttime="20170810 04:41:47.415" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:41:47.725" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:41:47.725" starttime="20170810 04:41:47.725" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:47.726" starttime="20170810 04:41:47.414" status="FAIL"></status>
</kw>
<status endtime="20170810 04:41:47.726" starttime="20170810 04:41:46.698" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:57.732" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:57.732" starttime="20170810 04:41:57.732" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:57.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:57.733" starttime="20170810 04:41:57.733" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:57.734" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:57.734" starttime="20170810 04:41:57.733" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:57.734" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:57.734" starttime="20170810 04:41:57.734" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:58.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:58.233" starttime="20170810 04:41:57.735" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:58.233" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:58.233" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:58.233" starttime="20170810 04:41:57.735" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:58.234" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:58.234" starttime="20170810 04:41:58.234" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:58.235" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:58.235" starttime="20170810 04:41:58.234" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.235" starttime="20170810 04:41:57.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.235" starttime="20170810 04:41:57.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.235" starttime="20170810 04:41:57.730" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:58.236" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:41:58.236" starttime="20170810 04:41:58.235" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:58.238" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:58.238" starttime="20170810 04:41:58.237" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:58.239" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:58.239" starttime="20170810 04:41:58.239" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.239" starttime="20170810 04:41:58.238" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.239" starttime="20170810 04:41:58.237" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.239" starttime="20170810 04:41:58.236" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:58.521" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:58.522" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:58.522" starttime="20170810 04:41:58.239" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:58.523" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:58.523" starttime="20170810 04:41:58.523" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:58.524" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:58.524" starttime="20170810 04:41:58.524" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.524" starttime="20170810 04:41:58.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.525" starttime="20170810 04:41:58.522" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.525" starttime="20170810 04:41:58.522" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:58.525" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:58.525" starttime="20170810 04:41:58.525" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:58.525" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:58.525" starttime="20170810 04:41:57.729" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:58.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:58.526" starttime="20170810 04:41:58.526" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:58.526" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:58.526" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:58.527" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:41:58.527" starttime="20170810 04:41:58.526" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:58.527" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:41:58.527" starttime="20170810 04:41:57.729" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:58.527" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:41:58.527" starttime="20170810 04:41:57.728" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:41:58.528" starttime="20170810 04:41:58.528" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:58.528" starttime="20170810 04:41:57.728" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:58.532" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:58.533" starttime="20170810 04:41:58.531" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:58.533" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:58.533" starttime="20170810 04:41:58.533" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:58.534" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:58.534" starttime="20170810 04:41:58.533" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:58.534" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:58.534" starttime="20170810 04:41:58.534" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.040" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:59.040" starttime="20170810 04:41:58.535" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:59.040" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:59.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:59.040" starttime="20170810 04:41:58.535" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.041" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:59.041" starttime="20170810 04:41:59.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:59.041" starttime="20170810 04:41:59.041" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.041" starttime="20170810 04:41:58.531" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.042" starttime="20170810 04:41:58.530" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.042" starttime="20170810 04:41:58.530" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:59.042" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:41:59.042" starttime="20170810 04:41:59.042" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:59.044" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:59.044" starttime="20170810 04:41:59.044" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:59.045" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:41:59.045" starttime="20170810 04:41:59.045" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.045" starttime="20170810 04:41:59.044" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.046" starttime="20170810 04:41:59.043" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.046" starttime="20170810 04:41:59.043" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:41:59.380" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:41:59.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:59.381" starttime="20170810 04:41:59.046" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:59.384" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:59.384" starttime="20170810 04:41:59.383" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:59.385" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:41:59.385" starttime="20170810 04:41:59.385" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.385" starttime="20170810 04:41:59.384" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.385" starttime="20170810 04:41:59.382" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.385" starttime="20170810 04:41:59.381" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:41:59.386" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:41:59.386" starttime="20170810 04:41:59.385" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:59.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:59.386" starttime="20170810 04:41:58.529" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.386" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:59.386" starttime="20170810 04:41:59.386" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:41:59.387" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:41:59.387" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:41:59.387" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:41:59.387" starttime="20170810 04:41:59.387" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:59.388" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:41:59.388" starttime="20170810 04:41:58.529" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:59.388" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:41:59.388" starttime="20170810 04:41:58.528" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:41:59.388" starttime="20170810 04:41:59.388" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:41:59.393" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:41:59.393" starttime="20170810 04:41:59.392" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:41:59.394" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:41:59.394" starttime="20170810 04:41:59.393" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:41:59.394" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:41:59.394" starttime="20170810 04:41:59.394" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:41:59.395" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:41:59.395" starttime="20170810 04:41:59.394" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.913" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:41:59.913" starttime="20170810 04:41:59.396" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:41:59.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:41:59.914" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:41:59.914" starttime="20170810 04:41:59.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.914" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:59.914" starttime="20170810 04:41:59.914" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:41:59.915" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:41:59.915" starttime="20170810 04:41:59.915" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.915" starttime="20170810 04:41:59.392" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.915" starttime="20170810 04:41:59.391" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.915" starttime="20170810 04:41:59.391" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:41:59.916" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:41:59.916" starttime="20170810 04:41:59.916" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:41:59.918" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:41:59.918" starttime="20170810 04:41:59.917" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:41:59.919" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:41:59.919" starttime="20170810 04:41:59.919" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.919" starttime="20170810 04:41:59.918" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.919" starttime="20170810 04:41:59.917" status="PASS"></status>
</kw>
<status endtime="20170810 04:41:59.919" starttime="20170810 04:41:59.916" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:00.209" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:42:00.209" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:00.209" starttime="20170810 04:41:59.920" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:00.211" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:00.211" starttime="20170810 04:42:00.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:00.212" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:00.212" starttime="20170810 04:42:00.212" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:00.212" starttime="20170810 04:42:00.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:00.212" starttime="20170810 04:42:00.210" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:00.212" starttime="20170810 04:42:00.210" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:00.213" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:00.213" starttime="20170810 04:42:00.212" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:00.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:00.213" starttime="20170810 04:41:59.390" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:00.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:00.214" starttime="20170810 04:42:00.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:00.214" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:00.214" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:00.214" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:42:00.214" starttime="20170810 04:42:00.214" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:00.215" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:42:00.215" starttime="20170810 04:41:59.389" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:00.215" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:42:00.215" starttime="20170810 04:41:59.389" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:42:00.215" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:42:00.216" starttime="20170810 04:42:00.215" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:00.216" starttime="20170810 04:41:59.389" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:00.216" starttime="20170810 04:41:57.726" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:10.222" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:10.222" starttime="20170810 04:42:10.222" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:10.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:10.223" starttime="20170810 04:42:10.223" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:10.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:10.224" starttime="20170810 04:42:10.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:10.225" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:10.225" starttime="20170810 04:42:10.224" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:10.596" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:10.596" starttime="20170810 04:42:10.225" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:10.597" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:10.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:10.597" starttime="20170810 04:42:10.225" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:10.597" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:10.597" starttime="20170810 04:42:10.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:10.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:10.598" starttime="20170810 04:42:10.598" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.598" starttime="20170810 04:42:10.221" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.598" starttime="20170810 04:42:10.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.598" starttime="20170810 04:42:10.220" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:10.599" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:42:10.599" starttime="20170810 04:42:10.599" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:10.601" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:10.601" starttime="20170810 04:42:10.600" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:10.602" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:10.602" starttime="20170810 04:42:10.602" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.602" starttime="20170810 04:42:10.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.603" starttime="20170810 04:42:10.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.603" starttime="20170810 04:42:10.599" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:10.741" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:10.742" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:10.742" starttime="20170810 04:42:10.603" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:10.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:10.743" starttime="20170810 04:42:10.743" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:10.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:10.744" starttime="20170810 04:42:10.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.745" starttime="20170810 04:42:10.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.745" starttime="20170810 04:42:10.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.745" starttime="20170810 04:42:10.742" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:10.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:10.745" starttime="20170810 04:42:10.745" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:10.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:10.745" starttime="20170810 04:42:10.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:10.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:10.746" starttime="20170810 04:42:10.746" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:10.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:10.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:10.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:42:10.747" starttime="20170810 04:42:10.746" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:10.747" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:42:10.747" starttime="20170810 04:42:10.218" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:10.747" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:42:10.747" starttime="20170810 04:42:10.217" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:42:10.748" starttime="20170810 04:42:10.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:10.748" starttime="20170810 04:42:10.217" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:10.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:10.752" starttime="20170810 04:42:10.751" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:10.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:10.753" starttime="20170810 04:42:10.753" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:10.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:10.754" starttime="20170810 04:42:10.753" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:10.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:10.754" starttime="20170810 04:42:10.754" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:11.186" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:11.186" starttime="20170810 04:42:10.755" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:11.186" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:11.186" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:11.186" starttime="20170810 04:42:10.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:11.187" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:11.187" starttime="20170810 04:42:11.187" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:11.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:11.188" starttime="20170810 04:42:11.187" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.188" starttime="20170810 04:42:10.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.188" starttime="20170810 04:42:10.750" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.188" starttime="20170810 04:42:10.750" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:11.189" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:42:11.189" starttime="20170810 04:42:11.188" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:11.191" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:11.191" starttime="20170810 04:42:11.190" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:11.192" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:11.192" starttime="20170810 04:42:11.191" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.192" starttime="20170810 04:42:11.191" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.192" starttime="20170810 04:42:11.189" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.192" starttime="20170810 04:42:11.189" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:11.742" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:11.742" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:11.742" starttime="20170810 04:42:11.192" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:11.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:11.743" starttime="20170810 04:42:11.743" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:11.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:11.744" starttime="20170810 04:42:11.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.745" starttime="20170810 04:42:11.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.745" starttime="20170810 04:42:11.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:11.745" starttime="20170810 04:42:11.742" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:11.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:11.745" starttime="20170810 04:42:11.745" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:11.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:11.745" starttime="20170810 04:42:10.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:11.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:11.746" starttime="20170810 04:42:11.746" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:11.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:11.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:11.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:42:11.747" starttime="20170810 04:42:11.746" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:11.747" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:42:11.747" starttime="20170810 04:42:10.749" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:11.747" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:42:11.747" starttime="20170810 04:42:10.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:42:11.748" starttime="20170810 04:42:11.748" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:11.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:11.753" starttime="20170810 04:42:11.752" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:11.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:11.753" starttime="20170810 04:42:11.753" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:11.754" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:11.754" starttime="20170810 04:42:11.753" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:11.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:11.754" starttime="20170810 04:42:11.754" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:12.159" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:12.159" starttime="20170810 04:42:11.755" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:12.159" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:12.160" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:12.160" starttime="20170810 04:42:11.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:12.160" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:12.160" starttime="20170810 04:42:12.160" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:12.161" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:12.161" starttime="20170810 04:42:12.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.161" starttime="20170810 04:42:11.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.161" starttime="20170810 04:42:11.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.161" starttime="20170810 04:42:11.750" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:12.162" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:42:12.162" starttime="20170810 04:42:12.161" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:12.164" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:12.164" starttime="20170810 04:42:12.163" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:12.165" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:12.165" starttime="20170810 04:42:12.165" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.165" starttime="20170810 04:42:12.164" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.165" starttime="20170810 04:42:12.163" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.165" starttime="20170810 04:42:12.162" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:12.723" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:42:12.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:12.723" starttime="20170810 04:42:12.166" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:12.725" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:12.725" starttime="20170810 04:42:12.724" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:12.726" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:12.726" starttime="20170810 04:42:12.726" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.726" starttime="20170810 04:42:12.725" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.726" starttime="20170810 04:42:12.724" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:12.726" starttime="20170810 04:42:12.724" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:12.727" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:12.727" starttime="20170810 04:42:12.727" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:12.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:12.727" starttime="20170810 04:42:11.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:12.728" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:12.728" starttime="20170810 04:42:12.727" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:12.728" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:12.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:12.728" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:42:12.728" starttime="20170810 04:42:12.728" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:12.729" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:42:12.729" starttime="20170810 04:42:11.749" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:12.729" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:42:12.729" starttime="20170810 04:42:11.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:42:12.730" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:42:12.730" starttime="20170810 04:42:12.729" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:12.730" starttime="20170810 04:42:11.748" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:12.730" starttime="20170810 04:42:10.216" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:22.735" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:22.736" starttime="20170810 04:42:22.734" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:22.736" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:22.736" starttime="20170810 04:42:22.736" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:22.737" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:22.737" starttime="20170810 04:42:22.737" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:22.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:22.738" starttime="20170810 04:42:22.737" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:23.124" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:23.124" starttime="20170810 04:42:22.739" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:23.124" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:23.124" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:23.124" starttime="20170810 04:42:22.738" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:23.125" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:23.125" starttime="20170810 04:42:23.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:23.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:23.126" starttime="20170810 04:42:23.125" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.126" starttime="20170810 04:42:22.734" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.126" starttime="20170810 04:42:22.733" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.126" starttime="20170810 04:42:22.733" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:23.127" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:42:23.127" starttime="20170810 04:42:23.126" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:23.129" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:23.129" starttime="20170810 04:42:23.128" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:23.130" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:23.130" starttime="20170810 04:42:23.129" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.130" starttime="20170810 04:42:23.129" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.130" starttime="20170810 04:42:23.127" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.130" starttime="20170810 04:42:23.127" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:23.905" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:23.905" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:23.905" starttime="20170810 04:42:23.130" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:23.906" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:23.907" starttime="20170810 04:42:23.906" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:23.907" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:23.907" starttime="20170810 04:42:23.907" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.908" starttime="20170810 04:42:23.907" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.908" starttime="20170810 04:42:23.905" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.908" starttime="20170810 04:42:23.905" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:23.908" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:23.908" starttime="20170810 04:42:23.908" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:23.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:23.909" starttime="20170810 04:42:22.732" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:23.909" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:23.909" starttime="20170810 04:42:23.909" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:23.910" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:23.910" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:23.910" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:42:23.910" starttime="20170810 04:42:23.910" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:23.910" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:42:23.910" starttime="20170810 04:42:22.732" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:23.911" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:42:23.911" starttime="20170810 04:42:22.731" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:42:23.911" starttime="20170810 04:42:23.911" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:23.911" starttime="20170810 04:42:22.731" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:23.915" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:23.916" starttime="20170810 04:42:23.914" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:23.916" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:23.916" starttime="20170810 04:42:23.916" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:23.917" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:23.917" starttime="20170810 04:42:23.916" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:23.917" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:23.917" starttime="20170810 04:42:23.917" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:24.452" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:24.452" starttime="20170810 04:42:23.918" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:24.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:24.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:24.453" starttime="20170810 04:42:23.918" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:24.453" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:24.453" starttime="20170810 04:42:24.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:24.454" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:24.454" starttime="20170810 04:42:24.454" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:24.454" starttime="20170810 04:42:23.914" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:24.454" starttime="20170810 04:42:23.913" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:24.454" starttime="20170810 04:42:23.913" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:24.455" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:42:24.455" starttime="20170810 04:42:24.455" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:24.457" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:24.457" starttime="20170810 04:42:24.457" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:24.458" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:24.458" starttime="20170810 04:42:24.458" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:24.459" starttime="20170810 04:42:24.458" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:24.459" starttime="20170810 04:42:24.456" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:24.459" starttime="20170810 04:42:24.455" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:25.386" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:25.386" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:25.387" starttime="20170810 04:42:24.459" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:25.388" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:25.388" starttime="20170810 04:42:25.388" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:25.389" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:25.389" starttime="20170810 04:42:25.389" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:25.389" starttime="20170810 04:42:25.388" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:25.389" starttime="20170810 04:42:25.387" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:25.390" starttime="20170810 04:42:25.387" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:25.390" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:25.390" starttime="20170810 04:42:25.390" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:25.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:25.390" starttime="20170810 04:42:23.912" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:25.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:25.391" starttime="20170810 04:42:25.391" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:25.392" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:25.392" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:25.392" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:42:25.392" starttime="20170810 04:42:25.392" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:25.393" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:42:25.393" starttime="20170810 04:42:23.912" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:25.393" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:42:25.393" starttime="20170810 04:42:23.911" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:42:25.394" starttime="20170810 04:42:25.394" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:25.403" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:25.404" starttime="20170810 04:42:25.403" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:25.404" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:25.404" starttime="20170810 04:42:25.404" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:25.405" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:25.405" starttime="20170810 04:42:25.405" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:25.406" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:25.406" starttime="20170810 04:42:25.405" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:26.024" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:26.025" starttime="20170810 04:42:25.407" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:26.025" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:26.025" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:26.025" starttime="20170810 04:42:25.406" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:26.025" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:26.025" starttime="20170810 04:42:26.025" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:26.026" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:26.026" starttime="20170810 04:42:26.026" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.026" starttime="20170810 04:42:25.402" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.026" starttime="20170810 04:42:25.401" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.026" starttime="20170810 04:42:25.400" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:26.027" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:42:26.027" starttime="20170810 04:42:26.027" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:26.029" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:26.029" starttime="20170810 04:42:26.028" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:26.030" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:26.053" starttime="20170810 04:42:26.030" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.053" starttime="20170810 04:42:26.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.053" starttime="20170810 04:42:26.028" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.053" starttime="20170810 04:42:26.027" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:26.983" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:42:26.983" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:26.983" starttime="20170810 04:42:26.054" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:26.985" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:26.985" starttime="20170810 04:42:26.984" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:26.986" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:26.986" starttime="20170810 04:42:26.986" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.986" starttime="20170810 04:42:26.985" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.986" starttime="20170810 04:42:26.984" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:26.986" starttime="20170810 04:42:26.984" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:26.987" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:26.987" starttime="20170810 04:42:26.987" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:26.987" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:26.987" starttime="20170810 04:42:25.399" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:26.988" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:26.988" starttime="20170810 04:42:26.988" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:26.989" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:26.989" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:26.989" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:42:26.989" starttime="20170810 04:42:26.989" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:26.990" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:42:26.990" starttime="20170810 04:42:25.395" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:26.990" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:42:26.990" starttime="20170810 04:42:25.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:42:26.991" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:42:26.991" starttime="20170810 04:42:26.991" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:26.991" starttime="20170810 04:42:25.394" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:26.992" starttime="20170810 04:42:22.730" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:36.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:36.998" starttime="20170810 04:42:36.997" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:36.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:36.998" starttime="20170810 04:42:36.998" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:36.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:36.999" starttime="20170810 04:42:36.999" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:37.000" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:37.000" starttime="20170810 04:42:36.999" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:37.529" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:37.529" starttime="20170810 04:42:37.000" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:37.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:37.529" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:37.529" starttime="20170810 04:42:37.000" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:37.530" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:37.530" starttime="20170810 04:42:37.530" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:37.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:37.531" starttime="20170810 04:42:37.530" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:37.531" starttime="20170810 04:42:36.996" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:37.531" starttime="20170810 04:42:36.996" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:37.531" starttime="20170810 04:42:36.995" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:37.532" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:42:37.532" starttime="20170810 04:42:37.531" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:37.534" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:37.534" starttime="20170810 04:42:37.533" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:37.535" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:37.535" starttime="20170810 04:42:37.534" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:37.535" starttime="20170810 04:42:37.534" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:37.535" starttime="20170810 04:42:37.532" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:37.535" starttime="20170810 04:42:37.532" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:38.000" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:38.000" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:38.000" starttime="20170810 04:42:37.535" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:38.002" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:38.002" starttime="20170810 04:42:38.001" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:38.003" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:38.003" starttime="20170810 04:42:38.002" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.003" starttime="20170810 04:42:38.002" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.003" starttime="20170810 04:42:38.001" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.003" starttime="20170810 04:42:38.000" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:38.003" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:38.003" starttime="20170810 04:42:38.003" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:38.004" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:38.004" starttime="20170810 04:42:36.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:38.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:38.004" starttime="20170810 04:42:38.004" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:38.005" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:38.005" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:38.005" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:42:38.005" starttime="20170810 04:42:38.005" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:38.005" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:42:38.005" starttime="20170810 04:42:36.994" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:38.006" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:42:38.006" starttime="20170810 04:42:36.993" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:42:38.006" starttime="20170810 04:42:38.006" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.007" starttime="20170810 04:42:36.993" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:38.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:38.012" starttime="20170810 04:42:38.011" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:38.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:38.013" starttime="20170810 04:42:38.012" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:38.013" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:38.013" starttime="20170810 04:42:38.013" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:38.014" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:38.014" starttime="20170810 04:42:38.013" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:38.469" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:38.469" starttime="20170810 04:42:38.015" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:38.469" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:38.470" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:38.470" starttime="20170810 04:42:38.014" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:38.470" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:38.470" starttime="20170810 04:42:38.470" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:38.471" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:38.471" starttime="20170810 04:42:38.471" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.471" starttime="20170810 04:42:38.011" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.471" starttime="20170810 04:42:38.010" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.471" starttime="20170810 04:42:38.009" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:38.472" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:42:38.472" starttime="20170810 04:42:38.472" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:38.474" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:38.474" starttime="20170810 04:42:38.473" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:38.475" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:38.475" starttime="20170810 04:42:38.475" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.475" starttime="20170810 04:42:38.474" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.475" starttime="20170810 04:42:38.473" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:38.475" starttime="20170810 04:42:38.472" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:39.013" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:39.013" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:39.013" starttime="20170810 04:42:38.475" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:39.015" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:39.015" starttime="20170810 04:42:39.014" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:39.016" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:39.016" starttime="20170810 04:42:39.015" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.016" starttime="20170810 04:42:39.015" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.016" starttime="20170810 04:42:39.014" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.016" starttime="20170810 04:42:39.013" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:39.016" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:39.017" starttime="20170810 04:42:39.016" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:39.017" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:39.017" starttime="20170810 04:42:38.008" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:39.017" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:39.017" starttime="20170810 04:42:39.017" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:39.018" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:39.018" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:39.018" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:42:39.018" starttime="20170810 04:42:39.018" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:39.018" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:42:39.018" starttime="20170810 04:42:38.007" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:39.019" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:42:39.019" starttime="20170810 04:42:38.007" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:42:39.019" starttime="20170810 04:42:39.019" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:39.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:39.024" starttime="20170810 04:42:39.023" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:39.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:39.025" starttime="20170810 04:42:39.025" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:39.026" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:39.026" starttime="20170810 04:42:39.025" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:39.027" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:39.027" starttime="20170810 04:42:39.026" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:39.506" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:39.506" starttime="20170810 04:42:39.028" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:39.506" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:39.507" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:39.507" starttime="20170810 04:42:39.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:39.507" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:39.507" starttime="20170810 04:42:39.507" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:39.508" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:39.508" starttime="20170810 04:42:39.507" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.508" starttime="20170810 04:42:39.023" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.508" starttime="20170810 04:42:39.022" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.508" starttime="20170810 04:42:39.021" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:39.509" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:42:39.509" starttime="20170810 04:42:39.509" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:39.511" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:39.511" starttime="20170810 04:42:39.510" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:39.512" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:39.512" starttime="20170810 04:42:39.512" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.512" starttime="20170810 04:42:39.511" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.512" starttime="20170810 04:42:39.510" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:39.512" starttime="20170810 04:42:39.509" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:40.032" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:42:40.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:40.033" starttime="20170810 04:42:39.513" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:40.035" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:40.035" starttime="20170810 04:42:40.034" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:40.035" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:40.036" starttime="20170810 04:42:40.035" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:40.036" starttime="20170810 04:42:40.035" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:40.036" starttime="20170810 04:42:40.034" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:40.036" starttime="20170810 04:42:40.033" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:40.036" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:40.036" starttime="20170810 04:42:40.036" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:40.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:40.037" starttime="20170810 04:42:39.021" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:40.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:40.037" starttime="20170810 04:42:40.037" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:40.038" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:40.038" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:40.038" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:42:40.038" starttime="20170810 04:42:40.037" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:40.038" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:42:40.038" starttime="20170810 04:42:39.020" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:40.038" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:42:40.039" starttime="20170810 04:42:39.020" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:42:40.039" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:42:40.039" starttime="20170810 04:42:40.039" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:40.039" starttime="20170810 04:42:39.019" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:40.039" starttime="20170810 04:42:36.992" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:50.047" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:50.047" starttime="20170810 04:42:50.046" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:50.048" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:50.048" starttime="20170810 04:42:50.048" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:50.049" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:50.049" starttime="20170810 04:42:50.049" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:50.050" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:50.050" starttime="20170810 04:42:50.050" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:50.603" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:50.604" starttime="20170810 04:42:50.051" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:50.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:50.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:50.604" starttime="20170810 04:42:50.051" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:50.604" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:50.605" starttime="20170810 04:42:50.604" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:50.605" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:50.605" starttime="20170810 04:42:50.605" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:50.605" starttime="20170810 04:42:50.046" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:50.605" starttime="20170810 04:42:50.044" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:50.606" starttime="20170810 04:42:50.043" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:50.606" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:42:50.606" starttime="20170810 04:42:50.606" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:50.608" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:50.608" starttime="20170810 04:42:50.608" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:50.609" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:50.609" starttime="20170810 04:42:50.609" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:50.609" starttime="20170810 04:42:50.608" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:50.609" starttime="20170810 04:42:50.607" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:50.610" starttime="20170810 04:42:50.606" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:51.396" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:51.396" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:51.396" starttime="20170810 04:42:50.610" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:51.398" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:51.398" starttime="20170810 04:42:51.398" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:51.399" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:51.399" starttime="20170810 04:42:51.399" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.400" starttime="20170810 04:42:51.399" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.400" starttime="20170810 04:42:51.397" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.400" starttime="20170810 04:42:51.397" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:51.400" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:51.400" starttime="20170810 04:42:51.400" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:51.401" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:51.401" starttime="20170810 04:42:50.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:51.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:51.401" starttime="20170810 04:42:51.401" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:51.402" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:51.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:51.402" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:42:51.402" starttime="20170810 04:42:51.401" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:51.402" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:42:51.402" starttime="20170810 04:42:50.042" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:51.403" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:42:51.403" starttime="20170810 04:42:50.041" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:42:51.403" starttime="20170810 04:42:51.403" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.403" starttime="20170810 04:42:50.041" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:51.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:51.407" starttime="20170810 04:42:51.406" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:51.408" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:51.408" starttime="20170810 04:42:51.407" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:51.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:51.408" starttime="20170810 04:42:51.408" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:51.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:51.409" starttime="20170810 04:42:51.408" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:51.816" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:51.816" starttime="20170810 04:42:51.410" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:51.817" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:51.817" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:51.817" starttime="20170810 04:42:51.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:51.817" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:51.817" starttime="20170810 04:42:51.817" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:51.818" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:51.818" starttime="20170810 04:42:51.818" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.818" starttime="20170810 04:42:51.406" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.818" starttime="20170810 04:42:51.405" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.818" starttime="20170810 04:42:51.405" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:51.819" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:42:51.819" starttime="20170810 04:42:51.819" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:51.821" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:51.821" starttime="20170810 04:42:51.820" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:51.822" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:42:51.822" starttime="20170810 04:42:51.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.823" starttime="20170810 04:42:51.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.823" starttime="20170810 04:42:51.820" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:51.823" starttime="20170810 04:42:51.819" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:52.340" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:42:52.340" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:52.340" starttime="20170810 04:42:51.823" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:52.342" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:52.342" starttime="20170810 04:42:52.341" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:52.343" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:52.343" starttime="20170810 04:42:52.342" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.343" starttime="20170810 04:42:52.342" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.343" starttime="20170810 04:42:52.341" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.343" starttime="20170810 04:42:52.340" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:52.343" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:52.344" starttime="20170810 04:42:52.343" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:52.344" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:52.344" starttime="20170810 04:42:51.404" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:52.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:52.344" starttime="20170810 04:42:52.344" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:52.345" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:52.345" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:52.345" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:42:52.345" starttime="20170810 04:42:52.345" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:52.345" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:42:52.346" starttime="20170810 04:42:51.404" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:52.346" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:42:52.346" starttime="20170810 04:42:51.403" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:42:52.346" starttime="20170810 04:42:52.346" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:42:52.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:42:52.351" starttime="20170810 04:42:52.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:42:52.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:42:52.351" starttime="20170810 04:42:52.351" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:42:52.352" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:42:52.352" starttime="20170810 04:42:52.351" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:42:52.353" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:42:52.353" starttime="20170810 04:42:52.352" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:42:52.738" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:42:52.738" starttime="20170810 04:42:52.353" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:52.739" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:42:52.739" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:52.739" starttime="20170810 04:42:52.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:42:52.739" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:52.739" starttime="20170810 04:42:52.739" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:52.740" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:52.740" starttime="20170810 04:42:52.740" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.740" starttime="20170810 04:42:52.349" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.740" starttime="20170810 04:42:52.349" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.740" starttime="20170810 04:42:52.348" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:42:52.741" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:42:52.741" starttime="20170810 04:42:52.741" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:52.743" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:52.743" starttime="20170810 04:42:52.742" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:52.744" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:42:52.744" starttime="20170810 04:42:52.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.744" starttime="20170810 04:42:52.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.744" starttime="20170810 04:42:52.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:52.744" starttime="20170810 04:42:52.741" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:42:53.290" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:42:53.290" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:53.290" starttime="20170810 04:42:52.745" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:42:53.292" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:53.292" starttime="20170810 04:42:53.291" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:42:53.293" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:42:53.293" starttime="20170810 04:42:53.293" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:53.293" starttime="20170810 04:42:53.292" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:53.293" starttime="20170810 04:42:53.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:42:53.293" starttime="20170810 04:42:53.291" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:42:53.294" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:42:53.294" starttime="20170810 04:42:53.293" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:53.294" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:42:53.294" starttime="20170810 04:42:52.348" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:42:53.295" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:42:53.295" starttime="20170810 04:42:53.294" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:42:53.295" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:42:53.295" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:42:53.295" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:42:53.295" starttime="20170810 04:42:53.295" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:53.296" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:42:53.296" starttime="20170810 04:42:52.347" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:42:53.296" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:42:53.296" starttime="20170810 04:42:52.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:42:53.296" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:42:53.297" starttime="20170810 04:42:53.296" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:53.297" starttime="20170810 04:42:52.347" status="FAIL"></status>
</kw>
<status endtime="20170810 04:42:53.297" starttime="20170810 04:42:50.040" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:03.302" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:03.302" starttime="20170810 04:43:03.302" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:03.303" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:03.303" starttime="20170810 04:43:03.303" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:03.304" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:03.304" starttime="20170810 04:43:03.303" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:03.304" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:03.304" starttime="20170810 04:43:03.304" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:03.589" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:03.589" starttime="20170810 04:43:03.305" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:03.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:03.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:03.589" starttime="20170810 04:43:03.305" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:03.590" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:03.590" starttime="20170810 04:43:03.590" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:03.591" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:03.591" starttime="20170810 04:43:03.591" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.591" starttime="20170810 04:43:03.301" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.591" starttime="20170810 04:43:03.301" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.591" starttime="20170810 04:43:03.300" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:03.592" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:43:03.592" starttime="20170810 04:43:03.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:03.594" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:03.594" starttime="20170810 04:43:03.593" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:03.595" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:03.595" starttime="20170810 04:43:03.595" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.595" starttime="20170810 04:43:03.594" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.595" starttime="20170810 04:43:03.593" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.595" starttime="20170810 04:43:03.592" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:03.741" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:03.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:03.741" starttime="20170810 04:43:03.596" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:03.743" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:03.743" starttime="20170810 04:43:03.743" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:03.744" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:03.744" starttime="20170810 04:43:03.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.744" starttime="20170810 04:43:03.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.744" starttime="20170810 04:43:03.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.744" starttime="20170810 04:43:03.742" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:03.745" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:03.745" starttime="20170810 04:43:03.745" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:03.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:03.745" starttime="20170810 04:43:03.299" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:03.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:03.746" starttime="20170810 04:43:03.745" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:03.747" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:03.747" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:03.747" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:43:03.747" starttime="20170810 04:43:03.746" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:03.747" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:43:03.747" starttime="20170810 04:43:03.298" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:03.748" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:43:03.748" starttime="20170810 04:43:03.298" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:43:03.748" starttime="20170810 04:43:03.748" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:03.748" starttime="20170810 04:43:03.298" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:03.752" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:03.752" starttime="20170810 04:43:03.751" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:03.753" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:03.753" starttime="20170810 04:43:03.752" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:03.753" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:03.753" starttime="20170810 04:43:03.753" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:03.754" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:03.754" starttime="20170810 04:43:03.754" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:04.076" starttime="20170810 04:43:03.755" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.076" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:04.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:04.077" starttime="20170810 04:43:03.754" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:04.077" starttime="20170810 04:43:04.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:04.078" starttime="20170810 04:43:04.077" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.078" starttime="20170810 04:43:03.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.078" starttime="20170810 04:43:03.751" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.078" starttime="20170810 04:43:03.750" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:04.079" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:43:04.079" starttime="20170810 04:43:04.079" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:04.081" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:04.081" starttime="20170810 04:43:04.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:04.082" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:04.082" starttime="20170810 04:43:04.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.082" starttime="20170810 04:43:04.081" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.082" starttime="20170810 04:43:04.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.082" starttime="20170810 04:43:04.079" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:04.210" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:04.210" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:04.210" starttime="20170810 04:43:04.082" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:04.212" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:04.212" starttime="20170810 04:43:04.212" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:04.213" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:04.213" starttime="20170810 04:43:04.213" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.213" starttime="20170810 04:43:04.212" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.213" starttime="20170810 04:43:04.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.214" starttime="20170810 04:43:04.211" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:04.214" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:04.214" starttime="20170810 04:43:04.214" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:04.214" starttime="20170810 04:43:03.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.215" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:04.215" starttime="20170810 04:43:04.214" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:04.215" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:04.215" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:04.216" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:43:04.216" starttime="20170810 04:43:04.215" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.216" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:43:04.216" starttime="20170810 04:43:03.749" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.216" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:43:04.216" starttime="20170810 04:43:03.748" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:43:04.217" starttime="20170810 04:43:04.216" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:04.223" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:04.224" starttime="20170810 04:43:04.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:04.224" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:04.224" starttime="20170810 04:43:04.224" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:04.225" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:04.225" starttime="20170810 04:43:04.224" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:04.226" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:04.226" starttime="20170810 04:43:04.225" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.572" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:04.572" starttime="20170810 04:43:04.226" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.572" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:04.572" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:04.572" starttime="20170810 04:43:04.226" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.573" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:04.573" starttime="20170810 04:43:04.572" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.573" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:04.574" starttime="20170810 04:43:04.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.574" starttime="20170810 04:43:04.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.574" starttime="20170810 04:43:04.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.574" starttime="20170810 04:43:04.219" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:04.574" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:43:04.574" starttime="20170810 04:43:04.574" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:04.576" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:43:04.577" starttime="20170810 04:43:04.576" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:04.577" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:43:04.578" starttime="20170810 04:43:04.577" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.578" starttime="20170810 04:43:04.577" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.578" starttime="20170810 04:43:04.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.578" starttime="20170810 04:43:04.575" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:04.654" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:43:04.654" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:04.654" starttime="20170810 04:43:04.578" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:04.656" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:04.656" starttime="20170810 04:43:04.656" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:04.657" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:04.657" starttime="20170810 04:43:04.657" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.658" starttime="20170810 04:43:04.656" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.658" starttime="20170810 04:43:04.655" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:04.658" starttime="20170810 04:43:04.655" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:04.658" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:04.658" starttime="20170810 04:43:04.658" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:04.658" starttime="20170810 04:43:04.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:04.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:04.659" starttime="20170810 04:43:04.659" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:04.660" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:04.660" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:04.660" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:43:04.660" starttime="20170810 04:43:04.659" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.660" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:43:04.660" starttime="20170810 04:43:04.218" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:04.660" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:43:04.660" starttime="20170810 04:43:04.217" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:43:04.661" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:43:04.661" starttime="20170810 04:43:04.661" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:04.661" starttime="20170810 04:43:04.217" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:04.661" starttime="20170810 04:43:03.297" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:14.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:14.667" starttime="20170810 04:43:14.666" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:14.668" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:14.668" starttime="20170810 04:43:14.668" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:14.669" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:14.669" starttime="20170810 04:43:14.668" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:14.669" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:14.669" starttime="20170810 04:43:14.669" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:15.291" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:15.291" starttime="20170810 04:43:14.670" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:15.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:15.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:15.291" starttime="20170810 04:43:14.670" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:15.292" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:15.292" starttime="20170810 04:43:15.291" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:15.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:15.293" starttime="20170810 04:43:15.292" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.293" starttime="20170810 04:43:14.666" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.293" starttime="20170810 04:43:14.665" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.293" starttime="20170810 04:43:14.665" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:15.293" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:43:15.293" starttime="20170810 04:43:15.293" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:15.296" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:15.296" starttime="20170810 04:43:15.295" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:15.296" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:15.297" starttime="20170810 04:43:15.296" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.297" starttime="20170810 04:43:15.296" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.297" starttime="20170810 04:43:15.294" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.297" starttime="20170810 04:43:15.294" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:15.692" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:15.692" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:15.692" starttime="20170810 04:43:15.297" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:15.694" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:15.694" starttime="20170810 04:43:15.693" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:15.695" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:15.695" starttime="20170810 04:43:15.695" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.695" starttime="20170810 04:43:15.694" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.695" starttime="20170810 04:43:15.693" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.695" starttime="20170810 04:43:15.692" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:15.696" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:15.696" starttime="20170810 04:43:15.695" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:15.696" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:15.696" starttime="20170810 04:43:14.664" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:15.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:15.697" starttime="20170810 04:43:15.696" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:15.697" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:15.697" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:15.697" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:43:15.697" starttime="20170810 04:43:15.697" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:15.698" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:43:15.698" starttime="20170810 04:43:14.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:15.698" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:43:15.698" starttime="20170810 04:43:14.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:43:15.698" starttime="20170810 04:43:15.698" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:15.699" starttime="20170810 04:43:14.663" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:15.702" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:15.703" starttime="20170810 04:43:15.702" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:15.703" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:15.703" starttime="20170810 04:43:15.703" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:15.704" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:15.704" starttime="20170810 04:43:15.704" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:15.705" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:15.705" starttime="20170810 04:43:15.704" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:16.287" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:16.287" starttime="20170810 04:43:15.705" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:16.287" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:16.287" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:16.287" starttime="20170810 04:43:15.705" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:16.288" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:16.288" starttime="20170810 04:43:16.288" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:16.289" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:16.290" starttime="20170810 04:43:16.289" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.290" starttime="20170810 04:43:15.701" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.290" starttime="20170810 04:43:15.701" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.290" starttime="20170810 04:43:15.700" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:16.291" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:43:16.291" starttime="20170810 04:43:16.290" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:16.294" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:16.294" starttime="20170810 04:43:16.293" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:16.295" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:16.295" starttime="20170810 04:43:16.295" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.295" starttime="20170810 04:43:16.294" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.296" starttime="20170810 04:43:16.292" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.296" starttime="20170810 04:43:16.291" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:16.611" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:16.611" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:16.611" starttime="20170810 04:43:16.296" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:16.613" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:16.613" starttime="20170810 04:43:16.613" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:16.614" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:16.614" starttime="20170810 04:43:16.614" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.614" starttime="20170810 04:43:16.613" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.614" starttime="20170810 04:43:16.612" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:16.615" starttime="20170810 04:43:16.612" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:16.615" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:16.615" starttime="20170810 04:43:16.615" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:16.615" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:16.615" starttime="20170810 04:43:15.700" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:16.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:16.616" starttime="20170810 04:43:16.615" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:16.616" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:16.616" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:16.617" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:43:16.617" starttime="20170810 04:43:16.616" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:16.617" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:43:16.617" starttime="20170810 04:43:15.699" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:16.617" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:43:16.617" starttime="20170810 04:43:15.699" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:43:16.618" starttime="20170810 04:43:16.617" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:16.622" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:16.622" starttime="20170810 04:43:16.622" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:16.623" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:16.623" starttime="20170810 04:43:16.623" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:16.623" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:16.623" starttime="20170810 04:43:16.623" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:16.624" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:16.624" starttime="20170810 04:43:16.624" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:17.056" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:17.056" starttime="20170810 04:43:16.625" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:17.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:17.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:17.056" starttime="20170810 04:43:16.624" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:17.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:17.057" starttime="20170810 04:43:17.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:17.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:17.058" starttime="20170810 04:43:17.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.058" starttime="20170810 04:43:16.621" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.058" starttime="20170810 04:43:16.621" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.058" starttime="20170810 04:43:16.620" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:17.059" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:43:17.059" starttime="20170810 04:43:17.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:17.061" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:43:17.061" starttime="20170810 04:43:17.060" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:17.062" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:43:17.062" starttime="20170810 04:43:17.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.062" starttime="20170810 04:43:17.061" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.062" starttime="20170810 04:43:17.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.062" starttime="20170810 04:43:17.059" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:17.138" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:43:17.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:17.139" starttime="20170810 04:43:17.062" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:17.140" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:17.141" starttime="20170810 04:43:17.140" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:17.141" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:17.141" starttime="20170810 04:43:17.141" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.142" starttime="20170810 04:43:17.141" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.142" starttime="20170810 04:43:17.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:17.142" starttime="20170810 04:43:17.139" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:17.142" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:17.142" starttime="20170810 04:43:17.142" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:17.142" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:17.142" starttime="20170810 04:43:16.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:17.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:17.143" starttime="20170810 04:43:17.143" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:17.144" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:17.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:17.144" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:43:17.144" starttime="20170810 04:43:17.143" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:17.144" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:43:17.144" starttime="20170810 04:43:16.619" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:17.144" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:43:17.145" starttime="20170810 04:43:16.618" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:43:17.145" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:43:17.145" starttime="20170810 04:43:17.145" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:17.145" starttime="20170810 04:43:16.618" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:17.145" starttime="20170810 04:43:14.662" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:27.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:27.152" starttime="20170810 04:43:27.151" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:27.153" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:27.153" starttime="20170810 04:43:27.152" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:27.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:27.153" starttime="20170810 04:43:27.153" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:27.154" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:27.154" starttime="20170810 04:43:27.154" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:28.056" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:28.056" starttime="20170810 04:43:27.155" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:28.056" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:28.056" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:28.056" starttime="20170810 04:43:27.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:28.057" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:28.057" starttime="20170810 04:43:28.057" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:28.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:28.058" starttime="20170810 04:43:28.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:28.058" starttime="20170810 04:43:27.150" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:28.058" starttime="20170810 04:43:27.150" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:28.058" starttime="20170810 04:43:27.149" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:28.059" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:43:28.059" starttime="20170810 04:43:28.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:28.061" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:28.061" starttime="20170810 04:43:28.060" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:28.062" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:28.062" starttime="20170810 04:43:28.061" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:28.062" starttime="20170810 04:43:28.061" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:28.062" starttime="20170810 04:43:28.059" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:28.062" starttime="20170810 04:43:28.059" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:33.080" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:33.080" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:33.080" starttime="20170810 04:43:28.062" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:33.082" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:33.082" starttime="20170810 04:43:33.081" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:33.083" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:33.083" starttime="20170810 04:43:33.083" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.083" starttime="20170810 04:43:33.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.083" starttime="20170810 04:43:33.081" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.083" starttime="20170810 04:43:33.080" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:33.084" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:33.084" starttime="20170810 04:43:33.083" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:33.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:33.084" starttime="20170810 04:43:27.148" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:33.084" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:33.085" starttime="20170810 04:43:33.084" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:33.085" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:33.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:33.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:43:33.085" starttime="20170810 04:43:33.085" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:33.086" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:43:33.086" starttime="20170810 04:43:27.148" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:33.086" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:43:33.086" starttime="20170810 04:43:27.147" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:43:33.086" starttime="20170810 04:43:33.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.087" starttime="20170810 04:43:27.147" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:33.090" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:33.091" starttime="20170810 04:43:33.090" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:33.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:33.091" starttime="20170810 04:43:33.091" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:33.092" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:33.092" starttime="20170810 04:43:33.092" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:33.093" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:33.093" starttime="20170810 04:43:33.092" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:33.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:33.658" starttime="20170810 04:43:33.093" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:33.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:33.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:33.658" starttime="20170810 04:43:33.093" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:33.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:33.659" starttime="20170810 04:43:33.659" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:33.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:33.660" starttime="20170810 04:43:33.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.660" starttime="20170810 04:43:33.089" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.660" starttime="20170810 04:43:33.089" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.660" starttime="20170810 04:43:33.088" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:33.661" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:43:33.661" starttime="20170810 04:43:33.660" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:33.663" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:33.663" starttime="20170810 04:43:33.662" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:33.664" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:33.664" starttime="20170810 04:43:33.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.664" starttime="20170810 04:43:33.663" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.664" starttime="20170810 04:43:33.662" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:33.664" starttime="20170810 04:43:33.661" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:36.505" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:36.506" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:36.506" starttime="20170810 04:43:33.664" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:36.508" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:36.508" starttime="20170810 04:43:36.507" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:36.509" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:36.509" starttime="20170810 04:43:36.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:36.509" starttime="20170810 04:43:36.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:36.509" starttime="20170810 04:43:36.507" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:36.509" starttime="20170810 04:43:36.506" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:36.509" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:36.510" starttime="20170810 04:43:36.509" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:36.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:36.510" starttime="20170810 04:43:33.088" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:36.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:36.510" starttime="20170810 04:43:36.510" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:36.511" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:36.511" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:36.511" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:43:36.511" starttime="20170810 04:43:36.511" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:36.511" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:43:36.511" starttime="20170810 04:43:33.087" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:36.512" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:43:36.512" starttime="20170810 04:43:33.087" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:43:36.513" starttime="20170810 04:43:36.512" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:36.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:36.517" starttime="20170810 04:43:36.517" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:36.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:36.518" starttime="20170810 04:43:36.518" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:36.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:36.519" starttime="20170810 04:43:36.518" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:36.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:36.519" starttime="20170810 04:43:36.519" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:36.999" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:36.999" starttime="20170810 04:43:36.520" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:36.999" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:36.999" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:36.999" starttime="20170810 04:43:36.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:37.000" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:37.000" starttime="20170810 04:43:36.999" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:37.000" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:37.001" starttime="20170810 04:43:37.000" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:37.001" starttime="20170810 04:43:36.516" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:37.001" starttime="20170810 04:43:36.516" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:37.001" starttime="20170810 04:43:36.515" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:37.001" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:43:37.001" starttime="20170810 04:43:37.001" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:37.003" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:43:37.004" starttime="20170810 04:43:37.003" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:37.004" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:43:37.004" starttime="20170810 04:43:37.004" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:37.005" starttime="20170810 04:43:37.004" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:37.005" starttime="20170810 04:43:37.002" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:37.005" starttime="20170810 04:43:37.002" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:38.295" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:43:38.295" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:38.295" starttime="20170810 04:43:37.005" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:38.297" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:38.297" starttime="20170810 04:43:38.296" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:38.298" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:38.298" starttime="20170810 04:43:38.297" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:38.298" starttime="20170810 04:43:38.297" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:38.298" starttime="20170810 04:43:38.296" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:38.298" starttime="20170810 04:43:38.295" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:38.298" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:38.298" starttime="20170810 04:43:38.298" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:38.299" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:38.299" starttime="20170810 04:43:36.514" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:38.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:38.299" starttime="20170810 04:43:38.299" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:38.300" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:38.300" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:38.300" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:43:38.300" starttime="20170810 04:43:38.300" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:38.300" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:43:38.300" starttime="20170810 04:43:36.514" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:38.301" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:43:38.301" starttime="20170810 04:43:36.513" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:43:38.301" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:43:38.301" starttime="20170810 04:43:38.301" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:38.302" starttime="20170810 04:43:36.513" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:38.302" starttime="20170810 04:43:27.146" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:43:48.308" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:43:48.308" starttime="20170810 04:43:48.307" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:43:48.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:43:48.309" starttime="20170810 04:43:48.309" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:43:48.310" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:43:48.310" starttime="20170810 04:43:48.309" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:43:48.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:43:48.311" starttime="20170810 04:43:48.310" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:43:48.944" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:43:48.944" starttime="20170810 04:43:48.312" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:48.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:43:48.944" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:48.944" starttime="20170810 04:43:48.311" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:43:48.945" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:48.945" starttime="20170810 04:43:48.945" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:48.946" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:48.946" starttime="20170810 04:43:48.945" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:48.946" starttime="20170810 04:43:48.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:48.946" starttime="20170810 04:43:48.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:48.946" starttime="20170810 04:43:48.305" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:43:48.947" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:43:48.947" starttime="20170810 04:43:48.946" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:48.949" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:48.949" starttime="20170810 04:43:48.948" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:48.950" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:43:48.950" starttime="20170810 04:43:48.950" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:48.950" starttime="20170810 04:43:48.949" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:48.950" starttime="20170810 04:43:48.948" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:48.950" starttime="20170810 04:43:48.947" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:43:53.027" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:43:53.027" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:53.027" starttime="20170810 04:43:48.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:43:53.029" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:53.029" starttime="20170810 04:43:53.028" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:43:53.030" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:43:53.030" starttime="20170810 04:43:53.030" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:53.030" starttime="20170810 04:43:53.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:53.030" starttime="20170810 04:43:53.028" status="PASS"></status>
</kw>
<status endtime="20170810 04:43:53.030" starttime="20170810 04:43:53.027" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:43:53.030" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:43:53.031" starttime="20170810 04:43:53.030" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:53.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:43:53.031" starttime="20170810 04:43:48.304" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:43:53.031" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:43:53.031" starttime="20170810 04:43:53.031" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:43:53.032" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:43:53.032" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:43:53.032" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:43:53.032" starttime="20170810 04:43:53.032" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:53.032" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:43:53.033" starttime="20170810 04:43:48.303" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:43:53.033" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:43:53.033" starttime="20170810 04:43:48.303" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 04:43:53.034" level="FAIL">On != Off</msg>
<status endtime="20170810 04:43:53.034" starttime="20170810 04:43:53.033" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:53.034" starttime="20170810 04:43:48.303" status="FAIL"></status>
</kw>
<status endtime="20170810 04:43:53.034" starttime="20170810 04:43:48.302" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:03.040" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:03.040" starttime="20170810 04:44:03.039" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:03.041" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:03.041" starttime="20170810 04:44:03.040" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:03.041" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:03.041" starttime="20170810 04:44:03.041" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:03.042" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:03.042" starttime="20170810 04:44:03.042" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:03.783" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:03.784" starttime="20170810 04:44:03.043" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:03.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:03.784" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:03.784" starttime="20170810 04:44:03.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:03.784" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:03.785" starttime="20170810 04:44:03.784" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:03.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:03.785" starttime="20170810 04:44:03.785" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:03.785" starttime="20170810 04:44:03.038" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:03.785" starttime="20170810 04:44:03.037" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:03.786" starttime="20170810 04:44:03.037" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:03.786" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:44:03.786" starttime="20170810 04:44:03.786" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:03.788" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:03.788" starttime="20170810 04:44:03.787" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:03.789" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:03.789" starttime="20170810 04:44:03.789" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:03.790" starttime="20170810 04:44:03.788" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:03.790" starttime="20170810 04:44:03.787" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:03.790" starttime="20170810 04:44:03.786" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:04.141" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:04.141" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:04.141" starttime="20170810 04:44:03.790" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:04.143" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:04.143" starttime="20170810 04:44:04.142" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:04.147" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:04.147" starttime="20170810 04:44:04.146" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.147" starttime="20170810 04:44:04.143" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.147" starttime="20170810 04:44:04.142" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.147" starttime="20170810 04:44:04.142" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:04.147" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:04.148" starttime="20170810 04:44:04.147" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:04.148" starttime="20170810 04:44:03.036" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:04.149" starttime="20170810 04:44:04.148" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:04.150" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:04.150" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:04.150" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:44:04.150" starttime="20170810 04:44:04.149" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.150" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:44:04.150" starttime="20170810 04:44:03.036" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.151" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:44:04.151" starttime="20170810 04:44:03.035" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:44:04.152" starttime="20170810 04:44:04.152" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.152" starttime="20170810 04:44:03.035" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:04.158" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:04.158" starttime="20170810 04:44:04.157" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:04.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:04.159" starttime="20170810 04:44:04.159" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:04.160" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:04.160" starttime="20170810 04:44:04.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:04.161" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:04.161" starttime="20170810 04:44:04.161" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.381" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:04.381" starttime="20170810 04:44:04.162" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.381" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:04.381" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:04.381" starttime="20170810 04:44:04.161" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.382" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:04.382" starttime="20170810 04:44:04.381" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.382" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:04.382" starttime="20170810 04:44:04.382" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.383" starttime="20170810 04:44:04.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.383" starttime="20170810 04:44:04.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.383" starttime="20170810 04:44:04.155" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:04.383" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:44:04.383" starttime="20170810 04:44:04.383" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:04.386" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:04.386" starttime="20170810 04:44:04.385" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:04.387" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:04.387" starttime="20170810 04:44:04.386" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.387" starttime="20170810 04:44:04.386" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.387" starttime="20170810 04:44:04.384" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.387" starttime="20170810 04:44:04.384" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:04.644" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:04.645" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:04.645" starttime="20170810 04:44:04.387" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:04.646" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:04.646" starttime="20170810 04:44:04.646" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:04.647" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:04.647" starttime="20170810 04:44:04.647" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.647" starttime="20170810 04:44:04.646" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.648" starttime="20170810 04:44:04.645" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.648" starttime="20170810 04:44:04.645" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:04.648" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:04.648" starttime="20170810 04:44:04.648" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:04.648" starttime="20170810 04:44:04.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:04.649" starttime="20170810 04:44:04.649" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:04.650" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:04.650" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:04.650" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:44:04.650" starttime="20170810 04:44:04.649" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.650" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:44:04.650" starttime="20170810 04:44:04.153" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.650" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:44:04.650" starttime="20170810 04:44:04.152" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:44:04.651" starttime="20170810 04:44:04.651" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:04.655" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:04.655" starttime="20170810 04:44:04.654" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:04.656" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:04.656" starttime="20170810 04:44:04.655" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:04.656" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:04.656" starttime="20170810 04:44:04.656" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:04.657" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:04.657" starttime="20170810 04:44:04.657" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.928" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:04.929" starttime="20170810 04:44:04.658" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:04.929" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:04.929" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:04.929" starttime="20170810 04:44:04.657" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.930" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:04.930" starttime="20170810 04:44:04.929" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:04.931" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:04.931" starttime="20170810 04:44:04.930" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.931" starttime="20170810 04:44:04.654" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.931" starttime="20170810 04:44:04.654" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.931" starttime="20170810 04:44:04.653" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:04.932" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:44:04.932" starttime="20170810 04:44:04.931" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:04.934" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:04.935" starttime="20170810 04:44:04.933" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:04.936" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:04.936" starttime="20170810 04:44:04.936" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.936" starttime="20170810 04:44:04.935" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.936" starttime="20170810 04:44:04.933" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:04.937" starttime="20170810 04:44:04.932" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:05.061" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:44:05.062" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:05.062" starttime="20170810 04:44:04.937" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:05.064" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:05.064" starttime="20170810 04:44:05.063" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:05.066" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:05.066" starttime="20170810 04:44:05.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:05.066" starttime="20170810 04:44:05.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:05.066" starttime="20170810 04:44:05.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:05.066" starttime="20170810 04:44:05.062" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:05.066" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:05.066" starttime="20170810 04:44:05.066" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:05.067" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:05.067" starttime="20170810 04:44:04.652" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:05.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:05.067" starttime="20170810 04:44:05.067" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:05.068" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:05.068" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:05.068" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:44:05.068" starttime="20170810 04:44:05.068" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:05.068" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:44:05.068" starttime="20170810 04:44:04.652" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:05.069" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:44:05.069" starttime="20170810 04:44:04.651" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:44:05.069" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:44:05.069" starttime="20170810 04:44:05.069" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:05.070" starttime="20170810 04:44:04.651" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:05.070" starttime="20170810 04:44:03.034" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:15.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:15.077" starttime="20170810 04:44:15.076" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:15.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:15.078" starttime="20170810 04:44:15.077" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:15.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:15.078" starttime="20170810 04:44:15.078" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:15.079" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:15.079" starttime="20170810 04:44:15.078" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.262" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:15.262" starttime="20170810 04:44:15.080" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.262" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:15.262" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:15.262" starttime="20170810 04:44:15.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.263" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:15.263" starttime="20170810 04:44:15.263" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.264" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:15.264" starttime="20170810 04:44:15.263" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.264" starttime="20170810 04:44:15.075" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.264" starttime="20170810 04:44:15.074" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.264" starttime="20170810 04:44:15.073" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:15.265" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:44:15.265" starttime="20170810 04:44:15.264" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:15.267" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:15.267" starttime="20170810 04:44:15.266" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:15.268" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:15.268" starttime="20170810 04:44:15.268" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.268" starttime="20170810 04:44:15.267" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.268" starttime="20170810 04:44:15.266" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.268" starttime="20170810 04:44:15.265" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:15.332" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:15.332" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:15.332" starttime="20170810 04:44:15.268" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:15.334" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:15.334" starttime="20170810 04:44:15.333" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:15.335" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:15.335" starttime="20170810 04:44:15.335" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.335" starttime="20170810 04:44:15.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.335" starttime="20170810 04:44:15.333" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.335" starttime="20170810 04:44:15.332" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:15.336" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:15.336" starttime="20170810 04:44:15.336" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:15.336" starttime="20170810 04:44:15.073" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.337" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:15.337" starttime="20170810 04:44:15.336" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:15.337" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:15.337" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:15.337" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:44:15.337" starttime="20170810 04:44:15.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.338" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:44:15.338" starttime="20170810 04:44:15.072" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.338" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:44:15.338" starttime="20170810 04:44:15.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:44:15.339" starttime="20170810 04:44:15.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.339" starttime="20170810 04:44:15.071" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:15.342" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:15.343" starttime="20170810 04:44:15.342" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:15.343" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:15.343" starttime="20170810 04:44:15.343" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:15.344" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:15.344" starttime="20170810 04:44:15.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:15.344" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:15.344" starttime="20170810 04:44:15.344" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.520" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:15.520" starttime="20170810 04:44:15.345" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.520" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:15.520" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:15.520" starttime="20170810 04:44:15.345" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.521" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:15.521" starttime="20170810 04:44:15.521" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:15.522" starttime="20170810 04:44:15.521" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.522" starttime="20170810 04:44:15.341" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.522" starttime="20170810 04:44:15.341" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.522" starttime="20170810 04:44:15.340" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:15.523" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:44:15.523" starttime="20170810 04:44:15.522" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:15.525" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:15.525" starttime="20170810 04:44:15.524" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:15.526" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:15.526" starttime="20170810 04:44:15.526" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.526" starttime="20170810 04:44:15.525" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.526" starttime="20170810 04:44:15.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.526" starttime="20170810 04:44:15.523" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:15.650" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:15.650" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:15.650" starttime="20170810 04:44:15.527" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:15.652" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:15.652" starttime="20170810 04:44:15.652" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:15.653" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:15.653" starttime="20170810 04:44:15.653" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.653" starttime="20170810 04:44:15.652" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.653" starttime="20170810 04:44:15.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:15.653" starttime="20170810 04:44:15.651" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:15.654" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:15.654" starttime="20170810 04:44:15.654" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:15.654" starttime="20170810 04:44:15.340" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:15.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:15.655" starttime="20170810 04:44:15.654" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:15.655" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:15.655" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:15.655" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:44:15.655" starttime="20170810 04:44:15.655" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.656" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:44:15.656" starttime="20170810 04:44:15.339" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:15.656" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:44:15.656" starttime="20170810 04:44:15.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:44:15.657" starttime="20170810 04:44:15.656" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:15.661" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:15.661" starttime="20170810 04:44:15.660" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:15.661" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:15.661" starttime="20170810 04:44:15.661" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:15.662" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:15.662" starttime="20170810 04:44:15.662" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:15.663" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:15.663" starttime="20170810 04:44:15.662" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:16.023" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:16.023" starttime="20170810 04:44:15.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:16.024" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:16.024" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:16.024" starttime="20170810 04:44:15.663" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:16.024" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:16.024" starttime="20170810 04:44:16.024" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:16.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:16.025" starttime="20170810 04:44:16.025" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.025" starttime="20170810 04:44:15.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.025" starttime="20170810 04:44:15.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.025" starttime="20170810 04:44:15.659" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:16.026" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:44:16.026" starttime="20170810 04:44:16.026" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:16.028" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:16.028" starttime="20170810 04:44:16.027" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:16.029" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:16.029" starttime="20170810 04:44:16.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.029" starttime="20170810 04:44:16.028" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.029" starttime="20170810 04:44:16.027" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.029" starttime="20170810 04:44:16.026" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:16.105" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:44:16.105" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:16.105" starttime="20170810 04:44:16.030" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:16.107" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:16.107" starttime="20170810 04:44:16.107" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:16.108" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:16.108" starttime="20170810 04:44:16.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.108" starttime="20170810 04:44:16.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.109" starttime="20170810 04:44:16.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:16.109" starttime="20170810 04:44:16.106" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:16.109" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:16.109" starttime="20170810 04:44:16.109" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:16.109" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:16.109" starttime="20170810 04:44:15.658" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:16.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:16.110" starttime="20170810 04:44:16.110" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:16.111" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:16.111" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:16.111" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:44:16.111" starttime="20170810 04:44:16.110" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:16.111" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:44:16.111" starttime="20170810 04:44:15.657" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:16.111" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:44:16.111" starttime="20170810 04:44:15.657" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:44:16.112" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:44:16.112" starttime="20170810 04:44:16.112" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:16.112" starttime="20170810 04:44:15.657" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:16.112" starttime="20170810 04:44:15.070" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:26.119" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:26.119" starttime="20170810 04:44:26.118" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:26.119" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:26.120" starttime="20170810 04:44:26.119" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:26.120" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:26.120" starttime="20170810 04:44:26.120" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:26.121" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:26.121" starttime="20170810 04:44:26.120" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:26.466" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:26.466" starttime="20170810 04:44:26.122" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:26.466" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:26.466" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:26.466" starttime="20170810 04:44:26.121" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:26.467" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:26.467" starttime="20170810 04:44:26.467" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:26.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:26.468" starttime="20170810 04:44:26.467" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.468" starttime="20170810 04:44:26.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.468" starttime="20170810 04:44:26.117" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.468" starttime="20170810 04:44:26.116" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:26.469" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:44:26.469" starttime="20170810 04:44:26.468" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:26.471" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:26.471" starttime="20170810 04:44:26.470" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:26.472" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:26.472" starttime="20170810 04:44:26.471" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.472" starttime="20170810 04:44:26.471" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.472" starttime="20170810 04:44:26.469" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.472" starttime="20170810 04:44:26.469" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:26.554" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:26.554" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:26.554" starttime="20170810 04:44:26.472" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:26.556" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:26.556" starttime="20170810 04:44:26.555" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:26.557" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:26.557" starttime="20170810 04:44:26.557" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.557" starttime="20170810 04:44:26.556" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.557" starttime="20170810 04:44:26.555" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.557" starttime="20170810 04:44:26.554" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:26.558" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:26.558" starttime="20170810 04:44:26.558" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:26.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:26.558" starttime="20170810 04:44:26.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:26.559" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:26.559" starttime="20170810 04:44:26.558" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:26.559" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:26.559" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:26.559" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:44:26.559" starttime="20170810 04:44:26.559" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:26.560" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:44:26.560" starttime="20170810 04:44:26.115" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:26.560" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:44:26.560" starttime="20170810 04:44:26.114" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:44:26.561" starttime="20170810 04:44:26.560" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:26.561" starttime="20170810 04:44:26.114" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:26.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:26.565" starttime="20170810 04:44:26.564" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:26.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:26.566" starttime="20170810 04:44:26.566" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:26.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:26.567" starttime="20170810 04:44:26.566" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:26.568" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:26.568" starttime="20170810 04:44:26.567" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:27.097" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:27.097" starttime="20170810 04:44:26.569" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:27.097" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:27.097" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:27.097" starttime="20170810 04:44:26.568" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:27.098" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:27.098" starttime="20170810 04:44:27.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:27.099" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:27.099" starttime="20170810 04:44:27.098" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.099" starttime="20170810 04:44:26.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.099" starttime="20170810 04:44:26.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.099" starttime="20170810 04:44:26.563" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:27.100" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:44:27.100" starttime="20170810 04:44:27.100" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:27.104" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:27.104" starttime="20170810 04:44:27.102" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:27.105" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:27.105" starttime="20170810 04:44:27.105" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.105" starttime="20170810 04:44:27.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.106" starttime="20170810 04:44:27.101" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.106" starttime="20170810 04:44:27.101" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:27.584" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:27.585" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:27.585" starttime="20170810 04:44:27.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:27.587" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:27.587" starttime="20170810 04:44:27.586" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:27.587" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:27.588" starttime="20170810 04:44:27.587" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.588" starttime="20170810 04:44:27.587" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.588" starttime="20170810 04:44:27.585" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:27.588" starttime="20170810 04:44:27.585" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:27.588" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:27.588" starttime="20170810 04:44:27.588" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:27.589" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:27.589" starttime="20170810 04:44:26.562" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:27.589" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:27.589" starttime="20170810 04:44:27.589" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:27.590" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:27.590" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:27.590" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:44:27.590" starttime="20170810 04:44:27.589" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:27.590" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:44:27.590" starttime="20170810 04:44:26.561" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:27.591" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:44:27.591" starttime="20170810 04:44:26.561" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:44:27.591" starttime="20170810 04:44:27.591" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:27.595" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:27.595" starttime="20170810 04:44:27.595" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:27.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:27.596" starttime="20170810 04:44:27.596" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:27.596" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:27.597" starttime="20170810 04:44:27.596" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:27.597" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:27.597" starttime="20170810 04:44:27.597" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:28.218" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:28.218" starttime="20170810 04:44:27.598" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:28.218" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:28.218" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:28.218" starttime="20170810 04:44:27.597" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:28.219" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:28.219" starttime="20170810 04:44:28.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:28.219" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:28.219" starttime="20170810 04:44:28.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.219" starttime="20170810 04:44:27.594" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.220" starttime="20170810 04:44:27.594" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.220" starttime="20170810 04:44:27.593" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:28.220" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:44:28.220" starttime="20170810 04:44:28.220" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:28.222" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:28.222" starttime="20170810 04:44:28.222" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:28.223" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:28.223" starttime="20170810 04:44:28.223" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.223" starttime="20170810 04:44:28.223" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.224" starttime="20170810 04:44:28.221" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.224" starttime="20170810 04:44:28.221" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:28.610" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:44:28.610" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:28.610" starttime="20170810 04:44:28.224" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:28.612" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:28.612" starttime="20170810 04:44:28.611" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:28.613" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:28.613" starttime="20170810 04:44:28.612" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.613" starttime="20170810 04:44:28.612" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.613" starttime="20170810 04:44:28.611" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:28.613" starttime="20170810 04:44:28.610" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:28.613" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:28.614" starttime="20170810 04:44:28.613" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:28.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:28.614" starttime="20170810 04:44:27.593" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:28.614" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:28.614" starttime="20170810 04:44:28.614" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:28.615" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:28.615" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:28.615" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:44:28.615" starttime="20170810 04:44:28.615" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:28.615" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:44:28.615" starttime="20170810 04:44:27.592" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:28.616" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:44:28.616" starttime="20170810 04:44:27.592" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:44:28.616" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:44:28.616" starttime="20170810 04:44:28.616" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:28.617" starttime="20170810 04:44:27.591" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:28.617" starttime="20170810 04:44:26.113" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:38.624" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:38.624" starttime="20170810 04:44:38.623" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:38.625" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:38.625" starttime="20170810 04:44:38.625" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:38.626" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:38.626" starttime="20170810 04:44:38.626" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:38.627" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:38.627" starttime="20170810 04:44:38.627" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:39.059" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:39.059" starttime="20170810 04:44:38.628" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:39.059" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:39.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:39.059" starttime="20170810 04:44:38.628" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:39.060" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:39.060" starttime="20170810 04:44:39.060" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:39.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:39.061" starttime="20170810 04:44:39.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.061" starttime="20170810 04:44:38.622" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.061" starttime="20170810 04:44:38.622" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.061" starttime="20170810 04:44:38.620" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:39.062" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:44:39.062" starttime="20170810 04:44:39.061" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:39.064" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:39.064" starttime="20170810 04:44:39.063" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:39.065" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:39.066" starttime="20170810 04:44:39.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.066" starttime="20170810 04:44:39.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.066" starttime="20170810 04:44:39.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.066" starttime="20170810 04:44:39.062" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:39.246" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:39.246" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:39.246" starttime="20170810 04:44:39.066" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:39.251" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:39.251" starttime="20170810 04:44:39.247" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:39.252" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:39.252" starttime="20170810 04:44:39.252" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.253" starttime="20170810 04:44:39.251" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.253" starttime="20170810 04:44:39.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.253" starttime="20170810 04:44:39.246" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:39.253" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:39.253" starttime="20170810 04:44:39.253" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:39.254" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:39.254" starttime="20170810 04:44:38.619" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:39.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:39.254" starttime="20170810 04:44:39.254" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:39.255" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:39.255" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:39.255" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:44:39.255" starttime="20170810 04:44:39.255" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:39.255" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:44:39.256" starttime="20170810 04:44:38.619" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:39.256" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:44:39.256" starttime="20170810 04:44:38.618" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:44:39.257" starttime="20170810 04:44:39.256" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:39.257" starttime="20170810 04:44:38.618" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:39.261" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:39.261" starttime="20170810 04:44:39.260" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:39.262" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:39.262" starttime="20170810 04:44:39.261" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:39.262" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:39.262" starttime="20170810 04:44:39.262" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:39.263" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:39.263" starttime="20170810 04:44:39.263" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.047" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:40.047" starttime="20170810 04:44:39.264" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:40.047" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:40.048" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:40.048" starttime="20170810 04:44:39.263" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.048" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:40.049" starttime="20170810 04:44:40.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.049" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:40.049" starttime="20170810 04:44:40.049" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.049" starttime="20170810 04:44:39.260" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.050" starttime="20170810 04:44:39.259" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.050" starttime="20170810 04:44:39.259" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:40.050" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:44:40.050" starttime="20170810 04:44:40.050" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:40.053" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:40.053" starttime="20170810 04:44:40.052" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:40.054" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:40.054" starttime="20170810 04:44:40.054" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.055" starttime="20170810 04:44:40.053" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.055" starttime="20170810 04:44:40.051" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.055" starttime="20170810 04:44:40.051" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:40.536" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:40.536" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:40.536" starttime="20170810 04:44:40.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:40.538" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:40.538" starttime="20170810 04:44:40.537" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:40.539" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:40.539" starttime="20170810 04:44:40.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.539" starttime="20170810 04:44:40.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.539" starttime="20170810 04:44:40.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.539" starttime="20170810 04:44:40.536" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:40.539" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:40.540" starttime="20170810 04:44:40.539" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:40.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:40.540" starttime="20170810 04:44:39.258" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.540" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:40.541" starttime="20170810 04:44:40.540" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:40.541" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:40.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:40.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:44:40.541" starttime="20170810 04:44:40.541" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:40.542" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:44:40.542" starttime="20170810 04:44:39.257" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:40.542" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:44:40.542" starttime="20170810 04:44:39.257" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:44:40.542" starttime="20170810 04:44:40.542" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:40.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:40.547" starttime="20170810 04:44:40.546" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:40.547" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:40.547" starttime="20170810 04:44:40.547" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:40.548" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:40.548" starttime="20170810 04:44:40.547" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:40.548" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:40.548" starttime="20170810 04:44:40.548" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.906" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:40.906" starttime="20170810 04:44:40.549" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:40.906" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:40.906" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:40.906" starttime="20170810 04:44:40.549" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.907" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:40.907" starttime="20170810 04:44:40.906" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:40.908" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:40.908" starttime="20170810 04:44:40.907" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.908" starttime="20170810 04:44:40.545" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.908" starttime="20170810 04:44:40.545" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.908" starttime="20170810 04:44:40.544" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:40.909" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:44:40.909" starttime="20170810 04:44:40.908" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:40.911" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:40.911" starttime="20170810 04:44:40.910" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:40.912" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:40.913" starttime="20170810 04:44:40.912" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.913" starttime="20170810 04:44:40.911" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.913" starttime="20170810 04:44:40.910" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:40.913" starttime="20170810 04:44:40.909" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:41.456" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:44:41.456" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:41.456" starttime="20170810 04:44:40.913" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:41.458" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:41.458" starttime="20170810 04:44:41.457" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:41.459" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:41.459" starttime="20170810 04:44:41.459" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:41.459" starttime="20170810 04:44:41.458" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:41.459" starttime="20170810 04:44:41.457" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:41.459" starttime="20170810 04:44:41.456" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:41.460" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:41.460" starttime="20170810 04:44:41.460" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:41.460" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:41.460" starttime="20170810 04:44:40.544" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:41.461" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:41.461" starttime="20170810 04:44:41.460" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:41.462" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:41.462" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:41.462" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:44:41.462" starttime="20170810 04:44:41.461" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:41.462" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:44:41.462" starttime="20170810 04:44:40.543" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:41.462" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:44:41.462" starttime="20170810 04:44:40.543" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:44:41.463" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:44:41.463" starttime="20170810 04:44:41.463" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:41.463" starttime="20170810 04:44:40.543" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:41.464" starttime="20170810 04:44:38.617" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:51.470" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:51.471" starttime="20170810 04:44:51.470" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:51.471" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:51.471" starttime="20170810 04:44:51.471" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:51.472" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:51.472" starttime="20170810 04:44:51.472" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:51.473" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:51.473" starttime="20170810 04:44:51.472" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:51.889" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:51.889" starttime="20170810 04:44:51.474" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:51.889" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:51.889" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:51.889" starttime="20170810 04:44:51.473" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:51.890" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:51.890" starttime="20170810 04:44:51.889" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:51.890" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:51.891" starttime="20170810 04:44:51.890" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:51.891" starttime="20170810 04:44:51.469" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:51.891" starttime="20170810 04:44:51.468" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:51.891" starttime="20170810 04:44:51.467" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:51.891" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:44:51.891" starttime="20170810 04:44:51.891" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:51.893" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:51.894" starttime="20170810 04:44:51.893" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:51.894" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:51.895" starttime="20170810 04:44:51.894" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:51.895" starttime="20170810 04:44:51.894" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:51.895" starttime="20170810 04:44:51.892" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:51.895" starttime="20170810 04:44:51.892" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:52.480" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:52.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:52.480" starttime="20170810 04:44:51.895" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:52.482" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:52.482" starttime="20170810 04:44:52.481" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:52.483" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:52.483" starttime="20170810 04:44:52.483" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.483" starttime="20170810 04:44:52.482" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.484" starttime="20170810 04:44:52.481" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.484" starttime="20170810 04:44:52.480" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:52.484" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:52.484" starttime="20170810 04:44:52.484" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:52.484" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:52.484" starttime="20170810 04:44:51.467" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:52.485" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:52.485" starttime="20170810 04:44:52.485" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:52.486" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:52.486" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:52.486" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:44:52.486" starttime="20170810 04:44:52.485" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:52.486" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:44:52.486" starttime="20170810 04:44:51.466" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:52.487" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:44:52.487" starttime="20170810 04:44:51.465" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:44:52.487" starttime="20170810 04:44:52.487" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.487" starttime="20170810 04:44:51.465" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:52.491" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:52.491" starttime="20170810 04:44:52.490" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:52.492" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:52.492" starttime="20170810 04:44:52.491" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:52.492" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:52.492" starttime="20170810 04:44:52.492" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:52.493" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:52.493" starttime="20170810 04:44:52.493" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:52.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:52.939" starttime="20170810 04:44:52.494" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:52.939" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:52.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:52.939" starttime="20170810 04:44:52.493" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:52.940" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:52.940" starttime="20170810 04:44:52.939" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:52.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:52.940" starttime="20170810 04:44:52.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.941" starttime="20170810 04:44:52.490" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.941" starttime="20170810 04:44:52.490" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.941" starttime="20170810 04:44:52.489" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:52.941" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:44:52.941" starttime="20170810 04:44:52.941" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:52.944" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:52.944" starttime="20170810 04:44:52.943" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:52.945" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:44:52.945" starttime="20170810 04:44:52.944" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.945" starttime="20170810 04:44:52.944" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.945" starttime="20170810 04:44:52.942" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:52.945" starttime="20170810 04:44:52.942" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:53.628" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:44:53.628" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:53.628" starttime="20170810 04:44:52.945" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:53.630" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:53.630" starttime="20170810 04:44:53.630" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:53.631" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:53.631" starttime="20170810 04:44:53.631" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:53.631" starttime="20170810 04:44:53.630" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:53.631" starttime="20170810 04:44:53.629" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:53.631" starttime="20170810 04:44:53.629" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:53.632" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:53.632" starttime="20170810 04:44:53.632" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:53.632" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:53.632" starttime="20170810 04:44:52.488" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:53.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:53.633" starttime="20170810 04:44:53.632" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:53.633" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:53.633" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:53.633" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:44:53.633" starttime="20170810 04:44:53.633" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:53.634" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:44:53.634" starttime="20170810 04:44:52.488" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:53.634" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:44:53.634" starttime="20170810 04:44:52.487" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:44:53.635" starttime="20170810 04:44:53.634" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:44:53.638" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:44:53.639" starttime="20170810 04:44:53.638" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:44:53.639" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:44:53.639" starttime="20170810 04:44:53.639" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:44:53.640" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:44:53.640" starttime="20170810 04:44:53.640" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:44:53.641" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:44:53.641" starttime="20170810 04:44:53.640" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:44:54.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:44:54.155" starttime="20170810 04:44:53.641" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:54.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:44:54.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:54.155" starttime="20170810 04:44:53.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:44:54.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:54.155" starttime="20170810 04:44:54.155" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:54.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:54.156" starttime="20170810 04:44:54.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.156" starttime="20170810 04:44:53.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.156" starttime="20170810 04:44:53.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.156" starttime="20170810 04:44:53.637" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:44:54.157" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:44:54.157" starttime="20170810 04:44:54.157" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:54.159" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:54.159" starttime="20170810 04:44:54.158" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:54.160" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:44:54.160" starttime="20170810 04:44:54.160" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.160" starttime="20170810 04:44:54.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.160" starttime="20170810 04:44:54.158" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.160" starttime="20170810 04:44:54.157" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:44:54.531" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:44:54.531" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:54.531" starttime="20170810 04:44:54.161" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:44:54.533" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:54.533" starttime="20170810 04:44:54.532" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:44:54.534" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:44:54.534" starttime="20170810 04:44:54.533" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.534" starttime="20170810 04:44:54.533" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.534" starttime="20170810 04:44:54.532" status="PASS"></status>
</kw>
<status endtime="20170810 04:44:54.534" starttime="20170810 04:44:54.531" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:44:54.534" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:44:54.534" starttime="20170810 04:44:54.534" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:54.535" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:44:54.535" starttime="20170810 04:44:53.636" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:44:54.535" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:44:54.535" starttime="20170810 04:44:54.535" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:44:54.536" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:44:54.536" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:44:54.536" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:44:54.536" starttime="20170810 04:44:54.536" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:54.536" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:44:54.536" starttime="20170810 04:44:53.635" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:44:54.537" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:44:54.537" starttime="20170810 04:44:53.635" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:44:54.537" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:44:54.537" starttime="20170810 04:44:54.537" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:54.537" starttime="20170810 04:44:53.635" status="FAIL"></status>
</kw>
<status endtime="20170810 04:44:54.538" starttime="20170810 04:44:51.464" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:04.544" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:04.545" starttime="20170810 04:45:04.544" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:04.545" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:04.545" starttime="20170810 04:45:04.545" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:04.546" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:04.546" starttime="20170810 04:45:04.546" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:04.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:04.547" starttime="20170810 04:45:04.546" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:05.252" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:05.252" starttime="20170810 04:45:04.548" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:05.252" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:05.252" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:05.253" starttime="20170810 04:45:04.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:05.253" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:05.253" starttime="20170810 04:45:05.253" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:05.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:05.254" starttime="20170810 04:45:05.254" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.254" starttime="20170810 04:45:04.543" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.254" starttime="20170810 04:45:04.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.254" starttime="20170810 04:45:04.541" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:05.255" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:45:05.255" starttime="20170810 04:45:05.255" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:05.257" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:05.257" starttime="20170810 04:45:05.257" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:05.258" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:05.258" starttime="20170810 04:45:05.258" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.258" starttime="20170810 04:45:05.257" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.258" starttime="20170810 04:45:05.256" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.258" starttime="20170810 04:45:05.255" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:05.991" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:05.991" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:05.991" starttime="20170810 04:45:05.259" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:05.993" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:05.993" starttime="20170810 04:45:05.992" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:05.994" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:05.994" starttime="20170810 04:45:05.993" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.994" starttime="20170810 04:45:05.993" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.994" starttime="20170810 04:45:05.991" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.994" starttime="20170810 04:45:05.991" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:05.994" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:05.995" starttime="20170810 04:45:05.994" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:05.995" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:05.995" starttime="20170810 04:45:04.541" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:05.995" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:05.995" starttime="20170810 04:45:05.995" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:05.996" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:05.996" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:05.996" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:45:05.996" starttime="20170810 04:45:05.996" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:05.996" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:45:05.997" starttime="20170810 04:45:04.540" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:05.997" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:45:05.997" starttime="20170810 04:45:04.539" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:45:05.997" starttime="20170810 04:45:05.997" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:05.997" starttime="20170810 04:45:04.539" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:06.001" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:06.001" starttime="20170810 04:45:06.001" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:06.002" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:06.002" starttime="20170810 04:45:06.002" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:06.003" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:06.003" starttime="20170810 04:45:06.002" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:06.003" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:06.004" starttime="20170810 04:45:06.003" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:06.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:06.533" starttime="20170810 04:45:06.004" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:06.533" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:06.533" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:06.533" starttime="20170810 04:45:06.004" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:06.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:06.534" starttime="20170810 04:45:06.533" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:06.534" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:06.534" starttime="20170810 04:45:06.534" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:06.534" starttime="20170810 04:45:06.000" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:06.534" starttime="20170810 04:45:06.000" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:06.535" starttime="20170810 04:45:05.999" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:06.535" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:45:06.535" starttime="20170810 04:45:06.535" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:06.538" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:06.538" starttime="20170810 04:45:06.536" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:06.538" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:06.539" starttime="20170810 04:45:06.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:06.539" starttime="20170810 04:45:06.538" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:06.539" starttime="20170810 04:45:06.536" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:06.539" starttime="20170810 04:45:06.535" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:07.118" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:07.118" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:07.118" starttime="20170810 04:45:06.539" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:07.120" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:07.120" starttime="20170810 04:45:07.119" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:07.121" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:07.121" starttime="20170810 04:45:07.121" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.121" starttime="20170810 04:45:07.120" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.121" starttime="20170810 04:45:07.119" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.121" starttime="20170810 04:45:07.118" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:07.122" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:07.122" starttime="20170810 04:45:07.121" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:07.122" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:07.122" starttime="20170810 04:45:05.998" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:07.122" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:07.123" starttime="20170810 04:45:07.122" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:07.123" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:07.123" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:07.123" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:45:07.123" starttime="20170810 04:45:07.123" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:07.124" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:45:07.124" starttime="20170810 04:45:05.998" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:07.124" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:45:07.124" starttime="20170810 04:45:05.998" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:45:07.125" starttime="20170810 04:45:07.124" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:07.130" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:07.130" starttime="20170810 04:45:07.129" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:07.131" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:07.131" starttime="20170810 04:45:07.131" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:07.132" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:07.132" starttime="20170810 04:45:07.132" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:07.133" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:07.133" starttime="20170810 04:45:07.133" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:07.521" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:07.521" starttime="20170810 04:45:07.134" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:07.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:07.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:07.522" starttime="20170810 04:45:07.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:07.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:07.522" starttime="20170810 04:45:07.522" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:07.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:07.523" starttime="20170810 04:45:07.523" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.523" starttime="20170810 04:45:07.129" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.523" starttime="20170810 04:45:07.128" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.523" starttime="20170810 04:45:07.127" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:07.524" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:45:07.524" starttime="20170810 04:45:07.524" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:07.526" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:07.526" starttime="20170810 04:45:07.525" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:07.527" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:07.527" starttime="20170810 04:45:07.527" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.527" starttime="20170810 04:45:07.526" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.527" starttime="20170810 04:45:07.525" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:07.527" starttime="20170810 04:45:07.524" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:08.312" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:45:08.312" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:08.312" starttime="20170810 04:45:07.528" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:08.314" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:08.314" starttime="20170810 04:45:08.314" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:08.315" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:08.315" starttime="20170810 04:45:08.315" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:08.315" starttime="20170810 04:45:08.314" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:08.315" starttime="20170810 04:45:08.313" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:08.315" starttime="20170810 04:45:08.313" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:08.316" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:08.316" starttime="20170810 04:45:08.316" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:08.316" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:08.316" starttime="20170810 04:45:07.126" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:08.317" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:08.317" starttime="20170810 04:45:08.316" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:08.317" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:08.317" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:08.317" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:45:08.318" starttime="20170810 04:45:08.317" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:08.318" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:45:08.318" starttime="20170810 04:45:07.125" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:08.318" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:45:08.318" starttime="20170810 04:45:07.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:45:08.319" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:45:08.319" starttime="20170810 04:45:08.318" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:08.319" starttime="20170810 04:45:07.125" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:08.319" starttime="20170810 04:45:04.538" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:18.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:18.327" starttime="20170810 04:45:18.326" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:18.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:18.327" starttime="20170810 04:45:18.327" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:18.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:18.328" starttime="20170810 04:45:18.327" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:18.328" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:18.328" starttime="20170810 04:45:18.328" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:18.647" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:18.647" starttime="20170810 04:45:18.329" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:18.647" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:18.647" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:18.647" starttime="20170810 04:45:18.329" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:18.648" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:18.648" starttime="20170810 04:45:18.647" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:18.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:18.649" starttime="20170810 04:45:18.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.649" starttime="20170810 04:45:18.325" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.649" starttime="20170810 04:45:18.325" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.649" starttime="20170810 04:45:18.324" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:18.650" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:45:18.650" starttime="20170810 04:45:18.649" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:18.653" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:18.653" starttime="20170810 04:45:18.652" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:18.654" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:18.654" starttime="20170810 04:45:18.654" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.654" starttime="20170810 04:45:18.653" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.654" starttime="20170810 04:45:18.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.654" starttime="20170810 04:45:18.650" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:18.778" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:18.779" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:18.779" starttime="20170810 04:45:18.655" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:18.783" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:18.783" starttime="20170810 04:45:18.780" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:18.784" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:18.785" starttime="20170810 04:45:18.784" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.785" starttime="20170810 04:45:18.784" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.785" starttime="20170810 04:45:18.780" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.785" starttime="20170810 04:45:18.779" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:18.785" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:18.786" starttime="20170810 04:45:18.785" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:18.786" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:18.786" starttime="20170810 04:45:18.323" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:18.786" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:18.786" starttime="20170810 04:45:18.786" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:18.787" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:18.787" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:18.787" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:45:18.787" starttime="20170810 04:45:18.787" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:18.787" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:45:18.788" starttime="20170810 04:45:18.322" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:18.788" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:45:18.788" starttime="20170810 04:45:18.321" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:45:18.788" starttime="20170810 04:45:18.788" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:18.788" starttime="20170810 04:45:18.320" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:18.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:18.794" starttime="20170810 04:45:18.793" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:18.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:18.794" starttime="20170810 04:45:18.794" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:18.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:18.795" starttime="20170810 04:45:18.795" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:18.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:18.796" starttime="20170810 04:45:18.796" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.192" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:19.193" starttime="20170810 04:45:18.797" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.193" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:19.193" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:19.193" starttime="20170810 04:45:18.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.193" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:19.194" starttime="20170810 04:45:19.193" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.194" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:19.194" starttime="20170810 04:45:19.194" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.194" starttime="20170810 04:45:18.792" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.194" starttime="20170810 04:45:18.791" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.195" starttime="20170810 04:45:18.790" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:19.195" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:45:19.195" starttime="20170810 04:45:19.195" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:19.197" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:19.198" starttime="20170810 04:45:19.196" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:19.198" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:19.199" starttime="20170810 04:45:19.198" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.199" starttime="20170810 04:45:19.198" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.199" starttime="20170810 04:45:19.196" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.199" starttime="20170810 04:45:19.195" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:19.445" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:19.446" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:19.446" starttime="20170810 04:45:19.199" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:19.447" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:19.447" starttime="20170810 04:45:19.447" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:19.448" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:19.449" starttime="20170810 04:45:19.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.449" starttime="20170810 04:45:19.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.449" starttime="20170810 04:45:19.446" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.449" starttime="20170810 04:45:19.446" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:19.449" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:19.449" starttime="20170810 04:45:19.449" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:19.450" starttime="20170810 04:45:18.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.450" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:19.450" starttime="20170810 04:45:19.450" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:19.451" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:19.451" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:19.451" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:45:19.451" starttime="20170810 04:45:19.450" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.451" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:45:19.451" starttime="20170810 04:45:18.789" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.452" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:45:19.452" starttime="20170810 04:45:18.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:45:19.452" starttime="20170810 04:45:19.452" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:19.456" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:19.457" starttime="20170810 04:45:19.456" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:19.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:19.458" starttime="20170810 04:45:19.457" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:19.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:19.459" starttime="20170810 04:45:19.458" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:19.460" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:19.460" starttime="20170810 04:45:19.459" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.718" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:19.718" starttime="20170810 04:45:19.461" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.718" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:19.719" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:19.719" starttime="20170810 04:45:19.460" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.719" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:19.719" starttime="20170810 04:45:19.719" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.720" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:19.720" starttime="20170810 04:45:19.720" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.720" starttime="20170810 04:45:19.455" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.720" starttime="20170810 04:45:19.455" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.720" starttime="20170810 04:45:19.454" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:19.721" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:45:19.721" starttime="20170810 04:45:19.721" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:19.723" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:19.723" starttime="20170810 04:45:19.722" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:19.724" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:19.724" starttime="20170810 04:45:19.724" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.724" starttime="20170810 04:45:19.723" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.724" starttime="20170810 04:45:19.722" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.724" starttime="20170810 04:45:19.721" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:19.856" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:45:19.857" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:19.857" starttime="20170810 04:45:19.725" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:19.858" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:19.858" starttime="20170810 04:45:19.858" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:19.859" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:19.859" starttime="20170810 04:45:19.859" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.859" starttime="20170810 04:45:19.858" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.860" starttime="20170810 04:45:19.857" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:19.860" starttime="20170810 04:45:19.857" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:19.860" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:19.860" starttime="20170810 04:45:19.860" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:19.860" starttime="20170810 04:45:19.454" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:19.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:19.861" starttime="20170810 04:45:19.861" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:19.862" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:19.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:19.862" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:45:19.862" starttime="20170810 04:45:19.861" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.862" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:45:19.862" starttime="20170810 04:45:19.453" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:19.862" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:45:19.862" starttime="20170810 04:45:19.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:45:19.863" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:45:19.863" starttime="20170810 04:45:19.863" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:19.864" starttime="20170810 04:45:19.452" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:19.864" starttime="20170810 04:45:18.320" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:29.870" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:29.870" starttime="20170810 04:45:29.870" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:29.871" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:29.871" starttime="20170810 04:45:29.871" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:29.872" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:29.872" starttime="20170810 04:45:29.871" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:29.872" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:29.872" starttime="20170810 04:45:29.872" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.079" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:30.079" starttime="20170810 04:45:29.873" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.079" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:30.079" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.079" starttime="20170810 04:45:29.873" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.080" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.080" starttime="20170810 04:45:30.079" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.080" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.081" starttime="20170810 04:45:30.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.081" starttime="20170810 04:45:29.869" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.081" starttime="20170810 04:45:29.868" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.081" starttime="20170810 04:45:29.867" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:30.082" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:45:30.082" starttime="20170810 04:45:30.081" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:30.084" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:30.084" starttime="20170810 04:45:30.083" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:30.085" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:30.085" starttime="20170810 04:45:30.084" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.085" starttime="20170810 04:45:30.084" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.085" starttime="20170810 04:45:30.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.085" starttime="20170810 04:45:30.082" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:30.169" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:30.169" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.169" starttime="20170810 04:45:30.085" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:30.171" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:30.171" starttime="20170810 04:45:30.170" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:30.172" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:30.172" starttime="20170810 04:45:30.172" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.173" starttime="20170810 04:45:30.172" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.173" starttime="20170810 04:45:30.170" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.173" starttime="20170810 04:45:30.170" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:30.173" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:30.173" starttime="20170810 04:45:30.173" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.173" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.173" starttime="20170810 04:45:29.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.174" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.174" starttime="20170810 04:45:30.174" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:30.175" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:30.175" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:30.175" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:45:30.175" starttime="20170810 04:45:30.174" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.175" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:45:30.175" starttime="20170810 04:45:29.866" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.175" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:45:30.175" starttime="20170810 04:45:29.866" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:45:30.176" starttime="20170810 04:45:30.176" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.176" starttime="20170810 04:45:29.865" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:30.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:30.181" starttime="20170810 04:45:30.180" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:30.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:30.182" starttime="20170810 04:45:30.182" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:30.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:30.183" starttime="20170810 04:45:30.183" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:30.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:30.184" starttime="20170810 04:45:30.183" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:30.428" starttime="20170810 04:45:30.185" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:30.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.428" starttime="20170810 04:45:30.184" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.428" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.429" starttime="20170810 04:45:30.428" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.429" starttime="20170810 04:45:30.429" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.429" starttime="20170810 04:45:30.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.429" starttime="20170810 04:45:30.179" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.430" starttime="20170810 04:45:30.178" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:30.430" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:45:30.430" starttime="20170810 04:45:30.430" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:30.433" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:30.433" starttime="20170810 04:45:30.432" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:30.434" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:30.434" starttime="20170810 04:45:30.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.434" starttime="20170810 04:45:30.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.434" starttime="20170810 04:45:30.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.434" starttime="20170810 04:45:30.430" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:30.540" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:30.540" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.540" starttime="20170810 04:45:30.434" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:30.542" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:30.542" starttime="20170810 04:45:30.542" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:30.543" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:30.543" starttime="20170810 04:45:30.543" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.543" starttime="20170810 04:45:30.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.543" starttime="20170810 04:45:30.541" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.543" starttime="20170810 04:45:30.541" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:30.544" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:30.544" starttime="20170810 04:45:30.544" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.544" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.544" starttime="20170810 04:45:30.177" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.545" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.545" starttime="20170810 04:45:30.544" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:30.545" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:30.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:30.545" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:45:30.545" starttime="20170810 04:45:30.545" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.546" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:45:30.546" starttime="20170810 04:45:30.177" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.546" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:45:30.546" starttime="20170810 04:45:30.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:45:30.547" starttime="20170810 04:45:30.546" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:30.550" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:30.551" starttime="20170810 04:45:30.550" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:30.551" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:30.551" starttime="20170810 04:45:30.551" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:30.552" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:30.552" starttime="20170810 04:45:30.552" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:30.553" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:30.553" starttime="20170810 04:45:30.552" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.740" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:30.740" starttime="20170810 04:45:30.553" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.740" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:30.740" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.740" starttime="20170810 04:45:30.553" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.741" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.741" starttime="20170810 04:45:30.740" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.741" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.741" starttime="20170810 04:45:30.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.742" starttime="20170810 04:45:30.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.742" starttime="20170810 04:45:30.549" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.742" starttime="20170810 04:45:30.549" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:30.742" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:45:30.742" starttime="20170810 04:45:30.742" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:30.744" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:30.744" starttime="20170810 04:45:30.744" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:30.745" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:30.745" starttime="20170810 04:45:30.745" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.746" starttime="20170810 04:45:30.745" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.746" starttime="20170810 04:45:30.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.746" starttime="20170810 04:45:30.743" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:30.855" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:45:30.855" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.855" starttime="20170810 04:45:30.746" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:30.857" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:30.857" starttime="20170810 04:45:30.857" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:30.858" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:30.858" starttime="20170810 04:45:30.858" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.858" starttime="20170810 04:45:30.857" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.858" starttime="20170810 04:45:30.856" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:30.858" starttime="20170810 04:45:30.856" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:30.859" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:30.859" starttime="20170810 04:45:30.859" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.859" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:30.859" starttime="20170810 04:45:30.548" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:30.860" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:30.860" starttime="20170810 04:45:30.860" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:30.860" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:30.861" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:30.861" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:45:30.861" starttime="20170810 04:45:30.860" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.861" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:45:30.861" starttime="20170810 04:45:30.547" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:30.861" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:45:30.861" starttime="20170810 04:45:30.547" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:45:30.862" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:45:30.862" starttime="20170810 04:45:30.862" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:30.862" starttime="20170810 04:45:30.547" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:30.862" starttime="20170810 04:45:29.864" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:40.867" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:40.868" starttime="20170810 04:45:40.867" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:40.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:40.868" starttime="20170810 04:45:40.868" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:40.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:40.869" starttime="20170810 04:45:40.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:40.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:40.870" starttime="20170810 04:45:40.869" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:41.342" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:41.342" starttime="20170810 04:45:40.870" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:41.342" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:41.342" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:41.342" starttime="20170810 04:45:40.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:41.343" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:41.343" starttime="20170810 04:45:41.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:41.344" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:41.344" starttime="20170810 04:45:41.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:41.344" starttime="20170810 04:45:40.866" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:41.344" starttime="20170810 04:45:40.866" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:41.344" starttime="20170810 04:45:40.865" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:41.345" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:45:41.345" starttime="20170810 04:45:41.344" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:41.347" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:41.347" starttime="20170810 04:45:41.346" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:41.348" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:41.348" starttime="20170810 04:45:41.348" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:41.348" starttime="20170810 04:45:41.347" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:41.348" starttime="20170810 04:45:41.346" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:41.348" starttime="20170810 04:45:41.345" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:44.472" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:44.472" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:44.472" starttime="20170810 04:45:41.348" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:44.474" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:44.474" starttime="20170810 04:45:44.473" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:44.475" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:44.475" starttime="20170810 04:45:44.475" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:44.475" starttime="20170810 04:45:44.474" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:44.475" starttime="20170810 04:45:44.473" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:44.475" starttime="20170810 04:45:44.472" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:44.476" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:44.476" starttime="20170810 04:45:44.476" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:44.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:44.476" starttime="20170810 04:45:40.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:44.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:44.477" starttime="20170810 04:45:44.476" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:44.477" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:44.477" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:44.477" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:45:44.477" starttime="20170810 04:45:44.477" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:44.478" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:45:44.478" starttime="20170810 04:45:40.864" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:44.478" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:45:44.478" starttime="20170810 04:45:40.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:45:44.479" starttime="20170810 04:45:44.478" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:44.479" starttime="20170810 04:45:40.863" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:44.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:44.483" starttime="20170810 04:45:44.482" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:44.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:44.483" starttime="20170810 04:45:44.483" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:44.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:44.484" starttime="20170810 04:45:44.484" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:44.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:44.485" starttime="20170810 04:45:44.484" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.052" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:45.052" starttime="20170810 04:45:44.486" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.052" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:45.052" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:45.052" starttime="20170810 04:45:44.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:45.053" starttime="20170810 04:45:45.052" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.053" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:45.054" starttime="20170810 04:45:45.053" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.054" starttime="20170810 04:45:44.482" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.054" starttime="20170810 04:45:44.481" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.054" starttime="20170810 04:45:44.480" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:45.054" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:45:45.054" starttime="20170810 04:45:45.054" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:45.057" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:45.057" starttime="20170810 04:45:45.056" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:45.058" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:45.058" starttime="20170810 04:45:45.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.058" starttime="20170810 04:45:45.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.058" starttime="20170810 04:45:45.055" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.058" starttime="20170810 04:45:45.055" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:45.164" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:45.164" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:45.164" starttime="20170810 04:45:45.058" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:45.165" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:45.165" starttime="20170810 04:45:45.165" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:45.166" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:45.167" starttime="20170810 04:45:45.166" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.167" starttime="20170810 04:45:45.166" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.167" starttime="20170810 04:45:45.165" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.167" starttime="20170810 04:45:45.164" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:45.167" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:45.167" starttime="20170810 04:45:45.167" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.167" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:45.168" starttime="20170810 04:45:44.480" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.168" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:45.168" starttime="20170810 04:45:45.168" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:45.169" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:45.169" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:45.169" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:45:45.169" starttime="20170810 04:45:45.168" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.169" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:45:45.169" starttime="20170810 04:45:44.479" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.169" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:45:45.170" starttime="20170810 04:45:44.479" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:45:45.170" starttime="20170810 04:45:45.170" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:45.174" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:45.174" starttime="20170810 04:45:45.174" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:45.175" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:45.175" starttime="20170810 04:45:45.174" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:45.175" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:45.175" starttime="20170810 04:45:45.175" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:45.176" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:45.176" starttime="20170810 04:45:45.176" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.590" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:45.590" starttime="20170810 04:45:45.177" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.590" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:45.590" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:45.591" starttime="20170810 04:45:45.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.591" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:45.591" starttime="20170810 04:45:45.591" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.592" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:45.592" starttime="20170810 04:45:45.592" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.592" starttime="20170810 04:45:45.173" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.592" starttime="20170810 04:45:45.173" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.592" starttime="20170810 04:45:45.172" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:45.593" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:45:45.593" starttime="20170810 04:45:45.593" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:45.595" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:45.595" starttime="20170810 04:45:45.594" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:45.596" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:45:45.596" starttime="20170810 04:45:45.596" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.596" starttime="20170810 04:45:45.595" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.596" starttime="20170810 04:45:45.594" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.596" starttime="20170810 04:45:45.593" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:45.731" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:45:45.731" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:45.731" starttime="20170810 04:45:45.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:45.733" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:45.734" starttime="20170810 04:45:45.733" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:45.735" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:45.735" starttime="20170810 04:45:45.734" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.735" starttime="20170810 04:45:45.734" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.735" starttime="20170810 04:45:45.732" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:45.735" starttime="20170810 04:45:45.732" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:45.736" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:45.736" starttime="20170810 04:45:45.736" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.736" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:45.736" starttime="20170810 04:45:45.171" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:45.737" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:45.737" starttime="20170810 04:45:45.737" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:45.738" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:45.738" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:45.738" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:45:45.738" starttime="20170810 04:45:45.738" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.739" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:45:45.739" starttime="20170810 04:45:45.171" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:45.739" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:45:45.739" starttime="20170810 04:45:45.170" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:45:45.740" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:45:45.740" starttime="20170810 04:45:45.740" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:45.740" starttime="20170810 04:45:45.170" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:45.741" starttime="20170810 04:45:40.863" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:45:55.746" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:45:55.747" starttime="20170810 04:45:55.746" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:45:55.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:45:55.747" starttime="20170810 04:45:55.747" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:45:55.748" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:45:55.748" starttime="20170810 04:45:55.747" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:45:55.748" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:45:55.748" starttime="20170810 04:45:55.748" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:45:56.758" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:45:56.758" starttime="20170810 04:45:55.749" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:56.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:45:56.758" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:56.758" starttime="20170810 04:45:55.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:45:56.759" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:56.759" starttime="20170810 04:45:56.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:56.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:56.760" starttime="20170810 04:45:56.759" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:56.760" starttime="20170810 04:45:55.745" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:56.760" starttime="20170810 04:45:55.745" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:56.760" starttime="20170810 04:45:55.744" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:45:56.761" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:45:56.761" starttime="20170810 04:45:56.760" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:56.763" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:56.763" starttime="20170810 04:45:56.762" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:56.764" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:45:56.764" starttime="20170810 04:45:56.763" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:56.764" starttime="20170810 04:45:56.763" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:56.764" starttime="20170810 04:45:56.761" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:56.764" starttime="20170810 04:45:56.761" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:45:58.656" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:45:58.656" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:58.656" starttime="20170810 04:45:56.764" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:45:58.661" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:58.661" starttime="20170810 04:45:58.658" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:45:58.662" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:45:58.662" starttime="20170810 04:45:58.662" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:58.662" starttime="20170810 04:45:58.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:58.663" starttime="20170810 04:45:58.657" status="PASS"></status>
</kw>
<status endtime="20170810 04:45:58.663" starttime="20170810 04:45:58.657" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:45:58.663" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:45:58.663" starttime="20170810 04:45:58.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:58.663" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:45:58.663" starttime="20170810 04:45:55.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:45:58.664" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:45:58.664" starttime="20170810 04:45:58.664" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:45:58.664" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:45:58.665" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:45:58.665" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:45:58.665" starttime="20170810 04:45:58.664" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:58.665" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:45:58.665" starttime="20170810 04:45:55.742" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:45:58.665" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:45:58.665" starttime="20170810 04:45:55.742" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 04:45:58.666" level="FAIL">On != Off</msg>
<status endtime="20170810 04:45:58.666" starttime="20170810 04:45:58.666" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:58.666" starttime="20170810 04:45:55.742" status="FAIL"></status>
</kw>
<status endtime="20170810 04:45:58.666" starttime="20170810 04:45:55.741" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:08.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:08.672" starttime="20170810 04:46:08.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:08.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:08.672" starttime="20170810 04:46:08.672" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:08.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:08.673" starttime="20170810 04:46:08.672" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:08.673" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:08.674" starttime="20170810 04:46:08.673" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.093" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:09.093" starttime="20170810 04:46:08.674" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:09.093" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:09.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:09.093" starttime="20170810 04:46:08.674" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.094" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:09.094" starttime="20170810 04:46:09.094" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.095" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:09.095" starttime="20170810 04:46:09.095" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.095" starttime="20170810 04:46:08.670" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.095" starttime="20170810 04:46:08.670" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.095" starttime="20170810 04:46:08.669" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:09.096" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:46:09.096" starttime="20170810 04:46:09.096" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:09.098" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:09.098" starttime="20170810 04:46:09.097" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:09.099" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:09.099" starttime="20170810 04:46:09.099" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.099" starttime="20170810 04:46:09.098" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.099" starttime="20170810 04:46:09.097" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.099" starttime="20170810 04:46:09.096" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:09.499" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:09.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:09.499" starttime="20170810 04:46:09.099" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:09.501" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:09.501" starttime="20170810 04:46:09.501" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:09.502" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:09.502" starttime="20170810 04:46:09.502" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.502" starttime="20170810 04:46:09.501" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.502" starttime="20170810 04:46:09.500" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.503" starttime="20170810 04:46:09.500" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:09.503" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:09.503" starttime="20170810 04:46:09.503" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:09.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:09.503" starttime="20170810 04:46:08.669" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.504" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:09.504" starttime="20170810 04:46:09.504" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:09.505" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:09.505" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:09.505" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:46:09.505" starttime="20170810 04:46:09.504" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:09.505" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:46:09.505" starttime="20170810 04:46:08.668" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:09.505" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:46:09.505" starttime="20170810 04:46:08.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:46:09.506" starttime="20170810 04:46:09.506" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.506" starttime="20170810 04:46:08.667" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:09.509" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:09.510" starttime="20170810 04:46:09.509" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:09.511" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:09.511" starttime="20170810 04:46:09.511" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:09.512" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:09.512" starttime="20170810 04:46:09.511" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:09.512" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:09.512" starttime="20170810 04:46:09.512" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.695" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:09.695" starttime="20170810 04:46:09.513" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:09.695" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:09.695" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:09.696" starttime="20170810 04:46:09.512" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.696" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:09.696" starttime="20170810 04:46:09.696" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:09.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:09.697" starttime="20170810 04:46:09.696" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.697" starttime="20170810 04:46:09.509" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.697" starttime="20170810 04:46:09.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.697" starttime="20170810 04:46:09.508" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:09.698" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:46:09.698" starttime="20170810 04:46:09.697" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:09.700" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:09.700" starttime="20170810 04:46:09.699" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:09.701" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:09.701" starttime="20170810 04:46:09.700" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.701" starttime="20170810 04:46:09.700" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.701" starttime="20170810 04:46:09.698" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:09.701" starttime="20170810 04:46:09.698" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:10.083" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:10.083" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:10.083" starttime="20170810 04:46:09.701" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:10.085" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:10.085" starttime="20170810 04:46:10.084" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:10.085" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:10.086" starttime="20170810 04:46:10.085" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.086" starttime="20170810 04:46:10.085" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.086" starttime="20170810 04:46:10.084" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.086" starttime="20170810 04:46:10.083" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:10.086" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:10.086" starttime="20170810 04:46:10.086" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.087" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:10.087" starttime="20170810 04:46:09.507" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:10.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:10.087" starttime="20170810 04:46:10.087" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:10.088" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:10.088" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:10.088" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:46:10.088" starttime="20170810 04:46:10.087" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.088" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:46:10.088" starttime="20170810 04:46:09.507" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.089" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:46:10.089" starttime="20170810 04:46:09.506" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:46:10.089" starttime="20170810 04:46:10.089" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:10.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:10.094" starttime="20170810 04:46:10.093" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:10.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:10.095" starttime="20170810 04:46:10.094" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:10.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:10.095" starttime="20170810 04:46:10.095" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:10.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:10.096" starttime="20170810 04:46:10.096" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:10.549" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:10.549" starttime="20170810 04:46:10.097" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.549" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:10.550" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:10.550" starttime="20170810 04:46:10.096" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:10.550" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:10.550" starttime="20170810 04:46:10.550" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:10.551" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:10.551" starttime="20170810 04:46:10.551" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.551" starttime="20170810 04:46:10.093" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.551" starttime="20170810 04:46:10.093" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.552" starttime="20170810 04:46:10.092" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:10.552" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:46:10.552" starttime="20170810 04:46:10.552" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:10.554" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:10.554" starttime="20170810 04:46:10.554" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:10.555" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:10.555" starttime="20170810 04:46:10.555" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.555" starttime="20170810 04:46:10.554" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.555" starttime="20170810 04:46:10.553" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.555" starttime="20170810 04:46:10.552" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:10.938" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:46:10.938" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:10.939" starttime="20170810 04:46:10.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:10.940" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:10.940" starttime="20170810 04:46:10.940" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:10.941" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:10.941" starttime="20170810 04:46:10.941" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.941" starttime="20170810 04:46:10.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.942" starttime="20170810 04:46:10.939" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:10.942" starttime="20170810 04:46:10.939" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:10.942" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:10.942" starttime="20170810 04:46:10.942" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:10.942" starttime="20170810 04:46:10.091" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:10.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:10.943" starttime="20170810 04:46:10.943" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:10.943" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:10.944" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:10.944" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:46:10.944" starttime="20170810 04:46:10.943" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.944" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:46:10.944" starttime="20170810 04:46:10.090" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:10.944" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:46:10.944" starttime="20170810 04:46:10.090" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:46:10.945" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:46:10.945" starttime="20170810 04:46:10.945" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:10.945" starttime="20170810 04:46:10.089" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:10.945" starttime="20170810 04:46:08.667" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:20.951" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:20.952" starttime="20170810 04:46:20.951" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:20.952" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:20.952" starttime="20170810 04:46:20.952" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:20.953" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:20.953" starttime="20170810 04:46:20.953" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:20.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:20.954" starttime="20170810 04:46:20.954" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:21.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:21.303" starttime="20170810 04:46:20.955" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:21.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:21.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:21.303" starttime="20170810 04:46:20.955" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:21.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:21.304" starttime="20170810 04:46:21.303" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:21.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:21.304" starttime="20170810 04:46:21.304" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.305" starttime="20170810 04:46:20.950" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.305" starttime="20170810 04:46:20.949" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.305" starttime="20170810 04:46:20.948" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:21.305" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:46:21.305" starttime="20170810 04:46:21.305" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:21.308" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:21.308" starttime="20170810 04:46:21.307" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:21.310" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:21.310" starttime="20170810 04:46:21.309" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.310" starttime="20170810 04:46:21.308" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.310" starttime="20170810 04:46:21.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.310" starttime="20170810 04:46:21.306" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:21.373" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:21.373" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:21.373" starttime="20170810 04:46:21.310" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:21.375" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:21.375" starttime="20170810 04:46:21.374" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:21.375" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:21.376" starttime="20170810 04:46:21.375" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.376" starttime="20170810 04:46:21.375" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.376" starttime="20170810 04:46:21.374" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.376" starttime="20170810 04:46:21.373" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:21.376" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:21.376" starttime="20170810 04:46:21.376" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:21.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:21.377" starttime="20170810 04:46:20.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:21.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:21.377" starttime="20170810 04:46:21.377" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:21.378" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:21.378" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:21.378" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:46:21.378" starttime="20170810 04:46:21.377" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:21.378" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:46:21.378" starttime="20170810 04:46:20.947" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:21.378" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:46:21.378" starttime="20170810 04:46:20.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:46:21.379" starttime="20170810 04:46:21.379" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:21.379" starttime="20170810 04:46:20.946" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:21.383" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:21.383" starttime="20170810 04:46:21.382" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:21.384" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:21.384" starttime="20170810 04:46:21.384" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:21.385" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:21.385" starttime="20170810 04:46:21.384" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:21.385" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:21.385" starttime="20170810 04:46:21.385" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.081" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:22.081" starttime="20170810 04:46:21.386" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.081" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:22.081" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:22.081" starttime="20170810 04:46:21.386" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.082" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:22.082" starttime="20170810 04:46:22.081" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.082" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:22.082" starttime="20170810 04:46:22.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.083" starttime="20170810 04:46:21.382" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.083" starttime="20170810 04:46:21.381" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.083" starttime="20170810 04:46:21.381" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:22.083" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:46:22.083" starttime="20170810 04:46:22.083" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:22.085" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:22.085" starttime="20170810 04:46:22.085" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:22.086" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:22.086" starttime="20170810 04:46:22.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.087" starttime="20170810 04:46:22.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.087" starttime="20170810 04:46:22.084" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.087" starttime="20170810 04:46:22.084" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:22.200" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:22.200" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:22.201" starttime="20170810 04:46:22.087" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:22.202" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:22.202" starttime="20170810 04:46:22.202" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:22.203" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:22.203" starttime="20170810 04:46:22.203" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.203" starttime="20170810 04:46:22.202" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.203" starttime="20170810 04:46:22.201" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.204" starttime="20170810 04:46:22.201" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:22.204" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:22.204" starttime="20170810 04:46:22.204" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.204" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:22.204" starttime="20170810 04:46:21.380" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:22.205" starttime="20170810 04:46:22.204" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:22.205" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:22.206" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:22.206" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:46:22.206" starttime="20170810 04:46:22.205" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.206" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:46:22.206" starttime="20170810 04:46:21.380" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.206" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:46:22.206" starttime="20170810 04:46:21.379" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:46:22.207" starttime="20170810 04:46:22.207" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:22.211" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:22.212" starttime="20170810 04:46:22.211" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:22.212" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:22.213" starttime="20170810 04:46:22.212" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:22.213" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:22.214" starttime="20170810 04:46:22.213" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:22.214" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:22.214" starttime="20170810 04:46:22.214" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.537" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:22.538" starttime="20170810 04:46:22.215" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.538" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:22.538" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:22.538" starttime="20170810 04:46:22.215" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.538" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:22.538" starttime="20170810 04:46:22.538" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.539" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:22.539" starttime="20170810 04:46:22.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.539" starttime="20170810 04:46:22.210" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.539" starttime="20170810 04:46:22.210" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.539" starttime="20170810 04:46:22.209" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:22.540" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:46:22.540" starttime="20170810 04:46:22.540" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:22.542" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:22.542" starttime="20170810 04:46:22.541" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:22.543" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:22.543" starttime="20170810 04:46:22.543" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.543" starttime="20170810 04:46:22.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.544" starttime="20170810 04:46:22.541" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.544" starttime="20170810 04:46:22.540" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:22.657" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:46:22.657" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:22.657" starttime="20170810 04:46:22.544" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:22.659" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:22.659" starttime="20170810 04:46:22.658" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:22.660" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:22.661" starttime="20170810 04:46:22.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.661" starttime="20170810 04:46:22.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.661" starttime="20170810 04:46:22.658" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:22.661" starttime="20170810 04:46:22.657" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:22.661" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:22.661" starttime="20170810 04:46:22.661" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.661" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:22.661" starttime="20170810 04:46:22.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:22.662" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:22.662" starttime="20170810 04:46:22.662" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:22.663" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:22.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:22.663" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:46:22.663" starttime="20170810 04:46:22.662" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.663" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:46:22.663" starttime="20170810 04:46:22.208" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:22.663" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:46:22.663" starttime="20170810 04:46:22.207" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:46:22.664" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:46:22.664" starttime="20170810 04:46:22.664" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:22.664" starttime="20170810 04:46:22.207" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:22.664" starttime="20170810 04:46:20.946" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:32.670" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:32.670" starttime="20170810 04:46:32.670" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:32.671" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:32.671" starttime="20170810 04:46:32.671" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:32.672" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:32.672" starttime="20170810 04:46:32.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:32.672" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:32.673" starttime="20170810 04:46:32.672" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:33.214" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:33.214" starttime="20170810 04:46:32.673" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:33.214" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:33.214" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:33.214" starttime="20170810 04:46:32.673" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:33.215" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:33.215" starttime="20170810 04:46:33.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:33.215" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:33.215" starttime="20170810 04:46:33.215" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.216" starttime="20170810 04:46:32.669" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.216" starttime="20170810 04:46:32.668" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.216" starttime="20170810 04:46:32.668" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:33.216" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:46:33.216" starttime="20170810 04:46:33.216" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:33.218" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:33.218" starttime="20170810 04:46:33.218" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:33.219" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:33.220" starttime="20170810 04:46:33.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.220" starttime="20170810 04:46:33.219" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.220" starttime="20170810 04:46:33.217" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.220" starttime="20170810 04:46:33.217" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:33.592" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:33.592" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:33.592" starttime="20170810 04:46:33.220" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:33.594" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:33.594" starttime="20170810 04:46:33.593" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:33.595" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:33.595" starttime="20170810 04:46:33.595" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.595" starttime="20170810 04:46:33.594" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.595" starttime="20170810 04:46:33.593" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.595" starttime="20170810 04:46:33.592" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:33.596" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:33.596" starttime="20170810 04:46:33.596" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:33.596" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:33.596" starttime="20170810 04:46:32.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:33.597" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:33.597" starttime="20170810 04:46:33.596" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:33.597" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:33.597" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:33.597" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:46:33.597" starttime="20170810 04:46:33.597" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:33.598" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:46:33.598" starttime="20170810 04:46:32.666" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:33.598" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:46:33.598" starttime="20170810 04:46:32.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:46:33.599" starttime="20170810 04:46:33.598" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:33.599" starttime="20170810 04:46:32.666" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:33.602" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:33.603" starttime="20170810 04:46:33.602" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:33.604" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:33.604" starttime="20170810 04:46:33.603" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:33.604" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:33.604" starttime="20170810 04:46:33.604" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:33.605" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:33.605" starttime="20170810 04:46:33.605" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:34.111" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:34.111" starttime="20170810 04:46:33.606" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:34.111" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:34.111" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:34.111" starttime="20170810 04:46:33.605" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:34.112" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:34.112" starttime="20170810 04:46:34.112" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:34.113" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:34.113" starttime="20170810 04:46:34.112" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.113" starttime="20170810 04:46:33.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.113" starttime="20170810 04:46:33.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.113" starttime="20170810 04:46:33.600" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:34.114" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:46:34.114" starttime="20170810 04:46:34.113" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:34.116" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:34.116" starttime="20170810 04:46:34.115" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:34.117" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:34.117" starttime="20170810 04:46:34.116" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.117" starttime="20170810 04:46:34.116" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.117" starttime="20170810 04:46:34.114" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.117" starttime="20170810 04:46:34.114" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:34.658" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:34.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:34.658" starttime="20170810 04:46:34.117" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:34.660" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:34.660" starttime="20170810 04:46:34.660" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:34.661" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:34.661" starttime="20170810 04:46:34.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.661" starttime="20170810 04:46:34.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.661" starttime="20170810 04:46:34.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:34.661" starttime="20170810 04:46:34.659" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:34.662" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:34.662" starttime="20170810 04:46:34.662" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:34.662" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:34.662" starttime="20170810 04:46:33.600" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:34.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:34.663" starttime="20170810 04:46:34.662" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:34.663" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:34.663" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:34.664" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:46:34.664" starttime="20170810 04:46:34.663" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:34.664" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:46:34.664" starttime="20170810 04:46:33.599" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:34.664" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:46:34.664" starttime="20170810 04:46:33.599" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:46:34.665" starttime="20170810 04:46:34.665" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:34.669" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:34.669" starttime="20170810 04:46:34.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:34.670" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:34.670" starttime="20170810 04:46:34.670" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:34.671" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:34.671" starttime="20170810 04:46:34.670" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:34.671" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:34.671" starttime="20170810 04:46:34.671" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:35.076" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:35.076" starttime="20170810 04:46:34.672" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:35.077" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:35.077" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:35.077" starttime="20170810 04:46:34.671" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:35.077" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:35.077" starttime="20170810 04:46:35.077" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:35.078" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:35.078" starttime="20170810 04:46:35.078" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.078" starttime="20170810 04:46:34.668" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.078" starttime="20170810 04:46:34.668" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.078" starttime="20170810 04:46:34.667" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:35.079" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:46:35.079" starttime="20170810 04:46:35.079" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:35.081" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:35.081" starttime="20170810 04:46:35.081" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:35.086" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:35.086" starttime="20170810 04:46:35.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.086" starttime="20170810 04:46:35.082" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.086" starttime="20170810 04:46:35.080" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.087" starttime="20170810 04:46:35.079" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:35.805" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:46:35.805" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:35.805" starttime="20170810 04:46:35.087" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:35.807" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:35.807" starttime="20170810 04:46:35.806" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:35.808" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:35.808" starttime="20170810 04:46:35.808" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.808" starttime="20170810 04:46:35.807" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.808" starttime="20170810 04:46:35.806" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:35.808" starttime="20170810 04:46:35.806" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:35.809" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:35.809" starttime="20170810 04:46:35.809" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:35.809" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:35.809" starttime="20170810 04:46:34.666" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:35.810" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:35.810" starttime="20170810 04:46:35.809" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:35.810" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:35.810" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:35.811" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:46:35.811" starttime="20170810 04:46:35.810" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:35.811" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:46:35.811" starttime="20170810 04:46:34.666" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:35.811" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:46:35.811" starttime="20170810 04:46:34.665" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:46:35.812" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:46:35.812" starttime="20170810 04:46:35.811" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:35.812" starttime="20170810 04:46:34.665" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:35.812" starttime="20170810 04:46:32.665" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:45.818" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:45.819" starttime="20170810 04:46:45.818" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:45.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:45.819" starttime="20170810 04:46:45.819" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:45.820" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:45.820" starttime="20170810 04:46:45.820" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:45.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:45.821" starttime="20170810 04:46:45.820" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:46.134" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:46.134" starttime="20170810 04:46:45.821" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:46.134" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:46.134" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:46.134" starttime="20170810 04:46:45.821" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:46.135" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:46.135" starttime="20170810 04:46:46.134" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:46.136" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:46.136" starttime="20170810 04:46:46.135" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.136" starttime="20170810 04:46:45.817" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.136" starttime="20170810 04:46:45.817" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.136" starttime="20170810 04:46:45.816" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:46.137" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:46:46.137" starttime="20170810 04:46:46.136" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:46.139" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:46.139" starttime="20170810 04:46:46.138" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:46.140" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:46.140" starttime="20170810 04:46:46.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.140" starttime="20170810 04:46:46.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.140" starttime="20170810 04:46:46.137" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.140" starttime="20170810 04:46:46.137" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:46.599" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:46.600" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:46.600" starttime="20170810 04:46:46.141" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:46.601" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:46.601" starttime="20170810 04:46:46.601" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:46.602" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:46.603" starttime="20170810 04:46:46.602" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.603" starttime="20170810 04:46:46.602" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.603" starttime="20170810 04:46:46.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.603" starttime="20170810 04:46:46.600" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:46.603" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:46.603" starttime="20170810 04:46:46.603" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:46.603" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:46.604" starttime="20170810 04:46:45.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:46.604" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:46.604" starttime="20170810 04:46:46.604" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:46.605" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:46.605" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:46.605" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:46:46.605" starttime="20170810 04:46:46.604" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:46.605" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:46:46.605" starttime="20170810 04:46:45.814" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:46.605" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:46:46.606" starttime="20170810 04:46:45.814" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:46:46.606" starttime="20170810 04:46:46.606" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:46.606" starttime="20170810 04:46:45.813" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:46.610" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:46.610" starttime="20170810 04:46:46.609" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:46.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:46.611" starttime="20170810 04:46:46.611" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:46.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:46.612" starttime="20170810 04:46:46.611" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:46.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:46.613" starttime="20170810 04:46:46.612" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:47.112" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:47.113" starttime="20170810 04:46:46.613" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:47.113" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:47.113" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:47.113" starttime="20170810 04:46:46.613" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:47.113" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:47.113" starttime="20170810 04:46:47.113" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:47.114" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:47.114" starttime="20170810 04:46:47.114" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.114" starttime="20170810 04:46:46.609" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.114" starttime="20170810 04:46:46.608" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.114" starttime="20170810 04:46:46.608" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:47.115" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:46:47.115" starttime="20170810 04:46:47.115" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:47.117" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:47.117" starttime="20170810 04:46:47.116" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:47.118" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:47.118" starttime="20170810 04:46:47.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.118" starttime="20170810 04:46:47.117" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.118" starttime="20170810 04:46:47.116" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.118" starttime="20170810 04:46:47.115" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:47.671" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:47.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:47.671" starttime="20170810 04:46:47.119" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:47.673" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:47.673" starttime="20170810 04:46:47.672" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:47.674" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:47.674" starttime="20170810 04:46:47.674" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.674" starttime="20170810 04:46:47.673" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.674" starttime="20170810 04:46:47.672" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:47.674" starttime="20170810 04:46:47.671" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:47.675" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:47.675" starttime="20170810 04:46:47.674" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:47.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:47.675" starttime="20170810 04:46:46.607" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:47.675" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:47.676" starttime="20170810 04:46:47.675" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:47.676" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:47.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:47.676" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:46:47.676" starttime="20170810 04:46:47.676" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:47.677" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:46:47.677" starttime="20170810 04:46:46.607" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:47.677" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:46:47.677" starttime="20170810 04:46:46.606" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:46:47.677" starttime="20170810 04:46:47.677" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:47.682" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:47.682" starttime="20170810 04:46:47.681" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:47.683" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:47.683" starttime="20170810 04:46:47.682" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:47.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:47.683" starttime="20170810 04:46:47.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:47.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:47.684" starttime="20170810 04:46:47.683" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:48.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:48.155" starttime="20170810 04:46:47.685" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:48.156" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:48.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:48.156" starttime="20170810 04:46:47.684" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:48.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:48.156" starttime="20170810 04:46:48.156" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:48.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:48.157" starttime="20170810 04:46:48.157" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.157" starttime="20170810 04:46:47.681" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.157" starttime="20170810 04:46:47.680" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.157" starttime="20170810 04:46:47.680" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:48.158" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:46:48.158" starttime="20170810 04:46:48.158" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:48.160" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:48.160" starttime="20170810 04:46:48.159" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:48.161" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:46:48.161" starttime="20170810 04:46:48.161" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.162" starttime="20170810 04:46:48.160" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.162" starttime="20170810 04:46:48.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.162" starttime="20170810 04:46:48.158" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:48.824" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:46:48.824" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:48.824" starttime="20170810 04:46:48.162" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:48.826" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:48.826" starttime="20170810 04:46:48.825" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:48.826" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:48.827" starttime="20170810 04:46:48.826" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.827" starttime="20170810 04:46:48.826" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.827" starttime="20170810 04:46:48.825" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:48.827" starttime="20170810 04:46:48.824" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:48.827" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:48.827" starttime="20170810 04:46:48.827" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:48.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:48.828" starttime="20170810 04:46:47.679" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:48.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:48.828" starttime="20170810 04:46:48.828" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:48.829" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:48.829" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:48.829" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:46:48.829" starttime="20170810 04:46:48.828" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:48.829" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:46:48.829" starttime="20170810 04:46:47.679" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:48.829" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:46:48.829" starttime="20170810 04:46:47.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:46:48.830" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:46:48.830" starttime="20170810 04:46:48.830" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:48.830" starttime="20170810 04:46:47.678" status="FAIL"></status>
</kw>
<status endtime="20170810 04:46:48.831" starttime="20170810 04:46:45.813" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:58.835" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:58.836" starttime="20170810 04:46:58.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:58.836" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:58.836" starttime="20170810 04:46:58.836" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:58.837" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:58.837" starttime="20170810 04:46:58.837" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:58.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:58.838" starttime="20170810 04:46:58.837" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.303" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:59.303" starttime="20170810 04:46:58.838" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:59.303" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:59.303" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:59.303" starttime="20170810 04:46:58.838" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.304" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:59.304" starttime="20170810 04:46:59.303" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.304" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:59.304" starttime="20170810 04:46:59.304" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.305" starttime="20170810 04:46:58.835" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.305" starttime="20170810 04:46:58.834" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.305" starttime="20170810 04:46:58.834" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:59.305" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:46:59.305" starttime="20170810 04:46:59.305" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:59.307" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:59.307" starttime="20170810 04:46:59.307" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:59.308" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:59.308" starttime="20170810 04:46:59.308" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.308" starttime="20170810 04:46:59.307" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.309" starttime="20170810 04:46:59.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.309" starttime="20170810 04:46:59.306" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:46:59.497" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:46:59.498" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:59.498" starttime="20170810 04:46:59.309" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:59.499" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:59.499" starttime="20170810 04:46:59.499" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:59.500" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:46:59.500" starttime="20170810 04:46:59.500" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.500" starttime="20170810 04:46:59.499" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.501" starttime="20170810 04:46:59.498" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.501" starttime="20170810 04:46:59.498" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:46:59.501" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:46:59.501" starttime="20170810 04:46:59.501" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:59.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:59.501" starttime="20170810 04:46:58.833" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.502" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:59.502" starttime="20170810 04:46:59.502" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:46:59.503" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:46:59.503" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:46:59.503" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:46:59.503" starttime="20170810 04:46:59.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:59.503" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:46:59.503" starttime="20170810 04:46:58.832" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:59.503" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:46:59.503" starttime="20170810 04:46:58.832" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:46:59.504" starttime="20170810 04:46:59.504" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.504" starttime="20170810 04:46:58.832" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:46:59.508" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:46:59.508" starttime="20170810 04:46:59.507" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:46:59.509" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:46:59.509" starttime="20170810 04:46:59.508" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:46:59.509" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:46:59.509" starttime="20170810 04:46:59.509" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:46:59.510" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:46:59.510" starttime="20170810 04:46:59.510" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.930" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:46:59.930" starttime="20170810 04:46:59.511" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:46:59.930" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:46:59.930" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:46:59.930" starttime="20170810 04:46:59.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.931" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:59.931" starttime="20170810 04:46:59.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:46:59.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:46:59.932" starttime="20170810 04:46:59.931" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.932" starttime="20170810 04:46:59.507" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.932" starttime="20170810 04:46:59.506" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.932" starttime="20170810 04:46:59.506" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:46:59.933" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:46:59.933" starttime="20170810 04:46:59.932" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:46:59.935" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:59.935" starttime="20170810 04:46:59.934" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:46:59.936" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:46:59.936" starttime="20170810 04:46:59.935" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.936" starttime="20170810 04:46:59.935" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.936" starttime="20170810 04:46:59.933" status="PASS"></status>
</kw>
<status endtime="20170810 04:46:59.936" starttime="20170810 04:46:59.933" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:00.634" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:00.634" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:00.634" starttime="20170810 04:46:59.936" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:00.636" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:00.636" starttime="20170810 04:47:00.635" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:00.637" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:00.637" starttime="20170810 04:47:00.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:00.637" starttime="20170810 04:47:00.636" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:00.637" starttime="20170810 04:47:00.635" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:00.637" starttime="20170810 04:47:00.634" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:00.637" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:00.638" starttime="20170810 04:47:00.637" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:00.638" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:00.638" starttime="20170810 04:46:59.505" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:00.638" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:00.638" starttime="20170810 04:47:00.638" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:00.639" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:00.639" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:00.639" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:47:00.639" starttime="20170810 04:47:00.639" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:00.640" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:47:00.640" starttime="20170810 04:46:59.504" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:00.640" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:47:00.640" starttime="20170810 04:46:59.504" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:47:00.640" starttime="20170810 04:47:00.640" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:00.645" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:00.645" starttime="20170810 04:47:00.644" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:00.646" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:00.646" starttime="20170810 04:47:00.645" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:00.646" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:00.646" starttime="20170810 04:47:00.646" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:00.647" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:00.647" starttime="20170810 04:47:00.646" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:01.096" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:01.096" starttime="20170810 04:47:00.648" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:01.096" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:01.096" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:01.097" starttime="20170810 04:47:00.647" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:01.097" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:01.097" starttime="20170810 04:47:01.097" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:01.098" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:01.098" starttime="20170810 04:47:01.097" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.098" starttime="20170810 04:47:00.644" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.098" starttime="20170810 04:47:00.643" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.098" starttime="20170810 04:47:00.643" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:01.099" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:47:01.099" starttime="20170810 04:47:01.098" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:01.101" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:01.101" starttime="20170810 04:47:01.100" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:01.102" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:01.102" starttime="20170810 04:47:01.102" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.102" starttime="20170810 04:47:01.101" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.103" starttime="20170810 04:47:01.100" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.103" starttime="20170810 04:47:01.099" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:01.661" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:47:01.661" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:01.661" starttime="20170810 04:47:01.103" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:01.663" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:01.663" starttime="20170810 04:47:01.663" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:01.664" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:01.664" starttime="20170810 04:47:01.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.664" starttime="20170810 04:47:01.663" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.665" starttime="20170810 04:47:01.662" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:01.665" starttime="20170810 04:47:01.662" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:01.665" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:01.665" starttime="20170810 04:47:01.665" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:01.665" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:01.665" starttime="20170810 04:47:00.642" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:01.666" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:01.666" starttime="20170810 04:47:01.666" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:01.667" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:01.667" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:01.667" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:47:01.667" starttime="20170810 04:47:01.666" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:01.668" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:47:01.668" starttime="20170810 04:47:00.642" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:01.668" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:47:01.668" starttime="20170810 04:47:00.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:47:01.669" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:47:01.669" starttime="20170810 04:47:01.668" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:01.669" starttime="20170810 04:47:00.641" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:01.669" starttime="20170810 04:46:58.831" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:11.675" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:11.675" starttime="20170810 04:47:11.674" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:11.676" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:11.676" starttime="20170810 04:47:11.676" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:11.677" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:11.677" starttime="20170810 04:47:11.677" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:11.678" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:11.678" starttime="20170810 04:47:11.678" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.023" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:12.023" starttime="20170810 04:47:11.679" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:12.023" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:12.023" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:12.023" starttime="20170810 04:47:11.678" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.024" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:12.024" starttime="20170810 04:47:12.024" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.025" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:12.025" starttime="20170810 04:47:12.024" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.025" starttime="20170810 04:47:11.674" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.025" starttime="20170810 04:47:11.673" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.025" starttime="20170810 04:47:11.672" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:12.026" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:47:12.026" starttime="20170810 04:47:12.025" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:12.028" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:12.028" starttime="20170810 04:47:12.027" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:12.029" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:12.029" starttime="20170810 04:47:12.028" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.029" starttime="20170810 04:47:12.028" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.029" starttime="20170810 04:47:12.026" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.029" starttime="20170810 04:47:12.026" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:12.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:12.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:12.289" starttime="20170810 04:47:12.029" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:12.291" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:12.291" starttime="20170810 04:47:12.290" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:12.292" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:12.292" starttime="20170810 04:47:12.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.292" starttime="20170810 04:47:12.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.292" starttime="20170810 04:47:12.290" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.292" starttime="20170810 04:47:12.289" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:12.292" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:12.292" starttime="20170810 04:47:12.292" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:12.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:12.293" starttime="20170810 04:47:11.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:12.293" starttime="20170810 04:47:12.293" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:12.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:12.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:12.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:47:12.294" starttime="20170810 04:47:12.294" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:12.294" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:47:12.294" starttime="20170810 04:47:11.671" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:12.295" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:47:12.295" starttime="20170810 04:47:11.671" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:47:12.295" starttime="20170810 04:47:12.295" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.295" starttime="20170810 04:47:11.670" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:12.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:12.300" starttime="20170810 04:47:12.299" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:12.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:12.300" starttime="20170810 04:47:12.300" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:12.301" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:12.301" starttime="20170810 04:47:12.301" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:12.302" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:12.302" starttime="20170810 04:47:12.301" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.750" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:12.751" starttime="20170810 04:47:12.302" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:12.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:12.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:12.751" starttime="20170810 04:47:12.302" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.751" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:12.752" starttime="20170810 04:47:12.751" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:12.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:12.752" starttime="20170810 04:47:12.752" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.752" starttime="20170810 04:47:12.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.752" starttime="20170810 04:47:12.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.753" starttime="20170810 04:47:12.297" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:12.753" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:47:12.753" starttime="20170810 04:47:12.753" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:12.755" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:12.755" starttime="20170810 04:47:12.755" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:12.756" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:12.756" starttime="20170810 04:47:12.756" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.756" starttime="20170810 04:47:12.755" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.757" starttime="20170810 04:47:12.754" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:12.757" starttime="20170810 04:47:12.753" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:13.359" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:13.359" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:13.359" starttime="20170810 04:47:12.757" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:13.361" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:13.361" starttime="20170810 04:47:13.361" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:13.362" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:13.362" starttime="20170810 04:47:13.362" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.362" starttime="20170810 04:47:13.361" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.363" starttime="20170810 04:47:13.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.363" starttime="20170810 04:47:13.360" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:13.363" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:13.363" starttime="20170810 04:47:13.363" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:13.363" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:13.363" starttime="20170810 04:47:12.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:13.364" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:13.364" starttime="20170810 04:47:13.364" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:13.364" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:13.364" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:13.365" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:47:13.365" starttime="20170810 04:47:13.364" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:13.365" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:47:13.365" starttime="20170810 04:47:12.296" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:13.365" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:47:13.365" starttime="20170810 04:47:12.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:47:13.366" starttime="20170810 04:47:13.365" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:13.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:13.370" starttime="20170810 04:47:13.370" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:13.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:13.371" starttime="20170810 04:47:13.371" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:13.371" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:13.371" starttime="20170810 04:47:13.371" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:13.372" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:13.372" starttime="20170810 04:47:13.372" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:13.560" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:13.560" starttime="20170810 04:47:13.373" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:13.560" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:13.560" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:13.560" starttime="20170810 04:47:13.372" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:13.560" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:13.561" starttime="20170810 04:47:13.560" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:13.561" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:13.561" starttime="20170810 04:47:13.561" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.561" starttime="20170810 04:47:13.369" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.561" starttime="20170810 04:47:13.369" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.562" starttime="20170810 04:47:13.368" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:13.562" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:47:13.562" starttime="20170810 04:47:13.562" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:13.567" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:13.567" starttime="20170810 04:47:13.564" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:13.568" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:13.568" starttime="20170810 04:47:13.568" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.568" starttime="20170810 04:47:13.567" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.568" starttime="20170810 04:47:13.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:13.568" starttime="20170810 04:47:13.563" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:14.344" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:47:14.345" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:14.345" starttime="20170810 04:47:13.569" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:14.346" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:14.346" starttime="20170810 04:47:14.346" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:14.347" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:14.347" starttime="20170810 04:47:14.347" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:14.348" starttime="20170810 04:47:14.347" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:14.348" starttime="20170810 04:47:14.345" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:14.348" starttime="20170810 04:47:14.345" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:14.348" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:14.348" starttime="20170810 04:47:14.348" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:14.348" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:14.348" starttime="20170810 04:47:13.367" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:14.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:14.349" starttime="20170810 04:47:14.349" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:14.350" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:14.350" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:14.350" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:47:14.350" starttime="20170810 04:47:14.349" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:14.350" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:47:14.350" starttime="20170810 04:47:13.367" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:14.350" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:47:14.350" starttime="20170810 04:47:13.366" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:47:14.351" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:47:14.351" starttime="20170810 04:47:14.351" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:14.351" starttime="20170810 04:47:13.366" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:14.351" starttime="20170810 04:47:11.670" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:24.356" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:24.357" starttime="20170810 04:47:24.356" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:24.357" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:24.357" starttime="20170810 04:47:24.357" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:24.358" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:24.358" starttime="20170810 04:47:24.357" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:24.358" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:24.358" starttime="20170810 04:47:24.358" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:24.680" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:24.680" starttime="20170810 04:47:24.359" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:24.680" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:24.680" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:24.680" starttime="20170810 04:47:24.359" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:24.681" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:24.681" starttime="20170810 04:47:24.681" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:24.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:24.682" starttime="20170810 04:47:24.681" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.682" starttime="20170810 04:47:24.355" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.682" starttime="20170810 04:47:24.355" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.682" starttime="20170810 04:47:24.354" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:24.683" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:47:24.683" starttime="20170810 04:47:24.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:24.685" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:24.685" starttime="20170810 04:47:24.684" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:24.686" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:24.686" starttime="20170810 04:47:24.686" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.686" starttime="20170810 04:47:24.685" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.686" starttime="20170810 04:47:24.684" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.686" starttime="20170810 04:47:24.683" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:24.822" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:24.822" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:24.822" starttime="20170810 04:47:24.687" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:24.824" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:24.824" starttime="20170810 04:47:24.823" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:24.825" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:24.825" starttime="20170810 04:47:24.824" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.825" starttime="20170810 04:47:24.824" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.825" starttime="20170810 04:47:24.823" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.825" starttime="20170810 04:47:24.822" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:24.825" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:24.826" starttime="20170810 04:47:24.825" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:24.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:24.826" starttime="20170810 04:47:24.354" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:24.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:24.826" starttime="20170810 04:47:24.826" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:24.827" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:24.827" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:24.827" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:47:24.827" starttime="20170810 04:47:24.827" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:24.827" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:47:24.827" starttime="20170810 04:47:24.353" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:24.828" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:47:24.828" starttime="20170810 04:47:24.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:47:24.828" starttime="20170810 04:47:24.828" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:24.828" starttime="20170810 04:47:24.352" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:24.832" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:24.833" starttime="20170810 04:47:24.832" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:24.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:24.833" starttime="20170810 04:47:24.833" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:24.834" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:24.834" starttime="20170810 04:47:24.834" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:24.835" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:24.835" starttime="20170810 04:47:24.834" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.154" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:25.154" starttime="20170810 04:47:24.835" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.154" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:25.154" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:25.154" starttime="20170810 04:47:24.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.155" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:25.155" starttime="20170810 04:47:25.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.155" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:25.155" starttime="20170810 04:47:25.155" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.156" starttime="20170810 04:47:24.831" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.156" starttime="20170810 04:47:24.831" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.156" starttime="20170810 04:47:24.830" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:25.156" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:47:25.156" starttime="20170810 04:47:25.156" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:25.158" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:25.158" starttime="20170810 04:47:25.158" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:25.159" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:25.159" starttime="20170810 04:47:25.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.160" starttime="20170810 04:47:25.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.160" starttime="20170810 04:47:25.157" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.160" starttime="20170810 04:47:25.157" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:25.320" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:25.320" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:25.320" starttime="20170810 04:47:25.160" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:25.322" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:25.322" starttime="20170810 04:47:25.321" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:25.323" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:25.323" starttime="20170810 04:47:25.323" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.323" starttime="20170810 04:47:25.322" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.323" starttime="20170810 04:47:25.321" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.323" starttime="20170810 04:47:25.320" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:25.324" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:25.324" starttime="20170810 04:47:25.324" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.324" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:25.324" starttime="20170810 04:47:24.829" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.325" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:25.325" starttime="20170810 04:47:25.324" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:25.325" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:25.325" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:25.325" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:47:25.325" starttime="20170810 04:47:25.325" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.326" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:47:25.326" starttime="20170810 04:47:24.829" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.326" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:47:25.326" starttime="20170810 04:47:24.829" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:47:25.327" starttime="20170810 04:47:25.326" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:25.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:25.331" starttime="20170810 04:47:25.330" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:25.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:25.332" starttime="20170810 04:47:25.331" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:25.332" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:25.332" starttime="20170810 04:47:25.332" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:25.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:25.333" starttime="20170810 04:47:25.332" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.594" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:25.594" starttime="20170810 04:47:25.334" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.594" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:25.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:25.594" starttime="20170810 04:47:25.333" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.594" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:25.595" starttime="20170810 04:47:25.594" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.595" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:25.595" starttime="20170810 04:47:25.595" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.595" starttime="20170810 04:47:25.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.596" starttime="20170810 04:47:25.329" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.596" starttime="20170810 04:47:25.329" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:25.596" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:47:25.596" starttime="20170810 04:47:25.596" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:25.599" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:25.599" starttime="20170810 04:47:25.598" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:25.600" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:25.600" starttime="20170810 04:47:25.599" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.600" starttime="20170810 04:47:25.599" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.600" starttime="20170810 04:47:25.597" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.600" starttime="20170810 04:47:25.597" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:25.741" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:47:25.741" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:25.741" starttime="20170810 04:47:25.601" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:25.742" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:25.742" starttime="20170810 04:47:25.742" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:25.743" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:25.744" starttime="20170810 04:47:25.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.744" starttime="20170810 04:47:25.743" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.744" starttime="20170810 04:47:25.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:25.744" starttime="20170810 04:47:25.741" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:25.744" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:25.744" starttime="20170810 04:47:25.744" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.744" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:25.745" starttime="20170810 04:47:25.328" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:25.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:25.745" starttime="20170810 04:47:25.745" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:25.746" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:25.746" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:25.746" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:47:25.746" starttime="20170810 04:47:25.745" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.746" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:47:25.746" starttime="20170810 04:47:25.328" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:25.746" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:47:25.746" starttime="20170810 04:47:25.327" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:47:25.747" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:47:25.747" starttime="20170810 04:47:25.747" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:25.747" starttime="20170810 04:47:25.327" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:25.747" starttime="20170810 04:47:24.352" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:35.754" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:35.755" starttime="20170810 04:47:35.754" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:35.756" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:35.756" starttime="20170810 04:47:35.755" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:35.757" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:35.757" starttime="20170810 04:47:35.756" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:35.757" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:35.757" starttime="20170810 04:47:35.757" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.147" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:36.147" starttime="20170810 04:47:35.758" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:36.148" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.148" starttime="20170810 04:47:35.758" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.148" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.148" starttime="20170810 04:47:36.148" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.149" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.149" starttime="20170810 04:47:36.149" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.149" starttime="20170810 04:47:35.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.149" starttime="20170810 04:47:35.753" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.149" starttime="20170810 04:47:35.752" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:36.150" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:47:36.150" starttime="20170810 04:47:36.150" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:36.152" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:36.152" starttime="20170810 04:47:36.151" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:36.153" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:36.153" starttime="20170810 04:47:36.153" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.153" starttime="20170810 04:47:36.152" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.153" starttime="20170810 04:47:36.151" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.153" starttime="20170810 04:47:36.150" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:36.370" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:36.370" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.370" starttime="20170810 04:47:36.154" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:36.372" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:36.372" starttime="20170810 04:47:36.371" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:36.372" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:36.373" starttime="20170810 04:47:36.372" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.373" starttime="20170810 04:47:36.372" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.373" starttime="20170810 04:47:36.371" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.373" starttime="20170810 04:47:36.370" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:36.373" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:36.373" starttime="20170810 04:47:36.373" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.374" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.374" starttime="20170810 04:47:35.751" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.374" starttime="20170810 04:47:36.374" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:36.375" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:36.375" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:36.375" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:47:36.375" starttime="20170810 04:47:36.375" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.375" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:47:36.375" starttime="20170810 04:47:35.750" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.376" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:47:36.376" starttime="20170810 04:47:35.750" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:47:36.376" starttime="20170810 04:47:36.376" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.377" starttime="20170810 04:47:35.749" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:36.380" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:36.381" starttime="20170810 04:47:36.380" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:36.381" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:36.381" starttime="20170810 04:47:36.381" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:36.382" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:36.382" starttime="20170810 04:47:36.382" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:36.383" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:36.383" starttime="20170810 04:47:36.382" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.573" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:36.573" starttime="20170810 04:47:36.383" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:36.574" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.574" starttime="20170810 04:47:36.383" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.574" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.574" starttime="20170810 04:47:36.574" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.575" starttime="20170810 04:47:36.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.575" starttime="20170810 04:47:36.379" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.576" starttime="20170810 04:47:36.379" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.576" starttime="20170810 04:47:36.378" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:36.576" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:47:36.576" starttime="20170810 04:47:36.576" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:36.578" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:36.578" starttime="20170810 04:47:36.578" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:36.579" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:36.579" starttime="20170810 04:47:36.579" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.579" starttime="20170810 04:47:36.578" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.580" starttime="20170810 04:47:36.577" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.580" starttime="20170810 04:47:36.577" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:36.668" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:36.668" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.668" starttime="20170810 04:47:36.580" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:36.670" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:36.670" starttime="20170810 04:47:36.670" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:36.671" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:36.671" starttime="20170810 04:47:36.671" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.671" starttime="20170810 04:47:36.670" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.671" starttime="20170810 04:47:36.669" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.671" starttime="20170810 04:47:36.669" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:36.672" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:36.672" starttime="20170810 04:47:36.672" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.672" starttime="20170810 04:47:36.378" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.673" starttime="20170810 04:47:36.672" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:36.673" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:36.673" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:36.673" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:47:36.673" starttime="20170810 04:47:36.673" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.674" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:47:36.674" starttime="20170810 04:47:36.377" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.674" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:47:36.674" starttime="20170810 04:47:36.377" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:47:36.675" starttime="20170810 04:47:36.674" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:36.679" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:36.679" starttime="20170810 04:47:36.679" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:36.680" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:36.680" starttime="20170810 04:47:36.680" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:36.681" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:36.681" starttime="20170810 04:47:36.680" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:36.681" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:36.681" starttime="20170810 04:47:36.681" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.873" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:36.873" starttime="20170810 04:47:36.682" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.873" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:36.873" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.874" starttime="20170810 04:47:36.682" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.874" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.874" starttime="20170810 04:47:36.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.875" starttime="20170810 04:47:36.874" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.875" starttime="20170810 04:47:36.678" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.875" starttime="20170810 04:47:36.678" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.875" starttime="20170810 04:47:36.677" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:36.876" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:47:36.876" starttime="20170810 04:47:36.876" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:36.878" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:36.878" starttime="20170810 04:47:36.877" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:36.879" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:36.879" starttime="20170810 04:47:36.879" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.879" starttime="20170810 04:47:36.878" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.880" starttime="20170810 04:47:36.877" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.880" starttime="20170810 04:47:36.876" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:36.973" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:47:36.973" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.973" starttime="20170810 04:47:36.880" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:36.975" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:36.976" starttime="20170810 04:47:36.975" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:36.976" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:36.976" starttime="20170810 04:47:36.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.977" starttime="20170810 04:47:36.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.977" starttime="20170810 04:47:36.974" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:36.977" starttime="20170810 04:47:36.974" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:36.977" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:36.977" starttime="20170810 04:47:36.977" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:36.977" starttime="20170810 04:47:36.677" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:36.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:36.978" starttime="20170810 04:47:36.978" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:36.979" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:36.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:36.979" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:47:36.979" starttime="20170810 04:47:36.978" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.979" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:47:36.979" starttime="20170810 04:47:36.676" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:36.979" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:47:36.979" starttime="20170810 04:47:36.675" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:47:36.980" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:47:36.980" starttime="20170810 04:47:36.980" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:36.980" starttime="20170810 04:47:36.675" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:36.980" starttime="20170810 04:47:35.748" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:46.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:46.986" starttime="20170810 04:47:46.986" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:46.987" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:46.987" starttime="20170810 04:47:46.987" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:46.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:46.988" starttime="20170810 04:47:46.987" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:46.988" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:46.988" starttime="20170810 04:47:46.988" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:47.400" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:47.400" starttime="20170810 04:47:46.989" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:47.400" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:47.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:47.400" starttime="20170810 04:47:46.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:47.400" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:47.401" starttime="20170810 04:47:47.400" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:47.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:47.401" starttime="20170810 04:47:47.401" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:47.402" starttime="20170810 04:47:46.985" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:47.402" starttime="20170810 04:47:46.985" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:47.402" starttime="20170810 04:47:46.984" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:47.402" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:47:47.402" starttime="20170810 04:47:47.402" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:47.404" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:47.404" starttime="20170810 04:47:47.404" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:47.405" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:47.405" starttime="20170810 04:47:47.405" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:47.406" starttime="20170810 04:47:47.405" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:47.406" starttime="20170810 04:47:47.403" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:47.406" starttime="20170810 04:47:47.403" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:51.357" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:51.357" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:51.357" starttime="20170810 04:47:47.406" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:51.359" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:51.359" starttime="20170810 04:47:51.359" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:51.360" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:51.360" starttime="20170810 04:47:51.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.360" starttime="20170810 04:47:51.359" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.360" starttime="20170810 04:47:51.358" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.360" starttime="20170810 04:47:51.358" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:51.361" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:51.361" starttime="20170810 04:47:51.361" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.361" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:51.361" starttime="20170810 04:47:46.983" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:51.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:51.362" starttime="20170810 04:47:51.361" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:51.363" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:51.363" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:51.363" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:47:51.363" starttime="20170810 04:47:51.362" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.363" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:47:51.363" starttime="20170810 04:47:46.983" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.363" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:47:51.363" starttime="20170810 04:47:46.982" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:47:51.364" starttime="20170810 04:47:51.364" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.364" starttime="20170810 04:47:46.982" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:51.368" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:51.368" starttime="20170810 04:47:51.368" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:51.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:51.369" starttime="20170810 04:47:51.369" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:51.369" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:51.370" starttime="20170810 04:47:51.369" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:51.370" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:51.370" starttime="20170810 04:47:51.370" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:51.759" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:51.759" starttime="20170810 04:47:51.371" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.759" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:51.759" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:51.759" starttime="20170810 04:47:51.370" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:51.760" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:51.760" starttime="20170810 04:47:51.759" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:51.760" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:51.760" starttime="20170810 04:47:51.760" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.761" starttime="20170810 04:47:51.367" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.761" starttime="20170810 04:47:51.366" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.761" starttime="20170810 04:47:51.366" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:51.761" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:47:51.761" starttime="20170810 04:47:51.761" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:51.763" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:51.764" starttime="20170810 04:47:51.763" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:51.764" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:47:51.765" starttime="20170810 04:47:51.764" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.765" starttime="20170810 04:47:51.764" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.765" starttime="20170810 04:47:51.762" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.765" starttime="20170810 04:47:51.762" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:51.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:47:51.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:51.966" starttime="20170810 04:47:51.765" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:51.968" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:51.968" starttime="20170810 04:47:51.968" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:51.969" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:51.969" starttime="20170810 04:47:51.969" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.969" starttime="20170810 04:47:51.968" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.969" starttime="20170810 04:47:51.967" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:51.969" starttime="20170810 04:47:51.967" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:51.970" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:51.970" starttime="20170810 04:47:51.970" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:51.970" starttime="20170810 04:47:51.365" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:51.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:51.971" starttime="20170810 04:47:51.970" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:51.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:51.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:51.972" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:47:51.972" starttime="20170810 04:47:51.971" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.972" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:47:51.972" starttime="20170810 04:47:51.365" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:51.972" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:47:51.972" starttime="20170810 04:47:51.364" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:47:51.973" starttime="20170810 04:47:51.972" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:47:51.977" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:47:51.977" starttime="20170810 04:47:51.977" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:47:51.978" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:47:51.978" starttime="20170810 04:47:51.978" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:47:51.978" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:47:51.979" starttime="20170810 04:47:51.978" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:47:51.979" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:47:51.979" starttime="20170810 04:47:51.979" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:47:52.307" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:47:52.307" starttime="20170810 04:47:51.980" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:52.308" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:47:52.308" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:52.308" starttime="20170810 04:47:51.979" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:47:52.308" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:52.308" starttime="20170810 04:47:52.308" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:52.309" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:52.309" starttime="20170810 04:47:52.309" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.309" starttime="20170810 04:47:51.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.309" starttime="20170810 04:47:51.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.309" starttime="20170810 04:47:51.975" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:47:52.310" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:47:52.310" starttime="20170810 04:47:52.310" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:52.315" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:52.315" starttime="20170810 04:47:52.314" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:52.316" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:47:52.316" starttime="20170810 04:47:52.316" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.316" starttime="20170810 04:47:52.315" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.317" starttime="20170810 04:47:52.311" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.317" starttime="20170810 04:47:52.310" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:47:52.440" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:47:52.441" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:52.441" starttime="20170810 04:47:52.317" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:47:52.442" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:52.442" starttime="20170810 04:47:52.442" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:47:52.443" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:47:52.443" starttime="20170810 04:47:52.443" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.444" starttime="20170810 04:47:52.443" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.444" starttime="20170810 04:47:52.441" status="PASS"></status>
</kw>
<status endtime="20170810 04:47:52.444" starttime="20170810 04:47:52.441" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:47:52.444" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:47:52.444" starttime="20170810 04:47:52.444" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:52.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:47:52.444" starttime="20170810 04:47:51.974" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:47:52.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:47:52.445" starttime="20170810 04:47:52.445" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:47:52.446" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:47:52.446" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:47:52.446" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:47:52.446" starttime="20170810 04:47:52.445" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:52.446" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:47:52.446" starttime="20170810 04:47:51.974" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:47:52.446" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:47:52.446" starttime="20170810 04:47:51.974" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:47:52.447" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:47:52.447" starttime="20170810 04:47:52.447" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:52.447" starttime="20170810 04:47:51.973" status="FAIL"></status>
</kw>
<status endtime="20170810 04:47:52.447" starttime="20170810 04:47:46.981" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:02.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:02.454" starttime="20170810 04:48:02.453" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:02.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:02.455" starttime="20170810 04:48:02.454" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:02.455" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:02.455" starttime="20170810 04:48:02.455" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:02.456" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:02.456" starttime="20170810 04:48:02.456" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:02.941" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:02.942" starttime="20170810 04:48:02.457" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:02.942" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:02.942" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:02.942" starttime="20170810 04:48:02.457" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:02.942" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:02.943" starttime="20170810 04:48:02.942" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:02.943" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:02.943" starttime="20170810 04:48:02.943" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:02.944" starttime="20170810 04:48:02.452" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:02.944" starttime="20170810 04:48:02.452" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:02.944" starttime="20170810 04:48:02.451" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:02.945" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:48:02.945" starttime="20170810 04:48:02.944" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:02.947" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:02.947" starttime="20170810 04:48:02.947" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:02.949" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:02.949" starttime="20170810 04:48:02.948" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:02.949" starttime="20170810 04:48:02.948" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:02.949" starttime="20170810 04:48:02.946" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:02.949" starttime="20170810 04:48:02.945" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:08.650" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:08.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:08.651" starttime="20170810 04:48:02.950" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:08.653" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:08.653" starttime="20170810 04:48:08.652" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:08.654" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:08.655" starttime="20170810 04:48:08.654" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:08.655" starttime="20170810 04:48:08.653" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:08.655" starttime="20170810 04:48:08.652" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:08.655" starttime="20170810 04:48:08.651" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:08.655" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:08.655" starttime="20170810 04:48:08.655" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:08.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:08.656" starttime="20170810 04:48:02.450" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:08.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:08.656" starttime="20170810 04:48:08.656" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:08.657" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:08.657" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:08.657" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:48:08.657" starttime="20170810 04:48:08.657" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:08.658" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:48:08.658" starttime="20170810 04:48:02.450" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:08.658" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:48:08.658" starttime="20170810 04:48:02.449" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 04:48:08.659" level="FAIL">On != Off</msg>
<status endtime="20170810 04:48:08.659" starttime="20170810 04:48:08.659" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:08.660" starttime="20170810 04:48:02.449" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:08.660" starttime="20170810 04:48:02.448" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:18.665" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:18.666" starttime="20170810 04:48:18.665" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:18.666" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:18.666" starttime="20170810 04:48:18.666" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:18.667" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:18.667" starttime="20170810 04:48:18.667" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:18.668" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:18.668" starttime="20170810 04:48:18.667" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:19.041" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:19.041" starttime="20170810 04:48:18.669" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:19.041" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:19.041" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:19.041" starttime="20170810 04:48:18.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:19.042" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:19.042" starttime="20170810 04:48:19.042" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:19.043" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:19.043" starttime="20170810 04:48:19.042" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.043" starttime="20170810 04:48:18.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.043" starttime="20170810 04:48:18.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.043" starttime="20170810 04:48:18.663" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:19.044" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:48:19.044" starttime="20170810 04:48:19.043" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:19.046" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:19.046" starttime="20170810 04:48:19.045" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:19.047" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:19.047" starttime="20170810 04:48:19.046" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.047" starttime="20170810 04:48:19.046" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.047" starttime="20170810 04:48:19.044" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.047" starttime="20170810 04:48:19.044" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:19.896" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:19.896" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:19.896" starttime="20170810 04:48:19.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:19.898" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:19.899" starttime="20170810 04:48:19.898" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:19.899" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:19.900" starttime="20170810 04:48:19.899" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.900" starttime="20170810 04:48:19.899" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.900" starttime="20170810 04:48:19.897" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.900" starttime="20170810 04:48:19.897" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:19.900" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:19.900" starttime="20170810 04:48:19.900" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:19.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:19.901" starttime="20170810 04:48:18.662" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:19.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:19.901" starttime="20170810 04:48:19.901" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:19.902" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:19.902" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:19.902" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:48:19.902" starttime="20170810 04:48:19.901" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:19.902" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:48:19.902" starttime="20170810 04:48:18.661" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:19.903" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:48:19.903" starttime="20170810 04:48:18.661" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:48:19.903" starttime="20170810 04:48:19.903" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:19.903" starttime="20170810 04:48:18.661" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:19.907" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:19.907" starttime="20170810 04:48:19.906" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:19.908" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:19.908" starttime="20170810 04:48:19.907" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:19.908" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:19.908" starttime="20170810 04:48:19.908" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:19.909" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:19.909" starttime="20170810 04:48:19.909" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:20.301" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:20.301" starttime="20170810 04:48:19.910" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:20.301" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:20.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:20.301" starttime="20170810 04:48:19.909" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:20.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:20.302" starttime="20170810 04:48:20.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:20.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:20.302" starttime="20170810 04:48:20.302" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.303" starttime="20170810 04:48:19.906" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.303" starttime="20170810 04:48:19.906" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.303" starttime="20170810 04:48:19.905" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:20.303" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:48:20.303" starttime="20170810 04:48:20.303" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:20.306" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:20.306" starttime="20170810 04:48:20.305" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:20.307" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:20.307" starttime="20170810 04:48:20.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.307" starttime="20170810 04:48:20.306" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.307" starttime="20170810 04:48:20.304" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.307" starttime="20170810 04:48:20.304" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:20.638" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:20.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:20.639" starttime="20170810 04:48:20.307" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:20.640" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:20.640" starttime="20170810 04:48:20.640" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:20.641" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:20.641" starttime="20170810 04:48:20.641" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.642" starttime="20170810 04:48:20.641" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.642" starttime="20170810 04:48:20.639" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:20.642" starttime="20170810 04:48:20.639" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:20.642" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:20.642" starttime="20170810 04:48:20.642" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:20.642" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:20.642" starttime="20170810 04:48:19.904" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:20.643" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:20.643" starttime="20170810 04:48:20.643" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:20.644" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:20.644" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:20.644" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:48:20.644" starttime="20170810 04:48:20.643" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:20.644" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:48:20.644" starttime="20170810 04:48:19.904" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:20.644" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:48:20.644" starttime="20170810 04:48:19.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:48:20.645" starttime="20170810 04:48:20.645" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:20.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:20.649" starttime="20170810 04:48:20.649" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:20.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:20.650" starttime="20170810 04:48:20.650" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:20.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:20.651" starttime="20170810 04:48:20.650" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:20.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:20.651" starttime="20170810 04:48:20.651" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:21.104" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:21.104" starttime="20170810 04:48:20.652" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:21.104" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:21.104" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:21.104" starttime="20170810 04:48:20.651" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:21.105" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:21.105" starttime="20170810 04:48:21.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:21.106" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:21.106" starttime="20170810 04:48:21.105" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.106" starttime="20170810 04:48:20.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.106" starttime="20170810 04:48:20.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.106" starttime="20170810 04:48:20.647" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:21.107" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:48:21.107" starttime="20170810 04:48:21.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:21.109" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:21.109" starttime="20170810 04:48:21.108" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:21.110" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:21.110" starttime="20170810 04:48:21.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.110" starttime="20170810 04:48:21.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.110" starttime="20170810 04:48:21.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.110" starttime="20170810 04:48:21.107" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:21.251" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:48:21.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:21.251" starttime="20170810 04:48:21.110" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:21.253" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:21.253" starttime="20170810 04:48:21.252" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:21.254" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:21.254" starttime="20170810 04:48:21.253" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.254" starttime="20170810 04:48:21.253" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.254" starttime="20170810 04:48:21.252" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:21.254" starttime="20170810 04:48:21.251" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:21.254" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:21.254" starttime="20170810 04:48:21.254" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:21.255" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:21.255" starttime="20170810 04:48:20.646" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:21.255" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:21.255" starttime="20170810 04:48:21.255" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:21.256" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:21.256" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:21.256" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:48:21.256" starttime="20170810 04:48:21.256" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:21.256" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:48:21.256" starttime="20170810 04:48:20.646" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:21.257" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:48:21.257" starttime="20170810 04:48:20.646" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:48:21.257" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:48:21.257" starttime="20170810 04:48:21.257" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:21.257" starttime="20170810 04:48:20.645" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:21.258" starttime="20170810 04:48:18.660" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:31.263" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:31.263" starttime="20170810 04:48:31.263" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:31.264" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:31.264" starttime="20170810 04:48:31.264" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:31.265" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:31.265" starttime="20170810 04:48:31.264" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:31.265" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:31.265" starttime="20170810 04:48:31.265" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.443" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:31.443" starttime="20170810 04:48:31.266" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.444" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:31.444" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:31.444" starttime="20170810 04:48:31.266" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:31.445" starttime="20170810 04:48:31.444" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.445" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:31.445" starttime="20170810 04:48:31.445" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.446" starttime="20170810 04:48:31.262" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.446" starttime="20170810 04:48:31.261" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.446" starttime="20170810 04:48:31.261" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:31.446" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:48:31.446" starttime="20170810 04:48:31.446" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:31.448" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:31.448" starttime="20170810 04:48:31.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:31.449" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:31.449" starttime="20170810 04:48:31.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.450" starttime="20170810 04:48:31.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.450" starttime="20170810 04:48:31.447" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.450" starttime="20170810 04:48:31.447" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:31.512" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:31.512" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:31.512" starttime="20170810 04:48:31.450" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:31.514" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:31.514" starttime="20170810 04:48:31.513" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:31.515" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:31.515" starttime="20170810 04:48:31.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.515" starttime="20170810 04:48:31.514" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.515" starttime="20170810 04:48:31.513" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.515" starttime="20170810 04:48:31.512" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:31.516" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:31.516" starttime="20170810 04:48:31.516" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:31.516" starttime="20170810 04:48:31.260" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:31.517" starttime="20170810 04:48:31.516" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:31.517" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:31.517" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:31.517" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:48:31.517" starttime="20170810 04:48:31.517" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.518" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:48:31.518" starttime="20170810 04:48:31.259" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.518" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:48:31.518" starttime="20170810 04:48:31.259" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:48:31.519" starttime="20170810 04:48:31.518" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.519" starttime="20170810 04:48:31.259" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:31.522" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:31.523" starttime="20170810 04:48:31.522" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:31.523" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:31.523" starttime="20170810 04:48:31.523" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:31.524" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:31.524" starttime="20170810 04:48:31.524" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:31.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:31.525" starttime="20170810 04:48:31.524" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.756" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:31.757" starttime="20170810 04:48:31.525" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.757" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:31.757" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:31.757" starttime="20170810 04:48:31.525" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:31.757" starttime="20170810 04:48:31.757" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.758" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:31.758" starttime="20170810 04:48:31.758" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.758" starttime="20170810 04:48:31.521" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.758" starttime="20170810 04:48:31.521" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.758" starttime="20170810 04:48:31.521" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:31.759" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:48:31.759" starttime="20170810 04:48:31.759" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:31.762" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:31.762" starttime="20170810 04:48:31.760" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:31.763" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:31.763" starttime="20170810 04:48:31.762" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.763" starttime="20170810 04:48:31.762" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.763" starttime="20170810 04:48:31.760" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.763" starttime="20170810 04:48:31.759" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:31.905" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:31.906" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:31.906" starttime="20170810 04:48:31.763" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:31.907" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:31.907" starttime="20170810 04:48:31.907" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:31.908" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:31.908" starttime="20170810 04:48:31.908" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.909" starttime="20170810 04:48:31.908" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.909" starttime="20170810 04:48:31.906" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:31.909" starttime="20170810 04:48:31.906" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:31.909" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:31.909" starttime="20170810 04:48:31.909" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.909" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:31.909" starttime="20170810 04:48:31.520" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:31.910" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:31.910" starttime="20170810 04:48:31.910" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:31.911" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:31.911" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:31.911" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:48:31.911" starttime="20170810 04:48:31.910" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.911" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:48:31.911" starttime="20170810 04:48:31.519" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:31.911" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:48:31.911" starttime="20170810 04:48:31.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:48:31.912" starttime="20170810 04:48:31.912" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:31.916" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:31.916" starttime="20170810 04:48:31.915" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:31.917" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:31.917" starttime="20170810 04:48:31.916" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:31.917" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:31.917" starttime="20170810 04:48:31.917" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:31.918" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:31.918" starttime="20170810 04:48:31.918" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:32.115" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:32.115" starttime="20170810 04:48:31.919" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:32.115" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:32.115" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:32.115" starttime="20170810 04:48:31.918" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:32.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:32.116" starttime="20170810 04:48:32.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:32.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:32.116" starttime="20170810 04:48:32.116" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.116" starttime="20170810 04:48:31.915" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.116" starttime="20170810 04:48:31.915" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.117" starttime="20170810 04:48:31.914" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:32.117" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:48:32.117" starttime="20170810 04:48:32.117" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:32.119" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:32.119" starttime="20170810 04:48:32.118" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:32.120" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:32.120" starttime="20170810 04:48:32.120" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.120" starttime="20170810 04:48:32.119" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.120" starttime="20170810 04:48:32.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.120" starttime="20170810 04:48:32.117" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:32.209" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:48:32.209" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:32.209" starttime="20170810 04:48:32.121" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:32.211" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:32.211" starttime="20170810 04:48:32.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:32.211" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:32.212" starttime="20170810 04:48:32.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.212" starttime="20170810 04:48:32.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.212" starttime="20170810 04:48:32.210" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:32.212" starttime="20170810 04:48:32.209" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:32.212" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:32.212" starttime="20170810 04:48:32.212" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:32.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:32.213" starttime="20170810 04:48:31.913" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:32.213" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:32.213" starttime="20170810 04:48:32.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:32.214" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:32.214" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:32.214" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:48:32.214" starttime="20170810 04:48:32.213" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:32.214" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:48:32.214" starttime="20170810 04:48:31.913" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:32.215" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:48:32.215" starttime="20170810 04:48:31.912" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:48:32.215" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:48:32.215" starttime="20170810 04:48:32.215" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:32.216" starttime="20170810 04:48:31.912" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:32.216" starttime="20170810 04:48:31.258" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:42.221" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:42.222" starttime="20170810 04:48:42.221" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:42.222" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:42.222" starttime="20170810 04:48:42.222" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:42.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:42.223" starttime="20170810 04:48:42.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:42.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:42.224" starttime="20170810 04:48:42.223" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:42.558" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:42.558" starttime="20170810 04:48:42.224" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:42.558" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:42.558" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:42.559" starttime="20170810 04:48:42.224" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:42.559" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:42.559" starttime="20170810 04:48:42.559" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:42.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:42.560" starttime="20170810 04:48:42.560" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:42.560" starttime="20170810 04:48:42.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:42.560" starttime="20170810 04:48:42.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:42.560" starttime="20170810 04:48:42.219" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:42.561" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:48:42.561" starttime="20170810 04:48:42.561" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:42.563" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:42.563" starttime="20170810 04:48:42.562" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:42.564" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:42.564" starttime="20170810 04:48:42.564" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:42.564" starttime="20170810 04:48:42.563" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:42.564" starttime="20170810 04:48:42.562" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:42.565" starttime="20170810 04:48:42.561" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:43.096" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:43.096" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:43.096" starttime="20170810 04:48:42.565" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:43.099" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:43.099" starttime="20170810 04:48:43.098" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:43.099" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:43.100" starttime="20170810 04:48:43.099" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.100" starttime="20170810 04:48:43.099" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.100" starttime="20170810 04:48:43.097" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.100" starttime="20170810 04:48:43.097" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:43.100" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:43.100" starttime="20170810 04:48:43.100" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:43.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:43.101" starttime="20170810 04:48:42.218" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:43.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:43.101" starttime="20170810 04:48:43.101" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:43.102" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:43.102" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:43.102" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:48:43.102" starttime="20170810 04:48:43.101" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:43.102" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:48:43.102" starttime="20170810 04:48:42.218" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:43.103" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:48:43.103" starttime="20170810 04:48:42.217" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:48:43.103" starttime="20170810 04:48:43.103" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.104" starttime="20170810 04:48:42.217" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:43.109" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:43.109" starttime="20170810 04:48:43.108" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:43.110" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:43.110" starttime="20170810 04:48:43.110" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:43.111" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:43.111" starttime="20170810 04:48:43.111" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:43.112" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:43.112" starttime="20170810 04:48:43.112" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:43.500" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:43.500" starttime="20170810 04:48:43.113" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:43.500" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:43.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:43.500" starttime="20170810 04:48:43.112" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:43.501" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:43.501" starttime="20170810 04:48:43.500" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:43.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:43.502" starttime="20170810 04:48:43.501" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.502" starttime="20170810 04:48:43.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.502" starttime="20170810 04:48:43.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.502" starttime="20170810 04:48:43.106" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:43.502" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:48:43.502" starttime="20170810 04:48:43.502" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:43.508" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:43.508" starttime="20170810 04:48:43.504" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:43.509" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:43.509" starttime="20170810 04:48:43.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.509" starttime="20170810 04:48:43.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.509" starttime="20170810 04:48:43.503" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:43.509" starttime="20170810 04:48:43.503" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:44.214" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:44.215" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:44.215" starttime="20170810 04:48:43.509" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:44.217" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:44.217" starttime="20170810 04:48:44.216" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:44.217" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:44.218" starttime="20170810 04:48:44.217" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.218" starttime="20170810 04:48:44.217" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.218" starttime="20170810 04:48:44.216" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.218" starttime="20170810 04:48:44.215" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:44.218" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:44.218" starttime="20170810 04:48:44.218" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:44.219" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:44.219" starttime="20170810 04:48:43.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:44.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:44.220" starttime="20170810 04:48:44.219" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:44.220" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:44.220" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:44.220" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:48:44.220" starttime="20170810 04:48:44.220" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:44.221" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:48:44.221" starttime="20170810 04:48:43.104" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:44.221" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:48:44.221" starttime="20170810 04:48:43.104" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:48:44.222" starttime="20170810 04:48:44.221" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:44.226" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:44.226" starttime="20170810 04:48:44.225" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:44.226" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:44.226" starttime="20170810 04:48:44.226" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:44.227" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:44.227" starttime="20170810 04:48:44.227" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:44.228" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:44.228" starttime="20170810 04:48:44.227" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:44.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:44.654" starttime="20170810 04:48:44.228" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:44.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:44.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:44.654" starttime="20170810 04:48:44.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:44.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:44.655" starttime="20170810 04:48:44.654" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:44.656" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:44.656" starttime="20170810 04:48:44.655" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.656" starttime="20170810 04:48:44.225" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.656" starttime="20170810 04:48:44.224" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.656" starttime="20170810 04:48:44.224" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:44.657" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:48:44.657" starttime="20170810 04:48:44.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:44.659" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:44.659" starttime="20170810 04:48:44.658" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:44.660" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:44.660" starttime="20170810 04:48:44.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.660" starttime="20170810 04:48:44.659" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.660" starttime="20170810 04:48:44.657" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:44.660" starttime="20170810 04:48:44.657" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:45.499" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:48:45.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:45.499" starttime="20170810 04:48:44.660" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:45.501" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:45.501" starttime="20170810 04:48:45.500" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:45.502" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:45.502" starttime="20170810 04:48:45.502" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:45.502" starttime="20170810 04:48:45.501" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:45.502" starttime="20170810 04:48:45.500" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:45.502" starttime="20170810 04:48:45.499" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:45.503" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:45.503" starttime="20170810 04:48:45.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:45.503" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:45.503" starttime="20170810 04:48:44.223" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:45.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:45.504" starttime="20170810 04:48:45.503" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:45.504" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:45.504" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:45.504" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:48:45.504" starttime="20170810 04:48:45.504" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:45.505" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:48:45.505" starttime="20170810 04:48:44.222" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:45.505" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:48:45.505" starttime="20170810 04:48:44.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:48:45.506" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:48:45.506" starttime="20170810 04:48:45.505" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:45.506" starttime="20170810 04:48:44.222" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:45.506" starttime="20170810 04:48:42.216" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:55.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:55.513" starttime="20170810 04:48:55.512" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:55.513" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:55.513" starttime="20170810 04:48:55.513" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:55.514" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:55.514" starttime="20170810 04:48:55.514" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:55.515" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:55.515" starttime="20170810 04:48:55.514" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.053" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:56.053" starttime="20170810 04:48:55.515" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:56.053" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:56.053" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:56.053" starttime="20170810 04:48:55.515" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.054" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:56.054" starttime="20170810 04:48:56.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.054" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:56.054" starttime="20170810 04:48:56.054" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.055" starttime="20170810 04:48:55.511" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.055" starttime="20170810 04:48:55.510" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.055" starttime="20170810 04:48:55.510" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:56.055" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:48:56.055" starttime="20170810 04:48:56.055" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:56.057" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:56.058" starttime="20170810 04:48:56.057" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:56.058" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:56.059" starttime="20170810 04:48:56.058" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.059" starttime="20170810 04:48:56.058" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.059" starttime="20170810 04:48:56.056" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.059" starttime="20170810 04:48:56.056" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:56.637" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:56.637" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:56.637" starttime="20170810 04:48:56.059" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:56.639" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:56.639" starttime="20170810 04:48:56.638" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:56.640" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:56.640" starttime="20170810 04:48:56.640" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.640" starttime="20170810 04:48:56.639" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.641" starttime="20170810 04:48:56.638" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.641" starttime="20170810 04:48:56.637" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:56.641" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:56.641" starttime="20170810 04:48:56.641" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:56.641" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:56.641" starttime="20170810 04:48:55.509" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:56.642" starttime="20170810 04:48:56.642" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:56.642" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:56.643" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:56.643" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:48:56.643" starttime="20170810 04:48:56.642" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:56.643" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:48:56.643" starttime="20170810 04:48:55.508" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:56.643" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:48:56.643" starttime="20170810 04:48:55.508" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:48:56.644" starttime="20170810 04:48:56.644" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.644" starttime="20170810 04:48:55.507" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:56.647" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:56.648" starttime="20170810 04:48:56.647" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:56.648" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:56.648" starttime="20170810 04:48:56.648" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:56.649" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:56.649" starttime="20170810 04:48:56.649" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:56.650" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:56.650" starttime="20170810 04:48:56.649" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.826" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:56.827" starttime="20170810 04:48:56.650" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:56.827" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:56.827" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:56.827" starttime="20170810 04:48:56.650" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.827" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:56.827" starttime="20170810 04:48:56.827" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:56.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:56.828" starttime="20170810 04:48:56.828" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.828" starttime="20170810 04:48:56.647" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.828" starttime="20170810 04:48:56.646" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.828" starttime="20170810 04:48:56.646" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:56.829" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:48:56.829" starttime="20170810 04:48:56.829" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:56.832" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:56.832" starttime="20170810 04:48:56.830" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:56.833" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:48:56.833" starttime="20170810 04:48:56.833" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.833" starttime="20170810 04:48:56.832" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.834" starttime="20170810 04:48:56.830" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:56.834" starttime="20170810 04:48:56.829" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:57.445" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:48:57.445" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:57.445" starttime="20170810 04:48:56.834" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:57.447" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:57.447" starttime="20170810 04:48:57.446" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:57.448" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:57.448" starttime="20170810 04:48:57.447" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.448" starttime="20170810 04:48:57.447" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.448" starttime="20170810 04:48:57.446" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.448" starttime="20170810 04:48:57.445" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:57.448" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:57.449" starttime="20170810 04:48:57.448" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:57.449" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:57.449" starttime="20170810 04:48:56.645" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:57.449" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:57.449" starttime="20170810 04:48:57.449" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:57.450" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:57.450" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:57.450" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:48:57.450" starttime="20170810 04:48:57.450" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:57.450" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:48:57.450" starttime="20170810 04:48:56.644" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:57.451" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:48:57.451" starttime="20170810 04:48:56.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:48:57.451" starttime="20170810 04:48:57.451" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:48:57.455" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:48:57.455" starttime="20170810 04:48:57.455" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:48:57.456" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:48:57.456" starttime="20170810 04:48:57.456" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:48:57.457" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:48:57.457" starttime="20170810 04:48:57.456" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:48:57.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:48:57.457" starttime="20170810 04:48:57.457" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:48:57.874" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:48:57.874" starttime="20170810 04:48:57.458" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:57.875" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:48:57.875" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:57.875" starttime="20170810 04:48:57.458" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:48:57.875" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:57.875" starttime="20170810 04:48:57.875" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:57.876" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:57.876" starttime="20170810 04:48:57.876" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.876" starttime="20170810 04:48:57.454" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.876" starttime="20170810 04:48:57.454" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.877" starttime="20170810 04:48:57.453" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:48:57.877" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:48:57.877" starttime="20170810 04:48:57.877" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:57.879" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:57.879" starttime="20170810 04:48:57.878" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:57.880" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:48:57.880" starttime="20170810 04:48:57.880" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.880" starttime="20170810 04:48:57.879" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.880" starttime="20170810 04:48:57.878" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:57.880" starttime="20170810 04:48:57.877" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:48:58.470" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:48:58.470" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:58.470" starttime="20170810 04:48:57.881" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:48:58.472" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:58.472" starttime="20170810 04:48:58.472" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:48:58.473" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:48:58.473" starttime="20170810 04:48:58.473" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:58.473" starttime="20170810 04:48:58.472" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:58.473" starttime="20170810 04:48:58.471" status="PASS"></status>
</kw>
<status endtime="20170810 04:48:58.473" starttime="20170810 04:48:58.471" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:48:58.474" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:48:58.474" starttime="20170810 04:48:58.474" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:58.474" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:48:58.474" starttime="20170810 04:48:57.453" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:48:58.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:48:58.475" starttime="20170810 04:48:58.474" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:48:58.475" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:48:58.475" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:48:58.476" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:48:58.476" starttime="20170810 04:48:58.475" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:58.476" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:48:58.476" starttime="20170810 04:48:57.452" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:48:58.476" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:48:58.476" starttime="20170810 04:48:57.452" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:48:58.477" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:48:58.477" starttime="20170810 04:48:58.476" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:58.477" starttime="20170810 04:48:57.451" status="FAIL"></status>
</kw>
<status endtime="20170810 04:48:58.477" starttime="20170810 04:48:55.507" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:08.482" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:08.483" starttime="20170810 04:49:08.482" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:08.483" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:08.483" starttime="20170810 04:49:08.483" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:08.484" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:08.484" starttime="20170810 04:49:08.484" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:08.485" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:08.485" starttime="20170810 04:49:08.484" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:08.936" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:08.936" starttime="20170810 04:49:08.485" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:08.937" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:08.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:08.937" starttime="20170810 04:49:08.485" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:08.937" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:08.937" starttime="20170810 04:49:08.937" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:08.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:08.938" starttime="20170810 04:49:08.938" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:08.938" starttime="20170810 04:49:08.481" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:08.938" starttime="20170810 04:49:08.481" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:08.938" starttime="20170810 04:49:08.480" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:08.939" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:49:08.939" starttime="20170810 04:49:08.939" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:08.941" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:08.941" starttime="20170810 04:49:08.940" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:08.942" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:08.942" starttime="20170810 04:49:08.942" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:08.942" starttime="20170810 04:49:08.941" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:08.942" starttime="20170810 04:49:08.940" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:08.942" starttime="20170810 04:49:08.939" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:09.330" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:09.330" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:09.330" starttime="20170810 04:49:08.943" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:09.332" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:09.332" starttime="20170810 04:49:09.331" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:09.333" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:09.333" starttime="20170810 04:49:09.333" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.333" starttime="20170810 04:49:09.332" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.333" starttime="20170810 04:49:09.331" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.333" starttime="20170810 04:49:09.330" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:09.334" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:09.334" starttime="20170810 04:49:09.333" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:09.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:09.334" starttime="20170810 04:49:08.479" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:09.334" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:09.334" starttime="20170810 04:49:09.334" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:09.335" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:09.335" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:09.335" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:49:09.335" starttime="20170810 04:49:09.335" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:09.336" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:49:09.336" starttime="20170810 04:49:08.479" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:09.336" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:49:09.336" starttime="20170810 04:49:08.478" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:49:09.336" starttime="20170810 04:49:09.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.337" starttime="20170810 04:49:08.478" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:09.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:09.340" starttime="20170810 04:49:09.340" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:09.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:09.341" starttime="20170810 04:49:09.341" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:09.342" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:09.342" starttime="20170810 04:49:09.341" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:09.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:09.342" starttime="20170810 04:49:09.342" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:09.631" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:09.631" starttime="20170810 04:49:09.343" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:09.631" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:09.631" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:09.631" starttime="20170810 04:49:09.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:09.632" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:09.632" starttime="20170810 04:49:09.631" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:09.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:09.633" starttime="20170810 04:49:09.632" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.633" starttime="20170810 04:49:09.339" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.633" starttime="20170810 04:49:09.339" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.633" starttime="20170810 04:49:09.338" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:09.633" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:49:09.633" starttime="20170810 04:49:09.633" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:09.636" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:09.636" starttime="20170810 04:49:09.635" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:09.637" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:09.637" starttime="20170810 04:49:09.637" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.637" starttime="20170810 04:49:09.636" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.637" starttime="20170810 04:49:09.634" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:09.637" starttime="20170810 04:49:09.634" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:10.685" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:10.685" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:10.685" starttime="20170810 04:49:09.637" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:10.687" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:10.687" starttime="20170810 04:49:10.686" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:10.688" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:10.688" starttime="20170810 04:49:10.687" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:10.688" starttime="20170810 04:49:10.687" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:10.688" starttime="20170810 04:49:10.686" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:10.688" starttime="20170810 04:49:10.685" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:10.688" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:10.688" starttime="20170810 04:49:10.688" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:10.689" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:10.689" starttime="20170810 04:49:09.338" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:10.689" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:10.689" starttime="20170810 04:49:10.689" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:10.690" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:10.690" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:10.690" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:49:10.690" starttime="20170810 04:49:10.690" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:10.690" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:49:10.690" starttime="20170810 04:49:09.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:10.691" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:49:10.691" starttime="20170810 04:49:09.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:49:10.691" starttime="20170810 04:49:10.691" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:10.695" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:10.696" starttime="20170810 04:49:10.695" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:10.696" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:10.696" starttime="20170810 04:49:10.696" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:10.697" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:10.697" starttime="20170810 04:49:10.696" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:10.697" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:10.697" starttime="20170810 04:49:10.697" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:11.100" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:11.100" starttime="20170810 04:49:10.698" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:11.100" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:11.100" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:11.101" starttime="20170810 04:49:10.698" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:11.101" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:11.101" starttime="20170810 04:49:11.101" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:11.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:11.102" starttime="20170810 04:49:11.101" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.102" starttime="20170810 04:49:10.694" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.102" starttime="20170810 04:49:10.694" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.102" starttime="20170810 04:49:10.693" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:11.103" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:49:11.103" starttime="20170810 04:49:11.102" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:11.105" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:11.105" starttime="20170810 04:49:11.104" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:11.106" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:11.106" starttime="20170810 04:49:11.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.106" starttime="20170810 04:49:11.105" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.106" starttime="20170810 04:49:11.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.106" starttime="20170810 04:49:11.103" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:11.333" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:49:11.334" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:11.334" starttime="20170810 04:49:11.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:11.335" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:11.335" starttime="20170810 04:49:11.335" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:11.336" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:11.336" starttime="20170810 04:49:11.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.337" starttime="20170810 04:49:11.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.337" starttime="20170810 04:49:11.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:11.337" starttime="20170810 04:49:11.334" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:11.337" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:11.337" starttime="20170810 04:49:11.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:11.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:11.337" starttime="20170810 04:49:10.693" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:11.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:11.338" starttime="20170810 04:49:11.338" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:11.339" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:11.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:11.339" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:49:11.339" starttime="20170810 04:49:11.338" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:11.339" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:49:11.339" starttime="20170810 04:49:10.692" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:11.339" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:49:11.339" starttime="20170810 04:49:10.692" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:49:11.340" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:49:11.340" starttime="20170810 04:49:11.340" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:11.340" starttime="20170810 04:49:10.691" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:11.340" starttime="20170810 04:49:08.478" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:21.346" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:21.347" starttime="20170810 04:49:21.346" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:21.347" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:21.347" starttime="20170810 04:49:21.347" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:21.348" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:21.348" starttime="20170810 04:49:21.347" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:21.348" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:21.348" starttime="20170810 04:49:21.348" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:21.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:21.659" starttime="20170810 04:49:21.349" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:21.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:21.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:21.659" starttime="20170810 04:49:21.349" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:21.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:21.660" starttime="20170810 04:49:21.660" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:21.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:21.661" starttime="20170810 04:49:21.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.661" starttime="20170810 04:49:21.345" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.661" starttime="20170810 04:49:21.344" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.661" starttime="20170810 04:49:21.344" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:21.662" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:49:21.662" starttime="20170810 04:49:21.661" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:21.664" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:21.664" starttime="20170810 04:49:21.663" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:21.666" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:21.666" starttime="20170810 04:49:21.665" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.666" starttime="20170810 04:49:21.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.666" starttime="20170810 04:49:21.663" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.666" starttime="20170810 04:49:21.662" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:21.847" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:21.847" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:21.847" starttime="20170810 04:49:21.666" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:21.849" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:21.849" starttime="20170810 04:49:21.848" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:21.850" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:21.850" starttime="20170810 04:49:21.850" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.850" starttime="20170810 04:49:21.849" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.850" starttime="20170810 04:49:21.848" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.850" starttime="20170810 04:49:21.847" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:21.851" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:21.851" starttime="20170810 04:49:21.851" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:21.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:21.851" starttime="20170810 04:49:21.343" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:21.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:21.852" starttime="20170810 04:49:21.851" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:21.852" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:21.852" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:21.852" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:49:21.852" starttime="20170810 04:49:21.852" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:21.853" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:49:21.853" starttime="20170810 04:49:21.342" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:21.853" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:49:21.853" starttime="20170810 04:49:21.342" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:49:21.854" starttime="20170810 04:49:21.853" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:21.854" starttime="20170810 04:49:21.342" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:21.857" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:21.858" starttime="20170810 04:49:21.857" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:21.858" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:21.858" starttime="20170810 04:49:21.858" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:21.859" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:21.859" starttime="20170810 04:49:21.858" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:21.859" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:21.859" starttime="20170810 04:49:21.859" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:22.482" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:22.483" starttime="20170810 04:49:21.860" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:22.483" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:22.483" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:22.483" starttime="20170810 04:49:21.860" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:22.483" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:22.484" starttime="20170810 04:49:22.483" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:22.484" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:22.484" starttime="20170810 04:49:22.484" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.484" starttime="20170810 04:49:21.856" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.484" starttime="20170810 04:49:21.856" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.485" starttime="20170810 04:49:21.855" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:22.485" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:49:22.485" starttime="20170810 04:49:22.485" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:22.490" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:22.490" starttime="20170810 04:49:22.487" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:22.491" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:22.491" starttime="20170810 04:49:22.491" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.491" starttime="20170810 04:49:22.490" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.491" starttime="20170810 04:49:22.486" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.491" starttime="20170810 04:49:22.485" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:22.973" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:22.974" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:22.974" starttime="20170810 04:49:22.492" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:22.975" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:22.975" starttime="20170810 04:49:22.975" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:22.976" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:22.976" starttime="20170810 04:49:22.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.977" starttime="20170810 04:49:22.976" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.977" starttime="20170810 04:49:22.974" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:22.977" starttime="20170810 04:49:22.974" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:22.977" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:22.977" starttime="20170810 04:49:22.977" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:22.977" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:22.977" starttime="20170810 04:49:21.855" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:22.978" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:22.978" starttime="20170810 04:49:22.978" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:22.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:22.979" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:22.979" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:49:22.979" starttime="20170810 04:49:22.979" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:22.979" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:49:22.979" starttime="20170810 04:49:21.854" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:22.980" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:49:22.980" starttime="20170810 04:49:21.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:49:22.980" starttime="20170810 04:49:22.980" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:22.984" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:22.984" starttime="20170810 04:49:22.984" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:22.985" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:22.985" starttime="20170810 04:49:22.985" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:22.986" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:22.986" starttime="20170810 04:49:22.985" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:22.986" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:22.986" starttime="20170810 04:49:22.986" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:23.375" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:23.375" starttime="20170810 04:49:22.987" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:23.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:23.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:23.375" starttime="20170810 04:49:22.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:23.376" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:23.376" starttime="20170810 04:49:23.375" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:23.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:23.376" starttime="20170810 04:49:23.376" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.377" starttime="20170810 04:49:22.983" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.377" starttime="20170810 04:49:22.983" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.377" starttime="20170810 04:49:22.982" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:23.377" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:49:23.377" starttime="20170810 04:49:23.377" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:23.379" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:23.380" starttime="20170810 04:49:23.379" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:23.380" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:23.381" starttime="20170810 04:49:23.380" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.381" starttime="20170810 04:49:23.380" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.381" starttime="20170810 04:49:23.378" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.381" starttime="20170810 04:49:23.378" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:23.893" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:49:23.893" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:23.893" starttime="20170810 04:49:23.381" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:23.895" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:23.895" starttime="20170810 04:49:23.895" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:23.896" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:23.896" starttime="20170810 04:49:23.896" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.896" starttime="20170810 04:49:23.895" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.896" starttime="20170810 04:49:23.894" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:23.897" starttime="20170810 04:49:23.894" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:23.897" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:23.897" starttime="20170810 04:49:23.897" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:23.897" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:23.897" starttime="20170810 04:49:22.982" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:23.898" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:23.898" starttime="20170810 04:49:23.897" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:23.899" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:23.899" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:23.899" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:49:23.899" starttime="20170810 04:49:23.898" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:23.899" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:49:23.899" starttime="20170810 04:49:22.981" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:23.899" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:49:23.899" starttime="20170810 04:49:22.981" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:49:23.900" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:49:23.900" starttime="20170810 04:49:23.899" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:23.900" starttime="20170810 04:49:22.980" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:23.900" starttime="20170810 04:49:21.341" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:33.906" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:33.906" starttime="20170810 04:49:33.905" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:33.907" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:33.907" starttime="20170810 04:49:33.907" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:33.908" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:33.908" starttime="20170810 04:49:33.907" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:33.908" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:33.908" starttime="20170810 04:49:33.908" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:34.243" starttime="20170810 04:49:33.909" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.244" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:34.244" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:34.244" starttime="20170810 04:49:33.909" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:34.244" starttime="20170810 04:49:34.244" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.245" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:34.245" starttime="20170810 04:49:34.245" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.245" starttime="20170810 04:49:33.905" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.245" starttime="20170810 04:49:33.904" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.245" starttime="20170810 04:49:33.903" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:34.246" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:49:34.246" starttime="20170810 04:49:34.246" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:34.248" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:34.248" starttime="20170810 04:49:34.247" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:34.249" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:34.249" starttime="20170810 04:49:34.249" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.249" starttime="20170810 04:49:34.248" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.249" starttime="20170810 04:49:34.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.249" starttime="20170810 04:49:34.246" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:34.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:34.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:34.327" starttime="20170810 04:49:34.250" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:34.329" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:34.329" starttime="20170810 04:49:34.328" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:34.330" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:34.330" starttime="20170810 04:49:34.330" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.330" starttime="20170810 04:49:34.329" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.330" starttime="20170810 04:49:34.328" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.330" starttime="20170810 04:49:34.327" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:34.331" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:34.331" starttime="20170810 04:49:34.331" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.331" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:34.331" starttime="20170810 04:49:33.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.332" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:34.332" starttime="20170810 04:49:34.331" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:34.332" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:34.332" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:34.333" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:49:34.333" starttime="20170810 04:49:34.332" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.333" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:49:34.333" starttime="20170810 04:49:33.902" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.333" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:49:34.333" starttime="20170810 04:49:33.902" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:49:34.334" starttime="20170810 04:49:34.333" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.334" starttime="20170810 04:49:33.901" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:34.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:34.338" starttime="20170810 04:49:34.337" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:34.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:34.338" starttime="20170810 04:49:34.338" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:34.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:34.339" starttime="20170810 04:49:34.339" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:34.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:34.340" starttime="20170810 04:49:34.339" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.737" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:34.737" starttime="20170810 04:49:34.340" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.737" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:34.737" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:34.737" starttime="20170810 04:49:34.340" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.737" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:34.738" starttime="20170810 04:49:34.737" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.738" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:34.738" starttime="20170810 04:49:34.738" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.738" starttime="20170810 04:49:34.337" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.738" starttime="20170810 04:49:34.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.739" starttime="20170810 04:49:34.336" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:34.739" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:49:34.739" starttime="20170810 04:49:34.739" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:34.742" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:34.742" starttime="20170810 04:49:34.741" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:34.743" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:34.743" starttime="20170810 04:49:34.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.743" starttime="20170810 04:49:34.742" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.743" starttime="20170810 04:49:34.740" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.743" starttime="20170810 04:49:34.740" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:34.857" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:34.858" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:34.858" starttime="20170810 04:49:34.743" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:34.859" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:34.859" starttime="20170810 04:49:34.859" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:34.860" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:34.860" starttime="20170810 04:49:34.860" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.860" starttime="20170810 04:49:34.860" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.861" starttime="20170810 04:49:34.858" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:34.861" starttime="20170810 04:49:34.858" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:34.861" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:34.861" starttime="20170810 04:49:34.861" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:34.861" starttime="20170810 04:49:34.335" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:34.862" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:34.862" starttime="20170810 04:49:34.862" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:34.863" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:34.863" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:34.863" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:49:34.863" starttime="20170810 04:49:34.862" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.863" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:49:34.863" starttime="20170810 04:49:34.334" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:34.863" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:49:34.863" starttime="20170810 04:49:34.334" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:49:34.864" starttime="20170810 04:49:34.864" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:34.868" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:34.868" starttime="20170810 04:49:34.867" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:34.869" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:34.869" starttime="20170810 04:49:34.868" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:34.869" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:34.869" starttime="20170810 04:49:34.869" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:34.870" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:34.870" starttime="20170810 04:49:34.870" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:35.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:35.181" starttime="20170810 04:49:34.871" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:35.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:35.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:35.181" starttime="20170810 04:49:34.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:35.182" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:35.182" starttime="20170810 04:49:35.181" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:35.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:35.183" starttime="20170810 04:49:35.182" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.183" starttime="20170810 04:49:34.867" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.183" starttime="20170810 04:49:34.866" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.183" starttime="20170810 04:49:34.866" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:35.184" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:49:35.184" starttime="20170810 04:49:35.183" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:35.187" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:35.187" starttime="20170810 04:49:35.186" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:35.188" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:35.188" starttime="20170810 04:49:35.188" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.188" starttime="20170810 04:49:35.187" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.189" starttime="20170810 04:49:35.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.189" starttime="20170810 04:49:35.184" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:35.324" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:49:35.324" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:35.324" starttime="20170810 04:49:35.189" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:35.326" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:35.326" starttime="20170810 04:49:35.325" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:35.327" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:35.327" starttime="20170810 04:49:35.326" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.327" starttime="20170810 04:49:35.326" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.327" starttime="20170810 04:49:35.325" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:35.327" starttime="20170810 04:49:35.324" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:35.328" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:35.328" starttime="20170810 04:49:35.327" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:35.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:35.328" starttime="20170810 04:49:34.865" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:35.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:35.329" starttime="20170810 04:49:35.328" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:35.329" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:35.329" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:35.329" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:49:35.329" starttime="20170810 04:49:35.329" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:35.330" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:49:35.330" starttime="20170810 04:49:34.865" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:35.330" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:49:35.330" starttime="20170810 04:49:34.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:49:35.330" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:49:35.330" starttime="20170810 04:49:35.330" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:35.331" starttime="20170810 04:49:34.864" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:35.331" starttime="20170810 04:49:33.901" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:45.336" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:45.337" starttime="20170810 04:49:45.336" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:45.337" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:45.337" starttime="20170810 04:49:45.337" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:45.338" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:45.338" starttime="20170810 04:49:45.338" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:45.339" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:45.339" starttime="20170810 04:49:45.338" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:45.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:45.532" starttime="20170810 04:49:45.339" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:45.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:45.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:45.532" starttime="20170810 04:49:45.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:45.533" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:45.533" starttime="20170810 04:49:45.532" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:45.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:45.533" starttime="20170810 04:49:45.533" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.533" starttime="20170810 04:49:45.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.533" starttime="20170810 04:49:45.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.534" starttime="20170810 04:49:45.334" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:45.534" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:49:45.534" starttime="20170810 04:49:45.534" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:45.536" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:45.536" starttime="20170810 04:49:45.536" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:45.537" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:45.537" starttime="20170810 04:49:45.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.538" starttime="20170810 04:49:45.537" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.538" starttime="20170810 04:49:45.535" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.538" starttime="20170810 04:49:45.535" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:45.809" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:45.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:45.809" starttime="20170810 04:49:45.538" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:45.811" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:45.811" starttime="20170810 04:49:45.810" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:45.812" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:45.812" starttime="20170810 04:49:45.812" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.812" starttime="20170810 04:49:45.811" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.812" starttime="20170810 04:49:45.810" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.812" starttime="20170810 04:49:45.809" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:45.813" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:45.813" starttime="20170810 04:49:45.813" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:45.813" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:45.813" starttime="20170810 04:49:45.333" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:45.814" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:45.814" starttime="20170810 04:49:45.813" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:45.814" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:45.814" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:45.814" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:49:45.815" starttime="20170810 04:49:45.814" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:45.815" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:49:45.815" starttime="20170810 04:49:45.332" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:45.815" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:49:45.815" starttime="20170810 04:49:45.332" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:49:45.816" starttime="20170810 04:49:45.815" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:45.816" starttime="20170810 04:49:45.332" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:45.819" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:45.820" starttime="20170810 04:49:45.819" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:45.820" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:45.820" starttime="20170810 04:49:45.820" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:45.821" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:45.821" starttime="20170810 04:49:45.821" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:45.822" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:45.822" starttime="20170810 04:49:45.821" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.107" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:46.107" starttime="20170810 04:49:45.822" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.107" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:46.107" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:46.107" starttime="20170810 04:49:45.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.108" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:46.108" starttime="20170810 04:49:46.108" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.109" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:46.109" starttime="20170810 04:49:46.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.109" starttime="20170810 04:49:45.819" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.109" starttime="20170810 04:49:45.818" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.109" starttime="20170810 04:49:45.817" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:46.110" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:49:46.110" starttime="20170810 04:49:46.109" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:46.112" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:46.112" starttime="20170810 04:49:46.111" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:46.113" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:46.113" starttime="20170810 04:49:46.113" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.113" starttime="20170810 04:49:46.112" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.113" starttime="20170810 04:49:46.110" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.113" starttime="20170810 04:49:46.110" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:46.201" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:46.202" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:46.202" starttime="20170810 04:49:46.114" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:46.204" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:46.204" starttime="20170810 04:49:46.203" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:46.205" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:46.205" starttime="20170810 04:49:46.204" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.205" starttime="20170810 04:49:46.204" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.205" starttime="20170810 04:49:46.202" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.205" starttime="20170810 04:49:46.202" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:46.205" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:46.205" starttime="20170810 04:49:46.205" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.206" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:46.206" starttime="20170810 04:49:45.817" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.206" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:46.206" starttime="20170810 04:49:46.206" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:46.207" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:46.207" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:46.207" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Running'}</msg>
<status endtime="20170810 04:49:46.207" starttime="20170810 04:49:46.207" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.207" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170810 04:49:46.207" starttime="20170810 04:49:45.816" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.208" level="INFO">${host_state} = Running</msg>
<status endtime="20170810 04:49:46.208" starttime="20170810 04:49:45.816" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:49:46.208" starttime="20170810 04:49:46.208" status="PASS"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:46.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:46.212" starttime="20170810 04:49:46.212" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:46.213" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:46.213" starttime="20170810 04:49:46.213" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:46.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:46.214" starttime="20170810 04:49:46.213" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:46.214" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:46.214" starttime="20170810 04:49:46.214" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.434" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:46.434" starttime="20170810 04:49:46.215" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.434" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:46.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:46.434" starttime="20170810 04:49:46.214" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:46.435" starttime="20170810 04:49:46.434" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:46.436" starttime="20170810 04:49:46.435" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.436" starttime="20170810 04:49:46.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.436" starttime="20170810 04:49:46.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.436" starttime="20170810 04:49:46.210" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:46.436" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20170810 04:49:46.437" starttime="20170810 04:49:46.436" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:46.438" level="INFO">${msg} = URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:46.439" starttime="20170810 04:49:46.438" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:46.439" level="INFO">URI:https://9.41.166.169:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20170810 04:49:46.440" starttime="20170810 04:49:46.439" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.440" starttime="20170810 04:49:46.439" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.440" starttime="20170810 04:49:46.437" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.440" starttime="20170810 04:49:46.437" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:46.573" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg timestamp="20170810 04:49:46.573" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:46.573" starttime="20170810 04:49:46.440" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:46.575" level="INFO">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:46.575" starttime="20170810 04:49:46.574" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:46.576" level="INFO">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:46.576" starttime="20170810 04:49:46.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.576" starttime="20170810 04:49:46.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.576" starttime="20170810 04:49:46.574" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:46.576" starttime="20170810 04:49:46.573" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:46.576" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:46.577" starttime="20170810 04:49:46.576" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:46.577" starttime="20170810 04:49:46.210" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:46.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:46.577" starttime="20170810 04:49:46.577" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:46.578" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:46.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:46.578" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status endtime="20170810 04:49:46.578" starttime="20170810 04:49:46.578" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.578" level="INFO">${state} = Off</msg>
<status endtime="20170810 04:49:46.578" starttime="20170810 04:49:46.209" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:46.579" level="INFO">${boot_progress} = Off</msg>
<status endtime="20170810 04:49:46.579" starttime="20170810 04:49:46.209" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg timestamp="20170810 04:49:46.579" level="FAIL">Off != FW Progress, Starting OS</msg>
<status endtime="20170810 04:49:46.579" starttime="20170810 04:49:46.579" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:46.580" starttime="20170810 04:49:46.208" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:46.580" starttime="20170810 04:49:45.331" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:56.585" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:56.586" starttime="20170810 04:49:56.585" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:56.586" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:56.586" starttime="20170810 04:49:56.586" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:56.587" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:56.587" starttime="20170810 04:49:56.586" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:56.587" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:56.587" starttime="20170810 04:49:56.587" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:56.764" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:56.764" starttime="20170810 04:49:56.588" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:56.764" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:56.764" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:56.765" starttime="20170810 04:49:56.588" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:56.765" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:56.765" starttime="20170810 04:49:56.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:56.766" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:56.766" starttime="20170810 04:49:56.765" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.766" starttime="20170810 04:49:56.584" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.766" starttime="20170810 04:49:56.583" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.766" starttime="20170810 04:49:56.583" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:56.767" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:49:56.767" starttime="20170810 04:49:56.767" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:56.769" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:56.769" starttime="20170810 04:49:56.768" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:56.770" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:56.770" starttime="20170810 04:49:56.770" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.770" starttime="20170810 04:49:56.769" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.770" starttime="20170810 04:49:56.768" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.770" starttime="20170810 04:49:56.767" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:56.832" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:56.832" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:56.832" starttime="20170810 04:49:56.771" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:56.834" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:56.834" starttime="20170810 04:49:56.833" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:56.835" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:56.835" starttime="20170810 04:49:56.835" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.835" starttime="20170810 04:49:56.834" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.835" starttime="20170810 04:49:56.833" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.835" starttime="20170810 04:49:56.832" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:56.836" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:56.836" starttime="20170810 04:49:56.836" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:56.836" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:56.836" starttime="20170810 04:49:56.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:56.837" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:56.837" starttime="20170810 04:49:56.836" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:56.837" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:56.837" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:56.837" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:49:56.837" starttime="20170810 04:49:56.837" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:56.838" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:49:56.838" starttime="20170810 04:49:56.582" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:56.838" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:49:56.838" starttime="20170810 04:49:56.581" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:49:56.839" starttime="20170810 04:49:56.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:56.839" starttime="20170810 04:49:56.581" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:49:56.842" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:49:56.843" starttime="20170810 04:49:56.842" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:49:56.843" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:49:56.843" starttime="20170810 04:49:56.843" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:49:56.844" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:49:56.844" starttime="20170810 04:49:56.843" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:49:56.844" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:49:56.844" starttime="20170810 04:49:56.844" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:49:57.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:49:57.062" starttime="20170810 04:49:56.845" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:57.062" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:49:57.062" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:57.062" starttime="20170810 04:49:56.845" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:49:57.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:57.063" starttime="20170810 04:49:57.063" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:57.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:57.064" starttime="20170810 04:49:57.063" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.064" starttime="20170810 04:49:56.841" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.064" starttime="20170810 04:49:56.841" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.064" starttime="20170810 04:49:56.840" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:49:57.065" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:49:57.065" starttime="20170810 04:49:57.064" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:57.070" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:57.070" starttime="20170810 04:49:57.066" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:57.071" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:49:57.071" starttime="20170810 04:49:57.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.071" starttime="20170810 04:49:57.070" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.071" starttime="20170810 04:49:57.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.071" starttime="20170810 04:49:57.065" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:49:57.165" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:49:57.166" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:57.166" starttime="20170810 04:49:57.071" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:49:57.168" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:57.168" starttime="20170810 04:49:57.167" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:49:57.168" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:49:57.169" starttime="20170810 04:49:57.168" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.169" starttime="20170810 04:49:57.168" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.169" starttime="20170810 04:49:57.167" status="PASS"></status>
</kw>
<status endtime="20170810 04:49:57.169" starttime="20170810 04:49:57.166" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:49:57.169" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:49:57.169" starttime="20170810 04:49:57.169" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:57.170" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:49:57.170" starttime="20170810 04:49:56.840" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:49:57.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:49:57.170" starttime="20170810 04:49:57.170" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:49:57.171" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:49:57.171" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:49:57.171" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:49:57.171" starttime="20170810 04:49:57.170" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:57.171" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:49:57.171" starttime="20170810 04:49:56.839" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:49:57.172" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:49:57.172" starttime="20170810 04:49:56.839" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:49:57.172" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:49:57.172" starttime="20170810 04:49:57.172" status="FAIL"></status>
</kw>
<status endtime="20170810 04:49:57.173" starttime="20170810 04:49:56.580" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:07.178" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:07.178" starttime="20170810 04:50:07.178" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:07.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:07.179" starttime="20170810 04:50:07.179" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:07.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:07.180" starttime="20170810 04:50:07.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:07.181" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:07.181" starttime="20170810 04:50:07.180" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.444" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:07.444" starttime="20170810 04:50:07.182" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.445" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:07.445" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:07.445" starttime="20170810 04:50:07.181" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.445" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:07.445" starttime="20170810 04:50:07.445" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.446" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:07.446" starttime="20170810 04:50:07.446" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.446" starttime="20170810 04:50:07.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.446" starttime="20170810 04:50:07.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.447" starttime="20170810 04:50:07.176" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:07.447" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:50:07.447" starttime="20170810 04:50:07.447" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:07.449" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:07.449" starttime="20170810 04:50:07.448" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:07.450" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:07.450" starttime="20170810 04:50:07.450" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.450" starttime="20170810 04:50:07.449" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.451" starttime="20170810 04:50:07.448" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.451" starttime="20170810 04:50:07.447" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:07.513" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:07.513" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:07.513" starttime="20170810 04:50:07.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:07.514" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:07.515" starttime="20170810 04:50:07.514" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:07.515" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:07.515" starttime="20170810 04:50:07.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.516" starttime="20170810 04:50:07.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.516" starttime="20170810 04:50:07.514" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.516" starttime="20170810 04:50:07.513" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:07.516" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:07.516" starttime="20170810 04:50:07.516" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.517" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:07.517" starttime="20170810 04:50:07.175" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:07.517" starttime="20170810 04:50:07.517" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:07.518" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:07.518" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:07.518" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:50:07.518" starttime="20170810 04:50:07.517" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.518" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:50:07.518" starttime="20170810 04:50:07.174" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.519" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:50:07.519" starttime="20170810 04:50:07.174" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:50:07.519" starttime="20170810 04:50:07.519" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.519" starttime="20170810 04:50:07.174" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:07.523" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:07.523" starttime="20170810 04:50:07.523" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:07.524" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:07.524" starttime="20170810 04:50:07.524" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:07.525" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:07.525" starttime="20170810 04:50:07.524" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:07.525" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:07.525" starttime="20170810 04:50:07.525" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.729" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:07.729" starttime="20170810 04:50:07.526" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.730" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:07.730" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:07.730" starttime="20170810 04:50:07.526" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.730" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:07.731" starttime="20170810 04:50:07.730" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:07.732" starttime="20170810 04:50:07.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.732" starttime="20170810 04:50:07.522" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.732" starttime="20170810 04:50:07.521" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.732" starttime="20170810 04:50:07.521" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:07.733" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:50:07.733" starttime="20170810 04:50:07.732" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:07.736" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:07.736" starttime="20170810 04:50:07.735" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:07.737" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:07.738" starttime="20170810 04:50:07.737" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.738" starttime="20170810 04:50:07.736" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.738" starttime="20170810 04:50:07.734" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.738" starttime="20170810 04:50:07.733" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:07.826" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:07.827" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:07.827" starttime="20170810 04:50:07.738" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:07.828" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:07.828" starttime="20170810 04:50:07.828" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:07.829" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:07.830" starttime="20170810 04:50:07.829" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.830" starttime="20170810 04:50:07.828" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.830" starttime="20170810 04:50:07.827" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:07.830" starttime="20170810 04:50:07.827" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:07.830" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:07.830" starttime="20170810 04:50:07.830" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.831" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:07.831" starttime="20170810 04:50:07.520" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.832" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:07.832" starttime="20170810 04:50:07.831" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:07.832" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:07.832" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:07.833" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:50:07.833" starttime="20170810 04:50:07.832" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.833" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:50:07.833" starttime="20170810 04:50:07.520" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:07.833" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:50:07.833" starttime="20170810 04:50:07.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:50:07.834" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:50:07.834" starttime="20170810 04:50:07.833" status="FAIL"></status>
</kw>
<status endtime="20170810 04:50:07.834" starttime="20170810 04:50:07.173" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:17.840" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:17.840" starttime="20170810 04:50:17.839" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:17.841" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:17.841" starttime="20170810 04:50:17.841" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:17.842" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:17.842" starttime="20170810 04:50:17.841" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:17.843" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:17.843" starttime="20170810 04:50:17.842" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.221" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:18.221" starttime="20170810 04:50:17.844" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:18.221" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:18.221" starttime="20170810 04:50:17.843" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.222" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:18.222" starttime="20170810 04:50:18.222" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.223" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:18.223" starttime="20170810 04:50:18.222" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.223" starttime="20170810 04:50:17.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.223" starttime="20170810 04:50:17.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.223" starttime="20170810 04:50:17.837" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:18.224" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:50:18.224" starttime="20170810 04:50:18.223" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:18.226" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:18.226" starttime="20170810 04:50:18.225" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:18.227" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:18.227" starttime="20170810 04:50:18.226" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.227" starttime="20170810 04:50:18.226" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.227" starttime="20170810 04:50:18.224" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.227" starttime="20170810 04:50:18.224" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:18.289" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:18.289" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:18.289" starttime="20170810 04:50:18.227" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:18.291" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:18.291" starttime="20170810 04:50:18.290" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:18.292" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:18.292" starttime="20170810 04:50:18.292" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.292" starttime="20170810 04:50:18.291" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.292" starttime="20170810 04:50:18.290" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.292" starttime="20170810 04:50:18.290" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:18.293" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:18.293" starttime="20170810 04:50:18.293" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.293" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:18.293" starttime="20170810 04:50:17.837" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.294" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:18.294" starttime="20170810 04:50:18.293" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:18.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:18.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:18.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:50:18.294" starttime="20170810 04:50:18.294" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.295" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:50:18.295" starttime="20170810 04:50:17.836" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.295" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:50:18.295" starttime="20170810 04:50:17.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:50:18.295" starttime="20170810 04:50:18.295" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.296" starttime="20170810 04:50:17.835" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:18.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:18.300" starttime="20170810 04:50:18.299" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:18.301" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:18.301" starttime="20170810 04:50:18.300" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:18.301" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:18.301" starttime="20170810 04:50:18.301" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:18.302" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:18.302" starttime="20170810 04:50:18.301" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.477" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:18.477" starttime="20170810 04:50:18.303" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.477" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:18.477" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:18.477" starttime="20170810 04:50:18.302" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.478" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:18.478" starttime="20170810 04:50:18.478" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.479" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:18.479" starttime="20170810 04:50:18.478" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.479" starttime="20170810 04:50:18.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.479" starttime="20170810 04:50:18.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.479" starttime="20170810 04:50:18.297" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:18.480" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:50:18.480" starttime="20170810 04:50:18.479" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:18.482" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:18.482" starttime="20170810 04:50:18.481" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:18.483" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:18.483" starttime="20170810 04:50:18.483" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.483" starttime="20170810 04:50:18.482" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.483" starttime="20170810 04:50:18.481" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.483" starttime="20170810 04:50:18.480" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:18.571" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:18.571" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:18.571" starttime="20170810 04:50:18.483" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:18.572" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:18.573" starttime="20170810 04:50:18.572" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:18.573" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:18.573" starttime="20170810 04:50:18.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.574" starttime="20170810 04:50:18.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.574" starttime="20170810 04:50:18.572" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:18.574" starttime="20170810 04:50:18.571" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:18.574" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:18.574" starttime="20170810 04:50:18.574" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.575" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:18.575" starttime="20170810 04:50:18.297" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.575" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:18.575" starttime="20170810 04:50:18.575" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:18.576" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:18.576" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:18.576" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:50:18.576" starttime="20170810 04:50:18.576" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.576" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:50:18.576" starttime="20170810 04:50:18.296" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:18.577" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:50:18.577" starttime="20170810 04:50:18.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:50:18.577" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:50:18.577" starttime="20170810 04:50:18.577" status="FAIL"></status>
</kw>
<status endtime="20170810 04:50:18.578" starttime="20170810 04:50:17.835" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:28.583" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:28.583" starttime="20170810 04:50:28.583" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:28.584" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:28.584" starttime="20170810 04:50:28.584" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:28.584" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:28.585" starttime="20170810 04:50:28.584" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:28.585" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:28.585" starttime="20170810 04:50:28.585" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:28.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:28.819" starttime="20170810 04:50:28.586" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:28.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:28.819" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:28.819" starttime="20170810 04:50:28.585" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:28.820" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:28.820" starttime="20170810 04:50:28.819" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:28.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:28.821" starttime="20170810 04:50:28.820" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.821" starttime="20170810 04:50:28.582" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.821" starttime="20170810 04:50:28.582" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.821" starttime="20170810 04:50:28.581" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:28.822" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:50:28.822" starttime="20170810 04:50:28.821" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:28.824" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:28.824" starttime="20170810 04:50:28.823" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:28.824" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:28.825" starttime="20170810 04:50:28.824" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.825" starttime="20170810 04:50:28.824" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.825" starttime="20170810 04:50:28.822" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.825" starttime="20170810 04:50:28.822" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:28.888" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:28.888" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:28.888" starttime="20170810 04:50:28.825" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:28.890" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:28.890" starttime="20170810 04:50:28.889" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:28.891" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:28.891" starttime="20170810 04:50:28.890" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.891" starttime="20170810 04:50:28.890" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.891" starttime="20170810 04:50:28.889" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.891" starttime="20170810 04:50:28.888" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:28.891" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:28.891" starttime="20170810 04:50:28.891" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:28.892" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:28.892" starttime="20170810 04:50:28.580" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:28.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:28.892" starttime="20170810 04:50:28.892" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:28.893" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:28.893" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:28.893" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:50:28.893" starttime="20170810 04:50:28.893" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:28.893" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:50:28.893" starttime="20170810 04:50:28.579" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:28.894" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:50:28.894" starttime="20170810 04:50:28.579" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:50:28.894" starttime="20170810 04:50:28.894" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:28.894" starttime="20170810 04:50:28.579" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:28.898" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:28.898" starttime="20170810 04:50:28.898" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:28.899" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:28.899" starttime="20170810 04:50:28.899" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:28.900" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:28.900" starttime="20170810 04:50:28.899" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:28.900" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:28.900" starttime="20170810 04:50:28.900" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:29.085" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:29.085" starttime="20170810 04:50:28.901" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:29.085" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:29.085" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:29.085" starttime="20170810 04:50:28.900" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:29.086" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:29.086" starttime="20170810 04:50:29.086" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:29.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:29.087" starttime="20170810 04:50:29.086" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.087" starttime="20170810 04:50:28.897" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.087" starttime="20170810 04:50:28.897" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.087" starttime="20170810 04:50:28.896" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:29.088" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:50:29.088" starttime="20170810 04:50:29.087" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:29.090" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:29.090" starttime="20170810 04:50:29.089" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:29.091" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:29.091" starttime="20170810 04:50:29.090" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.091" starttime="20170810 04:50:29.090" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.091" starttime="20170810 04:50:29.089" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.091" starttime="20170810 04:50:29.088" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:29.178" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:29.178" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:29.179" starttime="20170810 04:50:29.091" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:29.180" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:29.180" starttime="20170810 04:50:29.180" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:29.181" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:29.181" starttime="20170810 04:50:29.181" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.181" starttime="20170810 04:50:29.180" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.182" starttime="20170810 04:50:29.179" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:29.182" starttime="20170810 04:50:29.179" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:29.182" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:29.182" starttime="20170810 04:50:29.182" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:29.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:29.182" starttime="20170810 04:50:28.895" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:29.183" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:29.183" starttime="20170810 04:50:29.183" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:29.183" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:29.184" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:29.184" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:50:29.184" starttime="20170810 04:50:29.183" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:29.184" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:50:29.184" starttime="20170810 04:50:28.895" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:29.184" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:50:29.184" starttime="20170810 04:50:28.895" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:50:29.185" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:50:29.185" starttime="20170810 04:50:29.185" status="FAIL"></status>
</kw>
<status endtime="20170810 04:50:29.185" starttime="20170810 04:50:28.578" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:39.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:39.191" starttime="20170810 04:50:39.191" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:39.192" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:39.192" starttime="20170810 04:50:39.192" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:39.193" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:39.193" starttime="20170810 04:50:39.192" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:39.193" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:39.193" starttime="20170810 04:50:39.193" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.436" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:39.436" starttime="20170810 04:50:39.194" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.436" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:39.436" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:39.436" starttime="20170810 04:50:39.194" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.437" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:39.437" starttime="20170810 04:50:39.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.438" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:39.438" starttime="20170810 04:50:39.438" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.438" starttime="20170810 04:50:39.189" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.438" starttime="20170810 04:50:39.189" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.438" starttime="20170810 04:50:39.188" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:39.439" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:50:39.439" starttime="20170810 04:50:39.439" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:39.441" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:39.441" starttime="20170810 04:50:39.440" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:39.442" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:39.442" starttime="20170810 04:50:39.442" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.442" starttime="20170810 04:50:39.441" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.442" starttime="20170810 04:50:39.440" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.442" starttime="20170810 04:50:39.439" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:39.506" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:39.506" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:39.506" starttime="20170810 04:50:39.442" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:39.508" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:39.508" starttime="20170810 04:50:39.507" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:39.509" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:39.509" starttime="20170810 04:50:39.509" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.509" starttime="20170810 04:50:39.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.509" starttime="20170810 04:50:39.507" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.509" starttime="20170810 04:50:39.506" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:39.510" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:39.510" starttime="20170810 04:50:39.510" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.510" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:39.510" starttime="20170810 04:50:39.188" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:39.511" starttime="20170810 04:50:39.510" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:39.511" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:39.511" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:39.511" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:50:39.511" starttime="20170810 04:50:39.511" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.512" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:50:39.512" starttime="20170810 04:50:39.187" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.512" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:50:39.512" starttime="20170810 04:50:39.187" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:50:39.512" starttime="20170810 04:50:39.512" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.513" starttime="20170810 04:50:39.186" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:39.516" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:39.516" starttime="20170810 04:50:39.516" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:39.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:39.517" starttime="20170810 04:50:39.517" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:39.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:39.518" starttime="20170810 04:50:39.517" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:39.518" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:39.519" starttime="20170810 04:50:39.518" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.728" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:39.728" starttime="20170810 04:50:39.519" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.728" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:39.728" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:39.728" starttime="20170810 04:50:39.519" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.729" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:39.729" starttime="20170810 04:50:39.728" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:39.729" starttime="20170810 04:50:39.729" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.730" starttime="20170810 04:50:39.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.730" starttime="20170810 04:50:39.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.730" starttime="20170810 04:50:39.514" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:39.730" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:50:39.730" starttime="20170810 04:50:39.730" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:39.733" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:39.733" starttime="20170810 04:50:39.732" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:39.734" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:39.734" starttime="20170810 04:50:39.733" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.734" starttime="20170810 04:50:39.733" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.734" starttime="20170810 04:50:39.731" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.734" starttime="20170810 04:50:39.731" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:39.867" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:39.867" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:39.867" starttime="20170810 04:50:39.734" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:39.869" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:39.869" starttime="20170810 04:50:39.869" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:39.870" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:39.870" starttime="20170810 04:50:39.870" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.870" starttime="20170810 04:50:39.869" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.870" starttime="20170810 04:50:39.868" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:39.870" starttime="20170810 04:50:39.868" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:39.871" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:39.871" starttime="20170810 04:50:39.871" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:39.871" starttime="20170810 04:50:39.514" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:39.872" starttime="20170810 04:50:39.871" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:39.872" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:39.872" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:39.873" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:50:39.873" starttime="20170810 04:50:39.872" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.873" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:50:39.873" starttime="20170810 04:50:39.513" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:39.873" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:50:39.874" starttime="20170810 04:50:39.513" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:50:39.874" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:50:39.875" starttime="20170810 04:50:39.874" status="FAIL"></status>
</kw>
<status endtime="20170810 04:50:39.875" starttime="20170810 04:50:39.186" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:49.880" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:49.880" starttime="20170810 04:50:49.880" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:49.881" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:49.881" starttime="20170810 04:50:49.880" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:49.887" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:49.887" starttime="20170810 04:50:49.881" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:49.888" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:49.888" starttime="20170810 04:50:49.888" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.219" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:50.219" starttime="20170810 04:50:49.889" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.219" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:50.220" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:50.220" starttime="20170810 04:50:49.889" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.220" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:50.220" starttime="20170810 04:50:50.220" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.221" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:50.221" starttime="20170810 04:50:50.221" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.221" starttime="20170810 04:50:49.879" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.221" starttime="20170810 04:50:49.879" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.221" starttime="20170810 04:50:49.878" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:50.222" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:50:50.222" starttime="20170810 04:50:50.222" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:50.224" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:50.224" starttime="20170810 04:50:50.223" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:50.225" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:50.225" starttime="20170810 04:50:50.225" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.225" starttime="20170810 04:50:50.224" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.225" starttime="20170810 04:50:50.223" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.225" starttime="20170810 04:50:50.222" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:50.288" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:50.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:50.288" starttime="20170810 04:50:50.225" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:50.290" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:50.290" starttime="20170810 04:50:50.289" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:50.291" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:50.291" starttime="20170810 04:50:50.290" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.291" starttime="20170810 04:50:50.290" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.291" starttime="20170810 04:50:50.289" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.291" starttime="20170810 04:50:50.288" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:50.291" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:50.292" starttime="20170810 04:50:50.291" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.292" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:50.292" starttime="20170810 04:50:49.877" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:50.293" starttime="20170810 04:50:50.292" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:50.294" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:50.294" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:50.294" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:50:50.294" starttime="20170810 04:50:50.293" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.294" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:50:50.294" starttime="20170810 04:50:49.877" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.295" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:50:50.295" starttime="20170810 04:50:49.876" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:50:50.295" starttime="20170810 04:50:50.295" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.295" starttime="20170810 04:50:49.876" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:50:50.299" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:50:50.300" starttime="20170810 04:50:50.299" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:50:50.300" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:50:50.300" starttime="20170810 04:50:50.300" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:50:50.301" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:50:50.301" starttime="20170810 04:50:50.300" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:50:50.301" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:50:50.301" starttime="20170810 04:50:50.301" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.479" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:50:50.479" starttime="20170810 04:50:50.302" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.479" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:50:50.479" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:50.479" starttime="20170810 04:50:50.302" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.480" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:50.480" starttime="20170810 04:50:50.479" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.480" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:50.480" starttime="20170810 04:50:50.480" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.481" starttime="20170810 04:50:50.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.481" starttime="20170810 04:50:50.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.481" starttime="20170810 04:50:50.297" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:50:50.481" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:50:50.481" starttime="20170810 04:50:50.481" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:50.483" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:50.483" starttime="20170810 04:50:50.483" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:50.484" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:50:50.484" starttime="20170810 04:50:50.484" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.485" starttime="20170810 04:50:50.484" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.485" starttime="20170810 04:50:50.482" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.485" starttime="20170810 04:50:50.482" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:50:50.572" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:50:50.572" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:50.572" starttime="20170810 04:50:50.485" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:50:50.574" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:50.574" starttime="20170810 04:50:50.574" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:50:50.575" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:50:50.576" starttime="20170810 04:50:50.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.576" starttime="20170810 04:50:50.574" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.576" starttime="20170810 04:50:50.573" status="PASS"></status>
</kw>
<status endtime="20170810 04:50:50.576" starttime="20170810 04:50:50.573" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:50:50.576" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:50:50.576" starttime="20170810 04:50:50.576" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.577" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:50:50.577" starttime="20170810 04:50:50.296" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.577" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:50:50.577" starttime="20170810 04:50:50.577" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:50:50.578" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:50:50.578" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:50:50.578" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:50:50.578" starttime="20170810 04:50:50.578" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.578" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:50:50.578" starttime="20170810 04:50:50.296" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:50:50.579" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:50:50.579" starttime="20170810 04:50:50.295" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:50:50.579" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:50:50.579" starttime="20170810 04:50:50.579" status="FAIL"></status>
</kw>
<status endtime="20170810 04:50:50.580" starttime="20170810 04:50:49.875" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:00.584" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:00.585" starttime="20170810 04:51:00.584" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:00.585" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:00.585" starttime="20170810 04:51:00.585" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:00.586" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:00.586" starttime="20170810 04:51:00.585" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:00.586" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:00.586" starttime="20170810 04:51:00.586" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:00.788" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:00.788" starttime="20170810 04:51:00.587" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:00.788" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:00.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:00.788" starttime="20170810 04:51:00.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:00.789" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:00.789" starttime="20170810 04:51:00.789" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:00.790" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:00.790" starttime="20170810 04:51:00.789" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.790" starttime="20170810 04:51:00.583" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.790" starttime="20170810 04:51:00.583" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.790" starttime="20170810 04:51:00.582" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:00.791" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:51:00.791" starttime="20170810 04:51:00.790" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:00.793" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:00.793" starttime="20170810 04:51:00.792" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:00.794" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:00.794" starttime="20170810 04:51:00.793" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.794" starttime="20170810 04:51:00.793" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.794" starttime="20170810 04:51:00.791" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.794" starttime="20170810 04:51:00.791" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:00.856" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:00.856" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:00.856" starttime="20170810 04:51:00.794" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:00.858" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:00.858" starttime="20170810 04:51:00.858" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:00.859" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:00.859" starttime="20170810 04:51:00.859" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.859" starttime="20170810 04:51:00.858" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.859" starttime="20170810 04:51:00.857" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.860" starttime="20170810 04:51:00.857" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:00.860" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:00.860" starttime="20170810 04:51:00.860" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:00.860" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:00.860" starttime="20170810 04:51:00.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:00.861" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:00.861" starttime="20170810 04:51:00.861" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:00.861" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:00.862" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:00.862" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:51:00.862" starttime="20170810 04:51:00.861" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:00.862" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:51:00.862" starttime="20170810 04:51:00.581" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:00.862" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:51:00.862" starttime="20170810 04:51:00.581" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:51:00.863" starttime="20170810 04:51:00.863" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:00.863" starttime="20170810 04:51:00.580" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:00.866" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:00.867" starttime="20170810 04:51:00.866" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:00.868" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:00.868" starttime="20170810 04:51:00.867" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:00.868" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:00.868" starttime="20170810 04:51:00.868" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:00.869" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:00.869" starttime="20170810 04:51:00.869" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:01.045" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:01.045" starttime="20170810 04:51:00.870" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:01.045" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:01.045" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:01.045" starttime="20170810 04:51:00.869" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:01.046" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:01.046" starttime="20170810 04:51:01.045" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:01.046" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:01.047" starttime="20170810 04:51:01.046" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.047" starttime="20170810 04:51:00.866" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.047" starttime="20170810 04:51:00.865" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.047" starttime="20170810 04:51:00.865" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:01.047" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:51:01.047" starttime="20170810 04:51:01.047" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:01.050" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:01.050" starttime="20170810 04:51:01.049" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:01.051" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:01.051" starttime="20170810 04:51:01.050" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.051" starttime="20170810 04:51:01.050" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.051" starttime="20170810 04:51:01.048" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.051" starttime="20170810 04:51:01.048" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:01.139" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:01.139" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:01.139" starttime="20170810 04:51:01.051" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:01.141" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:01.141" starttime="20170810 04:51:01.140" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:01.142" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:01.142" starttime="20170810 04:51:01.142" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.142" starttime="20170810 04:51:01.141" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.142" starttime="20170810 04:51:01.140" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:01.142" starttime="20170810 04:51:01.139" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:01.143" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:01.143" starttime="20170810 04:51:01.142" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:01.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:01.143" starttime="20170810 04:51:00.864" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:01.143" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:01.144" starttime="20170810 04:51:01.143" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:01.144" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:01.144" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:01.144" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:51:01.144" starttime="20170810 04:51:01.144" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:01.145" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:51:01.145" starttime="20170810 04:51:00.863" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:01.145" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:51:01.145" starttime="20170810 04:51:00.863" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:51:01.145" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:51:01.146" starttime="20170810 04:51:01.145" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:01.146" starttime="20170810 04:51:00.580" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:11.151" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:11.152" starttime="20170810 04:51:11.151" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:11.152" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:11.152" starttime="20170810 04:51:11.152" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:11.153" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:11.153" starttime="20170810 04:51:11.153" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:11.153" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:11.154" starttime="20170810 04:51:11.153" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.333" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:11.333" starttime="20170810 04:51:11.154" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.333" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:11.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:11.333" starttime="20170810 04:51:11.154" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:11.334" starttime="20170810 04:51:11.334" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:11.335" starttime="20170810 04:51:11.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.335" starttime="20170810 04:51:11.150" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.335" starttime="20170810 04:51:11.150" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.335" starttime="20170810 04:51:11.149" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:11.335" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:51:11.336" starttime="20170810 04:51:11.335" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:11.338" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:11.338" starttime="20170810 04:51:11.337" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:11.338" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:11.339" starttime="20170810 04:51:11.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.339" starttime="20170810 04:51:11.338" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.339" starttime="20170810 04:51:11.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.339" starttime="20170810 04:51:11.336" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:11.402" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:11.402" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:11.402" starttime="20170810 04:51:11.339" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:11.404" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:11.404" starttime="20170810 04:51:11.403" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:11.405" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:11.405" starttime="20170810 04:51:11.404" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.405" starttime="20170810 04:51:11.404" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.405" starttime="20170810 04:51:11.403" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.405" starttime="20170810 04:51:11.402" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:11.405" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:11.405" starttime="20170810 04:51:11.405" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.406" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:11.406" starttime="20170810 04:51:11.149" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.406" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:11.406" starttime="20170810 04:51:11.406" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:11.407" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:11.407" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:11.407" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:51:11.407" starttime="20170810 04:51:11.407" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.407" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:51:11.407" starttime="20170810 04:51:11.147" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.408" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:51:11.408" starttime="20170810 04:51:11.147" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:51:11.408" starttime="20170810 04:51:11.408" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.408" starttime="20170810 04:51:11.147" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:11.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:11.412" starttime="20170810 04:51:11.412" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:11.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:11.413" starttime="20170810 04:51:11.412" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:11.413" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:11.413" starttime="20170810 04:51:11.413" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:11.414" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:11.414" starttime="20170810 04:51:11.414" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.612" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:11.612" starttime="20170810 04:51:11.415" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.612" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:11.612" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:11.612" starttime="20170810 04:51:11.414" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:11.613" starttime="20170810 04:51:11.613" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.613" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:11.614" starttime="20170810 04:51:11.613" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.614" starttime="20170810 04:51:11.411" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.614" starttime="20170810 04:51:11.411" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.614" starttime="20170810 04:51:11.410" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:11.615" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:51:11.615" starttime="20170810 04:51:11.614" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:11.617" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:11.617" starttime="20170810 04:51:11.616" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:11.617" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:11.618" starttime="20170810 04:51:11.617" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.618" starttime="20170810 04:51:11.617" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.618" starttime="20170810 04:51:11.615" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.618" starttime="20170810 04:51:11.615" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:11.718" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:11.718" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:11.718" starttime="20170810 04:51:11.618" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:11.720" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:11.721" starttime="20170810 04:51:11.720" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:11.722" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:11.722" starttime="20170810 04:51:11.722" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.722" starttime="20170810 04:51:11.721" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.722" starttime="20170810 04:51:11.719" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:11.722" starttime="20170810 04:51:11.719" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:11.723" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:11.723" starttime="20170810 04:51:11.723" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.723" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:11.723" starttime="20170810 04:51:11.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.724" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:11.724" starttime="20170810 04:51:11.723" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:11.724" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:11.724" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:11.724" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:51:11.725" starttime="20170810 04:51:11.724" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.725" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:51:11.725" starttime="20170810 04:51:11.409" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:11.725" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:51:11.725" starttime="20170810 04:51:11.409" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:51:11.726" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:51:11.726" starttime="20170810 04:51:11.725" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:11.726" starttime="20170810 04:51:11.146" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:21.732" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:21.732" starttime="20170810 04:51:21.731" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:21.733" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:21.733" starttime="20170810 04:51:21.732" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:21.733" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:21.733" starttime="20170810 04:51:21.733" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:21.734" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:21.734" starttime="20170810 04:51:21.734" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.099" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:22.099" starttime="20170810 04:51:21.735" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.099" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:22.099" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:22.099" starttime="20170810 04:51:21.734" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.100" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:22.100" starttime="20170810 04:51:22.099" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.100" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:22.100" starttime="20170810 04:51:22.100" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.101" starttime="20170810 04:51:21.730" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.101" starttime="20170810 04:51:21.730" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.101" starttime="20170810 04:51:21.729" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:22.101" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:51:22.101" starttime="20170810 04:51:22.101" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:22.103" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:22.103" starttime="20170810 04:51:22.103" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:22.104" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:22.104" starttime="20170810 04:51:22.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.105" starttime="20170810 04:51:22.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.105" starttime="20170810 04:51:22.102" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.105" starttime="20170810 04:51:22.102" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:22.167" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:22.167" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:22.167" starttime="20170810 04:51:22.105" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:22.169" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:22.169" starttime="20170810 04:51:22.169" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:22.171" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:22.171" starttime="20170810 04:51:22.170" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.171" starttime="20170810 04:51:22.169" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.171" starttime="20170810 04:51:22.168" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.171" starttime="20170810 04:51:22.168" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:22.171" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:22.171" starttime="20170810 04:51:22.171" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.172" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:22.172" starttime="20170810 04:51:21.728" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.172" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:22.172" starttime="20170810 04:51:22.172" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:22.173" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:22.173" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:22.173" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:51:22.173" starttime="20170810 04:51:22.173" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.173" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:51:22.173" starttime="20170810 04:51:21.728" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.174" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:51:22.174" starttime="20170810 04:51:21.727" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:51:22.174" starttime="20170810 04:51:22.174" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.174" starttime="20170810 04:51:21.727" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:22.178" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:22.178" starttime="20170810 04:51:22.178" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:22.179" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:22.179" starttime="20170810 04:51:22.179" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:22.180" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:22.180" starttime="20170810 04:51:22.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:22.180" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:22.180" starttime="20170810 04:51:22.180" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.383" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:22.383" starttime="20170810 04:51:22.181" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.383" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:22.383" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:22.384" starttime="20170810 04:51:22.181" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.384" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:22.384" starttime="20170810 04:51:22.384" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.385" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:22.385" starttime="20170810 04:51:22.385" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.385" starttime="20170810 04:51:22.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.385" starttime="20170810 04:51:22.177" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.385" starttime="20170810 04:51:22.176" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:22.386" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:51:22.386" starttime="20170810 04:51:22.386" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:22.388" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:22.388" starttime="20170810 04:51:22.387" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:22.389" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:22.389" starttime="20170810 04:51:22.389" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.389" starttime="20170810 04:51:22.389" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.390" starttime="20170810 04:51:22.387" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.390" starttime="20170810 04:51:22.386" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:22.487" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:22.487" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:22.487" starttime="20170810 04:51:22.390" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:22.489" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:22.489" starttime="20170810 04:51:22.488" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:22.490" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:22.490" starttime="20170810 04:51:22.489" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.490" starttime="20170810 04:51:22.489" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.490" starttime="20170810 04:51:22.488" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:22.490" starttime="20170810 04:51:22.487" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:22.490" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:22.490" starttime="20170810 04:51:22.490" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.491" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:22.491" starttime="20170810 04:51:22.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:22.491" starttime="20170810 04:51:22.491" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:22.492" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:22.492" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:22.492" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:51:22.492" starttime="20170810 04:51:22.492" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.492" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:51:22.492" starttime="20170810 04:51:22.175" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:22.493" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:51:22.493" starttime="20170810 04:51:22.174" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:51:22.493" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:51:22.493" starttime="20170810 04:51:22.493" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:22.494" starttime="20170810 04:51:21.727" status="FAIL"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:32.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:32.499" starttime="20170810 04:51:32.499" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:32.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:32.500" starttime="20170810 04:51:32.500" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:32.501" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:32.501" starttime="20170810 04:51:32.500" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:32.502" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:32.502" starttime="20170810 04:51:32.501" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:32.692" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:32.692" starttime="20170810 04:51:32.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:32.692" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:32.692" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:32.692" starttime="20170810 04:51:32.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:32.693" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:32.693" starttime="20170810 04:51:32.693" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:32.694" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:32.694" starttime="20170810 04:51:32.693" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.694" starttime="20170810 04:51:32.498" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.694" starttime="20170810 04:51:32.498" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.694" starttime="20170810 04:51:32.497" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:32.695" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:51:32.695" starttime="20170810 04:51:32.694" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:32.697" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:32.697" starttime="20170810 04:51:32.696" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:32.698" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:32.698" starttime="20170810 04:51:32.697" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.698" starttime="20170810 04:51:32.697" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.698" starttime="20170810 04:51:32.695" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.698" starttime="20170810 04:51:32.695" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:32.785" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:32.785" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:32.785" starttime="20170810 04:51:32.698" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:32.787" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:32.787" starttime="20170810 04:51:32.786" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:32.788" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:32.788" starttime="20170810 04:51:32.787" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.788" starttime="20170810 04:51:32.787" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.788" starttime="20170810 04:51:32.786" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.788" starttime="20170810 04:51:32.785" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:32.788" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:32.788" starttime="20170810 04:51:32.788" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:32.789" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:32.789" starttime="20170810 04:51:32.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:32.789" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:32.789" starttime="20170810 04:51:32.789" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:32.790" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:32.790" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:32.790" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:51:32.790" starttime="20170810 04:51:32.790" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:32.790" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:51:32.790" starttime="20170810 04:51:32.496" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:32.791" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:51:32.791" starttime="20170810 04:51:32.495" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:51:32.791" starttime="20170810 04:51:32.791" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:32.791" starttime="20170810 04:51:32.495" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:32.798" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:32.798" starttime="20170810 04:51:32.798" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:32.799" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:32.799" starttime="20170810 04:51:32.799" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:32.800" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:32.800" starttime="20170810 04:51:32.799" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:32.800" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:32.800" starttime="20170810 04:51:32.800" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.114" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:33.114" starttime="20170810 04:51:32.801" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.114" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:33.114" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:33.115" starttime="20170810 04:51:32.801" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.115" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:33.115" starttime="20170810 04:51:33.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.116" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:33.116" starttime="20170810 04:51:33.115" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.116" starttime="20170810 04:51:32.797" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.116" starttime="20170810 04:51:32.794" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.116" starttime="20170810 04:51:32.793" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:33.117" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:51:33.117" starttime="20170810 04:51:33.116" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:33.119" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:33.119" starttime="20170810 04:51:33.118" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:33.120" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:33.120" starttime="20170810 04:51:33.120" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.120" starttime="20170810 04:51:33.119" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.120" starttime="20170810 04:51:33.118" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.120" starttime="20170810 04:51:33.117" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:33.209" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:33.209" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:33.209" starttime="20170810 04:51:33.121" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:33.211" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:33.211" starttime="20170810 04:51:33.210" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:33.212" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:33.212" starttime="20170810 04:51:33.212" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.212" starttime="20170810 04:51:33.211" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.212" starttime="20170810 04:51:33.210" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.212" starttime="20170810 04:51:33.209" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:33.213" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:33.213" starttime="20170810 04:51:33.213" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.213" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:33.213" starttime="20170810 04:51:32.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.214" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:33.214" starttime="20170810 04:51:33.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:33.214" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:33.214" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:33.214" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:51:33.214" starttime="20170810 04:51:33.214" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.215" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:51:33.215" starttime="20170810 04:51:32.792" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.215" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:51:33.215" starttime="20170810 04:51:32.792" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.216" level="FAIL">Running != Quiesced</msg>
<status endtime="20170810 04:51:33.216" starttime="20170810 04:51:33.215" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:33.216" starttime="20170810 04:51:32.494" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:51:33.216" level="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</msg>
<status endtime="20170810 04:51:33.216" starttime="20170810 04:41:30.932" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:33.216" starttime="20170810 04:41:28.881" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:33.216" starttime="20170810 04:41:21.249" status="FAIL"></status>
</kw>
<status endtime="20170810 04:51:33.217" starttime="20170810 04:41:21.248" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:33.221" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:33.222" starttime="20170810 04:51:33.221" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:33.222" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:33.222" starttime="20170810 04:51:33.222" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:33.223" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:33.223" starttime="20170810 04:51:33.223" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:33.224" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:33.224" starttime="20170810 04:51:33.223" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.423" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:33.423" starttime="20170810 04:51:33.224" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.423" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:33.423" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:33.423" starttime="20170810 04:51:33.224" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.424" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:33.424" starttime="20170810 04:51:33.423" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.425" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:33.425" starttime="20170810 04:51:33.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.425" starttime="20170810 04:51:33.221" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.425" starttime="20170810 04:51:33.220" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.425" starttime="20170810 04:51:33.220" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:33.425" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:51:33.426" starttime="20170810 04:51:33.425" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:33.428" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:33.428" starttime="20170810 04:51:33.427" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:33.429" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:51:33.429" starttime="20170810 04:51:33.429" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.429" starttime="20170810 04:51:33.428" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.429" starttime="20170810 04:51:33.426" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.429" starttime="20170810 04:51:33.426" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:33.517" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:51:33.517" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:33.517" starttime="20170810 04:51:33.429" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:51:33.519" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:33.519" starttime="20170810 04:51:33.518" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:51:33.520" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:51:33.520" starttime="20170810 04:51:33.519" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.520" starttime="20170810 04:51:33.519" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.520" starttime="20170810 04:51:33.518" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:33.520" starttime="20170810 04:51:33.517" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:33.520" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:33.521" starttime="20170810 04:51:33.520" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.521" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:33.521" starttime="20170810 04:51:33.219" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:33.521" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:33.521" starttime="20170810 04:51:33.521" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:33.522" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:33.522" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:33.522" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:51:33.522" starttime="20170810 04:51:33.522" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.522" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:51:33.522" starttime="20170810 04:51:33.218" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.523" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:51:33.523" starttime="20170810 04:51:33.218" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170810 04:51:33.524" starttime="20170810 04:51:33.523" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.524" level="INFO">${status} = True</msg>
<status endtime="20170810 04:51:33.524" starttime="20170810 04:51:33.523" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:33.524" level="INFO">${status} = True</msg>
<status endtime="20170810 04:51:33.524" starttime="20170810 04:51:33.218" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 04:51:33.549" level="INFO">Length is 12</msg>
<status endtime="20170810 04:51:33.549" starttime="20170810 04:51:33.549" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:51:33.567" level="INFO">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:51:36.580" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 04:51:36.580" level="INFO">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.53 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.32 ms
64 bytes from 9.41.166.169:...</msg>
<status endtime="20170810 04:51:36.580" starttime="20170810 04:51:33.550" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 04:51:36.583" level="INFO">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=1.53 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=1.32 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.528 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=9.22 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.528/3.153/9.221/3.523 ms</msg>
<status endtime="20170810 04:51:36.583" starttime="20170810 04:51:36.582" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170810 04:51:36.584" starttime="20170810 04:51:36.583" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.584" starttime="20170810 04:51:33.549" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:51:36.598" level="INFO">${cur_time} = 2017-08-10 04:51:36:597683</msg>
<status endtime="20170810 04:51:36.598" starttime="20170810 04:51:36.597" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:51:36.599" level="INFO">${cur_time} = 20170810045136597683</msg>
<status endtime="20170810 04:51:36.599" starttime="20170810 04:51:36.598" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.599" starttime="20170810 04:51:36.597" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:36.599" level="INFO">${FFDC_TIME} = 20170810045136597683</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:51:36.610" level="INFO">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170810 04:51:36.610" starttime="20170810 04:51:36.609" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 04:51:36.610" level="INFO">${suite_name} = 20170810045136597683_TestsTestBasicPoweron</msg>
<status endtime="20170810 04:51:36.610" starttime="20170810 04:51:36.610" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:51:36.611" level="INFO">${test_name} = PowerOnTest</msg>
<status endtime="20170810 04:51:36.611" starttime="20170810 04:51:36.611" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 04:51:36.611" level="INFO">${test_name} = 20170810045136597683_PowerOnTest</msg>
<status endtime="20170810 04:51:36.612" starttime="20170810 04:51:36.611" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.612" starttime="20170810 04:51:36.609" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:36.612" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/</msg>
<msg timestamp="20170810 04:51:36.612" level="INFO">${FFDC_PREFIX} = 20170810045136597683_</msg>
<msg timestamp="20170810 04:51:36.632" level="INFO">${LOG_PREFIX} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.633" level="INFO">Created directory '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.633" starttime="20170810 04:51:36.632" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:36.638" level="INFO">${FFDC_FILE_PATH} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.659" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.659" starttime="20170810 04:51:36.658" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.659" starttime="20170810 04:51:36.658" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.660" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.660" starttime="20170810 04:51:36.660" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.660" starttime="20170810 04:51:36.659" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.662" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.662" starttime="20170810 04:51:36.661" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.662" starttime="20170810 04:51:36.661" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.663" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.663" starttime="20170810 04:51:36.663" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.663" starttime="20170810 04:51:36.662" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.665" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.665" starttime="20170810 04:51:36.664" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.665" starttime="20170810 04:51:36.664" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.666" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.666" starttime="20170810 04:51:36.666" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.666" starttime="20170810 04:51:36.665" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.667" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.667" starttime="20170810 04:51:36.667" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.667" starttime="20170810 04:51:36.666" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.669" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.669" starttime="20170810 04:51:36.668" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.669" starttime="20170810 04:51:36.668" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.670" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.670" starttime="20170810 04:51:36.670" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.670" starttime="20170810 04:51:36.669" status="PASS"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.672" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.672" starttime="20170810 04:51:36.671" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.672" starttime="20170810 04:51:36.671" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.673" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.673" starttime="20170810 04:51:36.672" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.673" starttime="20170810 04:51:36.672" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.674" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.674" starttime="20170810 04:51:36.674" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.674" starttime="20170810 04:51:36.673" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.676" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.676" starttime="20170810 04:51:36.675" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.676" starttime="20170810 04:51:36.674" status="PASS"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 04:51:36.704" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:36.705" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 04:51:36.785" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:51:36.794" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 04:51:36.794" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 04:51:36.794" level="INFO">${rc} = 0</msg>
<status endtime="20170810 04:51:36.794" starttime="20170810 04:51:36.677" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 04:51:36.795" level="INFO">Length is 0</msg>
<status endtime="20170810 04:51:36.795" starttime="20170810 04:51:36.795" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 04:51:36.795" level="INFO">Length is 11</msg>
<status endtime="20170810 04:51:36.795" starttime="20170810 04:51:36.795" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:36.796" level="INFO">${model_name} = Witherspoon</msg>
<status endtime="20170810 04:51:36.796" starttime="20170810 04:51:36.676" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.797" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.797" starttime="20170810 04:51:36.796" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.797" starttime="20170810 04:51:36.796" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.797" starttime="20170810 04:51:36.670" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.798" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.798" starttime="20170810 04:51:36.798" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.799" starttime="20170810 04:51:36.797" status="PASS"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:51:36.799" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170810 04:51:36.799" starttime="20170810 04:51:36.799" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.801" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.801" starttime="20170810 04:51:36.800" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.801" starttime="20170810 04:51:36.800" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.802" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.802" starttime="20170810 04:51:36.802" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.802" starttime="20170810 04:51:36.801" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.802" starttime="20170810 04:51:36.799" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.803" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.803" starttime="20170810 04:51:36.803" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.804" starttime="20170810 04:51:36.802" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.805" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.805" starttime="20170810 04:51:36.804" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.805" starttime="20170810 04:51:36.804" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.805" starttime="20170810 04:51:36.802" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.806" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.806" starttime="20170810 04:51:36.806" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.806" starttime="20170810 04:51:36.805" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.807" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.807" starttime="20170810 04:51:36.807" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.807" starttime="20170810 04:51:36.806" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.807" starttime="20170810 04:51:36.805" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.808" starttime="20170810 04:51:36.799" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:36.809" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:36.809" starttime="20170810 04:51:36.808" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.809" starttime="20170810 04:51:36.808" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:36.809" starttime="20170810 04:51:36.657" status="PASS"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:51:36.815" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170810 04:51:36.815" starttime="20170810 04:51:36.815" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170810 04:51:36.817" level="INFO">@{method_list} = [ ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC ...</msg>
<status endtime="20170810 04:51:36.817" starttime="20170810 04:51:36.817" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170810 04:51:36.818" starttime="20170810 04:51:36.818" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:36.818" level="INFO">@{ffdc_function_list} = [ Core Files | OS FFDC | FFDC Generic Report | Get Request FFDC | BMC Specific Files | SEL Log ]</msg>
<status endtime="20170810 04:51:36.818" starttime="20170810 04:51:36.817" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:51:36.820" starttime="20170810 04:51:36.820" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:36.820" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:36.820" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:51:36.820" starttime="20170810 04:51:36.820" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:51:36.821" starttime="20170810 04:51:36.821" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 04:51:36.882" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:36.882" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170810 04:51:36.939" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 04:51:36.950" level="INFO">${core_files} = /tmp/core_openpower-occ-c.1110
/tmp/core_openpower-occ-c.1564
/tmp/core_openpower-occ-c.1567
/tmp/core_openpower-occ-c.1569
/tmp/core_openpower-occ-c.1571
/tmp/core_openpower-occ-c.1573</msg>
<msg timestamp="20170810 04:51:36.950" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 04:51:36.950" level="INFO">${rc} = 0</msg>
<status endtime="20170810 04:51:36.950" starttime="20170810 04:51:36.846" status="PASS"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170810 04:51:36.951" level="INFO">@{core_list} = [ /tmp/core_openpower-occ-c.1110 | /tmp/core_openpower-occ-c.1564 | /tmp/core_openpower-occ-c.1567 | /tmp/core_openpower-occ-c.1569 | /tmp/core_openpower-occ-c.1571 | /tmp/core_openpower-occ-c.1573 ]</msg>
<status endtime="20170810 04:51:36.951" starttime="20170810 04:51:36.951" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170810 04:51:36.969" starttime="20170810 04:51:36.961" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170810 04:51:37.639" starttime="20170810 04:51:36.971" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:37.639" starttime="20170810 04:51:36.970" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:37.640" starttime="20170810 04:51:36.969" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:37.640" starttime="20170810 04:51:36.961" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:37.640" starttime="20170810 04:51:36.951" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<kw name="${index} = /tmp/core_openpower-occ-c.1110" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:51:37.963" starttime="20170810 04:51:37.640" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:51:37.998" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:37.998" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1110'.</msg>
<msg timestamp="20170810 04:51:38.055" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:38.068" starttime="20170810 04:51:37.963" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:38.068" starttime="20170810 04:51:37.640" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1564" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:51:38.657" starttime="20170810 04:51:38.069" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:51:38.697" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:38.698" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1564'.</msg>
<msg timestamp="20170810 04:51:38.748" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:38.761" starttime="20170810 04:51:38.657" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:38.761" starttime="20170810 04:51:38.069" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1567" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:51:39.557" starttime="20170810 04:51:38.761" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:51:39.592" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:39.592" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1567'.</msg>
<msg timestamp="20170810 04:51:39.721" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:39.732" starttime="20170810 04:51:39.557" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:39.732" starttime="20170810 04:51:38.761" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1569" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:51:40.300" starttime="20170810 04:51:39.733" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:51:40.335" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:40.335" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1569'.</msg>
<msg timestamp="20170810 04:51:40.382" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:40.393" starttime="20170810 04:51:40.300" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:40.394" starttime="20170810 04:51:39.732" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1571" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:51:41.850" starttime="20170810 04:51:40.394" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:51:41.883" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:41.883" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1571'.</msg>
<msg timestamp="20170810 04:51:41.930" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:41.942" starttime="20170810 04:51:41.850" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:41.942" starttime="20170810 04:51:40.394" status="PASS"></status>
</kw>
<kw name="${index} = /tmp/core_openpower-occ-c.1573" type="foritem">
<kw name="Get File" library="scp">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status endtime="20170810 04:51:42.191" starttime="20170810 04:51:41.942" status="PASS"></status>
</kw>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg timestamp="20170810 04:51:42.225" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:42.225" level="INFO">Executing command 'rm /tmp/core_openpower-occ-c.1573'.</msg>
<msg timestamp="20170810 04:51:42.282" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:42.294" starttime="20170810 04:51:42.192" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.294" starttime="20170810 04:51:41.942" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.294" starttime="20170810 04:51:37.640" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.294" starttime="20170810 04:51:36.846" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.294" starttime="20170810 04:51:36.821" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.295" starttime="20170810 04:51:36.819" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.295" starttime="20170810 04:51:36.819" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:51:42.296" starttime="20170810 04:51:42.296" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:42.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:42.297" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:51:42.297" starttime="20170810 04:51:42.296" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:51:42.297" starttime="20170810 04:51:42.297" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170810 04:51:42.324" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 04:51:42.324" starttime="20170810 04:51:42.323" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.324" starttime="20170810 04:51:42.323" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.324" starttime="20170810 04:51:42.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.324" starttime="20170810 04:51:42.295" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.324" starttime="20170810 04:51:42.295" status="PASS"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:51:42.326" starttime="20170810 04:51:42.326" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:42.326" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:42.326" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:51:42.326" starttime="20170810 04:51:42.325" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:51:42.327" starttime="20170810 04:51:42.327" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:51:42.353" level="INFO">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status endtime="20170810 04:51:42.353" starttime="20170810 04:51:42.352" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:51:42.354" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170810 04:51:42.354" starttime="20170810 04:51:42.354" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 04:51:42.359" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170810 04:51:42.359" starttime="20170810 04:51:42.354" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.362" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.362" starttime="20170810 04:51:42.362" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.362" starttime="20170810 04:51:42.361" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.363" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.363" starttime="20170810 04:51:42.363" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.364" starttime="20170810 04:51:42.362" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.365" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.365" starttime="20170810 04:51:42.364" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.365" starttime="20170810 04:51:42.364" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.366" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.366" starttime="20170810 04:51:42.366" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.366" starttime="20170810 04:51:42.365" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.366" starttime="20170810 04:51:42.360" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.366" starttime="20170810 04:51:42.360" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:42.367" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status endtime="20170810 04:51:42.367" starttime="20170810 04:51:42.367" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:42.438" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:42.439" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170810 04:51:42.495" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:42.495" starttime="20170810 04:51:42.402" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:42.495" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:42.495" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-209"\nVERSION_ID="v1.99.8-209-g68ccdfc"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status endtime="20170810 04:51:42.496" starttime="20170810 04:51:42.367" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:42.496" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-209"
VERSION_ID="v1.99.8-209-g68ccdfc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status endtime="20170810 04:51:42.496" starttime="20170810 04:51:42.496" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:42.497" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:42.497" starttime="20170810 04:51:42.496" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.505" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.505" starttime="20170810 04:51:42.504" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.505" starttime="20170810 04:51:42.503" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.505" starttime="20170810 04:51:42.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.505" starttime="20170810 04:51:42.359" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.505" starttime="20170810 04:51:42.359" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.505" starttime="20170810 04:51:42.359" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.506" starttime="20170810 04:51:42.353" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.506" starttime="20170810 04:51:42.353" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:51:42.507" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status endtime="20170810 04:51:42.507" starttime="20170810 04:51:42.507" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 04:51:42.508" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170810 04:51:42.508" starttime="20170810 04:51:42.507" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.511" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.511" starttime="20170810 04:51:42.510" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.511" starttime="20170810 04:51:42.510" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.512" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.512" starttime="20170810 04:51:42.512" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.513" starttime="20170810 04:51:42.511" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.514" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.514" starttime="20170810 04:51:42.513" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.514" starttime="20170810 04:51:42.513" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:42.515" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:42.515" starttime="20170810 04:51:42.515" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.515" starttime="20170810 04:51:42.514" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.515" starttime="20170810 04:51:42.509" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:42.515" starttime="20170810 04:51:42.509" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:42.516" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status endtime="20170810 04:51:42.516" starttime="20170810 04:51:42.516" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:42.587" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:42.588" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170810 04:51:44.095" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:44.095" starttime="20170810 04:51:42.550" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.095" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:44.096" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState.Q...</msg>
<status endtime="20170810 04:51:44.096" starttime="20170810 04:51:42.516" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:44.096" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Quiesc...</msg>
<status endtime="20170810 04:51:44.096" starttime="20170810 04:51:44.096" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:44.097" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:44.097" starttime="20170810 04:51:44.097" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.103" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.103" starttime="20170810 04:51:44.103" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.103" starttime="20170810 04:51:44.102" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.104" starttime="20170810 04:51:44.097" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.104" starttime="20170810 04:51:42.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.104" starttime="20170810 04:51:42.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.104" starttime="20170810 04:51:42.508" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.104" starttime="20170810 04:51:42.506" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.104" starttime="20170810 04:51:42.506" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:51:44.105" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170810 04:51:44.105" starttime="20170810 04:51:44.105" status="PASS"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 04:51:44.106" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170810 04:51:44.106" starttime="20170810 04:51:44.105" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.110" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.110" starttime="20170810 04:51:44.109" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.110" starttime="20170810 04:51:44.108" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.111" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.111" starttime="20170810 04:51:44.111" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.111" starttime="20170810 04:51:44.110" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.113" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.113" starttime="20170810 04:51:44.112" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.113" starttime="20170810 04:51:44.112" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.114" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.114" starttime="20170810 04:51:44.113" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.114" starttime="20170810 04:51:44.113" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.114" starttime="20170810 04:51:44.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.114" starttime="20170810 04:51:44.107" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:44.115" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status endtime="20170810 04:51:44.115" starttime="20170810 04:51:44.114" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:44.181" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:44.182" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170810 04:51:44.267" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:44.267" starttime="20170810 04:51:44.146" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.268" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:44.268" level="INFO">${ret_values} = (u' 15:59:20 up 16 min,  load average: 0.78, 1.57, 1.28', u'', 0)</msg>
<status endtime="20170810 04:51:44.268" starttime="20170810 04:51:44.115" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:44.269" level="INFO">${stdout} =  15:59:20 up 16 min,  load average: 0.78, 1.57, 1.28</msg>
<status endtime="20170810 04:51:44.269" starttime="20170810 04:51:44.268" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:44.269" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:44.269" starttime="20170810 04:51:44.269" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.276" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.276" starttime="20170810 04:51:44.276" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.276" starttime="20170810 04:51:44.275" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.277" starttime="20170810 04:51:44.270" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.277" starttime="20170810 04:51:44.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.277" starttime="20170810 04:51:44.106" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.280" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.280" starttime="20170810 04:51:44.279" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.280" starttime="20170810 04:51:44.279" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.281" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.281" starttime="20170810 04:51:44.281" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.281" starttime="20170810 04:51:44.280" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.282" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.282" starttime="20170810 04:51:44.282" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.283" starttime="20170810 04:51:44.281" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.284" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.284" starttime="20170810 04:51:44.283" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.284" starttime="20170810 04:51:44.283" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.284" starttime="20170810 04:51:44.278" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.284" starttime="20170810 04:51:44.278" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:44.285" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status endtime="20170810 04:51:44.285" starttime="20170810 04:51:44.284" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:44.354" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:44.355" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170810 04:51:44.423" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:44.423" starttime="20170810 04:51:44.319" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.423" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:44.423" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-d258c7d343cb8ac910acde46236c59094358c91a #1 Thu Aug 10 04:12:14 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status endtime="20170810 04:51:44.423" starttime="20170810 04:51:44.285" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:44.424" level="INFO">${stdout} = Linux witherspoon 4.10.17-d258c7d343cb8ac910acde46236c59094358c91a #1 Thu Aug 10 04:12:14 UTC 2017 armv6l GNU/Linux</msg>
<status endtime="20170810 04:51:44.424" starttime="20170810 04:51:44.424" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:44.424" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:44.425" starttime="20170810 04:51:44.424" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.431" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.431" starttime="20170810 04:51:44.431" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.431" starttime="20170810 04:51:44.430" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.431" starttime="20170810 04:51:44.425" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.431" starttime="20170810 04:51:44.277" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.431" starttime="20170810 04:51:44.277" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.435" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.435" starttime="20170810 04:51:44.434" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.435" starttime="20170810 04:51:44.434" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.436" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.436" starttime="20170810 04:51:44.436" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.436" starttime="20170810 04:51:44.435" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.437" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.438" starttime="20170810 04:51:44.437" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.438" starttime="20170810 04:51:44.437" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.439" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.439" starttime="20170810 04:51:44.438" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.439" starttime="20170810 04:51:44.438" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.439" starttime="20170810 04:51:44.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.439" starttime="20170810 04:51:44.433" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:44.440" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status endtime="20170810 04:51:44.440" starttime="20170810 04:51:44.439" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:44.507" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:44.507" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170810 04:51:44.563" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:44.563" starttime="20170810 04:51:44.471" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:44.563" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status endtime="20170810 04:51:44.563" starttime="20170810 04:51:44.440" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:44.564" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status endtime="20170810 04:51:44.564" starttime="20170810 04:51:44.563" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:44.565" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:44.565" starttime="20170810 04:51:44.564" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:44.571" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:44.571" starttime="20170810 04:51:44.571" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.571" starttime="20170810 04:51:44.570" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.571" starttime="20170810 04:51:44.565" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:44.432" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:44.432" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:44.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:44.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:44.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:42.353" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:42.352" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:42.327" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:42.325" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.572" starttime="20170810 04:51:42.324" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:51:44.574" starttime="20170810 04:51:44.574" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.574" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:44.574" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:51:44.574" starttime="20170810 04:51:44.573" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:51:44.575" starttime="20170810 04:51:44.574" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:51:44.601" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170810 04:51:44.601" starttime="20170810 04:51:44.600" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:51:44.602" level="INFO">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170810 04:51:44.602" starttime="20170810 04:51:44.602" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:44.603" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_record_log.txt</msg>
<status endtime="20170810 04:51:44.603" starttime="20170810 04:51:44.603" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:44.606" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:44.607" starttime="20170810 04:51:44.606" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:44.607" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:44.608" starttime="20170810 04:51:44.607" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:44.608" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:44.608" starttime="20170810 04:51:44.608" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:44.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:44.609" starttime="20170810 04:51:44.609" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:44.790" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:44.790" starttime="20170810 04:51:44.610" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.790" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:44.790" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:44.790" starttime="20170810 04:51:44.609" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:44.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:44.791" starttime="20170810 04:51:44.791" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:44.792" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:44.792" starttime="20170810 04:51:44.791" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.792" starttime="20170810 04:51:44.605" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.792" starttime="20170810 04:51:44.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.792" starttime="20170810 04:51:44.604" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:44.793" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170810 04:51:44.793" starttime="20170810 04:51:44.792" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:44.793" starttime="20170810 04:51:44.793" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:44.836" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:51:44.836" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:51:44.836" starttime="20170810 04:51:44.794" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:44.837" starttime="20170810 04:51:44.836" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:44.837" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:44.837" starttime="20170810 04:51:44.837" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:44.837" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:51:44.837" starttime="20170810 04:51:44.603" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:44.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 04:51:44.839" level="FAIL">404 != 200</msg>
<status endtime="20170810 04:51:44.839" starttime="20170810 04:51:44.838" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:51:44.839" level="INFO">${status} = False</msg>
<status endtime="20170810 04:51:44.839" starttime="20170810 04:51:44.838" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 04:51:44.840" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:44.840" starttime="20170810 04:51:44.840" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.840" starttime="20170810 04:51:44.839" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:44.840" starttime="20170810 04:51:44.602" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:44.841" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_led.txt</msg>
<status endtime="20170810 04:51:44.841" starttime="20170810 04:51:44.841" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:44.844" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:44.845" starttime="20170810 04:51:44.844" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:44.845" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:44.845" starttime="20170810 04:51:44.845" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:44.846" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:44.846" starttime="20170810 04:51:44.846" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:44.847" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:44.847" starttime="20170810 04:51:44.846" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.070" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:45.070" starttime="20170810 04:51:44.847" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:45.070" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:45.071" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:45.071" starttime="20170810 04:51:44.847" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.071" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:45.071" starttime="20170810 04:51:45.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.072" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:45.072" starttime="20170810 04:51:45.072" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.072" starttime="20170810 04:51:44.843" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.072" starttime="20170810 04:51:44.843" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.073" starttime="20170810 04:51:44.842" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:45.073" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170810 04:51:45.073" starttime="20170810 04:51:45.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:45.074" starttime="20170810 04:51:45.073" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:45.132" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:51:45.132" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:51:45.132" starttime="20170810 04:51:45.074" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:45.133" starttime="20170810 04:51:45.132" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:45.133" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:45.133" starttime="20170810 04:51:45.133" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:45.133" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170810 04:51:45.133" starttime="20170810 04:51:44.841" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 04:51:45.135" level="FAIL">404 != 200</msg>
<status endtime="20170810 04:51:45.135" starttime="20170810 04:51:45.134" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:51:45.135" level="INFO">${status} = False</msg>
<status endtime="20170810 04:51:45.135" starttime="20170810 04:51:45.134" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 04:51:45.136" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:45.136" starttime="20170810 04:51:45.136" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.136" starttime="20170810 04:51:45.135" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.136" starttime="20170810 04:51:44.840" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:45.137" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_inventory.txt</msg>
<status endtime="20170810 04:51:45.137" starttime="20170810 04:51:45.136" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:45.139" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:45.140" starttime="20170810 04:51:45.139" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:45.141" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:45.141" starttime="20170810 04:51:45.140" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:45.141" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:45.141" starttime="20170810 04:51:45.141" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:45.142" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:45.142" starttime="20170810 04:51:45.142" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.428" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:45.428" starttime="20170810 04:51:45.143" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:45.428" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:45.428" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:45.428" starttime="20170810 04:51:45.142" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.429" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:45.429" starttime="20170810 04:51:45.428" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:45.429" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:45.430" starttime="20170810 04:51:45.429" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.430" starttime="20170810 04:51:45.139" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.430" starttime="20170810 04:51:45.138" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:45.430" starttime="20170810 04:51:45.138" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:45.430" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170810 04:51:45.430" starttime="20170810 04:51:45.430" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:45.431" starttime="20170810 04:51:45.431" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:47.595" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:51:47.595" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:47.595" starttime="20170810 04:51:45.431" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:47.596" starttime="20170810 04:51:47.596" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:47.596" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:47.596" starttime="20170810 04:51:47.596" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:47.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:47.597" starttime="20170810 04:51:45.137" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:47.598" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:47.598" starttime="20170810 04:51:47.597" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:47.598" level="INFO">${status} = True</msg>
<status endtime="20170810 04:51:47.598" starttime="20170810 04:51:47.597" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 04:51:47.599" starttime="20170810 04:51:47.598" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 04:51:47.602" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y230UF72R00C    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }, 
    "/xyz/openbmc_project/inventory/system/fault": {
      "endpoints": [
        "/xyz/openbmc_project/logging/entry/14", 
        "/xyz/openbmc_project/logging/entry/13", 
        "/xyz/openbmc_project/logging/entry/11", 
        "/xyz/openbmc_project/logging/entry/10", 
        "/xyz/openbmc_project/logging/entry/8", 
        "/xyz/openbmc_project/logging/entry/7", 
        "/xyz/openbmc_project/logging/entry/5", 
        "/xyz/openbmc_project/logging/entry/4"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:47.602" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 04:51:47.603" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170810 04:51:47.603" starttime="20170810 04:51:47.599" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:47.604" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_inventory.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:47.604" starttime="20170810 04:51:47.604" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:47.605" starttime="20170810 04:51:47.603" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:47.605" starttime="20170810 04:51:45.136" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:47.605" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_sensor_list.txt</msg>
<status endtime="20170810 04:51:47.605" starttime="20170810 04:51:47.605" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:47.608" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:47.609" starttime="20170810 04:51:47.608" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:47.609" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:47.609" starttime="20170810 04:51:47.609" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:47.610" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:47.610" starttime="20170810 04:51:47.610" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:47.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:47.611" starttime="20170810 04:51:47.610" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:47.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:47.900" starttime="20170810 04:51:47.611" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:47.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:47.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:47.900" starttime="20170810 04:51:47.611" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:47.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:47.901" starttime="20170810 04:51:47.900" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:47.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:47.901" starttime="20170810 04:51:47.901" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:47.901" starttime="20170810 04:51:47.607" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:47.901" starttime="20170810 04:51:47.607" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:47.902" starttime="20170810 04:51:47.606" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:47.902" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170810 04:51:47.902" starttime="20170810 04:51:47.902" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:47.903" starttime="20170810 04:51:47.902" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:48.070" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:51:48.071" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:48.071" starttime="20170810 04:51:47.903" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:48.071" starttime="20170810 04:51:48.071" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:48.072" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:48.072" starttime="20170810 04:51:48.072" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:48.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:48.072" starttime="20170810 04:51:47.606" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:48.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:48.073" starttime="20170810 04:51:48.073" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:48.073" level="INFO">${status} = True</msg>
<status endtime="20170810 04:51:48.073" starttime="20170810 04:51:48.072" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 04:51:48.074" starttime="20170810 04:51:48.074" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 04:51:48.075" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:48.075" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 04:51:48.075" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170810 04:51:48.075" starttime="20170810 04:51:48.074" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:48.076" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_sensor_list.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:48.077" starttime="20170810 04:51:48.076" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.077" starttime="20170810 04:51:48.075" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.077" starttime="20170810 04:51:47.605" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:48.077" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_elog.txt</msg>
<status endtime="20170810 04:51:48.077" starttime="20170810 04:51:48.077" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:48.080" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:48.081" starttime="20170810 04:51:48.080" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:48.081" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:48.081" starttime="20170810 04:51:48.081" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:48.082" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:48.082" starttime="20170810 04:51:48.082" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:48.083" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:48.083" starttime="20170810 04:51:48.082" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:48.300" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:48.300" starttime="20170810 04:51:48.083" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:48.300" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:48.301" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:48.301" starttime="20170810 04:51:48.083" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:48.301" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:48.301" starttime="20170810 04:51:48.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:48.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:48.302" starttime="20170810 04:51:48.301" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.302" starttime="20170810 04:51:48.079" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.302" starttime="20170810 04:51:48.079" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.302" starttime="20170810 04:51:48.078" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:48.303" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170810 04:51:48.303" starttime="20170810 04:51:48.302" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:48.303" starttime="20170810 04:51:48.303" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:48.842" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:51:48.842" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:48.842" starttime="20170810 04:51:48.304" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:48.843" starttime="20170810 04:51:48.842" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:48.843" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:48.843" starttime="20170810 04:51:48.843" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:48.843" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:48.844" starttime="20170810 04:51:48.078" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:48.845" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:48.845" starttime="20170810 04:51:48.844" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:48.845" level="INFO">${status} = True</msg>
<status endtime="20170810 04:51:48.845" starttime="20170810 04:51:48.844" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170810 04:51:48.845" starttime="20170810 04:51:48.845" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 04:51:48.848" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1c 70 c5 a6 00 00 00 09 1c 71 b8 42 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 41 90 00 00 41 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 37 d2 5e 88 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 37 d2 6b 79 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 37 d2 77 f8 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 37 ec 10 9a 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 37 ec 1e a8 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 37 ec 2e 8e 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 37 ec 98 3d 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 37 ef 62 a2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 37 ef e5 91 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 37 ef f8 7d 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 37 f0 05 5a 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 37 f0 11 85 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 37 f0 1e b6 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 01 fa a1 6d 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 01 fa b3 87 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 01 fa c3 b0 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 01 fb 35 d1 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 16 0f 21 f6 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 16 0f ae 7a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 16 0f c1 82 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 16 0f db 20 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 16 0f e8 bf 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 16 0f f5 7a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775710327, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/10/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1c 8b f3 ff 00 00 00 09 28 27 34 bb 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 42 90 00 00 42 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 0a 32 70 31 20 33 57 35 70 6b 69 20 72 64 75 20 6f 70 6e 32 65 20 31 0a 70 33 69 34 72 20 20 64 6f 32 31 6e 33 32 65 20 0a 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775712067, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [], 
      "Id": 12, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775718324, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 03 23 63 e9 00 00 00 09 03 24 b6 ee 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 54 90 00 00 54 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 04 95 38 87 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 04 95 45 06 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 04 95 51 e5 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 04 ae c9 3c 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 04 ae d7 01 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 04 ae e6 9a 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 04 af 53 59 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 04 b2 79 6f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 04 b2 fb b8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 04 b3 0f 1f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 04 b3 1c 27 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 04 b3 2a 2b 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 04 b3 37 79 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 0a a7 1b 09 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0a a7 2d 14 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 0a a7 3e 2d 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0a a7 b1 0e 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 0d 3a 6f 94 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 0d 3b 06 4a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 0d 3b 18 f4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 0d 3b 27 a7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 0d 3b 34 8a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 0d 3b 41 e2 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 13, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775840097, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 03 25 96 bd 00 00 00 09 04 5c ad 2f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 55 90 00 00 55 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 69 72 20 32 20 31 70 69 72 20 33 32 34 20 64 6f 6e 65 0a 31 31 32 33 33 31 35 32 33 20 20 33 64 64 6f 6f 20 6e 6e 64 65 65 0a 6f 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 14, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775841679, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/15": {
      "AdditionalData": [], 
      "Id": 15, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775847917, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/16": {
      "AdditionalData": [], 
      "Id": 16, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775957914, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775115878, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775038582, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 0a 1a 1d 0a 34 00 00 00 0a 1a 1d d8 f1 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1b 90 00 00 1b 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 53 1b 11 0b 9d 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 53 1b 11 17 f8 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 53 1b 11 25 19 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 53 1b 2b 6b 26 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 53 1b 2b 79 2a 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 53 1b 2b 89 0a 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 53 1b 2b f7 ca 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 53 1c f4 23 c2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 53 1c f4 ae 9f 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 92 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 53 1c f4 c1 77 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 53 1c f4 ce 6f 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 53 1c f4 da 83 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 53 1c f4 e7 16 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 54 09 c2 4f b0 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 54 09 c2 63 6a 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 54 09 c2 73 26 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 54 09 c2 dd fb 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 54 14 a3 6b 36 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 54 14 a3 f6 5b 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 93 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 54 14 a4 08 e9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 54 14 a4 16 e9 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 54 14 a4 24 ab 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 54 14 a4 32 d2 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775454682, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 0a 1a 1e 38 bd 00 00 00 0a 10 52 57 98 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1c 90 00 00 1c 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 70 20 70 69 72 20 57 20 64 6b 64 6f 6e 65 32 6f 6e 65 0a 75 0a 31 70 20 33 70 33 69 20 72 64 6f 20 6e 65 0a 32 31 33 35 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775456371, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775462705, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1b 3c 58 ad 00 00 00 09 1b 3d b4 b3 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2e 90 00 00 2e 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 23 2f da 7f 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 23 2f e7 37 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 2f f3 ba 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 23 49 fd 62 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 23 4a 0b 33 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 23 4a 1b 58 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 23 4a 87 0a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 23 b2 92 d8 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 23 b3 13 e1 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 23 b3 26 7f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 23 b3 33 5e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 23 b3 40 5c 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 b3 4d 95 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 3a a6 16 60 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 3a a6 26 44 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 3a a6 36 e2 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 3a a6 a2 bf 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 28 4d 7f c3 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 28 4e 15 25 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 28 4e 28 e4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 28 4e 36 57 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 28 4e 44 a5 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 28 4e 51 a7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775583904, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1b 3e 02 04 00 00 00 09 12 e6 12 3a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2f 90 00 00 2f 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 20 75 57 70 6b 20 32 75 70 70 69 31 72 20 33 20 33 70 20 64 32 69 31 6f 33 72 6e 34 20 65 20 64 0a 6f 32 6e 31 65 33 0a 35 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775585483, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775591644, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:48.849" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 04:51:48.849" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/10": {
            "AdditionalData": [
                "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system",
                "ESEL...</msg>
<status endtime="20170810 04:51:48.849" starttime="20170810 04:51:48.846" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:48.851" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_elog.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_elog.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:48.851" starttime="20170810 04:51:48.850" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.851" starttime="20170810 04:51:48.849" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.851" starttime="20170810 04:51:48.077" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.851" starttime="20170810 04:51:44.602" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.601" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.600" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.575" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.572" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:48.852" starttime="20170810 04:51:44.572" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:51:48.854" starttime="20170810 04:51:48.853" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:48.854" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:48.854" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:51:48.854" starttime="20170810 04:51:48.853" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:51:48.855" starttime="20170810 04:51:48.854" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 04:51:48.881" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170810 04:51:48.881" starttime="20170810 04:51:48.880" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 04:51:48.882" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd...</msg>
<status endtime="20170810 04:51:48.882" starttime="20170810 04:51:48.882" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:48.883" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_proc_list.txt</msg>
<status endtime="20170810 04:51:48.883" starttime="20170810 04:51:48.882" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:51:48.884" starttime="20170810 04:51:48.884" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:48.885" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status endtime="20170810 04:51:48.885" starttime="20170810 04:51:48.884" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:48.951" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:48.951" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170810 04:51:49.270" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:49.270" starttime="20170810 04:51:48.915" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:49.270" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:49.270" level="INFO">${ret_values} = (u'Mem: 189884K used, 242372K free, 14904K shrd, 17028K buff, 75692K cached\nCPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq\nLoad average: 0.80 1.57 1.28 1/163 2901\n  PID  PPID ...</msg>
<status endtime="20170810 04:51:49.271" starttime="20170810 04:51:48.885" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:49.271" level="INFO">${stdout} = Mem: 189884K used, 242372K free, 14904K shrd, 17028K buff, 75692K cached
CPU:   0% usr  18% sys   0% nic  81% idle   0% io   0% irq   0% sirq
Load average: 0.80 1.57 1.28 1/163 2901
  PID  PPID USER  ...</msg>
<status endtime="20170810 04:51:49.271" starttime="20170810 04:51:49.271" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:49.272" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:49.272" starttime="20170810 04:51:49.271" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:49.279" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_proc_list.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:49.279" starttime="20170810 04:51:49.278" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.279" starttime="20170810 04:51:49.277" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.279" starttime="20170810 04:51:49.272" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.279" starttime="20170810 04:51:48.883" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.279" starttime="20170810 04:51:48.882" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:49.280" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_dmesg.txt</msg>
<status endtime="20170810 04:51:49.280" starttime="20170810 04:51:49.279" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:51:49.281" starttime="20170810 04:51:49.281" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:49.282" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status endtime="20170810 04:51:49.282" starttime="20170810 04:51:49.281" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:49.348" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:49.349" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170810 04:51:49.406" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:49.406" starttime="20170810 04:51:49.313" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:49.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:49.406" level="INFO">${ret_values} = (u'[    2.770000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB\n[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB\n[    2.7...</msg>
<status endtime="20170810 04:51:49.407" starttime="20170810 04:51:49.282" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:49.407" level="INFO">${stdout} = [    2.770000] aspeed-smc 1e630000.flash-controller: CE0 window [ 0x30000000 - 0x37800000 ] 120MB
[    2.780000] aspeed-smc 1e630000.flash-controller: CE0 window too small for chip 128MB
[    2.780000...</msg>
<status endtime="20170810 04:51:49.407" starttime="20170810 04:51:49.407" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:49.408" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:49.408" starttime="20170810 04:51:49.408" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:49.415" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_dmesg.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:49.415" starttime="20170810 04:51:49.414" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.415" starttime="20170810 04:51:49.413" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.415" starttime="20170810 04:51:49.408" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.415" starttime="20170810 04:51:49.280" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.415" starttime="20170810 04:51:49.279" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:49.416" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_procinfo.txt</msg>
<status endtime="20170810 04:51:49.416" starttime="20170810 04:51:49.416" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:51:49.417" starttime="20170810 04:51:49.417" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:49.418" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status endtime="20170810 04:51:49.418" starttime="20170810 04:51:49.417" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:49.485" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:49.485" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170810 04:51:49.532" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:49.532" starttime="20170810 04:51:49.449" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:49.532" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:49.532" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status endtime="20170810 04:51:49.532" starttime="20170810 04:51:49.418" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:49.533" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status endtime="20170810 04:51:49.533" starttime="20170810 04:51:49.533" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:49.533" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:49.534" starttime="20170810 04:51:49.533" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:49.540" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_procinfo.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:49.540" starttime="20170810 04:51:49.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.540" starttime="20170810 04:51:49.539" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.540" starttime="20170810 04:51:49.534" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.541" starttime="20170810 04:51:49.416" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:49.541" starttime="20170810 04:51:49.415" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:49.541" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_journalctl.txt</msg>
<status endtime="20170810 04:51:49.541" starttime="20170810 04:51:49.541" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:51:49.543" starttime="20170810 04:51:49.542" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:49.544" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status endtime="20170810 04:51:49.544" starttime="20170810 04:51:49.543" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:49.611" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:49.611" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170810 04:51:53.409" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:53.410" starttime="20170810 04:51:49.575" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:53.411" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:53.416" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:25 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status endtime="20170810 04:51:53.416" starttime="20170810 04:51:49.544" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:53.418" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:25 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status endtime="20170810 04:51:53.418" starttime="20170810 04:51:53.416" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:53.419" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:53.419" starttime="20170810 04:51:53.418" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:53.432" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_journalctl.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:53.432" starttime="20170810 04:51:53.426" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.432" starttime="20170810 04:51:53.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.432" starttime="20170810 04:51:53.419" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.432" starttime="20170810 04:51:49.542" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.432" starttime="20170810 04:51:49.541" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:53.433" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_meminfo.txt</msg>
<status endtime="20170810 04:51:53.433" starttime="20170810 04:51:53.432" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:51:53.434" starttime="20170810 04:51:53.434" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:53.435" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status endtime="20170810 04:51:53.435" starttime="20170810 04:51:53.435" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:53.502" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:53.502" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170810 04:51:53.550" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:53.550" starttime="20170810 04:51:53.466" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:53.550" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:53.550" level="INFO">${ret_values} = (u'MemTotal:         432256 kB\nMemFree:          242248 kB\nMemAvailable:     318576 kB\nBuffers:           17028 kB\nCached:            75696 kB\nSwapCached:            0 kB\nActive:           13067...</msg>
<status endtime="20170810 04:51:53.550" starttime="20170810 04:51:53.435" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:53.551" level="INFO">${stdout} = MemTotal:         432256 kB
MemFree:          242248 kB
MemAvailable:     318576 kB
Buffers:           17028 kB
Cached:            75696 kB
SwapCached:            0 kB
Active:           130672 kB
Inac...</msg>
<status endtime="20170810 04:51:53.551" starttime="20170810 04:51:53.550" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:53.551" level="INFO">${stderr} = </msg>
<status endtime="20170810 04:51:53.551" starttime="20170810 04:51:53.551" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:53.558" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_meminfo.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:53.558" starttime="20170810 04:51:53.557" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.558" starttime="20170810 04:51:53.557" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.558" starttime="20170810 04:51:53.552" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.558" starttime="20170810 04:51:53.433" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:53.558" starttime="20170810 04:51:53.432" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:53.559" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_proc_fd_active_list.txt</msg>
<status endtime="20170810 04:51:53.559" starttime="20170810 04:51:53.559" status="PASS"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170810 04:51:53.561" starttime="20170810 04:51:53.560" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:51:53.561" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status endtime="20170810 04:51:53.561" starttime="20170810 04:51:53.561" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 04:51:53.633" level="INFO">path_separator=/
port=22
prompt=# 
alias=bmc_connection
width=80
newline=

timeout=25 seconds
term_type=vt100
index=1
height=24
encoding=UTF-8
host=9.41.166.169</msg>
<msg timestamp="20170810 04:51:53.634" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170810 04:51:54.144" level="INFO">Command exited with return code 0.</msg>
<status endtime="20170810 04:51:54.144" starttime="20170810 04:51:53.595" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:54.145" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:54.146" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status endtime="20170810 04:51:54.146" starttime="20170810 04:51:53.562" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 04:51:54.147" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status endtime="20170810 04:51:54.147" starttime="20170810 04:51:54.146" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 04:51:54.147" level="INFO">${stderr} = ls: /proc/2906/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status endtime="20170810 04:51:54.147" starttime="20170810 04:51:54.147" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:54.154" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:54.154" starttime="20170810 04:51:54.154" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:54.153" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:54.148" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:53.559" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:53.558" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.882" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.881" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.881" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.881" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.880" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.855" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.155" starttime="20170810 04:51:48.852" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.156" starttime="20170810 04:51:48.852" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170810 04:51:54.157" starttime="20170810 04:51:54.157" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:54.157" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:54.157" level="INFO">${ret_values} = None</msg>
<status endtime="20170810 04:51:54.158" starttime="20170810 04:51:54.157" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170810 04:51:54.158" starttime="20170810 04:51:54.158" status="PASS"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:54.186" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:54.186" starttime="20170810 04:51:54.186" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:54.187" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:54.187" starttime="20170810 04:51:54.187" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:54.188" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:54.188" starttime="20170810 04:51:54.187" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:54.188" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:54.188" starttime="20170810 04:51:54.188" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:54.374" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:54.374" starttime="20170810 04:51:54.189" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:54.375" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:54.375" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:54.375" starttime="20170810 04:51:54.189" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:54.375" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:54.375" starttime="20170810 04:51:54.375" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:54.376" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:54.376" starttime="20170810 04:51:54.376" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.376" starttime="20170810 04:51:54.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.376" starttime="20170810 04:51:54.185" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:54.376" starttime="20170810 04:51:54.184" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:54.377" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170810 04:51:54.377" starttime="20170810 04:51:54.377" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:54.378" starttime="20170810 04:51:54.378" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:55.038" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170810 04:51:55.038" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.038" starttime="20170810 04:51:54.378" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:55.039" starttime="20170810 04:51:55.038" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:55.039" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:55.039" starttime="20170810 04:51:55.039" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.040" starttime="20170810 04:51:54.184" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.041" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.041" starttime="20170810 04:51:55.040" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.041" level="INFO">${status} = True</msg>
<status endtime="20170810 04:51:55.041" starttime="20170810 04:51:55.040" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status endtime="20170810 04:51:55.041" starttime="20170810 04:51:55.041" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:55.043" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/10": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1c 70 c5 a6 00 00 00 09 1c 71 b8 42 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 41 90 00 00 41 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 37 d2 5e 88 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 37 d2 6b 79 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 37 d2 77 f8 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 37 ec 10 9a 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 37 ec 1e a8 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 37 ec 2e 8e 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 37 ec 98 3d 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 37 ef 62 a2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 37 ef e5 91 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 37 ef f8 7d 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 37 f0 05 5a 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 37 f0 11 85 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 37 f0 1e b6 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 01 fa a1 6d 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 01 fa b3 87 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 01 fa c3 b0 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 01 fb 35 d1 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 16 0f 21 f6 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 16 0f ae 7a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 16 0f c1 82 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 16 0f db 20 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 16 0f e8 bf 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 16 0f f5 7a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 10, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775710327, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/10/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1c 8b f3 ff 00 00 00 09 28 27 34 bb 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 42 90 00 00 42 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 0a 32 70 31 20 33 57 35 70 6b 69 20 72 64 75 20 6f 70 6e 32 65 20 31 0a 70 33 69 34 72 20 20 64 6f 32 31 6e 33 32 65 20 0a 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 11, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775712067, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/11/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/12": {
      "AdditionalData": [], 
      "Id": 12, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775718324, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/13": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 03 23 63 e9 00 00 00 09 03 24 b6 ee 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 54 90 00 00 54 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 04 95 38 87 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 04 95 45 06 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 04 95 51 e5 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 04 ae c9 3c 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 04 ae d7 01 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 04 ae e6 9a 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 04 af 53 59 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 04 b2 79 6f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 04 b2 fb b8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 04 b3 0f 1f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 04 b3 1c 27 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 04 b3 2a 2b 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 04 b3 37 79 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 0a a7 1b 09 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0a a7 2d 14 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 0a a7 3e 2d 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0a a7 b1 0e 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 0d 3a 6f 94 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 0d 3b 06 4a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 0d 3b 18 f4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 0d 3b 27 a7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 0d 3b 34 8a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 0d 3b 41 e2 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 13, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775840097, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/13/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 03 25 96 bd 00 00 00 09 04 5c ad 2f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 55 90 00 00 55 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 69 72 20 32 20 31 70 69 72 20 33 32 34 20 64 6f 6e 65 0a 31 31 32 33 33 31 35 32 33 20 20 33 64 64 6f 6f 20 6e 6e 64 65 65 0a 6f 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 14, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775841679, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/14/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/15": {
      "AdditionalData": [], 
      "Id": 15, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775847917, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/16": {
      "AdditionalData": [], 
      "Id": 16, 
      "Message": "org.open_power.Host.Error.WatchdogTimedOut", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775957914, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775115878, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775038582, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/4": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 0a 1a 1d 0a 34 00 00 00 0a 1a 1d d8 f1 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1b 90 00 00 1b 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 53 1b 11 0b 9d 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 53 1b 11 17 f8 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 53 1b 11 25 19 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 53 1b 2b 6b 26 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 53 1b 2b 79 2a 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 53 1b 2b 89 0a 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 53 1b 2b f7 ca 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 53 1c f4 23 c2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 53 1c f4 ae 9f 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 92 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 53 1c f4 c1 77 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 53 1c f4 ce 6f 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 53 1c f4 da 83 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 53 1c f4 e7 16 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 54 09 c2 4f b0 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 54 09 c2 63 6a 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 54 09 c2 73 26 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 54 09 c2 dd fb 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 54 14 a3 6b 36 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 54 14 a3 f6 5b 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 93 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 54 14 a4 08 e9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 54 14 a4 16 e9 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 54 14 a4 24 ab 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 54 14 a4 32 d2 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 4, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775454682, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/4/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 0a 1a 1e 38 bd 00 00 00 0a 10 52 57 98 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1c 90 00 00 1c 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 70 20 70 69 72 20 57 20 64 6b 64 6f 6e 65 32 6f 6e 65 0a 75 0a 31 70 20 33 70 33 69 20 72 64 6f 20 6e 65 0a 32 31 33 35 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 5, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775456371, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/5/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/6": {
      "AdditionalData": [], 
      "Id": 6, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775462705, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/7": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1b 3c 58 ad 00 00 00 09 1b 3d b4 b3 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2e 90 00 00 2e 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 23 2f da 7f 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 23 2f e7 37 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 2f f3 ba 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 23 49 fd 62 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 23 4a 0b 33 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 23 4a 1b 58 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 23 4a 87 0a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 23 b2 92 d8 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 23 b3 13 e1 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 23 b3 26 7f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 23 b3 33 5e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 23 b3 40 5c 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 b3 4d 95 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 3a a6 16 60 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 3a a6 26 44 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 3a a6 36 e2 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 3a a6 a2 bf 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 28 4d 7f c3 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 28 4e 15 25 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 28 4e 28 e4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 28 4e 36 57 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 28 4e 44 a5 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 28 4e 51 a7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
      ], 
      "Id": 7, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775583904, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/7/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8": {
      "AdditionalData": [
        "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
        "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1b 3e 02 04 00 00 00 09 12 e6 12 3a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2f 90 00 00 2f 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 20 75 57 70 6b 20 32 75 70 70 69 31 72 20 33 20 33 70 20 64 32 69 31 6f 33 72 6e 34 20 65 20 64 0a 6f 32 6e 31 65 33 0a 35 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
      ], 
      "Id": 8, 
      "Message": "org.open_power.Host.Event.Error.Event", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775585483, 
      "associations": [
        [
          "callout", 
          "fault", 
          "/xyz/openbmc_project/inventory/system"
        ]
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/8/callout": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system"
      ]
    }, 
    "/xyz/openbmc_project/logging/entry/9": {
      "AdditionalData": [], 
      "Id": 9, 
      "Message": "org.open_power.Host.Error.Checkstop", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775591644, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:55.044" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:55.044" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/8': {u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Timestamp': 1501775585483, u'Id': 8, u'as...</msg>
<status endtime="20170810 04:51:55.044" starttime="20170810 04:51:55.042" status="PASS"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170810 04:51:55.045" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/10', u'/xyz/openbmc_project/logging/entry/10/callout', u'/xyz/openbmc_project/logging/entry/11', u'/xyz/openbmc_project/logging/entry/11/callout', u'/xyz/openbmc_...</msg>
<status endtime="20170810 04:51:55.045" starttime="20170810 04:51:55.045" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 04:51:55.045" level="INFO">${logpath} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel</msg>
<status endtime="20170810 04:51:55.046" starttime="20170810 04:51:55.045" status="PASS"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:55.046" level="INFO">Created file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:55.046" starttime="20170810 04:51:55.046" status="PASS"></status>
</kw>
<kw name="${entry_path} IN [ @{esel_list} ]" type="for">
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:55.047" starttime="20170810 04:51:55.047" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:55.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:55.051" starttime="20170810 04:51:55.050" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:55.052" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:55.052" starttime="20170810 04:51:55.052" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:55.052" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:55.053" starttime="20170810 04:51:55.052" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:55.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:55.053" starttime="20170810 04:51:55.053" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.240" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:55.240" starttime="20170810 04:51:55.054" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.240" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:55.240" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.240" starttime="20170810 04:51:55.053" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.241" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.241" starttime="20170810 04:51:55.240" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.241" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.242" starttime="20170810 04:51:55.241" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.242" starttime="20170810 04:51:55.050" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.242" starttime="20170810 04:51:55.049" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.242" starttime="20170810 04:51:55.049" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:55.242" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/10/attr/AdditionalData</msg>
<status endtime="20170810 04:51:55.243" starttime="20170810 04:51:55.242" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:55.243" starttime="20170810 04:51:55.243" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:55.327" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/10/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:55.327" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.327" starttime="20170810 04:51:55.243" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:55.328" starttime="20170810 04:51:55.328" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:55.328" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:55.328" starttime="20170810 04:51:55.328" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.329" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.329" starttime="20170810 04:51:55.048" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.329" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.329" starttime="20170810 04:51:55.329" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:55.330" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1c 70 c5 a6 00 00 00 09 1c 71 b8 42 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 41 90 00 00 41 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 37 d2 5e 88 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 37 d2 6b 79 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 37 d2 77 f8 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 37 ec 10 9a 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 37 ec 1e a8 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 37 ec 2e 8e 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 37 ec 98 3d 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 37 ef 62 a2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 37 ef e5 91 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 37 ef f8 7d 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 37 f0 05 5a 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 37 f0 11 85 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 37 f0 1e b6 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4c 01 fa a1 6d 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4c 01 fa b3 87 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4c 01 fa c3 b0 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4c 01 fb 35 d1 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4c 16 0f 21 f6 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4c 16 0f ae 7a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4c 16 0f c1 82 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4c 16 0f db 20 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4c 16 0f e8 bf 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4c 16 0f f5 7a 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:55.330" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:55.330" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 04:51:55.330" starttime="20170810 04:51:55.330" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.331" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1c 70 c5 a6 00 00 00 09 1c 71 b8 42 42 00 0...</msg>
<status endtime="20170810 04:51:55.331" starttime="20170810 04:51:55.047" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:55.331" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:55.331" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:55.332" starttime="20170810 04:51:55.331" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:55.333" starttime="20170810 04:51:55.332" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:55.333" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:55.333" starttime="20170810 04:51:55.333" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:55.335" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:55.335" starttime="20170810 04:51:55.334" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.335" starttime="20170810 04:51:55.333" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:55.336" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:55.336" starttime="20170810 04:51:55.336" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.336" starttime="20170810 04:51:55.335" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.336" starttime="20170810 04:51:55.047" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/10/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:55.337" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:55.337" starttime="20170810 04:51:55.337" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.337" starttime="20170810 04:51:55.336" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:55.338" starttime="20170810 04:51:55.338" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:55.343" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:55.344" starttime="20170810 04:51:55.343" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:55.345" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:55.345" starttime="20170810 04:51:55.344" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:55.345" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:55.346" starttime="20170810 04:51:55.345" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:55.346" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:55.346" starttime="20170810 04:51:55.346" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.553" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:55.553" starttime="20170810 04:51:55.348" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.553" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:55.553" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.553" starttime="20170810 04:51:55.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.554" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.554" starttime="20170810 04:51:55.553" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.554" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.555" starttime="20170810 04:51:55.554" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.555" starttime="20170810 04:51:55.342" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.555" starttime="20170810 04:51:55.341" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.555" starttime="20170810 04:51:55.340" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:55.555" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/11/attr/AdditionalData</msg>
<status endtime="20170810 04:51:55.555" starttime="20170810 04:51:55.555" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:55.556" starttime="20170810 04:51:55.556" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:55.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/11/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:55.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.639" starttime="20170810 04:51:55.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:55.640" starttime="20170810 04:51:55.639" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:55.640" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:55.640" starttime="20170810 04:51:55.640" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.640" starttime="20170810 04:51:55.339" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.641" starttime="20170810 04:51:55.641" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:55.642" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1c 8b f3 ff 00 00 00 09 28 27 34 bb 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 42 90 00 00 42 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 0a 32 70 31 20 33 57 35 70 6b 69 20 72 64 75 20 6f 70 6e 32 65 20 31 0a 70 33 69 34 72 20 20 64 6f 32 31 6e 33 32 65 20 0a 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:55.642" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:55.642" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 04:51:55.642" starttime="20170810 04:51:55.641" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.642" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1c 8b f3 ff 00 00 00 09 28 27 34 bb 42 00 0...</msg>
<status endtime="20170810 04:51:55.642" starttime="20170810 04:51:55.338" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:55.643" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:55.643" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:55.643" starttime="20170810 04:51:55.642" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:55.643" starttime="20170810 04:51:55.643" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:55.644" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:55.644" starttime="20170810 04:51:55.644" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:55.645" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:55.645" starttime="20170810 04:51:55.645" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.645" starttime="20170810 04:51:55.644" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:55.646" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:55.647" starttime="20170810 04:51:55.646" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.647" starttime="20170810 04:51:55.646" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.647" starttime="20170810 04:51:55.337" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/11/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:55.648" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:55.648" starttime="20170810 04:51:55.647" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.648" starttime="20170810 04:51:55.647" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/12" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:55.649" starttime="20170810 04:51:55.648" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:55.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:55.653" starttime="20170810 04:51:55.652" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:55.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:55.653" starttime="20170810 04:51:55.653" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:55.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:55.654" starttime="20170810 04:51:55.653" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:55.654" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:55.654" starttime="20170810 04:51:55.654" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.890" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:55.890" starttime="20170810 04:51:55.655" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:55.890" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:55.890" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:55.890" starttime="20170810 04:51:55.655" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.891" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.891" starttime="20170810 04:51:55.891" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:55.892" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:55.892" starttime="20170810 04:51:55.891" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.892" starttime="20170810 04:51:55.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.892" starttime="20170810 04:51:55.651" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:55.892" starttime="20170810 04:51:55.650" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:55.893" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/12/attr/AdditionalData</msg>
<status endtime="20170810 04:51:55.893" starttime="20170810 04:51:55.892" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:55.893" starttime="20170810 04:51:55.893" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:56.057" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/12/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:56.058" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.058" starttime="20170810 04:51:55.894" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:56.058" starttime="20170810 04:51:56.058" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:56.059" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:56.059" starttime="20170810 04:51:56.059" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.059" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.059" starttime="20170810 04:51:55.650" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.060" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.060" starttime="20170810 04:51:56.059" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:56.060" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:56.060" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:56.061" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:51:56.061" starttime="20170810 04:51:56.060" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.061" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:51:56.061" starttime="20170810 04:51:55.649" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:56.061" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:51:56.061" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:51:56.061" starttime="20170810 04:51:56.061" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.062" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:56.062" starttime="20170810 04:51:56.062" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.062" starttime="20170810 04:51:55.648" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/13" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:56.063" starttime="20170810 04:51:56.063" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:56.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:56.067" starttime="20170810 04:51:56.066" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:56.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:56.067" starttime="20170810 04:51:56.067" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:56.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:56.068" starttime="20170810 04:51:56.068" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:56.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:56.069" starttime="20170810 04:51:56.068" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.246" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:56.246" starttime="20170810 04:51:56.069" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.246" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:56.246" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.246" starttime="20170810 04:51:56.069" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.247" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.247" starttime="20170810 04:51:56.246" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.247" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.247" starttime="20170810 04:51:56.247" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.248" starttime="20170810 04:51:56.066" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.248" starttime="20170810 04:51:56.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.248" starttime="20170810 04:51:56.065" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:56.248" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/13/attr/AdditionalData</msg>
<status endtime="20170810 04:51:56.248" starttime="20170810 04:51:56.248" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:56.249" starttime="20170810 04:51:56.249" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:56.336" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/13/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:56.336" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.336" starttime="20170810 04:51:56.249" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:56.337" starttime="20170810 04:51:56.336" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:56.337" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:56.337" starttime="20170810 04:51:56.337" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.337" starttime="20170810 04:51:56.064" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.338" starttime="20170810 04:51:56.338" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:56.339" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 03 23 63 e9 00 00 00 09 03 24 b6 ee 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 54 90 00 00 54 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 04 95 38 87 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 04 95 45 06 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 04 95 51 e5 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 04 ae c9 3c 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 04 ae d7 01 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 04 ae e6 9a 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 04 af 53 59 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 04 b2 79 6f 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 04 b2 fb b8 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 13 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 04 b3 0f 1f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 04 b3 1c 27 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 04 b3 2a 2b 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 04 b3 37 79 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 0a a7 1b 09 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 0a a7 2d 14 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 0a a7 3e 2d 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 0a a7 b1 0e 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 0d 3a 6f 94 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 0d 3b 06 4a 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 0d 3b 18 f4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 0d 3b 27 a7 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 0d 3b 34 8a 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 0d 3b 41 e2 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:56.339" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:56.340" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 04:51:56.340" starttime="20170810 04:51:56.339" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.340" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 03 23 63 e9 00 00 00 09 03 24 b6 ee 42 00 0...</msg>
<status endtime="20170810 04:51:56.340" starttime="20170810 04:51:56.063" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:56.340" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:56.341" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:56.341" starttime="20170810 04:51:56.340" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:56.341" starttime="20170810 04:51:56.341" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:56.342" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:56.342" starttime="20170810 04:51:56.341" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:56.343" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:56.343" starttime="20170810 04:51:56.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.343" starttime="20170810 04:51:56.342" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:56.344" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:56.344" starttime="20170810 04:51:56.344" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.345" starttime="20170810 04:51:56.343" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.345" starttime="20170810 04:51:56.062" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/13/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:56.345" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:56.346" starttime="20170810 04:51:56.345" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.346" starttime="20170810 04:51:56.345" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/14" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:56.346" starttime="20170810 04:51:56.346" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:56.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:56.350" starttime="20170810 04:51:56.349" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:56.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:56.351" starttime="20170810 04:51:56.350" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:56.351" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:56.352" starttime="20170810 04:51:56.351" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:56.352" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:56.353" starttime="20170810 04:51:56.352" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.530" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:56.530" starttime="20170810 04:51:56.354" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.530" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:56.530" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.530" starttime="20170810 04:51:56.353" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.531" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.531" starttime="20170810 04:51:56.530" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.531" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.531" starttime="20170810 04:51:56.531" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.532" starttime="20170810 04:51:56.349" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.532" starttime="20170810 04:51:56.348" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.532" starttime="20170810 04:51:56.348" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:56.532" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/14/attr/AdditionalData</msg>
<status endtime="20170810 04:51:56.532" starttime="20170810 04:51:56.532" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:56.533" starttime="20170810 04:51:56.533" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:56.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/14/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:56.639" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.639" starttime="20170810 04:51:56.533" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:56.640" starttime="20170810 04:51:56.640" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:56.641" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:56.641" starttime="20170810 04:51:56.641" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.641" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.641" starttime="20170810 04:51:56.347" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.642" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.642" starttime="20170810 04:51:56.642" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:56.643" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 03 25 96 bd 00 00 00 09 04 5c ad 2f 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 55 90 00 00 55 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 69 72 20 32 20 31 70 69 72 20 33 32 34 20 64 6f 6e 65 0a 31 31 32 33 33 31 35 32 33 20 20 33 64 64 6f 6f 20 6e 6e 64 65 65 0a 6f 0a 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:56.643" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:56.643" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 04:51:56.643" starttime="20170810 04:51:56.643" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.644" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 03 25 96 bd 00 00 00 09 04 5c ad 2f 42 00 0...</msg>
<status endtime="20170810 04:51:56.644" starttime="20170810 04:51:56.347" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:56.644" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:56.645" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:56.645" starttime="20170810 04:51:56.644" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:56.645" starttime="20170810 04:51:56.645" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:56.646" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:56.646" starttime="20170810 04:51:56.645" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:56.647" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:56.647" starttime="20170810 04:51:56.647" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.647" starttime="20170810 04:51:56.646" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:56.648" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:56.648" starttime="20170810 04:51:56.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.649" starttime="20170810 04:51:56.648" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.649" starttime="20170810 04:51:56.346" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/14/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:56.650" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:56.650" starttime="20170810 04:51:56.649" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.650" starttime="20170810 04:51:56.649" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/15" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:56.651" starttime="20170810 04:51:56.650" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:56.654" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:56.655" starttime="20170810 04:51:56.653" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:56.655" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:56.655" starttime="20170810 04:51:56.655" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:56.656" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:56.656" starttime="20170810 04:51:56.656" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:56.657" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:56.657" starttime="20170810 04:51:56.657" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.867" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:56.867" starttime="20170810 04:51:56.658" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:56.867" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:56.867" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:56.867" starttime="20170810 04:51:56.658" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.868" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.868" starttime="20170810 04:51:56.867" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:56.869" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:56.869" starttime="20170810 04:51:56.868" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.869" starttime="20170810 04:51:56.653" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.869" starttime="20170810 04:51:56.652" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:56.869" starttime="20170810 04:51:56.652" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:56.870" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/15/attr/AdditionalData</msg>
<status endtime="20170810 04:51:56.870" starttime="20170810 04:51:56.869" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:56.870" starttime="20170810 04:51:56.870" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:57.055" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/15/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:57.055" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.055" starttime="20170810 04:51:56.870" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:57.056" starttime="20170810 04:51:57.056" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:57.057" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:57.057" starttime="20170810 04:51:57.056" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.057" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.057" starttime="20170810 04:51:56.651" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.058" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.058" starttime="20170810 04:51:57.057" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:57.058" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:57.058" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:57.058" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:51:57.058" starttime="20170810 04:51:57.058" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.059" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:51:57.059" starttime="20170810 04:51:56.651" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:57.059" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:51:57.059" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:51:57.059" starttime="20170810 04:51:57.059" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.060" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:57.060" starttime="20170810 04:51:57.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.060" starttime="20170810 04:51:56.650" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/16" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:57.061" starttime="20170810 04:51:57.061" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:57.067" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:57.067" starttime="20170810 04:51:57.066" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:57.068" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:57.068" starttime="20170810 04:51:57.068" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:57.069" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:57.069" starttime="20170810 04:51:57.068" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:57.069" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:57.069" starttime="20170810 04:51:57.069" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.336" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:57.336" starttime="20170810 04:51:57.070" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.336" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:57.336" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.336" starttime="20170810 04:51:57.070" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.337" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.337" starttime="20170810 04:51:57.337" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.338" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.338" starttime="20170810 04:51:57.337" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.338" starttime="20170810 04:51:57.065" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.338" starttime="20170810 04:51:57.064" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.338" starttime="20170810 04:51:57.063" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:57.339" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/16/attr/AdditionalData</msg>
<status endtime="20170810 04:51:57.339" starttime="20170810 04:51:57.338" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:57.339" starttime="20170810 04:51:57.339" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:57.420" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/16/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:57.421" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.421" starttime="20170810 04:51:57.340" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:57.421" starttime="20170810 04:51:57.421" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:57.422" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:57.422" starttime="20170810 04:51:57.421" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.422" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.422" starttime="20170810 04:51:57.062" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.423" starttime="20170810 04:51:57.422" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:57.423" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:57.423" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:57.423" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:51:57.423" starttime="20170810 04:51:57.423" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.424" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:51:57.424" starttime="20170810 04:51:57.062" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:57.424" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:51:57.424" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:51:57.424" starttime="20170810 04:51:57.424" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.425" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:57.425" starttime="20170810 04:51:57.424" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.425" starttime="20170810 04:51:57.060" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/2" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:57.426" starttime="20170810 04:51:57.425" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:57.429" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:57.430" starttime="20170810 04:51:57.429" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:57.430" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:57.430" starttime="20170810 04:51:57.430" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:57.431" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:57.431" starttime="20170810 04:51:57.431" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:57.432" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:57.432" starttime="20170810 04:51:57.431" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.648" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:57.648" starttime="20170810 04:51:57.432" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.648" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:57.648" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.648" starttime="20170810 04:51:57.432" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.649" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.649" starttime="20170810 04:51:57.648" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.649" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.649" starttime="20170810 04:51:57.649" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.649" starttime="20170810 04:51:57.428" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.650" starttime="20170810 04:51:57.428" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.650" starttime="20170810 04:51:57.427" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:57.650" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status endtime="20170810 04:51:57.650" starttime="20170810 04:51:57.650" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:57.651" starttime="20170810 04:51:57.651" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:57.736" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:57.737" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.737" starttime="20170810 04:51:57.651" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:57.737" starttime="20170810 04:51:57.737" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:57.738" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:57.738" starttime="20170810 04:51:57.738" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.738" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.738" starttime="20170810 04:51:57.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.739" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.739" starttime="20170810 04:51:57.738" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:57.739" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:57.739" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:57.739" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:51:57.739" starttime="20170810 04:51:57.739" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.740" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:51:57.740" starttime="20170810 04:51:57.426" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:57.740" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:51:57.740" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:51:57.740" starttime="20170810 04:51:57.740" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.741" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:57.741" starttime="20170810 04:51:57.741" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.741" starttime="20170810 04:51:57.425" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/3" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:57.742" starttime="20170810 04:51:57.742" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:57.746" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:57.746" starttime="20170810 04:51:57.745" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:57.747" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:57.747" starttime="20170810 04:51:57.747" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:57.748" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:57.748" starttime="20170810 04:51:57.747" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:57.749" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:57.749" starttime="20170810 04:51:57.748" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:57.963" starttime="20170810 04:51:57.750" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:57.963" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:57.964" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:57.964" starttime="20170810 04:51:57.749" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.964" starttime="20170810 04:51:57.964" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:57.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:57.965" starttime="20170810 04:51:57.965" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.965" starttime="20170810 04:51:57.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.965" starttime="20170810 04:51:57.744" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:57.965" starttime="20170810 04:51:57.743" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:57.966" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status endtime="20170810 04:51:57.966" starttime="20170810 04:51:57.965" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:57.966" starttime="20170810 04:51:57.966" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:58.047" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:58.047" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.048" starttime="20170810 04:51:57.967" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:58.048" starttime="20170810 04:51:58.048" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:58.049" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:58.049" starttime="20170810 04:51:58.048" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.049" starttime="20170810 04:51:57.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.050" starttime="20170810 04:51:58.049" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:58.050" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:58.050" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:58.050" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:51:58.050" starttime="20170810 04:51:58.050" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.051" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:51:58.051" starttime="20170810 04:51:57.742" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:58.051" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:51:58.051" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:51:58.051" starttime="20170810 04:51:58.051" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.052" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:58.052" starttime="20170810 04:51:58.052" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.053" starttime="20170810 04:51:57.741" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:58.054" starttime="20170810 04:51:58.053" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:58.061" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:58.062" starttime="20170810 04:51:58.061" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:58.063" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:58.063" starttime="20170810 04:51:58.062" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:58.064" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:58.064" starttime="20170810 04:51:58.063" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:58.065" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:58.065" starttime="20170810 04:51:58.064" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.300" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:58.300" starttime="20170810 04:51:58.065" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.300" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:58.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.300" starttime="20170810 04:51:58.065" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.301" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.301" starttime="20170810 04:51:58.301" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.302" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.302" starttime="20170810 04:51:58.301" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.302" starttime="20170810 04:51:58.060" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.302" starttime="20170810 04:51:58.057" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.302" starttime="20170810 04:51:58.056" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:58.303" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/4/attr/AdditionalData</msg>
<status endtime="20170810 04:51:58.303" starttime="20170810 04:51:58.302" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:58.303" starttime="20170810 04:51:58.303" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:58.410" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/4/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:58.410" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.410" starttime="20170810 04:51:58.304" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:58.411" starttime="20170810 04:51:58.410" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:58.411" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:58.411" starttime="20170810 04:51:58.411" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.411" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.411" starttime="20170810 04:51:58.055" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.412" starttime="20170810 04:51:58.411" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:58.413" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 0a 1a 1d 0a 34 00 00 00 0a 1a 1d d8 f1 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1b 90 00 00 1b 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 53 1b 11 0b 9d 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 53 1b 11 17 f8 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 53 1b 11 25 19 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 53 1b 2b 6b 26 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 53 1b 2b 79 2a 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 53 1b 2b 89 0a 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 53 1b 2b f7 ca 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 53 1c f4 23 c2 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 53 1c f4 ae 9f 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 92 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 53 1c f4 c1 77 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 53 1c f4 ce 6f 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 53 1c f4 da 83 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 53 1c f4 e7 16 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 54 09 c2 4f b0 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 54 09 c2 63 6a 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 54 09 c2 73 26 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 54 09 c2 dd fb 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 54 14 a3 6b 36 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 54 14 a3 f6 5b 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 93 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 54 14 a4 08 e9 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 54 14 a4 16 e9 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 54 14 a4 24 ab 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 54 14 a4 32 d2 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:58.413" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:58.413" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 04:51:58.413" starttime="20170810 04:51:58.412" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.413" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 0a 1a 1d 0a 34 00 00 00 0a 1a 1d d8 f1 42 00 0...</msg>
<status endtime="20170810 04:51:58.413" starttime="20170810 04:51:58.054" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:58.414" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:58.414" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:58.414" starttime="20170810 04:51:58.414" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:58.415" starttime="20170810 04:51:58.414" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:58.415" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:58.415" starttime="20170810 04:51:58.415" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:58.416" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:58.416" starttime="20170810 04:51:58.416" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.417" starttime="20170810 04:51:58.415" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:58.418" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:58.418" starttime="20170810 04:51:58.417" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.418" starttime="20170810 04:51:58.417" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.418" starttime="20170810 04:51:58.053" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/4/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:58.419" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:58.419" starttime="20170810 04:51:58.418" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.419" starttime="20170810 04:51:58.418" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:58.420" starttime="20170810 04:51:58.419" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:58.423" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:58.424" starttime="20170810 04:51:58.423" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:58.424" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:58.424" starttime="20170810 04:51:58.424" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:58.425" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:58.425" starttime="20170810 04:51:58.425" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:58.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:58.426" starttime="20170810 04:51:58.425" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.694" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:58.694" starttime="20170810 04:51:58.426" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.694" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:58.694" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.694" starttime="20170810 04:51:58.426" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.695" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.695" starttime="20170810 04:51:58.694" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.696" starttime="20170810 04:51:58.695" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.696" starttime="20170810 04:51:58.423" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.696" starttime="20170810 04:51:58.422" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.696" starttime="20170810 04:51:58.422" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:58.696" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/5/attr/AdditionalData</msg>
<status endtime="20170810 04:51:58.696" starttime="20170810 04:51:58.696" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:58.697" starttime="20170810 04:51:58.697" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:58.786" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/5/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:58.786" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.786" starttime="20170810 04:51:58.697" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:58.787" starttime="20170810 04:51:58.787" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:58.787" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:58.787" starttime="20170810 04:51:58.787" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.788" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:58.788" starttime="20170810 04:51:58.421" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:58.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:58.788" starttime="20170810 04:51:58.788" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:58.789" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 0a 1a 1e 38 bd 00 00 00 0a 10 52 57 98 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 1c 90 00 00 1c 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 75 70 20 70 69 72 20 57 20 64 6b 64 6f 6e 65 32 6f 6e 65 0a 75 0a 31 70 20 33 70 33 69 20 72 64 6f 20 6e 65 0a 32 31 33 35 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:58.789" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:58.789" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 04:51:58.789" starttime="20170810 04:51:58.789" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:58.790" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 0a 1a 1e 38 bd 00 00 00 0a 10 52 57 98 42 00 0...</msg>
<status endtime="20170810 04:51:58.790" starttime="20170810 04:51:58.420" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:58.790" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:58.790" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:58.790" starttime="20170810 04:51:58.790" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:58.791" starttime="20170810 04:51:58.790" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:58.791" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:58.791" starttime="20170810 04:51:58.791" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:58.793" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:58.793" starttime="20170810 04:51:58.793" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.793" starttime="20170810 04:51:58.792" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:58.794" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:58.794" starttime="20170810 04:51:58.794" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.794" starttime="20170810 04:51:58.793" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.795" starttime="20170810 04:51:58.419" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/5/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:58.795" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:58.795" starttime="20170810 04:51:58.795" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:58.795" starttime="20170810 04:51:58.795" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/6" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:58.796" starttime="20170810 04:51:58.796" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:58.800" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:58.800" starttime="20170810 04:51:58.799" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:58.800" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:58.800" starttime="20170810 04:51:58.800" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:58.801" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:58.801" starttime="20170810 04:51:58.801" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:58.802" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:58.802" starttime="20170810 04:51:58.801" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.011" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:59.011" starttime="20170810 04:51:58.802" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:59.011" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.011" starttime="20170810 04:51:58.802" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.012" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.012" starttime="20170810 04:51:59.011" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.013" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.013" starttime="20170810 04:51:59.012" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.013" starttime="20170810 04:51:58.799" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.013" starttime="20170810 04:51:58.798" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.013" starttime="20170810 04:51:58.798" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:59.014" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/6/attr/AdditionalData</msg>
<status endtime="20170810 04:51:59.014" starttime="20170810 04:51:59.013" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:59.014" starttime="20170810 04:51:59.014" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:59.099" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/6/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:59.100" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.100" starttime="20170810 04:51:59.015" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:59.100" starttime="20170810 04:51:59.100" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:59.101" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:59.101" starttime="20170810 04:51:59.100" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.101" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.101" starttime="20170810 04:51:58.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.102" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.102" starttime="20170810 04:51:59.101" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:59.102" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:59.102" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:59.102" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:51:59.102" starttime="20170810 04:51:59.102" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.103" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:51:59.103" starttime="20170810 04:51:58.796" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:59.103" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:51:59.103" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:51:59.103" starttime="20170810 04:51:59.103" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.104" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:59.104" starttime="20170810 04:51:59.103" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.104" starttime="20170810 04:51:58.796" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:59.105" starttime="20170810 04:51:59.104" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:59.108" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:59.109" starttime="20170810 04:51:59.108" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:59.109" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:59.109" starttime="20170810 04:51:59.109" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:59.110" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:59.110" starttime="20170810 04:51:59.109" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:59.110" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:59.110" starttime="20170810 04:51:59.110" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.297" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:59.297" starttime="20170810 04:51:59.111" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.297" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:59.297" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.297" starttime="20170810 04:51:59.111" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.298" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.298" starttime="20170810 04:51:59.297" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.299" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.299" starttime="20170810 04:51:59.298" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.299" starttime="20170810 04:51:59.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.299" starttime="20170810 04:51:59.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.299" starttime="20170810 04:51:59.106" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:59.300" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/7/attr/AdditionalData</msg>
<status endtime="20170810 04:51:59.300" starttime="20170810 04:51:59.299" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:59.300" starttime="20170810 04:51:59.300" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:59.399" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/7/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:59.399" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.399" starttime="20170810 04:51:59.300" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:59.400" starttime="20170810 04:51:59.399" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:59.400" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:59.400" starttime="20170810 04:51:59.400" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.400" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.401" starttime="20170810 04:51:59.106" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.401" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.401" starttime="20170810 04:51:59.401" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:59.402" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1b 3c 58 ad 00 00 00 09 1b 3d b4 b3 42 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2e 90 00 00 2e 55 48 00 18 01 00 06 00 8a 03 40 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 24 03 00 48 00 00 00 e0 00 00 02 00 00 00 00 00 00 20 00 00 0f ff fe 00 00 00 00 02 00 00 00 00 00 00 02 00 42 43 38 41 32 34 30 33 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 80 ce 02 00 55 44 00 90 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 07 1e b4 00 00 00 00 00 07 25 dc 00 00 00 00 00 07 28 24 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 64 54 00 00 00 00 00 07 ad e4 00 00 00 00 00 07 b6 6c 00 00 00 00 00 07 b7 9c 00 00 00 00 00 07 bc 90 00 00 00 00 00 05 6d 48 00 00 00 00 00 05 66 b0 00 00 00 00 00 07 61 14 00 00 00 00 00 07 71 20 00 00 00 00 00 07 81 88 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00 55 44 03 ec 01 15 31 00 01 28 00 42 50 4e 4f 52 00 00 00 00 00 00 00 00 00 00 00 00 00 00 03 e4 00 00 00 00 00 00 03 e4 00 00 00 17 00 00 00 00 00 00 00 4b 23 2f da 7f 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 4e 00 00 00 00 00 24 00 00 00 4b 23 2f e7 37 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 2f f3 ba 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f e0 00 00 00 00 00 24 00 00 00 4b 23 49 fd 62 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 23 4a 0b 33 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 22 20 00 00 00 00 00 01 22 22 00 00 00 00 00 00 00 20 00 00 00 00 3c 00 00 00 4b 23 4a 1b 58 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 23 4a 87 0a 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 23 b2 92 d8 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 23 b3 13 e1 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 16 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c6 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 23 b3 26 7f 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 23 b3 33 5e 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 22 10 00 00 00 00 24 00 00 00 4b 23 b3 40 5c 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 23 b3 4d 95 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0c 60 00 00 00 00 00 24 00 00 00 4b 3a a6 16 60 00 00 00 0a 00 08 43 4f 2a 76 dd 19 00 00 01 4e 00 00 00 00 00 00 00 02 00 00 00 24 00 00 00 4b 3a a6 26 44 00 00 00 0a 00 20 43 4f 03 f8 23 18 00 00 01 60 72 65 61 64 00 00 00 00 00 00 00 00 01 32 10 00 00 00 00 00 01 32 10 00 00 00 00 00 00 00 10 00 00 00 00 3c 00 00 00 4b 3a a6 36 e2 00 00 00 0a 00 08 43 4f 73 62 53 0b 00 00 00 5a 00 00 00 00 00 00 00 04 00 00 00 24 00 00 00 4b 3a a6 a2 bf 00 00 00 0a 00 00 43 4f 95 4c d5 9d 00 00 00 7a 00 00 00 1c 00 00 00 4b 28 4d 7f c3 00 00 00 0a 00 00 43 4f 9f c2 ab 92 00 00 00 d9 00 00 00 1c 00 00 00 4b 28 4e 15 25 00 00 00 0a 00 40 43 4f e4 f6 47 b8 00 00 00 e9 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 17 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 21 00 00 00 00 00 00 00 01 00 00 00 5c 00 00 00 4b 28 4e 28 e4 00 00 00 0a 00 08 43 4f 7f b0 33 9e 00 00 01 61 00 00 00 00 00 00 00 01 00 00 00 24 00 00 00 4b 28 4e 36 57 00 00 00 0a 00 08 43 4f 9b af 17 10 00 00 01 80 00 00 00 00 01 32 10 00 00 00 00 24 00 00 00 4b 28 4e 44 a5 00 00 00 0a 00 08 43 4f 0c 28 4e e4 00 00 01 81 00 00 00 00 00 10 00 00 00 00 00 24 00 00 00 4b 28 4e 51 a7 00 00 00 0a 00 08 43 4f 1d 2e bc 8f 00 00 01 82 00 00 00 00 0f f0 00 00 00 00 00 24"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:59.402" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:59.402" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 0...</msg>
<status endtime="20170810 04:51:59.402" starttime="20170810 04:51:59.401" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.403" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 24 00 00 00 00 09 1b 3c 58 ad 00 00 00 09 1b 3d b4 b3 42 00 0...</msg>
<status endtime="20170810 04:51:59.403" starttime="20170810 04:51:59.105" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:59.403" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:59.403" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:59.403" starttime="20170810 04:51:59.403" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:59.404" starttime="20170810 04:51:59.404" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:59.405" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:59.405" starttime="20170810 04:51:59.404" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:59.406" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:59.406" starttime="20170810 04:51:59.405" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.406" starttime="20170810 04:51:59.405" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:59.407" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:59.407" starttime="20170810 04:51:59.407" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.407" starttime="20170810 04:51:59.406" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.407" starttime="20170810 04:51:59.104" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/7/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:59.408" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:59.408" starttime="20170810 04:51:59.408" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.408" starttime="20170810 04:51:59.407" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:59.409" starttime="20170810 04:51:59.409" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:59.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:59.413" starttime="20170810 04:51:59.412" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:59.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:59.414" starttime="20170810 04:51:59.413" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:59.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:59.414" starttime="20170810 04:51:59.414" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:59.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:59.415" starttime="20170810 04:51:59.415" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.686" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:51:59.686" starttime="20170810 04:51:59.416" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.687" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:51:59.687" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.687" starttime="20170810 04:51:59.415" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.687" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.687" starttime="20170810 04:51:59.687" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.688" starttime="20170810 04:51:59.688" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.688" starttime="20170810 04:51:59.412" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.688" starttime="20170810 04:51:59.411" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.688" starttime="20170810 04:51:59.411" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:51:59.689" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/8/attr/AdditionalData</msg>
<status endtime="20170810 04:51:59.689" starttime="20170810 04:51:59.689" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:51:59.690" starttime="20170810 04:51:59.689" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:51:59.825" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/8/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:51:59.825" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.825" starttime="20170810 04:51:59.690" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:51:59.826" starttime="20170810 04:51:59.825" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:51:59.826" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:51:59.826" starttime="20170810 04:51:59.826" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:51:59.827" starttime="20170810 04:51:59.410" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:51:59.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:51:59.827" starttime="20170810 04:51:59.827" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:51:59.828" level="INFO">To JSON using : content={
  "data": [
    "CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system", 
    "ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1b 3e 02 04 00 00 00 09 12 e6 12 3a 42 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 90 00 00 2f 90 00 00 2f 55 48 00 18 01 00 05 00 8a 03 51 00 00 00 00 00 ff ff 00 00 00 00 00 00 50 53 00 50 01 01 00 00 02 00 00 09 05 06 00 48 00 00 00 e0 00 00 01 00 00 00 00 00 00 20 00 00 00 00 00 00 00 00 01 b3 00 00 00 00 00 00 00 01 42 43 38 41 30 35 30 36 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 55 44 00 1c 01 06 01 00 02 54 41 4b 00 00 00 06 00 00 00 55 00 04 a7 2c 00 00 00 04 55 44 01 08 01 07 01 00 20 75 57 70 6b 20 32 75 70 70 69 31 72 20 33 20 33 70 20 64 32 69 31 6f 33 72 6e 34 20 65 20 64 0a 6f 32 6e 31 65 33 0a 35 20 64 6f 6e 65 0a 4c 6f 61 64 69 6e 67 20 50 4e 4f 52 20 73 65 63 74 69 6f 6e 20 36 20 28 50 41 59 4c 4f 41 44 29 20 31 30 34 38 35 37 36 20 62 79 74 65 73 20 40 30 78 30 0a 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 0d 55 6e 68 61 6e 64 6c 65 64 20 6d 73 67 20 72 63 20 34 32 39 34 39 36 37 32 39 31 20 28 2d 45 49 4f 29 20 66 6f 72 20 6b 65 79 20 30 78 38 31 30 31 61 30 30 30 20 6f 6e 20 74 61 73 6b 20 34 33 35 20 40 20 30 78 32 36 62 66 30 0a 55 44 00 3c 01 01 01 00 68 6f 73 74 5f 72 75 6e 74 69 6d 65 5f 73 65 74 75 70 00 6c 69 62 69 73 74 65 70 64 69 73 70 2e 73 6f 00 6c 69 62 65 78 74 69 6e 69 74 73 76 63 2e 73 6f 00 55 44 00 48 01 03 01 00 00 00 00 00 00 04 e8 44 00 00 00 00 00 04 a7 2c 00 00 00 00 00 06 64 40 00 00 00 00 40 2b 97 10 00 00 00 00 40 2b 9f 10 00 00 00 00 40 2b ae 30 00 00 00 00 40 2b b1 2c 00 00 00 00 00 00 25 80 55 44 00 38 01 01 01 00 48 6f 73 74 62 6f 6f 74 20 42 75 69 6c 64 20 49 44 3a 20 68 6f 73 74 62 6f 6f 74 2d 66 61 61 63 36 31 65 2f 68 62 69 63 6f 72 65 2e 62 69 6e 00"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:51:59.828" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:51:59.828" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 0...</msg>
<status endtime="20170810 04:51:59.828" starttime="20170810 04:51:59.827" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:51:59.828" level="INFO">${esel_data} = [u'CALLOUT_INVENTORY_PATH=/xyz/openbmc_project/inventory/system', u'ESEL=00 00 df 00 00 00 00 20 00 04 12 01 6f aa 00 00 50 48 00 30 01 00 05 00 00 00 00 09 1b 3e 02 04 00 00 00 09 12 e6 12 3a 42 00 0...</msg>
<status endtime="20170810 04:51:59.828" starttime="20170810 04:51:59.409" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:51:59.829" level="INFO">Length is 2</msg>
<msg timestamp="20170810 04:51:59.829" level="INFO">${length} = 2</msg>
<status endtime="20170810 04:51:59.829" starttime="20170810 04:51:59.829" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<status endtime="20170810 04:51:59.830" starttime="20170810 04:51:59.829" status="PASS"></status>
</kw>
<kw name="Get Esel Index" library="openbmc_ffdc_list">
<doc>#######################################################################</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20170810 04:51:59.830" level="INFO">${index} = 1</msg>
<status endtime="20170810 04:51:59.830" starttime="20170810 04:51:59.830" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>"${esel_data[${index}]}"</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:59.832" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:59.832" starttime="20170810 04:51:59.831" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.832" starttime="20170810 04:51:59.830" status="PASS"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:51:59.833" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel"&gt;/tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/20170810045136597683_esel&lt;/a&gt;'.</msg>
<status endtime="20170810 04:51:59.833" starttime="20170810 04:51:59.832" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.833" starttime="20170810 04:51:59.832" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.833" starttime="20170810 04:51:59.408" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/8/callout" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<msg timestamp="20170810 04:51:59.834" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:51:59.834" starttime="20170810 04:51:59.833" status="PASS"></status>
</kw>
<status endtime="20170810 04:51:59.834" starttime="20170810 04:51:59.833" status="PASS"></status>
</kw>
<kw name="${entry_path} = /xyz/openbmc_project/logging/entry/9" type="foritem">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status endtime="20170810 04:51:59.835" starttime="20170810 04:51:59.834" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:51:59.838" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:51:59.839" starttime="20170810 04:51:59.838" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:51:59.840" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:51:59.840" starttime="20170810 04:51:59.839" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:51:59.841" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:51:59.841" starttime="20170810 04:51:59.840" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:51:59.842" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:51:59.842" starttime="20170810 04:51:59.841" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.065" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:00.066" starttime="20170810 04:51:59.843" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.066" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:00.066" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.066" starttime="20170810 04:51:59.842" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.066" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.067" starttime="20170810 04:52:00.066" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.067" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.068" starttime="20170810 04:52:00.067" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.068" starttime="20170810 04:51:59.838" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.068" starttime="20170810 04:51:59.837" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.068" starttime="20170810 04:51:59.836" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:00.069" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/9/attr/AdditionalData</msg>
<status endtime="20170810 04:52:00.069" starttime="20170810 04:52:00.068" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170810 04:52:00.070" starttime="20170810 04:52:00.069" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:00.155" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/9/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 04:52:00.155" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.155" starttime="20170810 04:52:00.070" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170810 04:52:00.156" starttime="20170810 04:52:00.156" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:00.156" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:00.156" starttime="20170810 04:52:00.156" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.157" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.157" starttime="20170810 04:51:59.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.157" starttime="20170810 04:52:00.157" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:52:00.158" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:00.158" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:00.158" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status endtime="20170810 04:52:00.158" starttime="20170810 04:52:00.158" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.158" level="INFO">${esel_data} = []</msg>
<status endtime="20170810 04:52:00.158" starttime="20170810 04:51:59.835" status="PASS"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 04:52:00.159" level="INFO">Length is 0</msg>
<msg timestamp="20170810 04:52:00.159" level="INFO">${length} = 0</msg>
<status endtime="20170810 04:52:00.159" starttime="20170810 04:52:00.159" status="PASS"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.160" level="INFO">Continuing for loop from the next iteration.</msg>
<status endtime="20170810 04:52:00.160" starttime="20170810 04:52:00.159" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.160" starttime="20170810 04:51:59.834" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.160" starttime="20170810 04:51:55.046" status="PASS"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170810 04:52:00.168" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:52:00.174" level="INFO">${out} = </msg>
<status endtime="20170810 04:52:00.174" starttime="20170810 04:52:00.160" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170810 04:52:00.178" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status endtime="20170810 04:52:00.178" starttime="20170810 04:52:00.177" status="FAIL"></status>
</kw>
<msg timestamp="20170810 04:52:00.178" level="INFO">${status} = False</msg>
<status endtime="20170810 04:52:00.178" starttime="20170810 04:52:00.177" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170810 04:52:00.179" level="INFO">Returning from the enclosing user keyword.</msg>
<status endtime="20170810 04:52:00.179" starttime="20170810 04:52:00.178" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.179" starttime="20170810 04:51:54.183" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:54.158" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:54.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:54.156" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:36.818" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:36.816" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:36.815" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.180" starttime="20170810 04:51:36.815" status="PASS"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status endtime="20170810 04:52:00.189" starttime="20170810 04:52:00.189" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.189" starttime="20170810 04:52:00.181" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.189" starttime="20170810 04:51:36.814" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.189" starttime="20170810 04:51:33.525" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.189" starttime="20170810 04:51:33.524" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<kw name="Recover Quiesced Host" library="state_manager">
<doc>Recover host from quisced state.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Is Host Quiesced</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:52:00.196" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:52:00.197" starttime="20170810 04:52:00.196" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:00.197" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:00.198" starttime="20170810 04:52:00.197" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:52:00.198" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:52:00.198" starttime="20170810 04:52:00.198" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:52:00.199" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:52:00.199" starttime="20170810 04:52:00.198" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.390" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:00.390" starttime="20170810 04:52:00.200" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.390" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:00.390" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.390" starttime="20170810 04:52:00.199" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.390" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.391" starttime="20170810 04:52:00.390" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.391" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.391" starttime="20170810 04:52:00.391" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.391" starttime="20170810 04:52:00.195" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.391" starttime="20170810 04:52:00.195" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.392" starttime="20170810 04:52:00.194" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:00.392" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:52:00.392" starttime="20170810 04:52:00.392" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:00.395" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:00.395" starttime="20170810 04:52:00.394" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:00.396" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:00.396" starttime="20170810 04:52:00.396" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.396" starttime="20170810 04:52:00.395" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.397" starttime="20170810 04:52:00.393" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.397" starttime="20170810 04:52:00.392" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:00.485" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:52:00.485" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.485" starttime="20170810 04:52:00.397" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:00.487" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:00.487" starttime="20170810 04:52:00.487" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:00.488" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:00.488" starttime="20170810 04:52:00.488" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.488" starttime="20170810 04:52:00.487" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.488" starttime="20170810 04:52:00.486" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.489" starttime="20170810 04:52:00.486" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:00.489" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:00.489" starttime="20170810 04:52:00.489" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.489" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.489" starttime="20170810 04:52:00.194" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.490" starttime="20170810 04:52:00.490" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:52:00.491" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:00.491" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:00.491" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:52:00.491" starttime="20170810 04:52:00.490" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.491" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:52:00.491" starttime="20170810 04:52:00.192" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.491" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:52:00.491" starttime="20170810 04:52:00.191" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<status endtime="20170810 04:52:00.492" starttime="20170810 04:52:00.492" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.492" level="INFO">${status} = True</msg>
<status endtime="20170810 04:52:00.492" starttime="20170810 04:52:00.492" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.493" starttime="20170810 04:52:00.191" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.493" level="INFO">${resp} = True</msg>
<status endtime="20170810 04:52:00.493" starttime="20170810 04:52:00.191" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${resp}' == 'True'</arg>
<arg>Run Keywords</arg>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Initiate Host PowerOff</arg>
<arg>AND</arg>
<arg>Log</arg>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 04:52:00.495" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170810 04:52:00.495" starttime="20170810 04:52:00.494" status="PASS"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:00.496" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170810 04:52:00.496" starttime="20170810 04:52:00.495" status="PASS"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:52:00.499" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:52:00.499" starttime="20170810 04:52:00.498" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:00.500" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:00.500" starttime="20170810 04:52:00.499" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:52:00.500" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:52:00.500" starttime="20170810 04:52:00.500" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:52:00.501" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:52:00.501" starttime="20170810 04:52:00.501" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.697" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:00.697" starttime="20170810 04:52:00.502" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:00.697" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:00.697" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:00.697" starttime="20170810 04:52:00.502" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.698" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.698" starttime="20170810 04:52:00.698" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:00.699" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:00.699" starttime="20170810 04:52:00.698" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.699" starttime="20170810 04:52:00.498" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.699" starttime="20170810 04:52:00.497" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.699" starttime="20170810 04:52:00.497" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:00.700" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170810 04:52:00.700" starttime="20170810 04:52:00.699" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:00.700" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:00.700" starttime="20170810 04:52:00.700" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170810 04:52:00.701" starttime="20170810 04:52:00.701" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:00.702" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status endtime="20170810 04:52:00.702" starttime="20170810 04:52:00.702" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:00.703" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170810 04:52:00.704" starttime="20170810 04:52:00.703" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.704" starttime="20170810 04:52:00.703" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:00.704" starttime="20170810 04:52:00.701" status="PASS"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:01.089" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 04:52:01.090" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:01.090" starttime="20170810 04:52:00.704" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:01.091" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:01.091" starttime="20170810 04:52:01.090" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:01.092" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:01.092" starttime="20170810 04:52:01.092" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:01.092" starttime="20170810 04:52:01.091" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:01.092" starttime="20170810 04:52:01.090" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:01.093" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:01.093" starttime="20170810 04:52:01.093" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:01.093" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:01.093" starttime="20170810 04:52:00.496" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:01.094" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:01.094" starttime="20170810 04:52:01.093" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 04:52:01.094" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:01.094" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:01.094" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status endtime="20170810 04:52:01.094" starttime="20170810 04:52:01.094" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:01.095" starttime="20170810 04:52:00.495" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170810 04:52:01.095" starttime="20170810 04:52:01.095" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:52:01.100" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:52:01.101" starttime="20170810 04:52:01.100" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:01.101" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:01.101" starttime="20170810 04:52:01.101" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:52:01.102" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:52:01.102" starttime="20170810 04:52:01.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:52:01.103" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:52:01.103" starttime="20170810 04:52:01.102" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:02.844" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:02.844" starttime="20170810 04:52:01.103" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:02.844" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:02.844" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:02.844" starttime="20170810 04:52:01.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:02.845" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:02.845" starttime="20170810 04:52:02.845" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:02.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:02.846" starttime="20170810 04:52:02.845" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:02.846" starttime="20170810 04:52:01.099" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:02.846" starttime="20170810 04:52:01.099" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:02.846" starttime="20170810 04:52:01.098" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:02.847" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:52:02.847" starttime="20170810 04:52:02.846" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:02.849" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:02.849" starttime="20170810 04:52:02.848" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:02.850" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:02.850" starttime="20170810 04:52:02.850" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:02.851" starttime="20170810 04:52:02.849" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:02.851" starttime="20170810 04:52:02.847" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:02.851" starttime="20170810 04:52:02.847" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:08.621" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:52:08.622" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:08.622" starttime="20170810 04:52:02.851" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:08.624" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:08.624" starttime="20170810 04:52:08.623" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:08.625" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:08.625" starttime="20170810 04:52:08.624" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:08.625" starttime="20170810 04:52:08.624" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:08.625" starttime="20170810 04:52:08.623" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:08.625" starttime="20170810 04:52:08.622" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:08.625" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:08.625" starttime="20170810 04:52:08.625" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:08.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:08.626" starttime="20170810 04:52:01.098" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:08.626" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:08.626" starttime="20170810 04:52:08.626" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:52:08.627" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:08.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:08.627" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On'}</msg>
<status endtime="20170810 04:52:08.627" starttime="20170810 04:52:08.627" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:08.627" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status endtime="20170810 04:52:08.627" starttime="20170810 04:52:01.097" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:08.628" level="INFO">${power_state} = On</msg>
<status endtime="20170810 04:52:08.628" starttime="20170810 04:52:01.096" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<msg timestamp="20170810 04:52:08.628" level="FAIL">Off != On</msg>
<status endtime="20170810 04:52:08.628" starttime="20170810 04:52:08.628" status="FAIL"></status>
</kw>
<status endtime="20170810 04:52:08.629" starttime="20170810 04:52:01.096" status="FAIL"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:52:08.632" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:52:08.633" starttime="20170810 04:52:08.632" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:08.633" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:08.633" starttime="20170810 04:52:08.633" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:52:08.634" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:52:08.634" starttime="20170810 04:52:08.634" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:52:08.635" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:52:08.635" starttime="20170810 04:52:08.634" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:09.102" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:09.103" starttime="20170810 04:52:08.635" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:09.103" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:09.103" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:09.103" starttime="20170810 04:52:08.635" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:09.103" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:09.104" starttime="20170810 04:52:09.103" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:09.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:09.104" starttime="20170810 04:52:09.104" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:09.104" starttime="20170810 04:52:08.631" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:09.104" starttime="20170810 04:52:08.631" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:09.105" starttime="20170810 04:52:08.630" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:09.105" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:52:09.105" starttime="20170810 04:52:09.105" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:09.107" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:09.107" starttime="20170810 04:52:09.107" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:09.108" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:09.108" starttime="20170810 04:52:09.108" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:09.108" starttime="20170810 04:52:09.107" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:09.109" starttime="20170810 04:52:09.106" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:09.109" starttime="20170810 04:52:09.105" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:10.018" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:52:10.018" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:10.018" starttime="20170810 04:52:09.109" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:10.020" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:10.020" starttime="20170810 04:52:10.020" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:10.021" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:10.021" starttime="20170810 04:52:10.021" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:10.021" starttime="20170810 04:52:10.020" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:10.021" starttime="20170810 04:52:10.019" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:10.021" starttime="20170810 04:52:10.019" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:10.022" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:10.022" starttime="20170810 04:52:10.022" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:10.022" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:10.022" starttime="20170810 04:52:08.630" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:10.023" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:10.023" starttime="20170810 04:52:10.022" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:52:10.023" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Quiesced", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:10.023" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:10.024" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Quiesced'}</msg>
<status endtime="20170810 04:52:10.024" starttime="20170810 04:52:10.023" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:10.024" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Quiesced</msg>
<status endtime="20170810 04:52:10.024" starttime="20170810 04:52:08.629" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:10.024" level="INFO">${host_state} = Quiesced</msg>
<status endtime="20170810 04:52:10.024" starttime="20170810 04:52:08.629" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg timestamp="20170810 04:52:10.025" level="FAIL">Off != Quiesced</msg>
<status endtime="20170810 04:52:10.025" starttime="20170810 04:52:10.024" status="FAIL"></status>
</kw>
<status endtime="20170810 04:52:10.025" starttime="20170810 04:52:01.096" status="FAIL"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:52:20.066" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:52:20.066" starttime="20170810 04:52:20.065" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:20.067" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:20.067" starttime="20170810 04:52:20.067" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:52:20.068" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:52:20.068" starttime="20170810 04:52:20.067" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:52:20.068" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:52:20.068" starttime="20170810 04:52:20.068" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.318" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:20.318" starttime="20170810 04:52:20.069" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.318" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:20.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:20.318" starttime="20170810 04:52:20.069" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.319" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:20.319" starttime="20170810 04:52:20.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:20.320" starttime="20170810 04:52:20.319" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.320" starttime="20170810 04:52:20.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.320" starttime="20170810 04:52:20.029" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.320" starttime="20170810 04:52:20.028" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:20.321" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status endtime="20170810 04:52:20.321" starttime="20170810 04:52:20.320" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:20.323" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:20.323" starttime="20170810 04:52:20.322" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:20.324" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:20.324" starttime="20170810 04:52:20.324" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.324" starttime="20170810 04:52:20.323" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.324" starttime="20170810 04:52:20.322" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.324" starttime="20170810 04:52:20.321" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:20.388" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 04:52:20.388" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:20.388" starttime="20170810 04:52:20.324" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:20.390" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:20.390" starttime="20170810 04:52:20.389" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:20.391" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:20.391" starttime="20170810 04:52:20.391" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.391" starttime="20170810 04:52:20.390" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.391" starttime="20170810 04:52:20.389" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.391" starttime="20170810 04:52:20.388" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:20.392" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:20.392" starttime="20170810 04:52:20.391" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.392" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:20.392" starttime="20170810 04:52:20.028" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.392" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:20.393" starttime="20170810 04:52:20.392" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:52:20.393" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:20.393" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:20.393" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status endtime="20170810 04:52:20.393" starttime="20170810 04:52:20.393" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.394" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status endtime="20170810 04:52:20.394" starttime="20170810 04:52:20.027" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.394" level="INFO">${power_state} = Off</msg>
<status endtime="20170810 04:52:20.394" starttime="20170810 04:52:20.027" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status endtime="20170810 04:52:20.394" starttime="20170810 04:52:20.394" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.395" starttime="20170810 04:52:20.026" status="PASS"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 04:52:20.399" level="INFO">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170810 04:52:20.399" starttime="20170810 04:52:20.398" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 04:52:20.400" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170810 04:52:20.400" starttime="20170810 04:52:20.399" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 04:52:20.401" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170810 04:52:20.401" starttime="20170810 04:52:20.400" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 04:52:20.402" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170810 04:52:20.402" starttime="20170810 04:52:20.401" status="PASS"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.586" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170810 04:52:20.586" starttime="20170810 04:52:20.403" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 04:52:20.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:20.586" starttime="20170810 04:52:20.402" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.587" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:20.587" starttime="20170810 04:52:20.587" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.588" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:20.588" starttime="20170810 04:52:20.587" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.588" starttime="20170810 04:52:20.397" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.588" starttime="20170810 04:52:20.397" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.588" starttime="20170810 04:52:20.396" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 04:52:20.589" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170810 04:52:20.589" starttime="20170810 04:52:20.588" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:20.591" level="INFO">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:20.591" starttime="20170810 04:52:20.590" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:20.592" level="INFO">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170810 04:52:20.592" starttime="20170810 04:52:20.592" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.592" starttime="20170810 04:52:20.591" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.592" starttime="20170810 04:52:20.589" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.592" starttime="20170810 04:52:20.589" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 04:52:20.680" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 04:52:20.680" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:20.680" starttime="20170810 04:52:20.592" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 04:52:20.682" level="INFO">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:20.682" starttime="20170810 04:52:20.681" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 04:52:20.683" level="INFO">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170810 04:52:20.683" starttime="20170810 04:52:20.682" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.683" starttime="20170810 04:52:20.682" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.683" starttime="20170810 04:52:20.681" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.683" starttime="20170810 04:52:20.680" status="PASS"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 04:52:20.683" level="INFO">Delete All Sessions</msg>
<status endtime="20170810 04:52:20.683" starttime="20170810 04:52:20.683" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.684" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170810 04:52:20.684" starttime="20170810 04:52:20.396" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170810 04:52:20.684" starttime="20170810 04:52:20.684" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 04:52:20.685" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 04:52:20.685" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 04:52:20.685" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status endtime="20170810 04:52:20.685" starttime="20170810 04:52:20.685" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.685" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status endtime="20170810 04:52:20.685" starttime="20170810 04:52:20.395" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.686" level="INFO">${host_state} = Off</msg>
<status endtime="20170810 04:52:20.686" starttime="20170810 04:52:20.395" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status endtime="20170810 04:52:20.686" starttime="20170810 04:52:20.686" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.686" starttime="20170810 04:52:20.026" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.686" starttime="20170810 04:52:01.095" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.686" starttime="20170810 04:52:00.494" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>HOST is recovered from quiesced state</arg>
</arguments>
<msg timestamp="20170810 04:52:20.687" level="INFO">HOST is recovered from quiesced state</msg>
<status endtime="20170810 04:52:20.687" starttime="20170810 04:52:20.687" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.687" starttime="20170810 04:52:00.493" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.687" starttime="20170810 04:52:00.493" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.687" starttime="20170810 04:52:00.190" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.687" starttime="20170810 04:52:00.190" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 04:52:20.697" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170810 04:52:20.697" starttime="20170810 04:52:20.688" status="PASS"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 04:52:20.698" level="INFO">${FFDC_DIR_PATH} = /tmp/fspcibld/9928/obmc-robot/logs/20170810045136597683_TestsTestBasicPoweron/20170810045136597683_PowerOnTest/</msg>
<status endtime="20170810 04:52:20.698" starttime="20170810 04:52:20.697" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170810 04:52:20.698" starttime="20170810 04:52:20.698" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170810 04:52:20.699" starttime="20170810 04:52:20.699" status="PASS"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:52:20.700" level="INFO">Directory '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs"&gt;/tmp/fspcibld/9928/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170810 04:52:20.700" starttime="20170810 04:52:20.699" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:52:20.701" level="INFO">File '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170810 04:52:20.701" starttime="20170810 04:52:20.700" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.701" level="INFO">${exist} = True</msg>
<status endtime="20170810 04:52:20.701" starttime="20170810 04:52:20.700" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170810 04:52:20.701" starttime="20170810 04:52:20.701" status="PASS"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170810 04:52:20.702" starttime="20170810 04:52:20.702" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:52:20.703" level="INFO">${cur_time} = 2017-08-10 04:52:20:702679</msg>
<status endtime="20170810 04:52:20.703" starttime="20170810 04:52:20.702" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 04:52:20.703" level="INFO">${cur_time} = 20170810045220702679</msg>
<status endtime="20170810 04:52:20.703" starttime="20170810 04:52:20.703" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.704" level="INFO">${cur_time} = 20170810045220702679</msg>
<status endtime="20170810 04:52:20.704" starttime="20170810 04:52:20.702" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:52:20.705" level="INFO">Appended to file '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/9928/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170810 04:52:20.705" starttime="20170810 04:52:20.704" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.705" starttime="20170810 04:52:20.687" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.705" starttime="20170810 04:51:33.217" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg timestamp="20170810 04:52:20.706" level="INFO">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:52:20.706" starttime="20170810 04:52:20.706" status="PASS"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg timestamp="20170810 04:52:20.707" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:52:20.707" starttime="20170810 04:52:20.707" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.707" level="INFO">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status endtime="20170810 04:52:20.707" starttime="20170810 04:52:20.706" status="PASS"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:52:20.709" level="INFO">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170810 04:52:20.709" starttime="20170810 04:52:20.708" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:52:20.709" starttime="20170810 04:52:20.709" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:52:20.713" level="INFO">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:52:20.717" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:52:20.717" level="INFO">${output} = /tmp/fspcibld/9928/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170810 04:52:20.718" starttime="20170810 04:52:20.710" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:52:20.720" starttime="20170810 04:52:20.720" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170810 04:52:20.721" starttime="20170810 04:52:20.721" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:52:20.723" level="INFO">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 04:52:20.723" starttime="20170810 04:52:20.722" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.723" level="INFO">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status endtime="20170810 04:52:20.723" starttime="20170810 04:52:20.708" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:52:20.724" level="INFO">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170810 04:52:20.724" starttime="20170810 04:52:20.724" status="PASS"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:52:20.725" starttime="20170810 04:52:20.725" status="PASS"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg timestamp="20170810 04:52:20.729" level="INFO">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 04:52:20.750" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:52:20.751" level="INFO">${os_con_pid} = </msg>
<status endtime="20170810 04:52:20.752" starttime="20170810 04:52:20.725" status="PASS"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170810 04:52:20.765" starttime="20170810 04:52:20.762" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 04:52:20.767" level="INFO">${cmd_buf} = kill -9 </msg>
<status endtime="20170810 04:52:20.767" starttime="20170810 04:52:20.766" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170810 04:52:20.773" starttime="20170810 04:52:20.770" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:52:20.774" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 04:52:20.774" level="INFO">${output} = None</msg>
<status endtime="20170810 04:52:20.774" starttime="20170810 04:52:20.773" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170810 04:52:20.775" starttime="20170810 04:52:20.774" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" timestamp="20170810 04:52:20.780" level="INFO">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/9928/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/9928/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status endtime="20170810 04:52:20.780" starttime="20170810 04:52:20.777" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.780" starttime="20170810 04:52:20.777" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.780" starttime="20170810 04:52:20.775" status="PASS"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20170810 04:52:20.781" level="INFO">${output} = </msg>
<status endtime="20170810 04:52:20.781" starttime="20170810 04:52:20.781" status="PASS"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg timestamp="20170810 04:52:20.782" level="INFO">${loc_quiet} = 1</msg>
<status endtime="20170810 04:52:20.782" starttime="20170810 04:52:20.781" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170810 04:52:20.867" starttime="20170810 04:52:20.782" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.873" level="INFO">${rc} = 0</msg>
<msg timestamp="20170810 04:52:20.875" level="INFO">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170810 04:52:20.875" starttime="20170810 04:52:20.782" status="PASS"></status>
</kw>
<msg timestamp="20170810 04:52:20.878" level="INFO">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome t...</msg>
<status endtime="20170810 04:52:20.879" starttime="20170810 04:52:20.705" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg timestamp="20170810 04:52:20.881" level="INFO">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.02297|secure|Booting in non-secure mode.
  4.02299|secure|SecureROM invalid - skipping functionality
  7.91113|ERRL|Dumping errors reported prior to registration
  8.57240|ISTEP  6. 5 - host_init_fsi
  8.65990|ISTEP  6. 6 - host_set_ipl_parms
  8.70096|ISTEP  6. 7 - host_discover_targets
 13.93849|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
 13.93851|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 13.96759|ISTEP  6. 8 - host_update_master_tpm
 13.97676|SECURE|Security Access Bit&gt; 0x0000000000000000
 13.97677|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 13.97697|ISTEP  6. 9 - host_gard
 14.01393|ISTEP  6.10 - host_revert_sbe_mcs_setup
 14.02481|ISTEP  6.11 - host_start_occ_xstop_handler
 14.02594|ISTEP  6.12 - host_voltage_config
 14.05981|ISTEP  7. 2 - mss_volt
 14.55133|ISTEP  7. 3 - mss_freq
 14.69915|ISTEP  7. 4 - mss_eff_config
 17.97830|ISTEP  7. 5 - mss_attr_update
 17.99035|ISTEP  8. 1 - host_slave_sbe_config
 18.02682|ISTEP  8. 2 - host_setup_sbe
 18.03324|ISTEP  8. 3 - host_cbs_start
 18.04362|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 26.45852|ISTEP  8. 5 - host_attnlisten_proc
 26.45961|ISTEP  8. 6 - host_p9_fbc_eff_config
 26.46665|ISTEP  8. 7 - host_p9_eff_config_links
 26.47640|ISTEP  8. 8 - proc_attr_update
 26.48012|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 26.53296|ISTEP  8.10 - proc_xbus_scominit
 29.76305|ISTEP  8.11 - proc_xbus_enable_ridi
 29.76816|ISTEP  9. 1 - fabric_erepair
 29.77634|ISTEP  9. 2 - fabric_io_dccal
 30.63285|ISTEP  9. 3 - fabric_pre_trainadv
 30.64108|ISTEP  9. 4 - fabric_io_run_training
 30.85532|ISTEP  9. 5 - fabric_post_trainadv
 30.86149|ISTEP  9. 6 - proc_smp_link_layer
 30.86677|ISTEP  9. 7 - proc_fab_iovalid
 30.89263|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 30.90324|ISTEP 10. 1 - proc_build_smp
 31.25873|ISTEP 10. 2 - host_slave_sbe_update
 31.61360|ISTEP 10. 3 - host_set_voltages
 31.67034|ISTEP 10. 4 - proc_cen_ref_clk_enable
 31.67688|ISTEP 10. 5 - proc_enable_osclite
 31.67785|ISTEP 10. 6 - proc_chiplet_scominit
 31.72358|ISTEP 10. 7 - proc_abus_scominit
 31.73148|ISTEP 10. 8 - proc_obus_scominit
 31.84198|ISTEP 10. 9 - proc_npu_scominit
 31.86514|ISTEP 10.10 - proc_pcie_scominit
 31.92519|ISTEP 10.11 - proc_scomoverride_chiplets
 31.92759|ISTEP 10.12 - proc_chiplet_enable_ridi
 31.93171|ISTEP 10.13 - host_rng_bist
 31.93682|ISTEP 10.14 - host_update_redundant_tpm
 32.00366|ISTEP 11. 1 - host_prd_hwreconfig
 32.00863|ISTEP 12. 1 - mss_getecid
 32.01448|ISTEP 13. 1 - host_disable_memvolt
 32.12552|ISTEP 13. 2 - mem_pll_reset
 32.13896|ISTEP 13. 3 - mem_pll_initf
 32.17292|ISTEP 13. 4 - mem_pll_setup
 32.20005|ISTEP 13. 6 - mem_startclocks
 32.22069|ISTEP 13. 7 - host_enable_memvolt
 32.22293|ISTEP 13. 8 - mss_scominit
 32.69006|ISTEP 13. 9 - mss_ddr_phy_reset
 32.80214|ISTEP 13.10 - mss_draminit
 33.01273|ISTEP 13.11 - mss_draminit_training
 33.36632|ISTEP 13.12 - mss_draminit_trainadv
 33.36928|ISTEP 13.13 - mss_draminit_mc
 33.40563|ISTEP 14. 1 - mss_memdiag
 76.84241|ISTEP 14. 2 - mss_thermal_init
 76.85440|ISTEP 14. 3 - proc_pcie_config
 76.86859|ISTEP 14. 4 - mss_power_cleanup
 76.87185|ISTEP 14. 5 - proc_setup_bars
 76.90811|ISTEP 14. 6 - proc_htm_setup
 76.91947|ISTEP 14. 7 - proc_exit_cache_contained
 76.94228|ISTEP 15. 1 - host_build_stop_image
 77.31346|ISTEP 15. 2 - proc_set_pba_homer_bar
 77.31876|ISTEP 15. 3 - host_establish_ex_chiplet
 77.32894|ISTEP 15. 4 - host_start_stop_engine
 77.43566|ISTEP 16. 1 - host_activate_master
  0.00838|ISTEP 16. 2 - host_activate_slave_cores
 78.67691|ISTEP 16. 3 - host_secure_rng
 78.68804|ISTEP 16. 4 - mss_scrub
 78.70924|ISTEP 16. 5 - host_ipl_complete
 78.76872|ISTEP 16. 6 - host_load_io_ppe
 78.77148|ISTEP 18.11 - proc_tod_setup
 78.83036|ISTEP 18.12 - proc_tod_init
 78.82985|ISTEP 20. 1 - host_load_payload
 79.15903|ISTEP 20. 2 - host_load_hdat
 83.05980|ISTEP 21. 1 - host_runtime_setup
 84.75070|================================================
 84.75780|Error reported by lpc (0x2400) PLID 0x9000001B
 84.75951|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 84.75952|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 84.75953|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 84.76124|  UserData1  LPC Address : 0x0ffffe0000000002
 84.76125|  UserData2  LPC Transaction Type : 0x0000000000000200
 84.76126|------------------------------------------------
 84.76127|  Callout type             : Procedure Callout
 84.76127|  Procedure                : EPUB_PRC_HB_CODE
 84.76128|  Priority                 : SRCI_PRIORITY_HIGH
 84.76129|------------------------------------------------
 84.76130|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 84.76131|================================================
 84.42089|System shutting down with error status 0x9000001C
 84.42093|================================================
 84.42094|Error reported by initservice (0x0500) PLID 0x9000001C
 84.79583|  Initialization Service launched a function and the task returned an error.
 84.79584|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 84.79585|  ReasonCode 0x0506 WAIT_FN_FAILED
 84.79586|  UserData1  task id or task return code : 0x00000000000001b3
 84.79587|  UserData2  returned status from task : 0x0000000000000001
 84.79588|------------------------------------------------
 84.79588|  Callout type             : Procedure Callout
 84.79589|  Procedure                : EPUB_PRC_HB_CODE
 84.79590|  Priority                 : SRCI_PRIORITY_HIGH
 84.79591|------------------------------------------------
 84.79591|  host_runtime_setup
 84.79592|------------------------------------------------
 84.79593|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 84.79594|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01888|secure|Booting in non-secure mode.
  4.01890|secure|SecureROM invalid - skipping functionality
  4.67157|ERRL|Dumping errors reported prior to registration
  5.23257|ISTEP  6. 5 - host_init_fsi
  5.31722|ISTEP  6. 6 - host_set_ipl_parms
  5.33661|ISTEP  6. 7 - host_discover_targets
  5.85091|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.85092|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.87981|ISTEP  6. 8 - host_update_master_tpm
  5.88820|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.88821|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.88840|ISTEP  6. 9 - host_gard
  5.92160|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.93105|ISTEP  6.11 - host_start_occ_xstop_handler
  5.93210|ISTEP  6.12 - host_voltage_config
  5.96679|ISTEP  7. 2 - mss_volt
  6.47449|ISTEP  7. 3 - mss_freq
  6.67475|ISTEP  7. 4 - mss_eff_config
  9.95188|ISTEP  7. 5 - mss_attr_update
  9.96433|ISTEP  8. 1 - host_slave_sbe_config
 10.01717|ISTEP  8. 2 - host_setup_sbe
 10.02376|ISTEP  8. 3 - host_cbs_start
 10.03180|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.44648|ISTEP  8. 5 - host_attnlisten_proc
 18.44742|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.45410|ISTEP  8. 7 - host_p9_eff_config_links
 18.46383|ISTEP  8. 8 - proc_attr_update
 18.46560|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.51867|ISTEP  8.10 - proc_xbus_scominit
 21.74476|ISTEP  8.11 - proc_xbus_enable_ridi
 21.74933|ISTEP  9. 1 - fabric_erepair
 21.75747|ISTEP  9. 2 - fabric_io_dccal
 22.61280|ISTEP  9. 3 - fabric_pre_trainadv
 22.62107|ISTEP  9. 4 - fabric_io_run_training
 22.83574|ISTEP  9. 5 - fabric_post_trainadv
 22.84039|ISTEP  9. 6 - proc_smp_link_layer
 22.84620|ISTEP  9. 7 - proc_fab_iovalid
 22.87156|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.88184|ISTEP 10. 1 - proc_build_smp
 23.05351|ISTEP 10. 2 - host_slave_sbe_update
 23.41812|ISTEP 10. 3 - host_set_voltages
 23.45641|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.47318|ISTEP 10. 5 - proc_enable_osclite
 23.47401|ISTEP 10. 6 - proc_chiplet_scominit
 23.52112|ISTEP 10. 7 - proc_abus_scominit
 23.52931|ISTEP 10. 8 - proc_obus_scominit
 23.85218|ISTEP 10. 9 - proc_npu_scominit
 23.87520|ISTEP 10.10 - proc_pcie_scominit
 23.93924|ISTEP 10.11 - proc_scomoverride_chiplets
 23.94145|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.94571|ISTEP 10.13 - host_rng_bist
 23.95885|ISTEP 10.14 - host_update_redundant_tpm
 24.03163|ISTEP 11. 1 - host_prd_hwreconfig
 24.03690|ISTEP 12. 1 - mss_getecid
 24.04234|ISTEP 13. 1 - host_disable_memvolt
 24.13493|ISTEP 13. 2 - mem_pll_reset
 24.15060|ISTEP 13. 3 - mem_pll_initf
 24.18484|ISTEP 13. 4 - mem_pll_setup
 24.21155|ISTEP 13. 6 - mem_startclocks
 24.23680|ISTEP 13. 7 - host_enable_memvolt
 24.23924|ISTEP 13. 8 - mss_scominit
 24.71400|ISTEP 13. 9 - mss_ddr_phy_reset
 24.82337|ISTEP 13.10 - mss_draminit
 25.03491|ISTEP 13.11 - mss_draminit_training
 25.38620|ISTEP 13.12 - mss_draminit_trainadv
 25.38950|ISTEP 13.13 - mss_draminit_mc
 25.42515|ISTEP 14. 1 - mss_memdiag
 68.94288|ISTEP 14. 2 - mss_thermal_init
 68.95190|ISTEP 14. 3 - proc_pcie_config
 68.96614|ISTEP 14. 4 - mss_power_cleanup
 68.97238|ISTEP 14. 5 - proc_setup_bars
 69.00889|ISTEP 14. 6 - proc_htm_setup
 69.01981|ISTEP 14. 7 - proc_exit_cache_contained
 69.04021|ISTEP 15. 1 - host_build_stop_image
 69.40736|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.41247|ISTEP 15. 3 - host_establish_ex_chiplet
 69.42329|ISTEP 15. 4 - host_start_stop_engine
 69.53059|ISTEP 16. 1 - host_activate_master
  0.00635|ISTEP 16. 2 - host_activate_slave_cores
 70.75554|ISTEP 16. 3 - host_secure_rng
 70.73361|ISTEP 16. 4 - mss_scrub
 70.78603|ISTEP 16. 5 - host_ipl_complete
 70.81473|ISTEP 16. 6 - host_load_io_ppe
 70.81820|ISTEP 18.11 - proc_tod_setup
 70.87012|ISTEP 18.12 - proc_tod_init
 70.87590|ISTEP 20. 1 - host_load_payload
 71.17456|ISTEP 20. 2 - host_load_hdat
 75.08965|ISTEP 21. 1 - host_runtime_setup
 76.08301|================================================
 76.40301|Error reported by lpc (0x2400) PLID 0x9000002E
 76.40473|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 76.40474|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 76.40475|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 76.40647|  UserData1  LPC Address : 0x0ffffe0000000002
 76.40648|  UserData2  LPC Transaction Type : 0x0000000000000200
 76.40648|------------------------------------------------
 76.40649|  Callout type             : Procedure Callout
 76.40650|  Procedure                : EPUB_PRC_HB_CODE
 76.40651|  Priority                 : SRCI_PRIORITY_HIGH
 76.40652|------------------------------------------------
 76.40653|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.40654|================================================
 76.11673|System shutting down with error status 0x9000002F
 76.11676|================================================
 76.11678|Error reported by initservice (0x0500) PLID 0x9000002F
 76.43192|  Initialization Service launched a function and the task returned an error.
 76.43193|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.43194|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.43195|  UserData1  task id or task return code : 0x00000000000001b3
 76.43196|  UserData2  returned status from task : 0x0000000000000001
 76.43197|------------------------------------------------
 76.43198|  Callout type             : Procedure Callout
 76.43199|  Procedure                : EPUB_PRC_HB_CODE
 76.43200|  Priority                 : SRCI_PRIORITY_HIGH
 76.43201|------------------------------------------------
 76.43201|  host_runtime_setup
 76.43202|------------------------------------------------
 76.43203|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.43204|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.02496|secure|Booting in non-secure mode.
  4.02498|secure|SecureROM invalid - skipping functionality
  5.16980|ERRL|Dumping errors reported prior to registration
  5.71891|ISTEP  6. 5 - host_init_fsi
  5.80559|ISTEP  6. 6 - host_set_ipl_parms
  5.82544|ISTEP  6. 7 - host_discover_targets
  6.29646|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  6.29647|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  6.32374|ISTEP  6. 8 - host_update_master_tpm
  6.33234|SECURE|Security Access Bit&gt; 0x0000000000000000
  6.33235|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  6.33255|ISTEP  6. 9 - host_gard
  6.36772|ISTEP  6.10 - host_revert_sbe_mcs_setup
  6.37719|ISTEP  6.11 - host_start_occ_xstop_handler
  6.37816|ISTEP  6.12 - host_voltage_config
  6.41252|ISTEP  7. 2 - mss_volt
  6.78596|ISTEP  7. 3 - mss_freq
  6.93159|ISTEP  7. 4 - mss_eff_config
 10.20531|ISTEP  7. 5 - mss_attr_update
 10.21760|ISTEP  8. 1 - host_slave_sbe_config
 10.25450|ISTEP  8. 2 - host_setup_sbe
 10.26118|ISTEP  8. 3 - host_cbs_start
 10.27159|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.68618|ISTEP  8. 5 - host_attnlisten_proc
 18.68741|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.69402|ISTEP  8. 7 - host_p9_eff_config_links
 18.70390|ISTEP  8. 8 - proc_attr_update
 18.70598|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.75887|ISTEP  8.10 - proc_xbus_scominit
 21.99444|ISTEP  8.11 - proc_xbus_enable_ridi
 22.00212|ISTEP  9. 1 - fabric_erepair
 22.01028|ISTEP  9. 2 - fabric_io_dccal
 22.86618|ISTEP  9. 3 - fabric_pre_trainadv
 22.87271|ISTEP  9. 4 - fabric_io_run_training
 23.08709|ISTEP  9. 5 - fabric_post_trainadv
 23.09142|ISTEP  9. 6 - proc_smp_link_layer
 23.09851|ISTEP  9. 7 - proc_fab_iovalid
 23.12431|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 23.13494|ISTEP 10. 1 - proc_build_smp
 23.41599|ISTEP 10. 2 - host_slave_sbe_update
 23.88850|ISTEP 10. 3 - host_set_voltages
 24.06937|ISTEP 10. 4 - proc_cen_ref_clk_enable
 24.07630|ISTEP 10. 5 - proc_enable_osclite
 24.07735|ISTEP 10. 6 - proc_chiplet_scominit
 24.12221|ISTEP 10. 7 - proc_abus_scominit
 24.13072|ISTEP 10. 8 - proc_obus_scominit
 24.24480|ISTEP 10. 9 - proc_npu_scominit
 24.26991|ISTEP 10.10 - proc_pcie_scominit
 24.33721|ISTEP 10.11 - proc_scomoverride_chiplets
 24.33958|ISTEP 10.12 - proc_chiplet_enable_ridi
 24.34307|ISTEP 10.13 - host_rng_bist
 24.38630|ISTEP 10.14 - host_update_redundant_tpm
 24.45661|ISTEP 11. 1 - host_prd_hwreconfig
 24.46186|ISTEP 12. 1 - mss_getecid
 24.46768|ISTEP 13. 1 - host_disable_memvolt
 24.57897|ISTEP 13. 2 - mem_pll_reset
 24.59260|ISTEP 13. 3 - mem_pll_initf
 24.62516|ISTEP 13. 4 - mem_pll_setup
 24.65188|ISTEP 13. 6 - mem_startclocks
 24.67239|ISTEP 13. 7 - host_enable_memvolt
 24.67466|ISTEP 13. 8 - mss_scominit
 25.14299|ISTEP 13. 9 - mss_ddr_phy_reset
 25.25586|ISTEP 13.10 - mss_draminit
 25.46457|ISTEP 13.11 - mss_draminit_training
 25.81410|ISTEP 13.12 - mss_draminit_trainadv
 25.81699|ISTEP 13.13 - mss_draminit_mc
 25.85307|ISTEP 14. 1 - mss_memdiag
 69.28564|ISTEP 14. 2 - mss_thermal_init
 69.29471|ISTEP 14. 3 - proc_pcie_config
 69.30858|ISTEP 14. 4 - mss_power_cleanup
 69.31198|ISTEP 14. 5 - proc_setup_bars
 69.35138|ISTEP 14. 6 - proc_htm_setup
 69.36260|ISTEP 14. 7 - proc_exit_cache_contained
 69.38289|ISTEP 15. 1 - host_build_stop_image
 69.75790|ISTEP 15. 2 - proc_set_pba_homer_bar
 69.76771|ISTEP 15. 3 - host_establish_ex_chiplet
 69.77838|ISTEP 15. 4 - host_start_stop_engine
 69.88476|ISTEP 16. 1 - host_activate_master
  0.00636|ISTEP 16. 2 - host_activate_slave_cores
 71.10708|ISTEP 16. 3 - host_secure_rng
 71.09968|ISTEP 16. 4 - mss_scrub
 71.14033|ISTEP 16. 5 - host_ipl_complete
 71.16251|ISTEP 16. 6 - host_load_io_ppe
 71.16551|ISTEP 18.11 - proc_tod_setup
 71.20405|ISTEP 18.12 - proc_tod_init
 71.23463|ISTEP 20. 1 - host_load_payload
 71.51187|ISTEP 20. 2 - host_load_hdat
 75.46727|ISTEP 21. 1 - host_runtime_setup
 76.43826|================================================
 76.44167|Error reported by lpc (0x2400) PLID 0x90000041
 76.44340|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 76.44341|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 76.44341|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 76.44513|  UserData1  LPC Address : 0x0ffffe0000000002
 76.44514|  UserData2  LPC Transaction Type : 0x0000000000000200
 76.44514|------------------------------------------------
 76.44515|  Callout type             : Procedure Callout
 76.44516|  Procedure                : EPUB_PRC_HB_CODE
 76.44517|  Priority                 : SRCI_PRIORITY_HIGH
 76.44518|------------------------------------------------
 76.44519|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.44520|================================================
 76.81319|System shutting down with error status 0x90000042
 76.81323|================================================
 76.81324|Error reported by initservice (0x0500) PLID 0x90000042
 76.81700|  Initialization Service launched a function and the task returned an error.
 76.81701|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 76.81702|  ReasonCode 0x0506 WAIT_FN_FAILED
 76.81703|  UserData1  task id or task return code : 0x00000000000001b3
 76.81704|  UserData2  returned status from task : 0x0000000000000001
 76.81705|------------------------------------------------
 76.81706|  Callout type             : Procedure Callout
 76.81707|  Procedure                : EPUB_PRC_HB_CODE
 76.81708|  Priority                 : SRCI_PRIORITY_HIGH
 76.81709|------------------------------------------------
 76.81709|  host_runtime_setup
 76.81710|------------------------------------------------
 76.81711|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 76.81712|================================================


--== Welcome to Hostboot hostboot-faac61e/hbicore.bin ==--

  4.01802|secure|Booting in non-secure mode.
  4.01804|secure|SecureROM invalid - skipping functionality
  4.68161|ERRL|Dumping errors reported prior to registration
  5.24207|ISTEP  6. 5 - host_init_fsi
  5.35043|ISTEP  6. 6 - host_set_ipl_parms
  5.36909|ISTEP  6. 7 - host_discover_targets
  5.83987|HWAS|PRESENT&gt; DIMM[03]=FFFF000000000000
  5.83988|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  5.86782|ISTEP  6. 8 - host_update_master_tpm
  5.87683|SECURE|Security Access Bit&gt; 0x0000000000000000
  5.87684|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
  5.87703|ISTEP  6. 9 - host_gard
  5.91080|ISTEP  6.10 - host_revert_sbe_mcs_setup
  5.91990|ISTEP  6.11 - host_start_occ_xstop_handler
  5.92076|ISTEP  6.12 - host_voltage_config
  5.95598|ISTEP  7. 2 - mss_volt
  6.29162|ISTEP  7. 3 - mss_freq
  6.43743|ISTEP  7. 4 - mss_eff_config
  9.72229|ISTEP  7. 5 - mss_attr_update
  9.73481|ISTEP  8. 1 - host_slave_sbe_config
  9.77208|ISTEP  8. 2 - host_setup_sbe
  9.77859|ISTEP  8. 3 - host_cbs_start
  9.78647|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 18.20083|ISTEP  8. 5 - host_attnlisten_proc
 18.20214|ISTEP  8. 6 - host_p9_fbc_eff_config
 18.20972|ISTEP  8. 7 - host_p9_eff_config_links
 18.22142|ISTEP  8. 8 - proc_attr_update
 18.22370|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 18.27711|ISTEP  8.10 - proc_xbus_scominit
 21.51460|ISTEP  8.11 - proc_xbus_enable_ridi
 21.51921|ISTEP  9. 1 - fabric_erepair
 21.52738|ISTEP  9. 2 - fabric_io_dccal
 22.38430|ISTEP  9. 3 - fabric_pre_trainadv
 22.39208|ISTEP  9. 4 - fabric_io_run_training
 22.60756|ISTEP  9. 5 - fabric_post_trainadv
 22.61433|ISTEP  9. 6 - proc_smp_link_layer
 22.61956|ISTEP  9. 7 - proc_fab_iovalid
 22.64474|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 22.65500|ISTEP 10. 1 - proc_build_smp
 22.82694|ISTEP 10. 2 - host_slave_sbe_update
 23.19122|ISTEP 10. 3 - host_set_voltages
 23.22967|ISTEP 10. 4 - proc_cen_ref_clk_enable
 23.24796|ISTEP 10. 5 - proc_enable_osclite
 23.25149|ISTEP 10. 6 - proc_chiplet_scominit
 23.29582|ISTEP 10. 7 - proc_abus_scominit
 23.30367|ISTEP 10. 8 - proc_obus_scominit
 23.41506|ISTEP 10. 9 - proc_npu_scominit
 23.43864|ISTEP 10.10 - proc_pcie_scominit
 23.50481|ISTEP 10.11 - proc_scomoverride_chiplets
 23.50668|ISTEP 10.12 - proc_chiplet_enable_ridi
 23.51016|ISTEP 10.13 - host_rng_bist
 23.51569|ISTEP 10.14 - host_update_redundant_tpm
 23.58436|ISTEP 11. 1 - host_prd_hwreconfig
 23.58986|ISTEP 12. 1 - mss_getecid
 23.59528|ISTEP 13. 1 - host_disable_memvolt
 23.68756|ISTEP 13. 2 - mem_pll_reset
 23.70067|ISTEP 13. 3 - mem_pll_initf
 23.73316|ISTEP 13. 4 - mem_pll_setup
 23.76214|ISTEP 13. 6 - mem_startclocks
 23.78873|ISTEP 13. 7 - host_enable_memvolt
 23.79116|ISTEP 13. 8 - mss_scominit
 24.25292|ISTEP 13. 9 - mss_ddr_phy_reset
 24.36396|ISTEP 13.10 - mss_draminit
 24.57301|ISTEP 13.11 - mss_draminit_training
 24.92302|ISTEP 13.12 - mss_draminit_trainadv
 24.92883|ISTEP 13.13 - mss_draminit_mc
 24.96484|ISTEP 14. 1 - mss_memdiag
 68.40166|ISTEP 14. 2 - mss_thermal_init
 68.41117|ISTEP 14. 3 - proc_pcie_config
 68.42581|ISTEP 14. 4 - mss_power_cleanup
 68.42888|ISTEP 14. 5 - proc_setup_bars
 68.46459|ISTEP 14. 6 - proc_htm_setup
 68.47821|ISTEP 14. 7 - proc_exit_cache_contained
 68.49807|ISTEP 15. 1 - host_build_stop_image
 68.86304|ISTEP 15. 2 - proc_set_pba_homer_bar
 68.86812|ISTEP 15. 3 - host_establish_ex_chiplet
 68.87859|ISTEP 15. 4 - host_start_stop_engine
 68.98935|ISTEP 16. 1 - host_activate_master
  0.00837|ISTEP 16. 2 - host_activate_slave_cores
 70.19942|ISTEP 16. 3 - host_secure_rng
 70.23496|ISTEP 16. 4 - mss_scrub
 70.26489|ISTEP 16. 5 - host_ipl_complete
 70.28695|ISTEP 16. 6 - host_load_io_ppe
 70.28973|ISTEP 18.11 - proc_tod_setup
 70.34401|ISTEP 18.12 - proc_tod_init
 70.34992|ISTEP 20. 1 - host_load_payload
 70.64460|ISTEP 20. 2 - host_load_hdat
 74.32648|ISTEP 21. 1 - host_runtime_setup
 75.93543|================================================
 75.93888|Error reported by lpc (0x2400) PLID 0x90000054
 75.94060|  LpcDD::_readLPC&gt; Invalid buffer size requested (&gt;4 bytes)
 75.94061|  ModuleId   0x02 LPC::MOD_LPCDD_READLPC
 75.94062|  ReasonCode 0x2403 LPC::RC_BAD_ARG
 75.94233|  UserData1  LPC Address : 0x0ffffe0000000002
 75.94234|  UserData2  LPC Transaction Type : 0x0000000000000200
 75.94235|------------------------------------------------
 75.94236|  Callout type             : Procedure Callout
 75.94237|  Procedure                : EPUB_PRC_HB_CODE
 75.94238|  Priority                 : SRCI_PRIORITY_HIGH
 75.94239|------------------------------------------------
 75.94239|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 75.94240|================================================
 75.95703|System shutting down with error status 0x90000055
 75.64043|================================================
 75.64044|Error reported by initservice (0x0500) PLID 0x90000055
 75.64292|  Initialization Service launched a function and the task returned an error.
 75.64293|  ModuleId   0x01 BASE_INITSVC_MOD_ID
 75.64294|  ReasonCode 0x0506 WAIT_FN_FAILED
 75.64295|  UserData1  task id or task return code : 0x00000000000001b3
 75.64295|  UserData2  returned status from task : 0x0000000000000001
 75.64296|------------------------------------------------
 75.64297|  Callout type             : Procedure Callout
 75.64298|  Procedure                : EPUB_PRC_HB_CODE
 75.64299|  Priority                 : SRCI_PRIORITY_HIGH
 75.64299|------------------------------------------------
 75.64300|  host_runtime_setup
 75.64301|------------------------------------------------
 75.64302|  Hostboot Build ID: hostboot-faac61e/hbicore.bin
 75.64303|================================================
</msg>
<status endtime="20170810 04:52:20.882" starttime="20170810 04:52:20.881" status="PASS"></status>
</kw>
<status endtime="20170810 04:52:20.883" starttime="20170810 04:51:33.217" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status endtime="20170810 04:52:20.883" starttime="20170810 04:41:21.002" critical="yes" status="FAIL">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Quiesced</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170810 04:52:20.884" starttime="20170810 04:41:20.969" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170810 04:52:20.887" starttime="20170810 04:41:14.789" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" id="s1" fail="1">Tests</stat>
<stat pass="1" name="Security" id="s1-s1" fail="0">Tests.Security</stat>
<stat pass="1" name="Test Ssl" id="s1-s1-s1" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" id="s1-s2" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
