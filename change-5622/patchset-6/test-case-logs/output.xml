<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 17:27:47.624" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite id="s1" name="Tests" source="/tmp/fspcibld/11132/obmc-robot/tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:48.098">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170809 17:27:48.098" endtime="20170809 17:27:48.098"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:48.098">${has_host} = False</msg>
<status status="PASS" starttime="20170809 17:27:48.097" endtime="20170809 17:27:48.098"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:48.099" endtime="20170809 17:27:48.099"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.099" endtime="20170809 17:27:48.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:48.101">${port_num} = 22</msg>
<status status="PASS" starttime="20170809 17:27:48.101" endtime="20170809 17:27:48.101"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:48.101">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170809 17:27:48.101" endtime="20170809 17:27:48.101"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:48.102">${https_num} = 443</msg>
<status status="PASS" starttime="20170809 17:27:48.102" endtime="20170809 17:27:48.102"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:48.103">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170809 17:27:48.102" endtime="20170809 17:27:48.103"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.100" endtime="20170809 17:27:48.103"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.100" endtime="20170809 17:27:48.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:48.104">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170809 17:27:48.103" endtime="20170809 17:27:48.104"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:48.104">${has_port} = False</msg>
<status status="PASS" starttime="20170809 17:27:48.103" endtime="20170809 17:27:48.104"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:48.105" endtime="20170809 17:27:48.106"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:48.106" endtime="20170809 17:27:48.106"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.105" endtime="20170809 17:27:48.106"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.104" endtime="20170809 17:27:48.106"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:48.107">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 17:27:49.826">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170809 17:27:48.106" endtime="20170809 17:27:49.826"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.096" endtime="20170809 17:27:49.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:49.828">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170809 17:27:49.905">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 17:27:49.905">${output} = VERSION_ID="v1.99.8-204-g169a8a3"</msg>
<msg level="INFO" timestamp="20170809 17:27:49.905">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:27:49.828" endtime="20170809 17:27:49.905"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:49.906">Length is 0</msg>
<status status="PASS" starttime="20170809 17:27:49.906" endtime="20170809 17:27:49.906"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:49.906">VERSION_ID="v1.99.8-204-g169a8a3"</msg>
<status status="PASS" starttime="20170809 17:27:49.906" endtime="20170809 17:27:49.906"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:49.827" endtime="20170809 17:27:49.907"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:49.827" endtime="20170809 17:27:49.907"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:49.908">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170809 17:27:50.067">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170809 17:27:50.067">${stdout} = FFS: Flash header not found. Code: 100</msg>
<msg level="INFO" timestamp="20170809 17:27:50.067">${stderr} = Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory</msg>
<status status="PASS" starttime="20170809 17:27:49.908" endtime="20170809 17:27:50.067"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:50.068">Length is 81</msg>
<msg level="FAIL" timestamp="20170809 17:27:50.068">'Error 100 opening ffs !
cat: can't open '/tmp/out.txt': No such file or directory' should be empty.</msg>
<status status="FAIL" starttime="20170809 17:27:50.068" endtime="20170809 17:27:50.068"></status>
</kw>
<status status="FAIL" starttime="20170809 17:27:49.907" endtime="20170809 17:27:50.068"></status>
</kw>
<status status="FAIL" starttime="20170809 17:27:49.907" endtime="20170809 17:27:50.068"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:49.907" endtime="20170809 17:27:50.069"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:50.284">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:27:50.284">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 17:27:51.067">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20170809 17:27:51.068">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 17:27:51.215">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 17:27:51.223">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 17:27:51.223">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 17:27:51.224">${rc} = 0</msg>
<status status="PASS" starttime="20170809 17:27:50.070" endtime="20170809 17:27:51.224"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:51.224">Length is 0</msg>
<status status="PASS" starttime="20170809 17:27:51.224" endtime="20170809 17:27:51.224"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:51.225">Length is 11</msg>
<status status="PASS" starttime="20170809 17:27:51.224" endtime="20170809 17:27:51.225"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:51.225">${bmc_model} = Witherspoon</msg>
<status status="PASS" starttime="20170809 17:27:50.069" endtime="20170809 17:27:51.225"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:51.225">BMC Model=Witherspoon</msg>
<status status="PASS" starttime="20170809 17:27:51.225" endtime="20170809 17:27:51.225"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:50.069" endtime="20170809 17:27:51.226"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:50.069" endtime="20170809 17:27:51.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:51.228">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" starttime="20170809 17:27:51.227" endtime="20170809 17:27:51.228"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:51.228">${has_host} = False</msg>
<status status="PASS" starttime="20170809 17:27:51.227" endtime="20170809 17:27:51.228"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:51.229" endtime="20170809 17:27:51.229"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.229" endtime="20170809 17:27:51.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:51.231">${port_num} = 22</msg>
<status status="PASS" starttime="20170809 17:27:51.231" endtime="20170809 17:27:51.231"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:51.232">${SSH_PORT} = 22</msg>
<status status="PASS" starttime="20170809 17:27:51.231" endtime="20170809 17:27:51.232"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:51.232">${https_num} = 443</msg>
<status status="PASS" starttime="20170809 17:27:51.232" endtime="20170809 17:27:51.232"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:51.233">${AUTH_URI} = https://9.41.166.169:443</msg>
<status status="PASS" starttime="20170809 17:27:51.232" endtime="20170809 17:27:51.233"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.230" endtime="20170809 17:27:51.233"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.230" endtime="20170809 17:27:51.233"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:51.234">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" starttime="20170809 17:27:51.234" endtime="20170809 17:27:51.234"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:51.234">${has_port} = False</msg>
<status status="PASS" starttime="20170809 17:27:51.233" endtime="20170809 17:27:51.234"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:51.236" endtime="20170809 17:27:51.236"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:51.236" endtime="20170809 17:27:51.237"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.235" endtime="20170809 17:27:51.237"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.235" endtime="20170809 17:27:51.237"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:51.237">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170809 17:27:52.917">Read output: root@witherspoon:~#</msg>
<status status="PASS" starttime="20170809 17:27:51.237" endtime="20170809 17:27:52.917"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.226" endtime="20170809 17:27:52.918"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:52.919">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170809 17:27:53.006">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 17:27:53.006">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170809 17:27:53.006">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:27:52.918" endtime="20170809 17:27:53.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.006">Length is 0</msg>
<status status="PASS" starttime="20170809 17:27:53.006" endtime="20170809 17:27:53.007"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.007">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" starttime="20170809 17:27:52.918" endtime="20170809 17:27:53.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.007" endtime="20170809 17:27:53.008"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.226" endtime="20170809 17:27:53.008"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:51.226" endtime="20170809 17:27:53.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.008" endtime="20170809 17:27:53.008"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:48.096" endtime="20170809 17:27:53.009"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/11132/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/11132/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.088">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:27:53.087" endtime="20170809 17:27:53.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:27:53.088" endtime="20170809 17:27:53.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.089">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:27:53.089" endtime="20170809 17:27:53.089"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:27:53.090" endtime="20170809 17:27:53.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.311">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:27:53.091" endtime="20170809 17:27:53.311"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:27:53.311">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.091" endtime="20170809 17:27:53.311"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.312">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.311" endtime="20170809 17:27:53.312"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.312">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.312" endtime="20170809 17:27:53.312"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.087" endtime="20170809 17:27:53.313"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.086" endtime="20170809 17:27:53.313"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.086" endtime="20170809 17:27:53.313"></status>
</kw>
<kw type="teardown" library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.319">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:27:53.318" endtime="20170809 17:27:53.319"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.320">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:27:53.320" endtime="20170809 17:27:53.320"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.321">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:27:53.321" endtime="20170809 17:27:53.321"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.322">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:27:53.321" endtime="20170809 17:27:53.322"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.524">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:27:53.323" endtime="20170809 17:27:53.525"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.525">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:27:53.525">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.322" endtime="20170809 17:27:53.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.525">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.525" endtime="20170809 17:27:53.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.526" endtime="20170809 17:27:53.526"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.317" endtime="20170809 17:27:53.526"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.317" endtime="20170809 17:27:53.526"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.316" endtime="20170809 17:27:53.527"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.527">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170809 17:27:53.527" endtime="20170809 17:27:53.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.529">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:27:53.529" endtime="20170809 17:27:53.529"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.530">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:27:53.530" endtime="20170809 17:27:53.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.529" endtime="20170809 17:27:53.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.528" endtime="20170809 17:27:53.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.527" endtime="20170809 17:27:53.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.620">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:27:53.620">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.531" endtime="20170809 17:27:53.620"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.622">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:27:53.622" endtime="20170809 17:27:53.622"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.623">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:27:53.623" endtime="20170809 17:27:53.623"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.622" endtime="20170809 17:27:53.623"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.621" endtime="20170809 17:27:53.623"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.620" endtime="20170809 17:27:53.624"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:27:53.624">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:27:53.624" endtime="20170809 17:27:53.624"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.624">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.315" endtime="20170809 17:27:53.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.624" endtime="20170809 17:27:53.625"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.625">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:27:53.626">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:27:53.626">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:27:53.625" endtime="20170809 17:27:53.626"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.626">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170809 17:27:53.314" endtime="20170809 17:27:53.626"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.626">${host_state} = Off</msg>
<status status="PASS" starttime="20170809 17:27:53.314" endtime="20170809 17:27:53.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:53.627">Off != Quiesced</msg>
<status status="FAIL" starttime="20170809 17:27:53.627" endtime="20170809 17:27:53.627"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.628">${status} = False</msg>
<status status="PASS" starttime="20170809 17:27:53.627" endtime="20170809 17:27:53.628"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.628">${status} = False</msg>
<status status="PASS" starttime="20170809 17:27:53.314" endtime="20170809 17:27:53.628"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.628" endtime="20170809 17:27:53.628"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.629" endtime="20170809 17:27:53.629"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.638">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170809 17:27:53.630" endtime="20170809 17:27:53.638"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.647">${FFDC_DIR_PATH} = </msg>
<status status="PASS" starttime="20170809 17:27:53.639" endtime="20170809 17:27:53.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.649">${cur_time} = 2017-08-09 17:27:53:648730</msg>
<status status="PASS" starttime="20170809 17:27:53.649" endtime="20170809 17:27:53.649"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.649">${cur_time} = 20170809172753648730</msg>
<status status="PASS" starttime="20170809 17:27:53.649" endtime="20170809 17:27:53.650"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.648" endtime="20170809 17:27:53.650"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.654">${FFDC_TIME} = 20170809172753648730</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.655">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170809 17:27:53.655" endtime="20170809 17:27:53.655"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.656">${suite_name} = 20170809172753648730_TestsSecurityTestSsl</msg>
<status status="PASS" starttime="20170809 17:27:53.655" endtime="20170809 17:27:53.656"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.656">${test_name} = TestSSLConnection</msg>
<status status="PASS" starttime="20170809 17:27:53.656" endtime="20170809 17:27:53.656"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.657">${test_name} = 20170809172753648730_TestSSLConnection</msg>
<status status="PASS" starttime="20170809 17:27:53.656" endtime="20170809 17:27:53.657"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.654" endtime="20170809 17:27:53.657"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.657">${FFDC_DIR_PATH} = /tmp/fspcibld/11132/obmc-robot/logs/20170809172753648730_TestsSecurityTestSsl/20170809172753648730_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170809 17:27:53.662">${FFDC_PREFIX} = 20170809172753648730_</msg>
<status status="PASS" starttime="20170809 17:27:53.648" endtime="20170809 17:27:53.662"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.647" endtime="20170809 17:27:53.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.662" endtime="20170809 17:27:53.663"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.663" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs"&gt;/tmp/fspcibld/11132/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:27:53.663" endtime="20170809 17:27:53.663"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:53.665">File '/tmp/fspcibld/11132/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" starttime="20170809 17:27:53.664" endtime="20170809 17:27:53.665"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.665">${exist} = False</msg>
<status status="PASS" starttime="20170809 17:27:53.664" endtime="20170809 17:27:53.665"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.666" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:27:53.666" endtime="20170809 17:27:53.666"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.665" endtime="20170809 17:27:53.666"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.666" endtime="20170809 17:27:53.667"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.668">${cur_time} = 2017-08-09 17:27:53:667307</msg>
<status status="PASS" starttime="20170809 17:27:53.667" endtime="20170809 17:27:53.668"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.668">${cur_time} = 20170809172753667307</msg>
<status status="PASS" starttime="20170809 17:27:53.668" endtime="20170809 17:27:53.668"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.669">${cur_time} = 20170809172753667307</msg>
<status status="PASS" starttime="20170809 17:27:53.667" endtime="20170809 17:27:53.669"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.669" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:27:53.669" endtime="20170809 17:27:53.669"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.629" endtime="20170809 17:27:53.670"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.313" endtime="20170809 17:27:53.670"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" starttime="20170809 17:27:53.085" critical="yes" endtime="20170809 17:27:53.670"></status>
</test>
<kw type="teardown" library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:27:53.670">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:27:53.670" endtime="20170809 17:27:53.671"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" starttime="20170809 17:27:53.011" endtime="20170809 17:27:53.671"></status>
</suite>
<status status="PASS" starttime="20170809 17:27:53.009" endtime="20170809 17:27:53.672"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/11132/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" library="utils" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.708">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:27:53.708" endtime="20170809 17:27:53.708"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.709">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:27:53.709" endtime="20170809 17:27:53.709"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.709">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:27:53.708" endtime="20170809 17:27:53.709"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.711">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:27:53.711" endtime="20170809 17:27:53.711"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.712">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:27:53.711" endtime="20170809 17:27:53.712"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.712">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:27:53.710" endtime="20170809 17:27:53.712"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.713">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170809 17:27:53.713" endtime="20170809 17:27:53.713"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.713" endtime="20170809 17:27:53.714"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.718">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:27:53.721">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:27:53.721">${output} = /tmp/fspcibld/11132/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170809 17:27:53.714" endtime="20170809 17:27:53.721"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.723" endtime="20170809 17:27:53.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.724" endtime="20170809 17:27:53.725"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.726">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170809 17:27:53.725" endtime="20170809 17:27:53.726"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.726">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170809 17:27:53.712" endtime="20170809 17:27:53.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.727">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170809 17:27:53.727" endtime="20170809 17:27:53.727"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.728" endtime="20170809 17:27:53.728"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.740">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:27:53.742">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:27:53.742">${os_con_pid} = </msg>
<status status="PASS" starttime="20170809 17:27:53.729" endtime="20170809 17:27:53.742"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.744" endtime="20170809 17:27:53.745"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.746">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170809 17:27:53.745" endtime="20170809 17:27:53.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.746" endtime="20170809 17:27:53.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.748">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 17:27:53.748">${output} = None</msg>
<status status="PASS" starttime="20170809 17:27:53.747" endtime="20170809 17:27:53.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.748" endtime="20170809 17:27:53.748"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:27:53.751">Source file '/tmp/9.41.166.169_os_console' does not exist.</msg>
<status status="FAIL" starttime="20170809 17:27:53.750" endtime="20170809 17:27:53.751"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.749" endtime="20170809 17:27:53.751"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.749" endtime="20170809 17:27:53.751"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.752">${output} = </msg>
<status status="PASS" starttime="20170809 17:27:53.752" endtime="20170809 17:27:53.752"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.753">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170809 17:27:53.752" endtime="20170809 17:27:53.753"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.754" endtime="20170809 17:27:53.811"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.812">${rc} = 1</msg>
<msg level="INFO" timestamp="20170809 17:27:53.812">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170809 17:27:53.753" endtime="20170809 17:27:53.812"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.813">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory
</msg>
<status status="PASS" starttime="20170809 17:27:53.710" endtime="20170809 17:27:53.813"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.814" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:27:53.814" endtime="20170809 17:27:53.815"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.816">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170809 17:27:53.815" endtime="20170809 17:27:53.816"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.816" endtime="20170809 17:27:53.816"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.819">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:27:53.822">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:27:53.822">${output} = /tmp/fspcibld/11132/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170809 17:27:53.816" endtime="20170809 17:27:53.822"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.824" endtime="20170809 17:27:53.825"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.825" endtime="20170809 17:27:53.826"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.826">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170809 17:27:53.826" endtime="20170809 17:27:53.826"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:53.827">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170809 17:27:53.815" endtime="20170809 17:27:53.827"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.827">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status status="PASS" starttime="20170809 17:27:53.827" endtime="20170809 17:27:53.827"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.828" endtime="20170809 17:27:53.828"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.831">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170809 17:27:53.836">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:27:53.836">${output} = </msg>
<status status="PASS" starttime="20170809 17:27:53.828" endtime="20170809 17:27:53.836"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:53.838" endtime="20170809 17:27:53.839"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.707" endtime="20170809 17:27:53.840"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.841">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.844">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" starttime="20170809 17:27:53.843" endtime="20170809 17:27:53.844"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.845">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170809 17:27:53.844" endtime="20170809 17:27:53.845"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:53.850">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:27:53.849" endtime="20170809 17:27:53.850"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.851">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:27:53.851" endtime="20170809 17:27:53.851"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.852">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:27:53.851" endtime="20170809 17:27:53.852"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:53.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:27:53.852" endtime="20170809 17:27:53.853"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.416">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:27:53.854" endtime="20170809 17:27:54.416"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:54.417">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:27:54.417">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.853" endtime="20170809 17:27:54.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.417">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:54.417" endtime="20170809 17:27:54.417"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:54.418" endtime="20170809 17:27:54.419"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.848" endtime="20170809 17:27:54.419"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.847" endtime="20170809 17:27:54.419"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.846" endtime="20170809 17:27:54.419"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.419">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170809 17:27:54.419" endtime="20170809 17:27:54.419"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.420">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:27:54.420" endtime="20170809 17:27:54.420"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:54.420" endtime="20170809 17:27:54.421"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.423">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status status="PASS" starttime="20170809 17:27:54.422" endtime="20170809 17:27:54.423"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.424">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170809 17:27:54.424" endtime="20170809 17:27:54.424"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.424" endtime="20170809 17:27:54.425"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.421" endtime="20170809 17:27:54.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.985">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 17:27:54.986">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:54.425" endtime="20170809 17:27:54.986"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.987">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:27:54.987" endtime="20170809 17:27:54.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.989">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:27:54.988" endtime="20170809 17:27:54.989"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.987" endtime="20170809 17:27:54.989"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.986" endtime="20170809 17:27:54.989"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:27:54.989">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:27:54.989" endtime="20170809 17:27:54.989"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:54.990">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:53.845" endtime="20170809 17:27:54.990"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:54.990" endtime="20170809 17:27:54.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.991">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:27:54.991">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:27:54.991">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:27:54.991" endtime="20170809 17:27:54.991"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.844" endtime="20170809 17:27:54.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:54.991" endtime="20170809 17:27:54.992"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Is Chassis Off">
<doc>Check if chassis state is "Off".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:54.998">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:27:54.997" endtime="20170809 17:27:54.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.999">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:27:54.998" endtime="20170809 17:27:54.999"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:54.999">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:27:54.999" endtime="20170809 17:27:54.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:55.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:27:55.000" endtime="20170809 17:27:55.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:56.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:27:55.001" endtime="20170809 17:27:56.112"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:56.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:27:56.112">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:55.001" endtime="20170809 17:27:56.112"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:56.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:56.112" endtime="20170809 17:27:56.113"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:56.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:56.113" endtime="20170809 17:27:56.114"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.997" endtime="20170809 17:27:56.114"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.996" endtime="20170809 17:27:56.114"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.996" endtime="20170809 17:27:56.114"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:56.115">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:27:56.114" endtime="20170809 17:27:56.115"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:56.117">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:27:56.116" endtime="20170809 17:27:56.117"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:56.118">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:27:56.118" endtime="20170809 17:27:56.118"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:56.117" endtime="20170809 17:27:56.118"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:56.116" endtime="20170809 17:27:56.118"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:56.115" endtime="20170809 17:27:56.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.019">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:27:57.019">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:56.118" endtime="20170809 17:27:57.019"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.021">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:27:57.021" endtime="20170809 17:27:57.021"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.022">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:27:57.022" endtime="20170809 17:27:57.022"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.022" endtime="20170809 17:27:57.022"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.020" endtime="20170809 17:27:57.023"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.020" endtime="20170809 17:27:57.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:27:57.023">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:27:57.023" endtime="20170809 17:27:57.023"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:57.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:54.995" endtime="20170809 17:27:57.023"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:57.024" endtime="20170809 17:27:57.024"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.025">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:27:57.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:27:57.025">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:27:57.024" endtime="20170809 17:27:57.025"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:57.025">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:27:54.995" endtime="20170809 17:27:57.025"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:57.025">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:27:54.993" endtime="20170809 17:27:57.025"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:27:57.026" endtime="20170809 17:27:57.026"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.993" endtime="20170809 17:27:57.026"></status>
</kw>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.030">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:27:57.030" endtime="20170809 17:27:57.030"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.031">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:27:57.031" endtime="20170809 17:27:57.031"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.031">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:27:57.031" endtime="20170809 17:27:57.032"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:27:57.032" endtime="20170809 17:27:57.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.567">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:27:57.033" endtime="20170809 17:27:57.567"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:27:57.567">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:27:57.567">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:57.032" endtime="20170809 17:27:57.567"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.568">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:57.568" endtime="20170809 17:27:57.568"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:27:57.568" endtime="20170809 17:27:57.569"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.029" endtime="20170809 17:27:57.569"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.028" endtime="20170809 17:27:57.569"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.028" endtime="20170809 17:27:57.569"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.570">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170809 17:27:57.569" endtime="20170809 17:27:57.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:27:57.572">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:27:57.571" endtime="20170809 17:27:57.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:27:57.572">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:27:57.572" endtime="20170809 17:27:57.573"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.572" endtime="20170809 17:27:57.573"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.570" endtime="20170809 17:27:57.573"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:57.570" endtime="20170809 17:27:57.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.223">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:28:01.224">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:57.573" endtime="20170809 17:28:01.224"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.227">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:01.226" endtime="20170809 17:28:01.227"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.228">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:01.228" endtime="20170809 17:28:01.228"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.227" endtime="20170809 17:28:01.228"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.226" endtime="20170809 17:28:01.228"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.225" endtime="20170809 17:28:01.229"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:01.229">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:01.229" endtime="20170809 17:28:01.229"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:01.229">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:27:57.027" endtime="20170809 17:28:01.229"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.230">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:01.229" endtime="20170809 17:28:01.230"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.230">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:01.230">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:01.231">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:01.230" endtime="20170809 17:28:01.231"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:01.231">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170809 17:27:57.027" endtime="20170809 17:28:01.231"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:01.231">${host_state} = Off</msg>
<status status="PASS" starttime="20170809 17:27:57.026" endtime="20170809 17:28:01.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:28:01.231" endtime="20170809 17:28:01.232"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.992" endtime="20170809 17:28:01.232"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:54.992" endtime="20170809 17:28:01.232"></status>
</kw>
<status status="PASS" starttime="20170809 17:27:53.842" endtime="20170809 17:28:01.232"></status>
</kw>
<kw library="state_manager" name="Initiate Host Boot">
<doc>Initiate host power on.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.233">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" starttime="20170809 17:28:01.233" endtime="20170809 17:28:01.233"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.234">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" starttime="20170809 17:28:01.234" endtime="20170809 17:28:01.234"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.237">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:28:01.237" endtime="20170809 17:28:01.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.238">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:01.238" endtime="20170809 17:28:01.238"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.239">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:28:01.238" endtime="20170809 17:28:01.239"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:28:01.239" endtime="20170809 17:28:01.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.418">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:28:01.240" endtime="20170809 17:28:01.418"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:01.418">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:28:01.418">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:01.240" endtime="20170809 17:28:01.418"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.419">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:01.418" endtime="20170809 17:28:01.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.419">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:01.419" endtime="20170809 17:28:01.419"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.236" endtime="20170809 17:28:01.420"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.236" endtime="20170809 17:28:01.420"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.235" endtime="20170809 17:28:01.420"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.420">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" starttime="20170809 17:28:01.420" endtime="20170809 17:28:01.420"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.421">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:01.421" endtime="20170809 17:28:01.421"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:28:01.421" endtime="20170809 17:28:01.422"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:01.424">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content...</msg>
<status status="PASS" starttime="20170809 17:28:01.423" endtime="20170809 17:28:01.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:01.426">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" starttime="20170809 17:28:01.425" endtime="20170809 17:28:01.426"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.424" endtime="20170809 17:28:01.426"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.422" endtime="20170809 17:28:01.426"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:02.193">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170809 17:28:02.194">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:01.426" endtime="20170809 17:28:02.194"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:02.195">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:02.194" endtime="20170809 17:28:02.195"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:02.196">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:02.196" endtime="20170809 17:28:02.196"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:02.195" endtime="20170809 17:28:02.196"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:02.194" endtime="20170809 17:28:02.196"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:02.197">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:02.197" endtime="20170809 17:28:02.197"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:02.197">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:01.235" endtime="20170809 17:28:02.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:02.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:02.197" endtime="20170809 17:28:02.198"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:02.198">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:02.198">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:02.198">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:02.198" endtime="20170809 17:28:02.198"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:01.233" endtime="20170809 17:28:02.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:28:02.199" endtime="20170809 17:28:02.199"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:02.204">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:28:02.203" endtime="20170809 17:28:02.205"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:02.205">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:02.205" endtime="20170809 17:28:02.205"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:02.206">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:28:02.205" endtime="20170809 17:28:02.206"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:02.206">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:28:02.206" endtime="20170809 17:28:02.206"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:03.896">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:28:02.207" endtime="20170809 17:28:03.896"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:03.896">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:28:03.896">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:02.207" endtime="20170809 17:28:03.896"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:03.897">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:03.897" endtime="20170809 17:28:03.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:03.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:03.897" endtime="20170809 17:28:03.898"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:02.203" endtime="20170809 17:28:03.898"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:02.203" endtime="20170809 17:28:03.898"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:02.202" endtime="20170809 17:28:03.898"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:03.899">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:28:03.898" endtime="20170809 17:28:03.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:03.901">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:03.900" endtime="20170809 17:28:03.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:03.902">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:03.902" endtime="20170809 17:28:03.902"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:03.901" endtime="20170809 17:28:03.902"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:03.899" endtime="20170809 17:28:03.902"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:03.899" endtime="20170809 17:28:03.902"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:07.484">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:28:07.484">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:03.902" endtime="20170809 17:28:07.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:07.486">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:07.486" endtime="20170809 17:28:07.486"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:07.487">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:07.487" endtime="20170809 17:28:07.487"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:07.486" endtime="20170809 17:28:07.487"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:07.485" endtime="20170809 17:28:07.488"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:07.485" endtime="20170809 17:28:07.488"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:07.488">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:07.488" endtime="20170809 17:28:07.488"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:07.488">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:02.201" endtime="20170809 17:28:07.488"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:07.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:07.489" endtime="20170809 17:28:07.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:07.489">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:07.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:07.490">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:07.489" endtime="20170809 17:28:07.490"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:07.490">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:28:02.201" endtime="20170809 17:28:07.490"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:07.490">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:28:02.200" endtime="20170809 17:28:07.490"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:28:07.491">On != Off</msg>
<status status="FAIL" starttime="20170809 17:28:07.491" endtime="20170809 17:28:07.491"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:02.200" endtime="20170809 17:28:07.491"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:02.200" endtime="20170809 17:28:07.491"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:17.497">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:28:17.496" endtime="20170809 17:28:17.497"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:17.498">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:17.497" endtime="20170809 17:28:17.498"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:17.498">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:28:17.498" endtime="20170809 17:28:17.498"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:17.499">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:28:17.499" endtime="20170809 17:28:17.499"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:17.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:28:17.500" endtime="20170809 17:28:17.708"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:17.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:28:17.708">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:17.499" endtime="20170809 17:28:17.708"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:17.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:17.709" endtime="20170809 17:28:17.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:17.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:17.709" endtime="20170809 17:28:17.710"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:17.496" endtime="20170809 17:28:17.710"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:17.495" endtime="20170809 17:28:17.710"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:17.495" endtime="20170809 17:28:17.710"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:17.711">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:28:17.710" endtime="20170809 17:28:17.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:17.713">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:17.712" endtime="20170809 17:28:17.713"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:17.714">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:17.714" endtime="20170809 17:28:17.714"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:17.713" endtime="20170809 17:28:17.714"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:17.711" endtime="20170809 17:28:17.715"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:17.711" endtime="20170809 17:28:17.715"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:19.570">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:28:19.570">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:17.715" endtime="20170809 17:28:19.570"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:19.572">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:19.571" endtime="20170809 17:28:19.572"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:19.573">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:19.573" endtime="20170809 17:28:19.573"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:19.572" endtime="20170809 17:28:19.573"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:19.571" endtime="20170809 17:28:19.573"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:19.570" endtime="20170809 17:28:19.573"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:19.574">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:19.574" endtime="20170809 17:28:19.574"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:19.574">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:17.494" endtime="20170809 17:28:19.574"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:19.575">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:19.574" endtime="20170809 17:28:19.575"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:19.575">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:19.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:19.576">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:19.575" endtime="20170809 17:28:19.576"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:19.576">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:28:17.494" endtime="20170809 17:28:19.576"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:19.576">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:28:17.493" endtime="20170809 17:28:19.576"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:28:19.577">On != Off</msg>
<status status="FAIL" starttime="20170809 17:28:19.577" endtime="20170809 17:28:19.577"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:17.492" endtime="20170809 17:28:19.577"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:17.492" endtime="20170809 17:28:19.577"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.583">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:28:29.582" endtime="20170809 17:28:29.583"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.584">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:29.584" endtime="20170809 17:28:29.584"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.585">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:28:29.584" endtime="20170809 17:28:29.585"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.586">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:28:29.585" endtime="20170809 17:28:29.586"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:28:29.587" endtime="20170809 17:28:29.812"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:29.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:28:29.812">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:29.587" endtime="20170809 17:28:29.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.812">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:29.812" endtime="20170809 17:28:29.813"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.813">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:29.813" endtime="20170809 17:28:29.813"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.582" endtime="20170809 17:28:29.814"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.581" endtime="20170809 17:28:29.814"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.581" endtime="20170809 17:28:29.814"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.814">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:28:29.814" endtime="20170809 17:28:29.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.816">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:29.816" endtime="20170809 17:28:29.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.817">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:29.817" endtime="20170809 17:28:29.817"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.817" endtime="20170809 17:28:29.818"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.815" endtime="20170809 17:28:29.818"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.815" endtime="20170809 17:28:29.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.988">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:28:29.988">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:29.818" endtime="20170809 17:28:29.988"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.991">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:29.990" endtime="20170809 17:28:29.991"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.993">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:29.993" endtime="20170809 17:28:29.993"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.991" endtime="20170809 17:28:29.994"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.990" endtime="20170809 17:28:29.994"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:29.989" endtime="20170809 17:28:29.994"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:29.994">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:29.994" endtime="20170809 17:28:29.994"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:29.994">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:29.580" endtime="20170809 17:28:29.994"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:29.995">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:29.995" endtime="20170809 17:28:29.995"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:29.996">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:29.996">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:29.996">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:29.995" endtime="20170809 17:28:29.996"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:29.996">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:28:29.579" endtime="20170809 17:28:29.996"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:29.996">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:28:29.579" endtime="20170809 17:28:29.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:28:29.997">On != Off</msg>
<status status="FAIL" starttime="20170809 17:28:29.997" endtime="20170809 17:28:29.997"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:29.579" endtime="20170809 17:28:29.997"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:29.578" endtime="20170809 17:28:29.997"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.006">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:28:40.006" endtime="20170809 17:28:40.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.007">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:40.007" endtime="20170809 17:28:40.007"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.008">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:28:40.008" endtime="20170809 17:28:40.008"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.009">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:28:40.009" endtime="20170809 17:28:40.009"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.255">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:28:40.010" endtime="20170809 17:28:40.255"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:40.255">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:28:40.255">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:40.010" endtime="20170809 17:28:40.255"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.256">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:40.255" endtime="20170809 17:28:40.256"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:40.256" endtime="20170809 17:28:40.256"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.005" endtime="20170809 17:28:40.257"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.005" endtime="20170809 17:28:40.257"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.004" endtime="20170809 17:28:40.257"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.257">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:28:40.257" endtime="20170809 17:28:40.257"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.259">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:40.259" endtime="20170809 17:28:40.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.260">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:40.260" endtime="20170809 17:28:40.260"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.260" endtime="20170809 17:28:40.260"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.258" endtime="20170809 17:28:40.261"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.258" endtime="20170809 17:28:40.261"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.323">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:28:40.324">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:40.261" endtime="20170809 17:28:40.324"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.326">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:40.325" endtime="20170809 17:28:40.326"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.327">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:40.326" endtime="20170809 17:28:40.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.326" endtime="20170809 17:28:40.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.325" endtime="20170809 17:28:40.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:40.324" endtime="20170809 17:28:40.327"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:40.327">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:40.327" endtime="20170809 17:28:40.328"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:40.328">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:40.000" endtime="20170809 17:28:40.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:40.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:40.328" endtime="20170809 17:28:40.328"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:40.329">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:40.329">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:40.329">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:40.329" endtime="20170809 17:28:40.329"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:40.329">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:28:39.999" endtime="20170809 17:28:40.329"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:40.330">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:28:39.999" endtime="20170809 17:28:40.330"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:28:40.330">On != Off</msg>
<status status="FAIL" starttime="20170809 17:28:40.330" endtime="20170809 17:28:40.330"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:39.998" endtime="20170809 17:28:40.331"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:39.998" endtime="20170809 17:28:40.331"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.336">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:28:50.335" endtime="20170809 17:28:50.336"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:28:50.336" endtime="20170809 17:28:50.337"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.337">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:28:50.337" endtime="20170809 17:28:50.337"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:28:50.338" endtime="20170809 17:28:50.338"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.530">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:28:50.339" endtime="20170809 17:28:50.530"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:50.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:28:50.531">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:50.338" endtime="20170809 17:28:50.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.531">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:50.531" endtime="20170809 17:28:50.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.532">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:50.532" endtime="20170809 17:28:50.532"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.335" endtime="20170809 17:28:50.532"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.334" endtime="20170809 17:28:50.532"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.334" endtime="20170809 17:28:50.532"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.533">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:28:50.533" endtime="20170809 17:28:50.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.535">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:50.534" endtime="20170809 17:28:50.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.536">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:28:50.536" endtime="20170809 17:28:50.536"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.535" endtime="20170809 17:28:50.536"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.534" endtime="20170809 17:28:50.536"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.533" endtime="20170809 17:28:50.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.623">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:28:50.623">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:50.537" endtime="20170809 17:28:50.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.626">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:50.625" endtime="20170809 17:28:50.626"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.627">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:28:50.627" endtime="20170809 17:28:50.627"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.626" endtime="20170809 17:28:50.627"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.624" endtime="20170809 17:28:50.627"></status>
</kw>
<status status="PASS" starttime="20170809 17:28:50.624" endtime="20170809 17:28:50.628"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:28:50.628">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:28:50.628" endtime="20170809 17:28:50.628"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:50.628">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:28:50.333" endtime="20170809 17:28:50.628"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:28:50.629">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:28:50.629" endtime="20170809 17:28:50.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:28:50.629">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:28:50.629">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:28:50.630">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:28:50.629" endtime="20170809 17:28:50.630"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:50.630">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:28:50.333" endtime="20170809 17:28:50.630"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:28:50.630">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:28:50.332" endtime="20170809 17:28:50.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:28:50.631">On != Off</msg>
<status status="FAIL" starttime="20170809 17:28:50.631" endtime="20170809 17:28:50.631"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:50.332" endtime="20170809 17:28:50.631"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:50.331" endtime="20170809 17:28:50.631"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.637">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:29:00.637" endtime="20170809 17:29:00.637"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.638">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:29:00.638" endtime="20170809 17:29:00.638"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.639">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:29:00.638" endtime="20170809 17:29:00.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.639">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:29:00.639" endtime="20170809 17:29:00.639"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:29:00.640" endtime="20170809 17:29:00.817"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:00.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:29:00.817">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:00.640" endtime="20170809 17:29:00.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:00.817" endtime="20170809 17:29:00.818"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:00.818" endtime="20170809 17:29:00.819"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.636" endtime="20170809 17:29:00.819"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.635" endtime="20170809 17:29:00.819"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.634" endtime="20170809 17:29:00.819"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.819">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:29:00.819" endtime="20170809 17:29:00.819"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.821">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:00.821" endtime="20170809 17:29:00.822"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.822">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:00.822" endtime="20170809 17:29:00.823"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.822" endtime="20170809 17:29:00.823"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.820" endtime="20170809 17:29:00.823"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.820" endtime="20170809 17:29:00.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.886">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:29:00.887">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:00.823" endtime="20170809 17:29:00.887"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.888">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:00.888" endtime="20170809 17:29:00.888"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.890">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:00.889" endtime="20170809 17:29:00.890"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.889" endtime="20170809 17:29:00.890"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.887" endtime="20170809 17:29:00.890"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:00.887" endtime="20170809 17:29:00.890"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:29:00.890">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:29:00.890" endtime="20170809 17:29:00.891"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:00.891">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:00.634" endtime="20170809 17:29:00.891"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:00.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:00.891" endtime="20170809 17:29:00.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:00.892">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:29:00.892">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:29:00.892">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:29:00.892" endtime="20170809 17:29:00.892"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:00.892">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:29:00.633" endtime="20170809 17:29:00.892"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:00.893">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:29:00.633" endtime="20170809 17:29:00.893"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:29:00.893">On != Off</msg>
<status status="FAIL" starttime="20170809 17:29:00.893" endtime="20170809 17:29:00.893"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:00.632" endtime="20170809 17:29:00.894"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:00.632" endtime="20170809 17:29:00.894"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:10.899">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:29:10.898" endtime="20170809 17:29:10.899"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:10.900">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:29:10.899" endtime="20170809 17:29:10.900"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:10.900">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:29:10.900" endtime="20170809 17:29:10.901"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:10.901">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:29:10.901" endtime="20170809 17:29:10.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:11.143">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:29:10.902" endtime="20170809 17:29:11.143"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:11.143">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:29:11.143">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:10.901" endtime="20170809 17:29:11.143"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:11.144">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:11.144" endtime="20170809 17:29:11.144"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:11.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:11.145" endtime="20170809 17:29:11.145"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:10.898" endtime="20170809 17:29:11.145"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:10.897" endtime="20170809 17:29:11.145"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:10.897" endtime="20170809 17:29:11.145"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:11.146">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:29:11.145" endtime="20170809 17:29:11.146"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:11.148">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:11.147" endtime="20170809 17:29:11.148"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:11.149">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:11.149" endtime="20170809 17:29:11.149"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:11.148" endtime="20170809 17:29:11.149"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:11.147" endtime="20170809 17:29:11.149"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:11.146" endtime="20170809 17:29:11.149"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:11.255">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:29:11.256">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:11.149" endtime="20170809 17:29:11.256"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:11.257">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:11.257" endtime="20170809 17:29:11.257"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:11.258">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:11.258" endtime="20170809 17:29:11.258"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:11.258" endtime="20170809 17:29:11.258"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:11.256" endtime="20170809 17:29:11.259"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:11.256" endtime="20170809 17:29:11.259"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:29:11.259">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:29:11.259" endtime="20170809 17:29:11.259"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:11.259">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:10.896" endtime="20170809 17:29:11.259"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:11.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:11.260" endtime="20170809 17:29:11.260"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:11.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:29:11.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:29:11.261">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:29:11.261" endtime="20170809 17:29:11.261"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:11.262">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:29:10.896" endtime="20170809 17:29:11.262"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:11.262">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:29:10.895" endtime="20170809 17:29:11.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:29:11.263">On != Off</msg>
<status status="FAIL" starttime="20170809 17:29:11.263" endtime="20170809 17:29:11.263"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:10.895" endtime="20170809 17:29:11.263"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:10.894" endtime="20170809 17:29:11.264"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.269">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:29:21.269" endtime="20170809 17:29:21.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:29:21.270" endtime="20170809 17:29:21.270"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.271">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:29:21.270" endtime="20170809 17:29:21.271"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:29:21.271" endtime="20170809 17:29:21.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.474">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:29:21.272" endtime="20170809 17:29:21.474"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:21.474">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:29:21.474">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:21.272" endtime="20170809 17:29:21.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.475">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:21.475" endtime="20170809 17:29:21.475"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:21.476" endtime="20170809 17:29:21.476"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.268" endtime="20170809 17:29:21.476"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.267" endtime="20170809 17:29:21.476"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.267" endtime="20170809 17:29:21.476"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.477">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:29:21.477" endtime="20170809 17:29:21.477"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.480">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:21.479" endtime="20170809 17:29:21.480"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.481">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:21.481" endtime="20170809 17:29:21.481"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.480" endtime="20170809 17:29:21.482"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.478" endtime="20170809 17:29:21.482"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.477" endtime="20170809 17:29:21.482"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.545">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:29:21.545">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:21.482" endtime="20170809 17:29:21.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.547">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:21.546" endtime="20170809 17:29:21.547"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.548">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:21.547" endtime="20170809 17:29:21.548"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.547" endtime="20170809 17:29:21.548"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.546" endtime="20170809 17:29:21.548"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:21.545" endtime="20170809 17:29:21.548"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:29:21.549">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:29:21.549" endtime="20170809 17:29:21.549"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:21.549">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:21.266" endtime="20170809 17:29:21.549"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:21.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:21.549" endtime="20170809 17:29:21.550"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:21.550">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:29:21.550">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:29:21.550">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:29:21.550" endtime="20170809 17:29:21.550"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:21.551">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:29:21.266" endtime="20170809 17:29:21.551"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:21.551">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:29:21.265" endtime="20170809 17:29:21.551"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:29:21.552">On != Off</msg>
<status status="FAIL" starttime="20170809 17:29:21.551" endtime="20170809 17:29:21.552"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:21.265" endtime="20170809 17:29:21.552"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:21.264" endtime="20170809 17:29:21.552"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.557">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:29:31.557" endtime="20170809 17:29:31.558"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.558">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:29:31.558" endtime="20170809 17:29:31.558"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.559">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:29:31.559" endtime="20170809 17:29:31.559"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.559">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:29:31.559" endtime="20170809 17:29:31.560"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.765">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:29:31.560" endtime="20170809 17:29:31.765"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:31.765">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:29:31.765">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:31.560" endtime="20170809 17:29:31.765"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.766">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:31.765" endtime="20170809 17:29:31.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:31.766" endtime="20170809 17:29:31.766"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.556" endtime="20170809 17:29:31.767"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.556" endtime="20170809 17:29:31.767"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.555" endtime="20170809 17:29:31.767"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.767">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:29:31.767" endtime="20170809 17:29:31.767"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.769">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:31.769" endtime="20170809 17:29:31.769"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.770">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:31.770" endtime="20170809 17:29:31.770"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.770" endtime="20170809 17:29:31.770"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.768" endtime="20170809 17:29:31.771"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.768" endtime="20170809 17:29:31.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.833">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:29:31.833">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:31.771" endtime="20170809 17:29:31.833"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.835">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:31.835" endtime="20170809 17:29:31.835"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.836">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:31.836" endtime="20170809 17:29:31.836"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.835" endtime="20170809 17:29:31.836"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.834" endtime="20170809 17:29:31.837"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:31.834" endtime="20170809 17:29:31.837"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:29:31.837">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:29:31.837" endtime="20170809 17:29:31.837"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:31.837">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:31.555" endtime="20170809 17:29:31.837"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:31.838">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:31.838" endtime="20170809 17:29:31.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:31.838">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:29:31.838">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:29:31.839">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:29:31.838" endtime="20170809 17:29:31.839"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:31.839">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:29:31.554" endtime="20170809 17:29:31.839"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:31.839">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:29:31.554" endtime="20170809 17:29:31.839"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:29:31.840">On != Off</msg>
<status status="FAIL" starttime="20170809 17:29:31.840" endtime="20170809 17:29:31.840"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:31.553" endtime="20170809 17:29:31.840"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:31.553" endtime="20170809 17:29:31.840"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:41.846">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:29:41.845" endtime="20170809 17:29:41.846"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:41.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:29:41.846" endtime="20170809 17:29:41.847"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:41.847">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:29:41.847" endtime="20170809 17:29:41.847"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:41.848">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:29:41.848" endtime="20170809 17:29:41.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:42.040">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:29:41.849" endtime="20170809 17:29:42.040"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:42.040">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:29:42.040">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:41.848" endtime="20170809 17:29:42.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:42.041">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:42.041" endtime="20170809 17:29:42.041"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:42.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:42.042" endtime="20170809 17:29:42.042"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:41.844" endtime="20170809 17:29:42.042"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:41.844" endtime="20170809 17:29:42.042"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:41.843" endtime="20170809 17:29:42.042"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:42.043">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:29:42.043" endtime="20170809 17:29:42.043"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:42.045">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:42.044" endtime="20170809 17:29:42.045"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:42.046">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:42.046" endtime="20170809 17:29:42.046"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:42.045" endtime="20170809 17:29:42.046"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:42.044" endtime="20170809 17:29:42.046"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:42.043" endtime="20170809 17:29:42.047"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:42.126">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:29:42.126">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:42.047" endtime="20170809 17:29:42.126"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:42.128">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:42.127" endtime="20170809 17:29:42.128"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:42.129">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:42.129" endtime="20170809 17:29:42.129"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:42.128" endtime="20170809 17:29:42.130"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:42.127" endtime="20170809 17:29:42.130"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:42.126" endtime="20170809 17:29:42.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:29:42.130">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:29:42.130" endtime="20170809 17:29:42.130"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:42.130">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:41.843" endtime="20170809 17:29:42.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:42.131">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:42.131" endtime="20170809 17:29:42.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:42.132">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:29:42.132">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:29:42.132">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:29:42.131" endtime="20170809 17:29:42.132"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:42.132">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:29:41.842" endtime="20170809 17:29:42.132"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:42.133">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:29:41.842" endtime="20170809 17:29:42.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:29:42.134">On != Off</msg>
<status status="FAIL" starttime="20170809 17:29:42.133" endtime="20170809 17:29:42.134"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:41.841" endtime="20170809 17:29:42.134"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:41.841" endtime="20170809 17:29:42.134"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.139">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:29:52.139" endtime="20170809 17:29:52.139"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:29:52.140" endtime="20170809 17:29:52.140"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.140">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:29:52.140" endtime="20170809 17:29:52.141"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:29:52.141" endtime="20170809 17:29:52.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:29:52.142" endtime="20170809 17:29:52.328"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:52.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:29:52.328">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:52.141" endtime="20170809 17:29:52.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:52.329" endtime="20170809 17:29:52.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:52.329" endtime="20170809 17:29:52.330"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.138" endtime="20170809 17:29:52.330"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.138" endtime="20170809 17:29:52.330"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.137" endtime="20170809 17:29:52.330"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.331">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:29:52.330" endtime="20170809 17:29:52.331"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.334">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:52.333" endtime="20170809 17:29:52.334"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.335">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:29:52.335" endtime="20170809 17:29:52.335"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.334" endtime="20170809 17:29:52.336"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.332" endtime="20170809 17:29:52.336"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.331" endtime="20170809 17:29:52.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:29:52.399">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:52.336" endtime="20170809 17:29:52.399"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.400">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:52.400" endtime="20170809 17:29:52.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.401">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:29:52.401" endtime="20170809 17:29:52.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.401" endtime="20170809 17:29:52.402"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.399" endtime="20170809 17:29:52.402"></status>
</kw>
<status status="PASS" starttime="20170809 17:29:52.399" endtime="20170809 17:29:52.402"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:29:52.402">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:29:52.402" endtime="20170809 17:29:52.402"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:52.402">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:29:52.136" endtime="20170809 17:29:52.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:29:52.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:29:52.403" endtime="20170809 17:29:52.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:29:52.404">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:29:52.404">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:29:52.404">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:29:52.403" endtime="20170809 17:29:52.404"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:52.404">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:29:52.136" endtime="20170809 17:29:52.404"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:29:52.404">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:29:52.135" endtime="20170809 17:29:52.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:29:52.405">On != Off</msg>
<status status="FAIL" starttime="20170809 17:29:52.405" endtime="20170809 17:29:52.405"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:52.135" endtime="20170809 17:29:52.405"></status>
</kw>
<status status="FAIL" starttime="20170809 17:29:52.134" endtime="20170809 17:29:52.406"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.414">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:30:02.413" endtime="20170809 17:30:02.414"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.415">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:30:02.414" endtime="20170809 17:30:02.415"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.415">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:30:02.415" endtime="20170809 17:30:02.416"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.416">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:30:02.416" endtime="20170809 17:30:02.416"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.645">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:30:02.417" endtime="20170809 17:30:02.645"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:02.645">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:30:02.645">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:02.417" endtime="20170809 17:30:02.645"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.646">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:02.645" endtime="20170809 17:30:02.646"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:02.646" endtime="20170809 17:30:02.647"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.410" endtime="20170809 17:30:02.647"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.409" endtime="20170809 17:30:02.647"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.409" endtime="20170809 17:30:02.647"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.647">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:30:02.647" endtime="20170809 17:30:02.647"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.650">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:02.649" endtime="20170809 17:30:02.650"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.651">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:02.651" endtime="20170809 17:30:02.651"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.650" endtime="20170809 17:30:02.652"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.648" endtime="20170809 17:30:02.652"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.648" endtime="20170809 17:30:02.652"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.740">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:30:02.740">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:02.652" endtime="20170809 17:30:02.740"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.742">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:02.741" endtime="20170809 17:30:02.742"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.768">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:02.742" endtime="20170809 17:30:02.768"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.742" endtime="20170809 17:30:02.769"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.741" endtime="20170809 17:30:02.769"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:02.740" endtime="20170809 17:30:02.769"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:30:02.769">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:30:02.769" endtime="20170809 17:30:02.769"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:02.770">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:02.408" endtime="20170809 17:30:02.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:02.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:02.770" endtime="20170809 17:30:02.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:02.771">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:30:02.771">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:30:02.771">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:30:02.771" endtime="20170809 17:30:02.771"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:02.772">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:30:02.407" endtime="20170809 17:30:02.772"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:02.772">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:30:02.407" endtime="20170809 17:30:02.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:30:02.772">On != Off</msg>
<status status="FAIL" starttime="20170809 17:30:02.772" endtime="20170809 17:30:02.773"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:02.407" endtime="20170809 17:30:02.773"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:02.406" endtime="20170809 17:30:02.773"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:12.779">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:30:12.779" endtime="20170809 17:30:12.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:12.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:30:12.780" endtime="20170809 17:30:12.780"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:12.781">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:30:12.780" endtime="20170809 17:30:12.781"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:12.782">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:30:12.781" endtime="20170809 17:30:12.782"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:13.132">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:30:12.782" endtime="20170809 17:30:13.132"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:13.132">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:30:13.133">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:12.782" endtime="20170809 17:30:13.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:13.133">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:13.133" endtime="20170809 17:30:13.133"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:13.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:13.134" endtime="20170809 17:30:13.134"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:12.778" endtime="20170809 17:30:13.134"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:12.777" endtime="20170809 17:30:13.134"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:12.777" endtime="20170809 17:30:13.134"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:13.135">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:30:13.135" endtime="20170809 17:30:13.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:13.137">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:13.137" endtime="20170809 17:30:13.137"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:13.138">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:13.138" endtime="20170809 17:30:13.138"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:13.137" endtime="20170809 17:30:13.138"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:13.136" endtime="20170809 17:30:13.138"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:13.135" endtime="20170809 17:30:13.139"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:13.235">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:30:13.235">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:13.139" endtime="20170809 17:30:13.235"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:13.237">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:13.236" endtime="20170809 17:30:13.237"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:13.237">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:13.237" endtime="20170809 17:30:13.238"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:13.237" endtime="20170809 17:30:13.238"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:13.236" endtime="20170809 17:30:13.238"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:13.235" endtime="20170809 17:30:13.238"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:30:13.238">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:30:13.238" endtime="20170809 17:30:13.238"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:13.239">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:12.776" endtime="20170809 17:30:13.239"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:13.239">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:13.239" endtime="20170809 17:30:13.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:13.240">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:30:13.240">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:30:13.240">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:30:13.240" endtime="20170809 17:30:13.240"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:13.240">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:30:12.775" endtime="20170809 17:30:13.240"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:13.241">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:30:12.775" endtime="20170809 17:30:13.241"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:30:13.241">On != Off</msg>
<status status="FAIL" starttime="20170809 17:30:13.241" endtime="20170809 17:30:13.241"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:12.774" endtime="20170809 17:30:13.242"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:12.773" endtime="20170809 17:30:13.242"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.247">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:30:23.247" endtime="20170809 17:30:23.248"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.248">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:30:23.248" endtime="20170809 17:30:23.248"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.249">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:30:23.249" endtime="20170809 17:30:23.249"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.250">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:30:23.249" endtime="20170809 17:30:23.250"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.443">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:30:23.250" endtime="20170809 17:30:23.443"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:23.443">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:30:23.443">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:23.250" endtime="20170809 17:30:23.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.444">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:23.444" endtime="20170809 17:30:23.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:23.444" endtime="20170809 17:30:23.445"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.246" endtime="20170809 17:30:23.445"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.246" endtime="20170809 17:30:23.445"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.245" endtime="20170809 17:30:23.445"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.446">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:30:23.445" endtime="20170809 17:30:23.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.448">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:23.447" endtime="20170809 17:30:23.448"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.449">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:23.448" endtime="20170809 17:30:23.449"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.448" endtime="20170809 17:30:23.449"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.446" endtime="20170809 17:30:23.449"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.446" endtime="20170809 17:30:23.449"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:30:23.540">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:23.449" endtime="20170809 17:30:23.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.542">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:23.542" endtime="20170809 17:30:23.542"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.543">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:23.543" endtime="20170809 17:30:23.543"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.542" endtime="20170809 17:30:23.543"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.541" endtime="20170809 17:30:23.543"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:23.540" endtime="20170809 17:30:23.543"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:30:23.544">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:30:23.544" endtime="20170809 17:30:23.544"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:23.544">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:23.244" endtime="20170809 17:30:23.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:23.545">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:23.544" endtime="20170809 17:30:23.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:23.545">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:30:23.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:30:23.545">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:30:23.545" endtime="20170809 17:30:23.546"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:23.546">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:30:23.244" endtime="20170809 17:30:23.546"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:23.546">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:30:23.243" endtime="20170809 17:30:23.546"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:30:23.547">On != Off</msg>
<status status="FAIL" starttime="20170809 17:30:23.546" endtime="20170809 17:30:23.547"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:23.243" endtime="20170809 17:30:23.547"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:23.242" endtime="20170809 17:30:23.547"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.552">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:30:33.552" endtime="20170809 17:30:33.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:30:33.553" endtime="20170809 17:30:33.553"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.554">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:30:33.553" endtime="20170809 17:30:33.554"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.554">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:30:33.554" endtime="20170809 17:30:33.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.765">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:30:33.555" endtime="20170809 17:30:33.766"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:33.766">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:30:33.766">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:33.555" endtime="20170809 17:30:33.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.766">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:33.766" endtime="20170809 17:30:33.767"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.767">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:33.767" endtime="20170809 17:30:33.767"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.551" endtime="20170809 17:30:33.767"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.551" endtime="20170809 17:30:33.767"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.550" endtime="20170809 17:30:33.768"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.768">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:30:33.768" endtime="20170809 17:30:33.768"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.770">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:33.770" endtime="20170809 17:30:33.770"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.771">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:33.771" endtime="20170809 17:30:33.771"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.770" endtime="20170809 17:30:33.771"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.769" endtime="20170809 17:30:33.771"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.768" endtime="20170809 17:30:33.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.850">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:30:33.851">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:33.772" endtime="20170809 17:30:33.851"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.853">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:33.852" endtime="20170809 17:30:33.853"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.853">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:33.853" endtime="20170809 17:30:33.854"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.853" endtime="20170809 17:30:33.854"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.851" endtime="20170809 17:30:33.854"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:33.851" endtime="20170809 17:30:33.854"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:30:33.854">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:30:33.854" endtime="20170809 17:30:33.854"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:33.854">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:33.550" endtime="20170809 17:30:33.855"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:33.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:33.855" endtime="20170809 17:30:33.855"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:33.856">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:30:33.856">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:30:33.856">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:30:33.855" endtime="20170809 17:30:33.856"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:33.858">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:30:33.549" endtime="20170809 17:30:33.858"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:33.858">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:30:33.549" endtime="20170809 17:30:33.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:30:33.859">On != Off</msg>
<status status="FAIL" starttime="20170809 17:30:33.858" endtime="20170809 17:30:33.859"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:33.548" endtime="20170809 17:30:33.859"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:33.548" endtime="20170809 17:30:33.859"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:43.865">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:30:43.864" endtime="20170809 17:30:43.865"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:43.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:30:43.865" endtime="20170809 17:30:43.866"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:43.866">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:30:43.866" endtime="20170809 17:30:43.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:43.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:30:43.867" endtime="20170809 17:30:43.867"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:44.047">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:30:43.868" endtime="20170809 17:30:44.047"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:44.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:30:44.047">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:43.867" endtime="20170809 17:30:44.047"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:44.048">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:44.048" endtime="20170809 17:30:44.048"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:44.049">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:44.048" endtime="20170809 17:30:44.049"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:43.863" endtime="20170809 17:30:44.049"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:43.863" endtime="20170809 17:30:44.049"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:43.862" endtime="20170809 17:30:44.049"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:44.050">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:30:44.049" endtime="20170809 17:30:44.050"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:44.052">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:44.052" endtime="20170809 17:30:44.053"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:44.054">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:44.053" endtime="20170809 17:30:44.054"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:44.053" endtime="20170809 17:30:44.054"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:44.051" endtime="20170809 17:30:44.054"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:44.050" endtime="20170809 17:30:44.054"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:44.125">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:30:44.125">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:44.055" endtime="20170809 17:30:44.125"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:44.127">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:44.126" endtime="20170809 17:30:44.127"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:44.129">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:44.128" endtime="20170809 17:30:44.129"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:44.127" endtime="20170809 17:30:44.129"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:44.126" endtime="20170809 17:30:44.129"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:44.125" endtime="20170809 17:30:44.129"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:30:44.129">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:30:44.129" endtime="20170809 17:30:44.130"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:44.130">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:43.862" endtime="20170809 17:30:44.130"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:44.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:44.130" endtime="20170809 17:30:44.130"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:44.131">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:30:44.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:30:44.131">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:30:44.131" endtime="20170809 17:30:44.131"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:44.131">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:30:43.861" endtime="20170809 17:30:44.132"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:44.132">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:30:43.861" endtime="20170809 17:30:44.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:30:44.132">On != Off</msg>
<status status="FAIL" starttime="20170809 17:30:44.132" endtime="20170809 17:30:44.133"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:43.860" endtime="20170809 17:30:44.133"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:43.860" endtime="20170809 17:30:44.133"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.138">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:30:54.138" endtime="20170809 17:30:54.138"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.139">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:30:54.139" endtime="20170809 17:30:54.139"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.140">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:30:54.139" endtime="20170809 17:30:54.140"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.140">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:30:54.140" endtime="20170809 17:30:54.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.372">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:30:54.141" endtime="20170809 17:30:54.373"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:54.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:30:54.373">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:54.141" endtime="20170809 17:30:54.373"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.373">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:54.373" endtime="20170809 17:30:54.374"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.374">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:54.374" endtime="20170809 17:30:54.374"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.137" endtime="20170809 17:30:54.374"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.137" endtime="20170809 17:30:54.374"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.136" endtime="20170809 17:30:54.375"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.375">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:30:54.375" endtime="20170809 17:30:54.375"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.377">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:54.377" endtime="20170809 17:30:54.377"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.378">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:30:54.378" endtime="20170809 17:30:54.378"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.377" endtime="20170809 17:30:54.378"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.376" endtime="20170809 17:30:54.378"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.375" endtime="20170809 17:30:54.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.451">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:30:54.451">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:54.379" endtime="20170809 17:30:54.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.453">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:54.452" endtime="20170809 17:30:54.453"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.454">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:30:54.453" endtime="20170809 17:30:54.454"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.453" endtime="20170809 17:30:54.454"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.452" endtime="20170809 17:30:54.454"></status>
</kw>
<status status="PASS" starttime="20170809 17:30:54.451" endtime="20170809 17:30:54.454"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:30:54.454">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:30:54.454" endtime="20170809 17:30:54.454"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:54.455">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:30:54.135" endtime="20170809 17:30:54.455"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:30:54.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:30:54.455" endtime="20170809 17:30:54.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:30:54.456">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:30:54.456">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:30:54.456">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:30:54.456" endtime="20170809 17:30:54.456"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:54.457">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:30:54.135" endtime="20170809 17:30:54.457"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:30:54.457">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:30:54.134" endtime="20170809 17:30:54.457"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:30:54.458">On != Off</msg>
<status status="FAIL" starttime="20170809 17:30:54.457" endtime="20170809 17:30:54.458"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:54.134" endtime="20170809 17:30:54.458"></status>
</kw>
<status status="FAIL" starttime="20170809 17:30:54.133" endtime="20170809 17:30:54.458"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.464">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:31:04.463" endtime="20170809 17:31:04.464"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.465">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:31:04.465" endtime="20170809 17:31:04.465"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.466">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:31:04.466" endtime="20170809 17:31:04.466"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:31:04.467" endtime="20170809 17:31:04.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:31:04.468" endtime="20170809 17:31:04.724"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:04.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:31:04.724">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:04.468" endtime="20170809 17:31:04.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.725">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:04.725" endtime="20170809 17:31:04.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:04.725" endtime="20170809 17:31:04.726"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.462" endtime="20170809 17:31:04.726"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.462" endtime="20170809 17:31:04.726"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.461" endtime="20170809 17:31:04.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.727">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:31:04.726" endtime="20170809 17:31:04.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.729">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:04.728" endtime="20170809 17:31:04.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.730">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:04.730" endtime="20170809 17:31:04.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.729" endtime="20170809 17:31:04.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.728" endtime="20170809 17:31:04.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.727" endtime="20170809 17:31:04.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.805">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:31:04.805">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:04.731" endtime="20170809 17:31:04.805"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.807">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:04.807" endtime="20170809 17:31:04.807"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.808">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:04.808" endtime="20170809 17:31:04.809"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.807" endtime="20170809 17:31:04.809"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.806" endtime="20170809 17:31:04.809"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:04.806" endtime="20170809 17:31:04.809"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:31:04.809">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:31:04.809" endtime="20170809 17:31:04.809"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:04.809">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:04.460" endtime="20170809 17:31:04.810"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:04.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:04.810" endtime="20170809 17:31:04.810"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:04.811">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:31:04.811">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:31:04.811">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:31:04.810" endtime="20170809 17:31:04.811"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:04.811">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:31:04.460" endtime="20170809 17:31:04.811"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:04.811">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:31:04.459" endtime="20170809 17:31:04.812"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:31:04.812">On != Off</msg>
<status status="FAIL" starttime="20170809 17:31:04.812" endtime="20170809 17:31:04.812"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:04.459" endtime="20170809 17:31:04.812"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:04.458" endtime="20170809 17:31:04.813"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:14.818">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:31:14.817" endtime="20170809 17:31:14.818"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:14.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:31:14.818" endtime="20170809 17:31:14.819"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:14.819">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:31:14.819" endtime="20170809 17:31:14.819"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:14.820">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:31:14.820" endtime="20170809 17:31:14.820"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:15.029">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:31:14.821" endtime="20170809 17:31:15.029"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:15.029">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:31:15.029">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:14.820" endtime="20170809 17:31:15.029"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:15.030">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:15.030" endtime="20170809 17:31:15.030"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:15.031">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:15.030" endtime="20170809 17:31:15.031"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:14.817" endtime="20170809 17:31:15.031"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:14.816" endtime="20170809 17:31:15.031"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:14.816" endtime="20170809 17:31:15.031"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:15.032">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:31:15.031" endtime="20170809 17:31:15.032"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:15.034">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:15.033" endtime="20170809 17:31:15.034"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:15.035">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:15.034" endtime="20170809 17:31:15.035"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:15.034" endtime="20170809 17:31:15.035"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:15.032" endtime="20170809 17:31:15.035"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:15.032" endtime="20170809 17:31:15.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:15.127">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:31:15.128">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:15.035" endtime="20170809 17:31:15.128"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:15.129">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:15.129" endtime="20170809 17:31:15.129"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:15.130">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:15.130" endtime="20170809 17:31:15.130"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:15.130" endtime="20170809 17:31:15.131"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:15.128" endtime="20170809 17:31:15.131"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:15.128" endtime="20170809 17:31:15.131"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:31:15.131">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:31:15.131" endtime="20170809 17:31:15.131"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:15.131">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:14.815" endtime="20170809 17:31:15.132"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:15.132">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:15.132" endtime="20170809 17:31:15.132"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:15.133">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:31:15.133">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:31:15.133">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:31:15.132" endtime="20170809 17:31:15.133"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:15.133">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:31:14.814" endtime="20170809 17:31:15.133"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:15.133">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:31:14.814" endtime="20170809 17:31:15.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:31:15.134">On != Off</msg>
<status status="FAIL" starttime="20170809 17:31:15.134" endtime="20170809 17:31:15.134"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:14.814" endtime="20170809 17:31:15.134"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:14.813" endtime="20170809 17:31:15.135"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.140">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:31:25.140" endtime="20170809 17:31:25.141"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.141">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:31:25.141" endtime="20170809 17:31:25.141"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.142">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:31:25.141" endtime="20170809 17:31:25.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.142">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:31:25.142" endtime="20170809 17:31:25.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.385">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:31:25.143" endtime="20170809 17:31:25.385"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:25.385">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:31:25.385">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:25.143" endtime="20170809 17:31:25.385"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.386">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:25.385" endtime="20170809 17:31:25.386"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:25.386" endtime="20170809 17:31:25.387"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.139" endtime="20170809 17:31:25.387"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.138" endtime="20170809 17:31:25.387"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.138" endtime="20170809 17:31:25.387"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.388">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:31:25.387" endtime="20170809 17:31:25.388"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.390">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:25.389" endtime="20170809 17:31:25.390"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.391">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:25.390" endtime="20170809 17:31:25.391"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.390" endtime="20170809 17:31:25.391"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.388" endtime="20170809 17:31:25.391"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.388" endtime="20170809 17:31:25.391"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.454">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:31:25.454">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:25.391" endtime="20170809 17:31:25.454"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.456">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:25.456" endtime="20170809 17:31:25.456"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.460">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:25.460" endtime="20170809 17:31:25.460"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.456" endtime="20170809 17:31:25.460"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.455" endtime="20170809 17:31:25.461"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:25.455" endtime="20170809 17:31:25.461"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:31:25.461">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:31:25.461" endtime="20170809 17:31:25.461"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:25.461">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:25.137" endtime="20170809 17:31:25.461"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:25.462">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:25.462" endtime="20170809 17:31:25.462"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:25.463">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:31:25.463">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:31:25.463">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:31:25.462" endtime="20170809 17:31:25.463"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:25.463">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:31:25.136" endtime="20170809 17:31:25.463"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:25.463">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:31:25.136" endtime="20170809 17:31:25.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:31:25.464">On != Off</msg>
<status status="FAIL" starttime="20170809 17:31:25.464" endtime="20170809 17:31:25.464"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:25.136" endtime="20170809 17:31:25.464"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:25.135" endtime="20170809 17:31:25.465"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.470">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:31:35.469" endtime="20170809 17:31:35.470"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.471">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:31:35.470" endtime="20170809 17:31:35.471"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.471">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:31:35.471" endtime="20170809 17:31:35.471"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:31:35.472" endtime="20170809 17:31:35.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.728">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:31:35.473" endtime="20170809 17:31:35.728"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:35.728">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:31:35.728">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:35.472" endtime="20170809 17:31:35.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.729">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:35.729" endtime="20170809 17:31:35.729"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:35.729" endtime="20170809 17:31:35.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.469" endtime="20170809 17:31:35.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.468" endtime="20170809 17:31:35.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.468" endtime="20170809 17:31:35.730"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.731">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:31:35.730" endtime="20170809 17:31:35.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.733">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:35.732" endtime="20170809 17:31:35.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.734">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:35.734" endtime="20170809 17:31:35.734"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.733" endtime="20170809 17:31:35.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.731" endtime="20170809 17:31:35.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.731" endtime="20170809 17:31:35.735"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.818">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:31:35.818">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:35.735" endtime="20170809 17:31:35.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.820">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:35.820" endtime="20170809 17:31:35.820"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.821">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:35.821" endtime="20170809 17:31:35.821"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.820" endtime="20170809 17:31:35.821"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.819" endtime="20170809 17:31:35.822"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:35.819" endtime="20170809 17:31:35.822"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:31:35.822">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:31:35.822" endtime="20170809 17:31:35.822"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:35.822">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:35.467" endtime="20170809 17:31:35.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:35.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:35.823" endtime="20170809 17:31:35.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:35.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:31:35.824">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:31:35.824">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:31:35.823" endtime="20170809 17:31:35.824"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:35.824">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:31:35.466" endtime="20170809 17:31:35.824"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:35.824">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:31:35.466" endtime="20170809 17:31:35.824"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:31:35.825">On != Off</msg>
<status status="FAIL" starttime="20170809 17:31:35.825" endtime="20170809 17:31:35.825"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:35.466" endtime="20170809 17:31:35.825"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:35.465" endtime="20170809 17:31:35.825"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:45.831">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:31:45.831" endtime="20170809 17:31:45.831"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:45.832">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:31:45.832" endtime="20170809 17:31:45.832"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:45.833">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:31:45.833" endtime="20170809 17:31:45.833"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:45.834">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:31:45.834" endtime="20170809 17:31:45.834"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:46.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:31:45.835" endtime="20170809 17:31:46.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:46.060">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:31:46.060">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:45.835" endtime="20170809 17:31:46.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:46.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:46.060" endtime="20170809 17:31:46.061"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:46.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:46.061" endtime="20170809 17:31:46.061"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:45.830" endtime="20170809 17:31:46.061"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:45.829" endtime="20170809 17:31:46.061"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:45.829" endtime="20170809 17:31:46.062"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:46.062">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:31:46.062" endtime="20170809 17:31:46.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:46.064">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:46.064" endtime="20170809 17:31:46.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:46.065">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:46.065" endtime="20170809 17:31:46.065"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:46.064" endtime="20170809 17:31:46.065"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:46.063" endtime="20170809 17:31:46.065"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:46.062" endtime="20170809 17:31:46.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:46.174">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:31:46.174">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:46.066" endtime="20170809 17:31:46.174"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:46.176">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:46.175" endtime="20170809 17:31:46.176"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:46.177">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:46.176" endtime="20170809 17:31:46.177"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:46.176" endtime="20170809 17:31:46.177"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:46.175" endtime="20170809 17:31:46.177"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:46.174" endtime="20170809 17:31:46.177"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:31:46.178">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:31:46.178" endtime="20170809 17:31:46.178"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:46.178">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:45.828" endtime="20170809 17:31:46.178"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:46.179">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:46.178" endtime="20170809 17:31:46.179"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:46.179">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:31:46.179">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:31:46.179">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:31:46.179" endtime="20170809 17:31:46.180"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:46.180">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:31:45.827" endtime="20170809 17:31:46.180"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:46.180">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:31:45.827" endtime="20170809 17:31:46.180"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:31:46.181">On != Off</msg>
<status status="FAIL" starttime="20170809 17:31:46.180" endtime="20170809 17:31:46.181"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:45.827" endtime="20170809 17:31:46.181"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:45.826" endtime="20170809 17:31:46.181"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.186">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:31:56.186" endtime="20170809 17:31:56.187"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.187">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:31:56.187" endtime="20170809 17:31:56.187"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.188">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:31:56.188" endtime="20170809 17:31:56.188"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.189">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:31:56.188" endtime="20170809 17:31:56.189"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:31:56.189" endtime="20170809 17:31:56.408"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:56.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:31:56.408">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:56.189" endtime="20170809 17:31:56.408"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.409">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:56.408" endtime="20170809 17:31:56.409"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:56.409" endtime="20170809 17:31:56.410"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.185" endtime="20170809 17:31:56.410"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.185" endtime="20170809 17:31:56.410"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.184" endtime="20170809 17:31:56.410"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.410">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:31:56.410" endtime="20170809 17:31:56.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.412">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:56.412" endtime="20170809 17:31:56.412"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.413">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:31:56.413" endtime="20170809 17:31:56.414"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.413" endtime="20170809 17:31:56.414"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.411" endtime="20170809 17:31:56.414"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.411" endtime="20170809 17:31:56.414"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:31:56.493">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:56.414" endtime="20170809 17:31:56.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.495">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:56.495" endtime="20170809 17:31:56.495"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.496">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:31:56.496" endtime="20170809 17:31:56.496"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.495" endtime="20170809 17:31:56.496"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.494" endtime="20170809 17:31:56.496"></status>
</kw>
<status status="PASS" starttime="20170809 17:31:56.494" endtime="20170809 17:31:56.496"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:31:56.497">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:31:56.497" endtime="20170809 17:31:56.497"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:56.497">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:31:56.184" endtime="20170809 17:31:56.497"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:31:56.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:31:56.497" endtime="20170809 17:31:56.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:31:56.498">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:31:56.498">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:31:56.499">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:31:56.498" endtime="20170809 17:31:56.499"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:56.499">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:31:56.183" endtime="20170809 17:31:56.499"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:31:56.499">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:31:56.183" endtime="20170809 17:31:56.499"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:31:56.500">On != Off</msg>
<status status="FAIL" starttime="20170809 17:31:56.499" endtime="20170809 17:31:56.500"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:56.182" endtime="20170809 17:31:56.500"></status>
</kw>
<status status="FAIL" starttime="20170809 17:31:56.182" endtime="20170809 17:31:56.500"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.506">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:32:06.505" endtime="20170809 17:32:06.506"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.507">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:32:06.506" endtime="20170809 17:32:06.507"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.507">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:32:06.507" endtime="20170809 17:32:06.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:32:06.508" endtime="20170809 17:32:06.508"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.733">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:32:06.509" endtime="20170809 17:32:06.733"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:06.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:32:06.734">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:06.508" endtime="20170809 17:32:06.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.734">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:06.734" endtime="20170809 17:32:06.734"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:06.735" endtime="20170809 17:32:06.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.504" endtime="20170809 17:32:06.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.504" endtime="20170809 17:32:06.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.503" endtime="20170809 17:32:06.735"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.736">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:32:06.736" endtime="20170809 17:32:06.736"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.738">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:06.737" endtime="20170809 17:32:06.738"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.739">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:06.739" endtime="20170809 17:32:06.739"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.738" endtime="20170809 17:32:06.739"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.737" endtime="20170809 17:32:06.739"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.736" endtime="20170809 17:32:06.739"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.812">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:32:06.812">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:06.740" endtime="20170809 17:32:06.812"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.814">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:06.814" endtime="20170809 17:32:06.814"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.815">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:06.815" endtime="20170809 17:32:06.816"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.814" endtime="20170809 17:32:06.816"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.813" endtime="20170809 17:32:06.816"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:06.813" endtime="20170809 17:32:06.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:32:06.816">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:32:06.816" endtime="20170809 17:32:06.816"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:06.817">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:06.503" endtime="20170809 17:32:06.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:06.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:06.817" endtime="20170809 17:32:06.817"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:06.818">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:32:06.818">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:32:06.818">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:32:06.818" endtime="20170809 17:32:06.818"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:06.818">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:32:06.502" endtime="20170809 17:32:06.819"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:06.819">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:32:06.502" endtime="20170809 17:32:06.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:32:06.819">On != Off</msg>
<status status="FAIL" starttime="20170809 17:32:06.819" endtime="20170809 17:32:06.819"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:06.501" endtime="20170809 17:32:06.820"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:06.501" endtime="20170809 17:32:06.820"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:16.825">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:32:16.824" endtime="20170809 17:32:16.825"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:16.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:32:16.825" endtime="20170809 17:32:16.826"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:16.826">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:32:16.826" endtime="20170809 17:32:16.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:16.827">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:32:16.827" endtime="20170809 17:32:16.827"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:17.031">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:32:16.828" endtime="20170809 17:32:17.031"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:17.031">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:32:17.032">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:16.827" endtime="20170809 17:32:17.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:17.032">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:17.032" endtime="20170809 17:32:17.032"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:17.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:17.033" endtime="20170809 17:32:17.033"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:16.824" endtime="20170809 17:32:17.033"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:16.823" endtime="20170809 17:32:17.033"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:16.823" endtime="20170809 17:32:17.033"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:17.034">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:32:17.034" endtime="20170809 17:32:17.034"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:17.036">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:17.035" endtime="20170809 17:32:17.036"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:17.037">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:17.037" endtime="20170809 17:32:17.037"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:17.036" endtime="20170809 17:32:17.037"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:17.035" endtime="20170809 17:32:17.037"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:17.034" endtime="20170809 17:32:17.037"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:17.136">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:32:17.136">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:17.038" endtime="20170809 17:32:17.137"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:17.138">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:17.138" endtime="20170809 17:32:17.138"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:17.139">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:17.139" endtime="20170809 17:32:17.139"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:17.138" endtime="20170809 17:32:17.139"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:17.137" endtime="20170809 17:32:17.140"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:17.137" endtime="20170809 17:32:17.140"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:32:17.140">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:32:17.140" endtime="20170809 17:32:17.140"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:17.140">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:16.822" endtime="20170809 17:32:17.140"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:17.141">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:17.141" endtime="20170809 17:32:17.141"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:17.142">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:32:17.142">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:32:17.142">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:32:17.141" endtime="20170809 17:32:17.142"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:17.142">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:32:16.822" endtime="20170809 17:32:17.142"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:17.142">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:32:16.821" endtime="20170809 17:32:17.142"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:32:17.143">On != Off</msg>
<status status="FAIL" starttime="20170809 17:32:17.143" endtime="20170809 17:32:17.143"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:16.821" endtime="20170809 17:32:17.143"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:16.820" endtime="20170809 17:32:17.143"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.149">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:32:27.148" endtime="20170809 17:32:27.149"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:32:27.149" endtime="20170809 17:32:27.150"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.150">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:32:27.150" endtime="20170809 17:32:27.150"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.151">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:32:27.151" endtime="20170809 17:32:27.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.419">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:32:27.152" endtime="20170809 17:32:27.419"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:27.419">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:32:27.419">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:27.151" endtime="20170809 17:32:27.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.420">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:27.420" endtime="20170809 17:32:27.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:27.421" endtime="20170809 17:32:27.421"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.147" endtime="20170809 17:32:27.421"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.147" endtime="20170809 17:32:27.421"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.146" endtime="20170809 17:32:27.421"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.422">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:32:27.422" endtime="20170809 17:32:27.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.424">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:27.423" endtime="20170809 17:32:27.424"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.425">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:27.425" endtime="20170809 17:32:27.425"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.424" endtime="20170809 17:32:27.425"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.423" endtime="20170809 17:32:27.425"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.422" endtime="20170809 17:32:27.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.533">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:32:27.533">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:27.425" endtime="20170809 17:32:27.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.535">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:27.535" endtime="20170809 17:32:27.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.536">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:27.536" endtime="20170809 17:32:27.537"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.535" endtime="20170809 17:32:27.537"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.534" endtime="20170809 17:32:27.537"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:27.534" endtime="20170809 17:32:27.537"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:32:27.537">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:32:27.537" endtime="20170809 17:32:27.537"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:27.537">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:27.146" endtime="20170809 17:32:27.538"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:27.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:27.538" endtime="20170809 17:32:27.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:27.539">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:32:27.539">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:32:27.539">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:32:27.539" endtime="20170809 17:32:27.539"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:27.539">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:32:27.145" endtime="20170809 17:32:27.539"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:27.540">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:32:27.145" endtime="20170809 17:32:27.540"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:32:27.540">On != Off</msg>
<status status="FAIL" starttime="20170809 17:32:27.540" endtime="20170809 17:32:27.540"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:27.144" endtime="20170809 17:32:27.541"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:27.144" endtime="20170809 17:32:27.541"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.546">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:32:37.546" endtime="20170809 17:32:37.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.547">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:32:37.547" endtime="20170809 17:32:37.547"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.548">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:32:37.547" endtime="20170809 17:32:37.548"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.548">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:32:37.548" endtime="20170809 17:32:37.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:32:37.549" endtime="20170809 17:32:37.724"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:37.724">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:32:37.724">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:37.549" endtime="20170809 17:32:37.724"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.725">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:37.725" endtime="20170809 17:32:37.725"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:37.725" endtime="20170809 17:32:37.726"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.545" endtime="20170809 17:32:37.726"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.545" endtime="20170809 17:32:37.726"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.544" endtime="20170809 17:32:37.726"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.727">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:32:37.726" endtime="20170809 17:32:37.727"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.729">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:37.728" endtime="20170809 17:32:37.729"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.730">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:37.729" endtime="20170809 17:32:37.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.729" endtime="20170809 17:32:37.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.727" endtime="20170809 17:32:37.730"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.727" endtime="20170809 17:32:37.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.793">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:32:37.793">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:37.730" endtime="20170809 17:32:37.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.794">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:37.794" endtime="20170809 17:32:37.795"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.795">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:37.795" endtime="20170809 17:32:37.795"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.795" endtime="20170809 17:32:37.796"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.794" endtime="20170809 17:32:37.796"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:37.793" endtime="20170809 17:32:37.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:32:37.796">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:32:37.796" endtime="20170809 17:32:37.796"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:37.796">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:37.543" endtime="20170809 17:32:37.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:37.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:37.797" endtime="20170809 17:32:37.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:37.798">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:32:37.798">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:32:37.798">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:32:37.797" endtime="20170809 17:32:37.798"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:37.798">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:32:37.543" endtime="20170809 17:32:37.798"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:37.798">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:32:37.542" endtime="20170809 17:32:37.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:32:37.799">On != Off</msg>
<status status="FAIL" starttime="20170809 17:32:37.799" endtime="20170809 17:32:37.799"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:37.542" endtime="20170809 17:32:37.799"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:37.541" endtime="20170809 17:32:37.800"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:47.805">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:32:47.805" endtime="20170809 17:32:47.805"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:47.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:32:47.806" endtime="20170809 17:32:47.806"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:47.806">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:32:47.806" endtime="20170809 17:32:47.807"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:47.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:32:47.807" endtime="20170809 17:32:47.807"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:48.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:32:47.808" endtime="20170809 17:32:48.034"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:48.034">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:32:48.034">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:47.807" endtime="20170809 17:32:48.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:48.035">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:48.035" endtime="20170809 17:32:48.035"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:48.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:48.035" endtime="20170809 17:32:48.036"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:47.804" endtime="20170809 17:32:48.036"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:47.803" endtime="20170809 17:32:48.036"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:47.803" endtime="20170809 17:32:48.036"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:48.037">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:32:48.036" endtime="20170809 17:32:48.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:48.039">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:48.038" endtime="20170809 17:32:48.039"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:48.040">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:48.040" endtime="20170809 17:32:48.040"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:48.039" endtime="20170809 17:32:48.040"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:48.037" endtime="20170809 17:32:48.040"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:48.037" endtime="20170809 17:32:48.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:48.116">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:32:48.116">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:48.041" endtime="20170809 17:32:48.116"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:48.118">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:48.118" endtime="20170809 17:32:48.118"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:48.123">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:48.123" endtime="20170809 17:32:48.124"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:48.118" endtime="20170809 17:32:48.124"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:48.117" endtime="20170809 17:32:48.124"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:48.117" endtime="20170809 17:32:48.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:32:48.124">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:32:48.124" endtime="20170809 17:32:48.124"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:48.125">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:47.802" endtime="20170809 17:32:48.125"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:48.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:48.125" endtime="20170809 17:32:48.125"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:48.126">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:32:48.126">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:32:48.126">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:32:48.126" endtime="20170809 17:32:48.126"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:48.126">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:32:47.801" endtime="20170809 17:32:48.126"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:48.127">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:32:47.801" endtime="20170809 17:32:48.127"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:32:48.127">On != Off</msg>
<status status="FAIL" starttime="20170809 17:32:48.127" endtime="20170809 17:32:48.128"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:47.801" endtime="20170809 17:32:48.128"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:47.800" endtime="20170809 17:32:48.128"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.133">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:32:58.133" endtime="20170809 17:32:58.133"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.134">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:32:58.134" endtime="20170809 17:32:58.134"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.135">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:32:58.134" endtime="20170809 17:32:58.135"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:32:58.135" endtime="20170809 17:32:58.135"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.316">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:32:58.136" endtime="20170809 17:32:58.317"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:58.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:32:58.317">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:58.136" endtime="20170809 17:32:58.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.317">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:58.317" endtime="20170809 17:32:58.318"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:58.318" endtime="20170809 17:32:58.318"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.132" endtime="20170809 17:32:58.318"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.132" endtime="20170809 17:32:58.318"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.131" endtime="20170809 17:32:58.319"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.319">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:32:58.319" endtime="20170809 17:32:58.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.321">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:58.321" endtime="20170809 17:32:58.321"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.322">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:32:58.322" endtime="20170809 17:32:58.322"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.321" endtime="20170809 17:32:58.322"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.320" endtime="20170809 17:32:58.323"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.320" endtime="20170809 17:32:58.323"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.387">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:32:58.387">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:58.323" endtime="20170809 17:32:58.387"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.389">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:58.388" endtime="20170809 17:32:58.389"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.390">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:32:58.390" endtime="20170809 17:32:58.390"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.389" endtime="20170809 17:32:58.390"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.388" endtime="20170809 17:32:58.390"></status>
</kw>
<status status="PASS" starttime="20170809 17:32:58.387" endtime="20170809 17:32:58.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:32:58.391">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:32:58.391" endtime="20170809 17:32:58.391"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:58.391">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:32:58.130" endtime="20170809 17:32:58.391"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:32:58.392">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:32:58.391" endtime="20170809 17:32:58.392"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:32:58.392">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:32:58.392">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:32:58.392">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:32:58.392" endtime="20170809 17:32:58.392"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:58.393">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:32:58.130" endtime="20170809 17:32:58.393"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:32:58.393">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:32:58.129" endtime="20170809 17:32:58.393"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:32:58.394">On != Off</msg>
<status status="FAIL" starttime="20170809 17:32:58.393" endtime="20170809 17:32:58.394"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:58.129" endtime="20170809 17:32:58.394"></status>
</kw>
<status status="FAIL" starttime="20170809 17:32:58.128" endtime="20170809 17:32:58.394"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.400">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:33:08.400" endtime="20170809 17:33:08.400"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.401">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:33:08.401" endtime="20170809 17:33:08.401"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.402">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:33:08.401" endtime="20170809 17:33:08.402"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.402">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:33:08.402" endtime="20170809 17:33:08.402"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.592">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:33:08.403" endtime="20170809 17:33:08.592"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:08.592">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:33:08.592">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:08.402" endtime="20170809 17:33:08.592"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.593">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:08.593" endtime="20170809 17:33:08.593"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:08.593" endtime="20170809 17:33:08.594"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.399" endtime="20170809 17:33:08.594"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.398" endtime="20170809 17:33:08.594"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.397" endtime="20170809 17:33:08.594"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.595">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:33:08.594" endtime="20170809 17:33:08.595"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.597">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:08.596" endtime="20170809 17:33:08.597"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.598">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:08.598" endtime="20170809 17:33:08.598"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.597" endtime="20170809 17:33:08.598"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.596" endtime="20170809 17:33:08.599"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.595" endtime="20170809 17:33:08.599"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.702">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:33:08.702">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:08.600" endtime="20170809 17:33:08.702"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.704">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:08.704" endtime="20170809 17:33:08.704"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.706">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:08.705" endtime="20170809 17:33:08.706"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.704" endtime="20170809 17:33:08.706"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.703" endtime="20170809 17:33:08.706"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:08.703" endtime="20170809 17:33:08.706"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:33:08.706">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:33:08.706" endtime="20170809 17:33:08.706"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:08.707">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:08.397" endtime="20170809 17:33:08.707"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:08.707">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:08.707" endtime="20170809 17:33:08.707"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:08.708">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:33:08.708">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:33:08.708">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:33:08.708" endtime="20170809 17:33:08.708"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:08.708">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:33:08.396" endtime="20170809 17:33:08.708"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:08.709">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:33:08.396" endtime="20170809 17:33:08.709"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:33:08.709">On != Off</msg>
<status status="FAIL" starttime="20170809 17:33:08.709" endtime="20170809 17:33:08.709"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:08.395" endtime="20170809 17:33:08.710"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:08.395" endtime="20170809 17:33:08.710"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.715">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:33:18.714" endtime="20170809 17:33:18.715"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:33:18.716" endtime="20170809 17:33:18.716"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.716">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:33:18.716" endtime="20170809 17:33:18.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.717">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:33:18.717" endtime="20170809 17:33:18.717"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.897">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:33:18.718" endtime="20170809 17:33:18.897"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:18.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:33:18.897">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:18.717" endtime="20170809 17:33:18.897"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.898">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:18.898" endtime="20170809 17:33:18.898"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.899">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:18.898" endtime="20170809 17:33:18.899"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.714" endtime="20170809 17:33:18.899"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.713" endtime="20170809 17:33:18.899"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.713" endtime="20170809 17:33:18.899"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.900">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:33:18.899" endtime="20170809 17:33:18.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.902">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:18.901" endtime="20170809 17:33:18.902"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.903">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:18.902" endtime="20170809 17:33:18.903"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.902" endtime="20170809 17:33:18.903"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.900" endtime="20170809 17:33:18.903"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.900" endtime="20170809 17:33:18.903"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.992">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:33:18.992">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:18.903" endtime="20170809 17:33:18.992"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.994">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:18.994" endtime="20170809 17:33:18.994"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.995">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:18.995" endtime="20170809 17:33:18.995"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.995" endtime="20170809 17:33:18.996"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.993" endtime="20170809 17:33:18.996"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:18.993" endtime="20170809 17:33:18.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:33:18.996">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:33:18.996" endtime="20170809 17:33:18.996"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:18.996">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:18.712" endtime="20170809 17:33:18.996"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:18.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:18.997" endtime="20170809 17:33:18.997"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:18.998">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:33:18.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:33:18.998">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:33:18.997" endtime="20170809 17:33:18.998"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:18.998">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:33:18.712" endtime="20170809 17:33:18.998"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:18.998">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:33:18.711" endtime="20170809 17:33:18.998"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:33:18.999">On != Off</msg>
<status status="FAIL" starttime="20170809 17:33:18.999" endtime="20170809 17:33:18.999"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:18.711" endtime="20170809 17:33:18.999"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:18.710" endtime="20170809 17:33:19.000"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.005">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:33:29.005" endtime="20170809 17:33:29.006"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:33:29.006" endtime="20170809 17:33:29.006"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.007">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:33:29.006" endtime="20170809 17:33:29.007"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.007">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:33:29.007" endtime="20170809 17:33:29.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.193">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:33:29.008" endtime="20170809 17:33:29.193"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:29.194">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:33:29.194">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:29.008" endtime="20170809 17:33:29.194"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.194">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:29.194" endtime="20170809 17:33:29.195"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:29.195" endtime="20170809 17:33:29.195"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.004" endtime="20170809 17:33:29.196"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.003" endtime="20170809 17:33:29.196"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.003" endtime="20170809 17:33:29.196"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.196">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:33:29.196" endtime="20170809 17:33:29.196"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.198">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:29.198" endtime="20170809 17:33:29.198"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.199">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:29.199" endtime="20170809 17:33:29.200"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.199" endtime="20170809 17:33:29.200"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.197" endtime="20170809 17:33:29.200"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.197" endtime="20170809 17:33:29.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.265">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:33:29.265">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:29.200" endtime="20170809 17:33:29.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.267">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:29.266" endtime="20170809 17:33:29.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.268">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:29.267" endtime="20170809 17:33:29.268"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.267" endtime="20170809 17:33:29.268"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.266" endtime="20170809 17:33:29.268"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:29.265" endtime="20170809 17:33:29.268"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:33:29.269">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:33:29.269" endtime="20170809 17:33:29.269"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:29.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:29.002" endtime="20170809 17:33:29.269"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:29.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:29.269" endtime="20170809 17:33:29.270"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:29.270">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:33:29.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:33:29.271">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:33:29.270" endtime="20170809 17:33:29.271"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:29.271">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:33:29.002" endtime="20170809 17:33:29.271"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:29.271">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:33:29.001" endtime="20170809 17:33:29.271"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:33:29.272">On != Off</msg>
<status status="FAIL" starttime="20170809 17:33:29.271" endtime="20170809 17:33:29.272"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:29.001" endtime="20170809 17:33:29.272"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:29.000" endtime="20170809 17:33:29.272"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.277">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:33:39.277" endtime="20170809 17:33:39.278"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.278">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:33:39.278" endtime="20170809 17:33:39.278"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.279">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:33:39.279" endtime="20170809 17:33:39.279"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:33:39.279" endtime="20170809 17:33:39.280"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:33:39.280" endtime="20170809 17:33:39.491"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:39.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:33:39.491">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:39.280" endtime="20170809 17:33:39.491"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:39.492" endtime="20170809 17:33:39.492"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:39.492" endtime="20170809 17:33:39.493"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.276" endtime="20170809 17:33:39.493"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.276" endtime="20170809 17:33:39.493"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.275" endtime="20170809 17:33:39.493"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.494">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:33:39.493" endtime="20170809 17:33:39.494"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.496">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:39.495" endtime="20170809 17:33:39.496"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.497">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:39.496" endtime="20170809 17:33:39.497"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.496" endtime="20170809 17:33:39.497"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.494" endtime="20170809 17:33:39.497"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.494" endtime="20170809 17:33:39.497"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.585">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:33:39.585">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:39.497" endtime="20170809 17:33:39.585"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.587">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:39.586" endtime="20170809 17:33:39.587"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.588">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:39.588" endtime="20170809 17:33:39.588"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.587" endtime="20170809 17:33:39.588"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.586" endtime="20170809 17:33:39.588"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:39.585" endtime="20170809 17:33:39.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:33:39.589">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:33:39.588" endtime="20170809 17:33:39.589"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:39.589">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:39.275" endtime="20170809 17:33:39.589"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:39.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:39.589" endtime="20170809 17:33:39.590"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:39.590">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:33:39.590">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:33:39.590">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:33:39.590" endtime="20170809 17:33:39.590"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:39.591">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:33:39.274" endtime="20170809 17:33:39.591"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:39.591">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:33:39.274" endtime="20170809 17:33:39.591"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:33:39.592">On != Off</msg>
<status status="FAIL" starttime="20170809 17:33:39.591" endtime="20170809 17:33:39.592"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:39.273" endtime="20170809 17:33:39.592"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:39.273" endtime="20170809 17:33:39.592"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.597">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:33:49.597" endtime="20170809 17:33:49.598"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.598">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:33:49.598" endtime="20170809 17:33:49.598"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.599">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:33:49.599" endtime="20170809 17:33:49.599"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.600">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:33:49.599" endtime="20170809 17:33:49.600"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:33:49.601" endtime="20170809 17:33:49.795"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:49.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:33:49.795">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:49.600" endtime="20170809 17:33:49.795"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:49.795" endtime="20170809 17:33:49.796"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:49.796" endtime="20170809 17:33:49.796"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.596" endtime="20170809 17:33:49.796"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.596" endtime="20170809 17:33:49.796"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.595" endtime="20170809 17:33:49.797"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.797">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:33:49.797" endtime="20170809 17:33:49.797"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.799">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:49.799" endtime="20170809 17:33:49.799"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.800">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:33:49.800" endtime="20170809 17:33:49.800"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.799" endtime="20170809 17:33:49.800"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.798" endtime="20170809 17:33:49.801"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.797" endtime="20170809 17:33:49.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.888">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:33:49.888">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:49.801" endtime="20170809 17:33:49.888"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.890">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:49.890" endtime="20170809 17:33:49.890"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.891">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:33:49.891" endtime="20170809 17:33:49.891"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.890" endtime="20170809 17:33:49.892"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.889" endtime="20170809 17:33:49.892"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:49.889" endtime="20170809 17:33:49.892"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:33:49.892">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:33:49.892" endtime="20170809 17:33:49.892"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:49.892">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:49.594" endtime="20170809 17:33:49.892"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:49.893">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:33:49.893" endtime="20170809 17:33:49.893"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:49.894">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:33:49.894">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:33:49.894">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:33:49.893" endtime="20170809 17:33:49.894"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:49.894">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:33:49.594" endtime="20170809 17:33:49.894"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:33:49.895">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:33:49.594" endtime="20170809 17:33:49.895"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:33:49.895">On != Off</msg>
<status status="FAIL" starttime="20170809 17:33:49.895" endtime="20170809 17:33:49.895"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:49.593" endtime="20170809 17:33:49.896"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:49.593" endtime="20170809 17:33:49.896"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:33:59.902">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:33:59.902" endtime="20170809 17:33:59.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:59.903">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:33:59.903" endtime="20170809 17:33:59.903"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:59.904">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:33:59.903" endtime="20170809 17:33:59.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:33:59.904">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:33:59.904" endtime="20170809 17:33:59.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:00.096">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:33:59.905" endtime="20170809 17:34:00.096"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:00.096">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:34:00.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:59.905" endtime="20170809 17:34:00.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:00.097">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:00.097" endtime="20170809 17:34:00.097"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:00.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:00.097" endtime="20170809 17:34:00.098"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:59.901" endtime="20170809 17:34:00.098"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:59.900" endtime="20170809 17:34:00.098"></status>
</kw>
<status status="PASS" starttime="20170809 17:33:59.900" endtime="20170809 17:34:00.098"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:00.099">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:34:00.098" endtime="20170809 17:34:00.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:00.101">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:00.100" endtime="20170809 17:34:00.101"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:00.102">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:00.102" endtime="20170809 17:34:00.102"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:00.101" endtime="20170809 17:34:00.102"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:00.100" endtime="20170809 17:34:00.102"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:00.099" endtime="20170809 17:34:00.102"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:00.203">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:34:00.203">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:00.103" endtime="20170809 17:34:00.203"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:00.204">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:00.204" endtime="20170809 17:34:00.204"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:00.205">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:00.205" endtime="20170809 17:34:00.205"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:00.205" endtime="20170809 17:34:00.206"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:00.203" endtime="20170809 17:34:00.206"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:00.203" endtime="20170809 17:34:00.206"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:34:00.206">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:34:00.206" endtime="20170809 17:34:00.206"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:00.206">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:33:59.899" endtime="20170809 17:34:00.206"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:00.207">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:00.207" endtime="20170809 17:34:00.207"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:00.208">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:34:00.208">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:34:00.208">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:34:00.207" endtime="20170809 17:34:00.208"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:00.208">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:33:59.898" endtime="20170809 17:34:00.208"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:00.208">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:33:59.898" endtime="20170809 17:34:00.208"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:34:00.209">On != Off</msg>
<status status="FAIL" starttime="20170809 17:34:00.209" endtime="20170809 17:34:00.209"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:59.897" endtime="20170809 17:34:00.209"></status>
</kw>
<status status="FAIL" starttime="20170809 17:33:59.896" endtime="20170809 17:34:00.209"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.215">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:34:10.215" endtime="20170809 17:34:10.216"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.216">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:34:10.216" endtime="20170809 17:34:10.216"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.217">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:34:10.217" endtime="20170809 17:34:10.217"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.218">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:34:10.217" endtime="20170809 17:34:10.218"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:34:10.218" endtime="20170809 17:34:10.395"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:10.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:34:10.395">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:10.218" endtime="20170809 17:34:10.395"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.396">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:10.396" endtime="20170809 17:34:10.396"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:10.396" endtime="20170809 17:34:10.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.214" endtime="20170809 17:34:10.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.213" endtime="20170809 17:34:10.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.213" endtime="20170809 17:34:10.397"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.398">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:34:10.397" endtime="20170809 17:34:10.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.400">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:10.399" endtime="20170809 17:34:10.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.401">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:10.400" endtime="20170809 17:34:10.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.400" endtime="20170809 17:34:10.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.398" endtime="20170809 17:34:10.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.398" endtime="20170809 17:34:10.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:34:10.464">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:10.401" endtime="20170809 17:34:10.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:10.465" endtime="20170809 17:34:10.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.470">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:10.470" endtime="20170809 17:34:10.470"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.466" endtime="20170809 17:34:10.471"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.465" endtime="20170809 17:34:10.471"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:10.464" endtime="20170809 17:34:10.471"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:34:10.471">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:34:10.471" endtime="20170809 17:34:10.471"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:10.472">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:10.212" endtime="20170809 17:34:10.472"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:10.472">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:10.472" endtime="20170809 17:34:10.472"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:10.473">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:34:10.473">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:34:10.473">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:34:10.473" endtime="20170809 17:34:10.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:10.473">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:34:10.212" endtime="20170809 17:34:10.473"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:10.474">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:34:10.211" endtime="20170809 17:34:10.474"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:34:10.475">On != Off</msg>
<status status="FAIL" starttime="20170809 17:34:10.474" endtime="20170809 17:34:10.475"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:10.211" endtime="20170809 17:34:10.475"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:10.210" endtime="20170809 17:34:10.475"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.481">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:34:20.480" endtime="20170809 17:34:20.481"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.482">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:34:20.481" endtime="20170809 17:34:20.482"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.482">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:34:20.482" endtime="20170809 17:34:20.482"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.483">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:34:20.482" endtime="20170809 17:34:20.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:34:20.484" endtime="20170809 17:34:20.710"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:20.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:34:20.710">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:20.483" endtime="20170809 17:34:20.710"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:20.711" endtime="20170809 17:34:20.711"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.712">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:20.711" endtime="20170809 17:34:20.712"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.480" endtime="20170809 17:34:20.712"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.479" endtime="20170809 17:34:20.712"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.479" endtime="20170809 17:34:20.712"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.713">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:34:20.713" endtime="20170809 17:34:20.713"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.715">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:20.714" endtime="20170809 17:34:20.715"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.716">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:20.716" endtime="20170809 17:34:20.716"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.715" endtime="20170809 17:34:20.716"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.714" endtime="20170809 17:34:20.716"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.713" endtime="20170809 17:34:20.716"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.803">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:34:20.803">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:20.717" endtime="20170809 17:34:20.803"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.805">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:20.804" endtime="20170809 17:34:20.805"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.805">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:20.805" endtime="20170809 17:34:20.806"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.805" endtime="20170809 17:34:20.806"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.804" endtime="20170809 17:34:20.806"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:20.803" endtime="20170809 17:34:20.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:34:20.806">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:34:20.806" endtime="20170809 17:34:20.806"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:20.807">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:20.478" endtime="20170809 17:34:20.807"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:20.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:20.807" endtime="20170809 17:34:20.807"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:20.808">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:34:20.808">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:34:20.808">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:34:20.807" endtime="20170809 17:34:20.808"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:20.808">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:34:20.477" endtime="20170809 17:34:20.808"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:20.809">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:34:20.477" endtime="20170809 17:34:20.809"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:34:20.809">On != Off</msg>
<status status="FAIL" starttime="20170809 17:34:20.809" endtime="20170809 17:34:20.809"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:20.476" endtime="20170809 17:34:20.809"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:20.476" endtime="20170809 17:34:20.810"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:30.815">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:34:30.815" endtime="20170809 17:34:30.816"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:30.816">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:34:30.816" endtime="20170809 17:34:30.816"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:30.817">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:34:30.817" endtime="20170809 17:34:30.817"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:30.818">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:34:30.817" endtime="20170809 17:34:30.818"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:31.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:34:30.818" endtime="20170809 17:34:31.005"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:31.005">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:34:31.005">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:30.818" endtime="20170809 17:34:31.005"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:31.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:31.005" endtime="20170809 17:34:31.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:31.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:31.006" endtime="20170809 17:34:31.007"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:30.814" endtime="20170809 17:34:31.007"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:30.814" endtime="20170809 17:34:31.007"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:30.813" endtime="20170809 17:34:31.007"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:31.007">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:34:31.007" endtime="20170809 17:34:31.007"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:31.010">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:31.009" endtime="20170809 17:34:31.010"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:31.010">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:31.010" endtime="20170809 17:34:31.011"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:31.010" endtime="20170809 17:34:31.011"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:31.008" endtime="20170809 17:34:31.011"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:31.008" endtime="20170809 17:34:31.011"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:31.075">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:34:31.075">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:31.011" endtime="20170809 17:34:31.075"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:31.077">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:31.077" endtime="20170809 17:34:31.077"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:31.078">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:31.078" endtime="20170809 17:34:31.078"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:31.077" endtime="20170809 17:34:31.079"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:31.076" endtime="20170809 17:34:31.079"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:31.076" endtime="20170809 17:34:31.079"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:34:31.079">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:34:31.079" endtime="20170809 17:34:31.079"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:31.079">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:30.812" endtime="20170809 17:34:31.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:31.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:31.080" endtime="20170809 17:34:31.080"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:31.081">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:34:31.081">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:34:31.081">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:34:31.080" endtime="20170809 17:34:31.081"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:31.081">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:34:30.812" endtime="20170809 17:34:31.081"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:31.082">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:34:30.811" endtime="20170809 17:34:31.082"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:34:31.082">On != Off</msg>
<status status="FAIL" starttime="20170809 17:34:31.082" endtime="20170809 17:34:31.082"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:30.811" endtime="20170809 17:34:31.082"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:30.810" endtime="20170809 17:34:31.083"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.088">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:34:41.087" endtime="20170809 17:34:41.088"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:34:41.088" endtime="20170809 17:34:41.089"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.089">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:34:41.089" endtime="20170809 17:34:41.089"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:34:41.090" endtime="20170809 17:34:41.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.272">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:34:41.091" endtime="20170809 17:34:41.272"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:41.272">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:34:41.273">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:41.090" endtime="20170809 17:34:41.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.273">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:41.273" endtime="20170809 17:34:41.273"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:41.274" endtime="20170809 17:34:41.275"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.087" endtime="20170809 17:34:41.275"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.086" endtime="20170809 17:34:41.275"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.086" endtime="20170809 17:34:41.275"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.276">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:34:41.276" endtime="20170809 17:34:41.276"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.278">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:41.277" endtime="20170809 17:34:41.278"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.279">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:41.279" endtime="20170809 17:34:41.279"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.278" endtime="20170809 17:34:41.279"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.277" endtime="20170809 17:34:41.279"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.276" endtime="20170809 17:34:41.279"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.361">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:34:41.361">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:41.280" endtime="20170809 17:34:41.362"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.363">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:41.363" endtime="20170809 17:34:41.363"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.364">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:41.364" endtime="20170809 17:34:41.364"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.364" endtime="20170809 17:34:41.365"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.362" endtime="20170809 17:34:41.365"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:41.362" endtime="20170809 17:34:41.365"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:34:41.365">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:34:41.365" endtime="20170809 17:34:41.365"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:41.365">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:41.085" endtime="20170809 17:34:41.365"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:41.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:41.366" endtime="20170809 17:34:41.366"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:41.367">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:34:41.367">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:34:41.367">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:34:41.366" endtime="20170809 17:34:41.367"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:41.367">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:34:41.084" endtime="20170809 17:34:41.367"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:41.368">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:34:41.084" endtime="20170809 17:34:41.368"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:34:41.368">On != Off</msg>
<status status="FAIL" starttime="20170809 17:34:41.368" endtime="20170809 17:34:41.368"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:41.084" endtime="20170809 17:34:41.368"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:41.083" endtime="20170809 17:34:41.369"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.374">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:34:51.374" endtime="20170809 17:34:51.375"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.375">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:34:51.375" endtime="20170809 17:34:51.375"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.376">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:34:51.375" endtime="20170809 17:34:51.376"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.376">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:34:51.376" endtime="20170809 17:34:51.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:34:51.377" endtime="20170809 17:34:51.555"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:51.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:34:51.556">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:51.377" endtime="20170809 17:34:51.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:51.556" endtime="20170809 17:34:51.556"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:51.557" endtime="20170809 17:34:51.557"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.373" endtime="20170809 17:34:51.557"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.372" endtime="20170809 17:34:51.557"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.372" endtime="20170809 17:34:51.557"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.558">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:34:51.558" endtime="20170809 17:34:51.558"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.560">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:51.559" endtime="20170809 17:34:51.560"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.561">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:34:51.561" endtime="20170809 17:34:51.561"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.560" endtime="20170809 17:34:51.561"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.559" endtime="20170809 17:34:51.562"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.558" endtime="20170809 17:34:51.562"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.625">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:34:51.625">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:51.562" endtime="20170809 17:34:51.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.628">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:51.627" endtime="20170809 17:34:51.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.629">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:34:51.628" endtime="20170809 17:34:51.629"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.628" endtime="20170809 17:34:51.629"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.626" endtime="20170809 17:34:51.629"></status>
</kw>
<status status="PASS" starttime="20170809 17:34:51.625" endtime="20170809 17:34:51.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:34:51.630">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:34:51.630" endtime="20170809 17:34:51.630"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:51.630">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:34:51.371" endtime="20170809 17:34:51.630"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:34:51.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:34:51.630" endtime="20170809 17:34:51.631"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:34:51.631">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:34:51.631">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:34:51.632">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:34:51.631" endtime="20170809 17:34:51.632"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:51.632">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:34:51.371" endtime="20170809 17:34:51.632"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:34:51.632">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:34:51.370" endtime="20170809 17:34:51.632"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:34:51.633">On != Off</msg>
<status status="FAIL" starttime="20170809 17:34:51.632" endtime="20170809 17:34:51.633"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:51.370" endtime="20170809 17:34:51.633"></status>
</kw>
<status status="FAIL" starttime="20170809 17:34:51.369" endtime="20170809 17:34:51.633"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.638">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:35:01.638" endtime="20170809 17:35:01.639"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.639">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:35:01.639" endtime="20170809 17:35:01.639"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.640">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:35:01.640" endtime="20170809 17:35:01.640"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.641">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:35:01.641" endtime="20170809 17:35:01.641"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.832">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:35:01.642" endtime="20170809 17:35:01.832"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:01.832">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:35:01.832">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:01.641" endtime="20170809 17:35:01.832"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.833">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:01.833" endtime="20170809 17:35:01.833"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.834">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:01.833" endtime="20170809 17:35:01.834"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.637" endtime="20170809 17:35:01.834"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.637" endtime="20170809 17:35:01.834"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.636" endtime="20170809 17:35:01.834"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.835">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:35:01.834" endtime="20170809 17:35:01.835"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.837">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:01.836" endtime="20170809 17:35:01.837"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.838">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:01.837" endtime="20170809 17:35:01.838"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.837" endtime="20170809 17:35:01.838"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.835" endtime="20170809 17:35:01.838"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.835" endtime="20170809 17:35:01.838"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.908">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:35:01.908">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:01.838" endtime="20170809 17:35:01.908"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.910">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:01.909" endtime="20170809 17:35:01.910"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.911">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:01.911" endtime="20170809 17:35:01.911"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.910" endtime="20170809 17:35:01.911"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.909" endtime="20170809 17:35:01.911"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:01.908" endtime="20170809 17:35:01.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:35:01.912">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:35:01.911" endtime="20170809 17:35:01.912"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:01.912">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:01.636" endtime="20170809 17:35:01.912"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:01.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:01.912" endtime="20170809 17:35:01.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:01.913">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:35:01.913">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:35:01.913">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:35:01.913" endtime="20170809 17:35:01.913"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:01.914">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:35:01.635" endtime="20170809 17:35:01.914"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:01.914">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:35:01.635" endtime="20170809 17:35:01.914"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:35:01.915">On != Off</msg>
<status status="FAIL" starttime="20170809 17:35:01.914" endtime="20170809 17:35:01.915"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:01.634" endtime="20170809 17:35:01.915"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:01.634" endtime="20170809 17:35:01.915"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:11.921">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:35:11.921" endtime="20170809 17:35:11.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:11.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:35:11.922" endtime="20170809 17:35:11.922"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:11.923">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:35:11.923" endtime="20170809 17:35:11.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:11.924">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:35:11.923" endtime="20170809 17:35:11.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:12.128">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:35:11.924" endtime="20170809 17:35:12.128"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:12.128">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:35:12.129">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:11.924" endtime="20170809 17:35:12.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:12.129">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:12.129" endtime="20170809 17:35:12.129"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:12.130">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:12.130" endtime="20170809 17:35:12.130"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:11.920" endtime="20170809 17:35:12.130"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:11.919" endtime="20170809 17:35:12.130"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:11.919" endtime="20170809 17:35:12.130"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:12.131">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:35:12.131" endtime="20170809 17:35:12.131"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:12.133">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:12.133" endtime="20170809 17:35:12.133"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:12.134">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:12.134" endtime="20170809 17:35:12.134"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:12.133" endtime="20170809 17:35:12.134"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:12.132" endtime="20170809 17:35:12.134"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:12.131" endtime="20170809 17:35:12.135"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:12.197">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:35:12.198">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:12.135" endtime="20170809 17:35:12.198"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:12.199">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:12.199" endtime="20170809 17:35:12.200"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:12.201">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:12.200" endtime="20170809 17:35:12.201"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:12.200" endtime="20170809 17:35:12.201"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:12.198" endtime="20170809 17:35:12.201"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:12.198" endtime="20170809 17:35:12.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:35:12.202">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:35:12.201" endtime="20170809 17:35:12.202"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:12.202">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:11.918" endtime="20170809 17:35:12.202"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:12.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:12.202" endtime="20170809 17:35:12.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:12.203">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:35:12.203">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:35:12.203">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:35:12.203" endtime="20170809 17:35:12.203"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:12.204">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:35:11.918" endtime="20170809 17:35:12.204"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:12.204">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:35:11.917" endtime="20170809 17:35:12.204"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:35:12.205">On != Off</msg>
<status status="FAIL" starttime="20170809 17:35:12.204" endtime="20170809 17:35:12.205"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:11.917" endtime="20170809 17:35:12.205"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:11.916" endtime="20170809 17:35:12.205"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.210">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:35:22.210" endtime="20170809 17:35:22.211"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:35:22.211" endtime="20170809 17:35:22.212"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.212">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:35:22.212" endtime="20170809 17:35:22.212"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.213">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:35:22.213" endtime="20170809 17:35:22.213"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:35:22.214" endtime="20170809 17:35:22.453"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:22.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:35:22.453">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:22.213" endtime="20170809 17:35:22.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:22.453" endtime="20170809 17:35:22.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:22.454" endtime="20170809 17:35:22.454"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.210" endtime="20170809 17:35:22.454"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.209" endtime="20170809 17:35:22.454"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.208" endtime="20170809 17:35:22.454"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.455">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:35:22.455" endtime="20170809 17:35:22.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.457">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:22.456" endtime="20170809 17:35:22.457"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.458">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:22.458" endtime="20170809 17:35:22.458"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.457" endtime="20170809 17:35:22.458"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.456" endtime="20170809 17:35:22.458"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.455" endtime="20170809 17:35:22.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.539">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:35:22.539">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:22.459" endtime="20170809 17:35:22.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.541">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:22.540" endtime="20170809 17:35:22.541"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.542">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:22.542" endtime="20170809 17:35:22.542"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.541" endtime="20170809 17:35:22.542"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.540" endtime="20170809 17:35:22.542"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:22.539" endtime="20170809 17:35:22.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:35:22.543">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:35:22.543" endtime="20170809 17:35:22.543"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:22.543">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:22.208" endtime="20170809 17:35:22.543"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:22.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:22.543" endtime="20170809 17:35:22.544"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:22.544">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:35:22.544">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:35:22.544">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:35:22.544" endtime="20170809 17:35:22.545"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:22.545">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:35:22.207" endtime="20170809 17:35:22.545"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:22.545">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:35:22.207" endtime="20170809 17:35:22.545"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:35:22.546">On != Off</msg>
<status status="FAIL" starttime="20170809 17:35:22.545" endtime="20170809 17:35:22.546"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:22.206" endtime="20170809 17:35:22.546"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:22.206" endtime="20170809 17:35:22.546"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.552">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:35:32.551" endtime="20170809 17:35:32.552"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.553">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:35:32.552" endtime="20170809 17:35:32.553"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.553">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:35:32.553" endtime="20170809 17:35:32.553"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.554">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:35:32.554" endtime="20170809 17:35:32.554"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.746">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:35:32.555" endtime="20170809 17:35:32.746"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:32.747">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:35:32.747">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:32.554" endtime="20170809 17:35:32.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:32.747" endtime="20170809 17:35:32.747"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:32.748" endtime="20170809 17:35:32.748"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.550" endtime="20170809 17:35:32.748"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.550" endtime="20170809 17:35:32.748"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.549" endtime="20170809 17:35:32.749"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.749">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:35:32.749" endtime="20170809 17:35:32.749"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.751">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:32.750" endtime="20170809 17:35:32.751"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.752">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:32.752" endtime="20170809 17:35:32.752"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.751" endtime="20170809 17:35:32.752"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.750" endtime="20170809 17:35:32.753"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.749" endtime="20170809 17:35:32.753"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.842">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:35:32.843">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:32.753" endtime="20170809 17:35:32.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.844">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:32.844" endtime="20170809 17:35:32.844"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.848">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:32.845" endtime="20170809 17:35:32.849"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.845" endtime="20170809 17:35:32.849"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.843" endtime="20170809 17:35:32.849"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:32.843" endtime="20170809 17:35:32.849"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:35:32.849">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:35:32.849" endtime="20170809 17:35:32.849"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:32.850">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:32.549" endtime="20170809 17:35:32.850"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:32.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:32.850" endtime="20170809 17:35:32.850"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:32.851">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:35:32.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:35:32.851">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:35:32.851" endtime="20170809 17:35:32.851"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:32.851">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:35:32.548" endtime="20170809 17:35:32.851"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:32.852">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:35:32.548" endtime="20170809 17:35:32.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:35:32.852">On != Off</msg>
<status status="FAIL" starttime="20170809 17:35:32.852" endtime="20170809 17:35:32.853"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:32.547" endtime="20170809 17:35:32.853"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:32.547" endtime="20170809 17:35:32.853"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:42.858">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:35:42.858" endtime="20170809 17:35:42.858"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:42.859">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:35:42.859" endtime="20170809 17:35:42.859"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:42.860">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:35:42.859" endtime="20170809 17:35:42.860"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:42.860">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:35:42.860" endtime="20170809 17:35:42.860"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:43.085">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:35:42.861" endtime="20170809 17:35:43.085"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:43.085">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:35:43.085">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:42.861" endtime="20170809 17:35:43.085"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:43.086">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:43.086" endtime="20170809 17:35:43.086"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:43.087">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:43.086" endtime="20170809 17:35:43.087"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:42.857" endtime="20170809 17:35:43.087"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:42.857" endtime="20170809 17:35:43.087"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:42.856" endtime="20170809 17:35:43.087"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:43.088">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:35:43.087" endtime="20170809 17:35:43.088"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:43.090">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:43.089" endtime="20170809 17:35:43.090"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:43.091">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:43.090" endtime="20170809 17:35:43.091"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:43.090" endtime="20170809 17:35:43.091"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:43.088" endtime="20170809 17:35:43.091"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:43.088" endtime="20170809 17:35:43.091"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:43.165">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:35:43.165">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:43.091" endtime="20170809 17:35:43.166"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:43.167">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:43.167" endtime="20170809 17:35:43.167"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:43.168">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:43.168" endtime="20170809 17:35:43.168"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:43.168" endtime="20170809 17:35:43.168"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:43.166" endtime="20170809 17:35:43.169"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:43.166" endtime="20170809 17:35:43.169"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:35:43.169">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:35:43.169" endtime="20170809 17:35:43.169"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:43.169">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:42.855" endtime="20170809 17:35:43.169"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:43.170">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:43.170" endtime="20170809 17:35:43.170"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:43.171">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:35:43.171">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:35:43.171">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:35:43.170" endtime="20170809 17:35:43.171"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:43.171">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:35:42.855" endtime="20170809 17:35:43.171"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:43.171">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:35:42.854" endtime="20170809 17:35:43.171"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:35:43.172">On != Off</msg>
<status status="FAIL" starttime="20170809 17:35:43.172" endtime="20170809 17:35:43.172"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:42.854" endtime="20170809 17:35:43.172"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:42.853" endtime="20170809 17:35:43.172"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.178">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:35:53.178" endtime="20170809 17:35:53.178"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:35:53.179" endtime="20170809 17:35:53.179"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.180">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:35:53.179" endtime="20170809 17:35:53.180"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.180">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:35:53.180" endtime="20170809 17:35:53.181"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.363">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:35:53.181" endtime="20170809 17:35:53.363"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:53.363">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:35:53.363">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:53.181" endtime="20170809 17:35:53.363"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.364">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:53.363" endtime="20170809 17:35:53.364"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:53.364" endtime="20170809 17:35:53.364"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.177" endtime="20170809 17:35:53.364"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.176" endtime="20170809 17:35:53.365"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.176" endtime="20170809 17:35:53.365"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.365">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:35:53.365" endtime="20170809 17:35:53.365"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.368">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:53.367" endtime="20170809 17:35:53.368"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.369">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:35:53.368" endtime="20170809 17:35:53.369"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.368" endtime="20170809 17:35:53.369"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.366" endtime="20170809 17:35:53.369"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.366" endtime="20170809 17:35:53.369"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:35:53.464">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:53.369" endtime="20170809 17:35:53.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:53.465" endtime="20170809 17:35:53.466"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.467">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:35:53.466" endtime="20170809 17:35:53.467"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.466" endtime="20170809 17:35:53.467"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.465" endtime="20170809 17:35:53.467"></status>
</kw>
<status status="PASS" starttime="20170809 17:35:53.464" endtime="20170809 17:35:53.467"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:35:53.468">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:35:53.467" endtime="20170809 17:35:53.468"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:53.468">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:35:53.175" endtime="20170809 17:35:53.468"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:35:53.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:35:53.468" endtime="20170809 17:35:53.469"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:35:53.469">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:35:53.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:35:53.469">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:35:53.469" endtime="20170809 17:35:53.469"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:53.470">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:35:53.174" endtime="20170809 17:35:53.470"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:35:53.470">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:35:53.174" endtime="20170809 17:35:53.470"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:35:53.471">On != Off</msg>
<status status="FAIL" starttime="20170809 17:35:53.470" endtime="20170809 17:35:53.471"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:53.174" endtime="20170809 17:35:53.471"></status>
</kw>
<status status="FAIL" starttime="20170809 17:35:53.173" endtime="20170809 17:35:53.471"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.476">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:36:03.476" endtime="20170809 17:36:03.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:36:03.477" endtime="20170809 17:36:03.477"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.478">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:36:03.478" endtime="20170809 17:36:03.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:36:03.478" endtime="20170809 17:36:03.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:36:03.479" endtime="20170809 17:36:03.690"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:03.690">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:36:03.690">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:03.479" endtime="20170809 17:36:03.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.691">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:03.690" endtime="20170809 17:36:03.691"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:03.691" endtime="20170809 17:36:03.692"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.475" endtime="20170809 17:36:03.692"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.475" endtime="20170809 17:36:03.692"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.474" endtime="20170809 17:36:03.692"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.692">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:36:03.692" endtime="20170809 17:36:03.692"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.695">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:03.694" endtime="20170809 17:36:03.695"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.696">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:03.695" endtime="20170809 17:36:03.696"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.695" endtime="20170809 17:36:03.696"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.693" endtime="20170809 17:36:03.696"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.693" endtime="20170809 17:36:03.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.766">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:36:03.766">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:03.696" endtime="20170809 17:36:03.766"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.768">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:03.768" endtime="20170809 17:36:03.768"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.769">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:03.769" endtime="20170809 17:36:03.769"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.768" endtime="20170809 17:36:03.769"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.767" endtime="20170809 17:36:03.769"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:03.767" endtime="20170809 17:36:03.770"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:36:03.770">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:36:03.770" endtime="20170809 17:36:03.770"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:03.770">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:03.474" endtime="20170809 17:36:03.770"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:03.771">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:03.771" endtime="20170809 17:36:03.771"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:03.771">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:36:03.772">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:36:03.772">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:36:03.771" endtime="20170809 17:36:03.772"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:03.772">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:36:03.473" endtime="20170809 17:36:03.772"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:03.772">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:36:03.473" endtime="20170809 17:36:03.772"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:36:03.773">On != Off</msg>
<status status="FAIL" starttime="20170809 17:36:03.773" endtime="20170809 17:36:03.773"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:03.472" endtime="20170809 17:36:03.773"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:03.472" endtime="20170809 17:36:03.773"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:13.779">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:36:13.779" endtime="20170809 17:36:13.779"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:13.780">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:36:13.780" endtime="20170809 17:36:13.780"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:13.781">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:36:13.780" endtime="20170809 17:36:13.781"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:13.781">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:36:13.781" endtime="20170809 17:36:13.781"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:13.996">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:36:13.782" endtime="20170809 17:36:13.996"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:13.997">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:36:13.997">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:13.782" endtime="20170809 17:36:13.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:13.997">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:13.997" endtime="20170809 17:36:13.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:13.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:13.998" endtime="20170809 17:36:13.998"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:13.778" endtime="20170809 17:36:13.998"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:13.777" endtime="20170809 17:36:13.998"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:13.777" endtime="20170809 17:36:13.998"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:13.999">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:36:13.999" endtime="20170809 17:36:13.999"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:14.001">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:14.000" endtime="20170809 17:36:14.001"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:14.002">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:14.002" endtime="20170809 17:36:14.002"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:14.001" endtime="20170809 17:36:14.002"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:14.000" endtime="20170809 17:36:14.002"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:13.999" endtime="20170809 17:36:14.002"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:14.084">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:36:14.084">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:14.003" endtime="20170809 17:36:14.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:14.086">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:14.085" endtime="20170809 17:36:14.086"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:14.087">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:14.087" endtime="20170809 17:36:14.087"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:14.086" endtime="20170809 17:36:14.087"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:14.085" endtime="20170809 17:36:14.088"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:14.084" endtime="20170809 17:36:14.088"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:36:14.088">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:36:14.088" endtime="20170809 17:36:14.088"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:14.088">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:13.776" endtime="20170809 17:36:14.088"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:14.089">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:14.089" endtime="20170809 17:36:14.089"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:14.090">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:36:14.090">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:36:14.090">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:36:14.089" endtime="20170809 17:36:14.090"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:14.090">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:36:13.775" endtime="20170809 17:36:14.090"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:14.090">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:36:13.775" endtime="20170809 17:36:14.090"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:36:14.091">On != Off</msg>
<status status="FAIL" starttime="20170809 17:36:14.091" endtime="20170809 17:36:14.091"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:13.775" endtime="20170809 17:36:14.091"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:13.774" endtime="20170809 17:36:14.091"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.096">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:36:24.096" endtime="20170809 17:36:24.097"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.097">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:36:24.097" endtime="20170809 17:36:24.097"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.098">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:36:24.098" endtime="20170809 17:36:24.098"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.099">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:36:24.098" endtime="20170809 17:36:24.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.305">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:36:24.099" endtime="20170809 17:36:24.306"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:24.306">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:36:24.306">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:24.099" endtime="20170809 17:36:24.306"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.306">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:24.306" endtime="20170809 17:36:24.307"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.307">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:24.307" endtime="20170809 17:36:24.307"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.095" endtime="20170809 17:36:24.307"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.095" endtime="20170809 17:36:24.308"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.094" endtime="20170809 17:36:24.308"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.308">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:36:24.308" endtime="20170809 17:36:24.308"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.310">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:24.310" endtime="20170809 17:36:24.310"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.311">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:24.311" endtime="20170809 17:36:24.311"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.310" endtime="20170809 17:36:24.311"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.309" endtime="20170809 17:36:24.312"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.309" endtime="20170809 17:36:24.312"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.398">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:36:24.398">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:24.312" endtime="20170809 17:36:24.398"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.400">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:24.399" endtime="20170809 17:36:24.400"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.401">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:24.401" endtime="20170809 17:36:24.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.400" endtime="20170809 17:36:24.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.399" endtime="20170809 17:36:24.401"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:24.398" endtime="20170809 17:36:24.401"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:36:24.402">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:36:24.402" endtime="20170809 17:36:24.402"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:24.402">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:24.094" endtime="20170809 17:36:24.402"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:24.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:24.402" endtime="20170809 17:36:24.403"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:24.403">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:36:24.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:36:24.403">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:36:24.403" endtime="20170809 17:36:24.403"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:24.404">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:36:24.093" endtime="20170809 17:36:24.404"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:24.404">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:36:24.093" endtime="20170809 17:36:24.404"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:36:24.405">On != Off</msg>
<status status="FAIL" starttime="20170809 17:36:24.404" endtime="20170809 17:36:24.405"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:24.092" endtime="20170809 17:36:24.405"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:24.092" endtime="20170809 17:36:24.405"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.411">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:36:34.410" endtime="20170809 17:36:34.411"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.412">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:36:34.411" endtime="20170809 17:36:34.412"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.412">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:36:34.412" endtime="20170809 17:36:34.412"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.413">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:36:34.413" endtime="20170809 17:36:34.413"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:36:34.414" endtime="20170809 17:36:34.610"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:34.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:36:34.610">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:34.413" endtime="20170809 17:36:34.610"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.610">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:34.610" endtime="20170809 17:36:34.611"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:34.611" endtime="20170809 17:36:34.611"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.409" endtime="20170809 17:36:34.611"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.409" endtime="20170809 17:36:34.611"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.408" endtime="20170809 17:36:34.612"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.612">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:36:34.612" endtime="20170809 17:36:34.612"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.614">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:34.614" endtime="20170809 17:36:34.614"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.615">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:34.615" endtime="20170809 17:36:34.615"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.614" endtime="20170809 17:36:34.615"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.613" endtime="20170809 17:36:34.616"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.612" endtime="20170809 17:36:34.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.683">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:36:34.683">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:34.616" endtime="20170809 17:36:34.683"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.685">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:34.685" endtime="20170809 17:36:34.685"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.687">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:34.686" endtime="20170809 17:36:34.687"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.685" endtime="20170809 17:36:34.687"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.684" endtime="20170809 17:36:34.687"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:34.684" endtime="20170809 17:36:34.687"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:36:34.687">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:36:34.687" endtime="20170809 17:36:34.687"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:34.688">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:34.408" endtime="20170809 17:36:34.688"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:34.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:34.688" endtime="20170809 17:36:34.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:34.689">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:36:34.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:36:34.689">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:36:34.689" endtime="20170809 17:36:34.689"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:34.690">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:36:34.407" endtime="20170809 17:36:34.690"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:34.690">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:36:34.407" endtime="20170809 17:36:34.690"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:36:34.691">On != Off</msg>
<status status="FAIL" starttime="20170809 17:36:34.690" endtime="20170809 17:36:34.691"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:34.406" endtime="20170809 17:36:34.691"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:34.406" endtime="20170809 17:36:34.691"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.696">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:36:44.696" endtime="20170809 17:36:44.696"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:36:44.697" endtime="20170809 17:36:44.697"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.698">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:36:44.697" endtime="20170809 17:36:44.698"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.698">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:36:44.698" endtime="20170809 17:36:44.698"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.918">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:36:44.699" endtime="20170809 17:36:44.918"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:44.918">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:36:44.918">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:44.699" endtime="20170809 17:36:44.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.919">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:44.919" endtime="20170809 17:36:44.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:44.919" endtime="20170809 17:36:44.920"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.695" endtime="20170809 17:36:44.920"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.695" endtime="20170809 17:36:44.920"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.694" endtime="20170809 17:36:44.920"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.921">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:36:44.920" endtime="20170809 17:36:44.921"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.923">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:44.922" endtime="20170809 17:36:44.923"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.924">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:44.923" endtime="20170809 17:36:44.924"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.923" endtime="20170809 17:36:44.924"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.921" endtime="20170809 17:36:44.924"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.921" endtime="20170809 17:36:44.924"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.993">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:36:44.993">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:44.924" endtime="20170809 17:36:44.993"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.995">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:44.994" endtime="20170809 17:36:44.995"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.996">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:44.996" endtime="20170809 17:36:44.996"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.995" endtime="20170809 17:36:44.996"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.994" endtime="20170809 17:36:44.996"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:44.993" endtime="20170809 17:36:44.996"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:36:44.997">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:36:44.996" endtime="20170809 17:36:44.997"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:44.997">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:44.693" endtime="20170809 17:36:44.997"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:44.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:44.997" endtime="20170809 17:36:44.998"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:44.998">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:36:44.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:36:44.998">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:36:44.998" endtime="20170809 17:36:44.999"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:44.999">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:36:44.693" endtime="20170809 17:36:44.999"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:44.999">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:36:44.692" endtime="20170809 17:36:44.999"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:36:45.000">On != Off</msg>
<status status="FAIL" starttime="20170809 17:36:44.999" endtime="20170809 17:36:45.000"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:44.692" endtime="20170809 17:36:45.000"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:44.691" endtime="20170809 17:36:45.000"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.009">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:36:55.008" endtime="20170809 17:36:55.009"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.010">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:36:55.010" endtime="20170809 17:36:55.010"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.011">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:36:55.010" endtime="20170809 17:36:55.011"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.012">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:36:55.011" endtime="20170809 17:36:55.012"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.218">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:36:55.013" endtime="20170809 17:36:55.218"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:55.218">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:36:55.218">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:55.012" endtime="20170809 17:36:55.218"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.219">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:55.218" endtime="20170809 17:36:55.219"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:55.219" endtime="20170809 17:36:55.220"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.007" endtime="20170809 17:36:55.220"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.006" endtime="20170809 17:36:55.220"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.005" endtime="20170809 17:36:55.220"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.221">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:36:55.220" endtime="20170809 17:36:55.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.223">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:55.222" endtime="20170809 17:36:55.223"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.224">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:36:55.223" endtime="20170809 17:36:55.224"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.223" endtime="20170809 17:36:55.224"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.221" endtime="20170809 17:36:55.224"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.221" endtime="20170809 17:36:55.224"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.411">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:36:55.411">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:55.224" endtime="20170809 17:36:55.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.413">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:55.412" endtime="20170809 17:36:55.413"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.418">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:36:55.413" endtime="20170809 17:36:55.418"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.413" endtime="20170809 17:36:55.418"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.411" endtime="20170809 17:36:55.418"></status>
</kw>
<status status="PASS" starttime="20170809 17:36:55.411" endtime="20170809 17:36:55.419"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:36:55.419">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:36:55.419" endtime="20170809 17:36:55.419"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:55.419">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:36:55.004" endtime="20170809 17:36:55.419"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:36:55.420">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:36:55.420" endtime="20170809 17:36:55.420"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:36:55.421">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:36:55.421">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:36:55.421">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:36:55.420" endtime="20170809 17:36:55.421"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:55.421">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:36:55.003" endtime="20170809 17:36:55.421"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:36:55.422">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:36:55.002" endtime="20170809 17:36:55.422"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:36:55.422">On != Off</msg>
<status status="FAIL" starttime="20170809 17:36:55.422" endtime="20170809 17:36:55.422"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:55.002" endtime="20170809 17:36:55.423"></status>
</kw>
<status status="FAIL" starttime="20170809 17:36:55.001" endtime="20170809 17:36:55.423"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.428">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:37:05.428" endtime="20170809 17:37:05.429"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:37:05.429" endtime="20170809 17:37:05.429"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.430">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:37:05.430" endtime="20170809 17:37:05.430"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.431">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:37:05.430" endtime="20170809 17:37:05.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:37:05.431" endtime="20170809 17:37:05.623"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:05.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:37:05.623">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:05.431" endtime="20170809 17:37:05.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.623">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:05.623" endtime="20170809 17:37:05.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:05.624" endtime="20170809 17:37:05.624"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.427" endtime="20170809 17:37:05.624"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.427" endtime="20170809 17:37:05.624"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.426" endtime="20170809 17:37:05.625"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.625">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:37:05.625" endtime="20170809 17:37:05.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.627">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:05.627" endtime="20170809 17:37:05.627"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.628">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:05.628" endtime="20170809 17:37:05.628"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.627" endtime="20170809 17:37:05.628"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.626" endtime="20170809 17:37:05.628"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.625" endtime="20170809 17:37:05.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.708">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:37:05.708">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:05.629" endtime="20170809 17:37:05.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.710">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:05.710" endtime="20170809 17:37:05.710"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.711">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:05.711" endtime="20170809 17:37:05.711"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.710" endtime="20170809 17:37:05.711"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.709" endtime="20170809 17:37:05.712"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:05.709" endtime="20170809 17:37:05.712"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:37:05.712">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:37:05.712" endtime="20170809 17:37:05.712"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:05.712">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:05.425" endtime="20170809 17:37:05.712"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:05.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:05.713" endtime="20170809 17:37:05.713"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:05.714">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:37:05.714">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:37:05.714">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:37:05.713" endtime="20170809 17:37:05.714"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:05.714">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:37:05.425" endtime="20170809 17:37:05.714"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:05.714">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:37:05.424" endtime="20170809 17:37:05.714"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:37:05.715">On != Off</msg>
<status status="FAIL" starttime="20170809 17:37:05.715" endtime="20170809 17:37:05.715"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:05.424" endtime="20170809 17:37:05.715"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:05.423" endtime="20170809 17:37:05.715"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.721">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:37:15.721" endtime="20170809 17:37:15.721"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.722">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:37:15.722" endtime="20170809 17:37:15.722"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.722">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:37:15.722" endtime="20170809 17:37:15.723"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.723">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:37:15.723" endtime="20170809 17:37:15.723"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.916">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:37:15.724" endtime="20170809 17:37:15.916"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:15.916">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:37:15.916">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:15.723" endtime="20170809 17:37:15.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:15.916" endtime="20170809 17:37:15.917"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:15.917" endtime="20170809 17:37:15.917"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.720" endtime="20170809 17:37:15.917"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.719" endtime="20170809 17:37:15.918"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.719" endtime="20170809 17:37:15.918"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.918">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:37:15.918" endtime="20170809 17:37:15.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.920">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:15.920" endtime="20170809 17:37:15.920"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.921">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:15.921" endtime="20170809 17:37:15.921"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.920" endtime="20170809 17:37:15.921"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.919" endtime="20170809 17:37:15.922"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.919" endtime="20170809 17:37:15.922"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.985">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:37:15.985">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:15.922" endtime="20170809 17:37:15.985"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:15.986" endtime="20170809 17:37:15.987"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.988">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:15.987" endtime="20170809 17:37:15.988"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.987" endtime="20170809 17:37:15.988"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.986" endtime="20170809 17:37:15.988"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:15.985" endtime="20170809 17:37:15.988"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:37:15.989">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:37:15.989" endtime="20170809 17:37:15.989"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:15.989">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:15.718" endtime="20170809 17:37:15.989"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:15.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:15.989" endtime="20170809 17:37:15.990"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:15.990">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:37:15.990">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:37:15.990">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:37:15.990" endtime="20170809 17:37:15.991"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:15.991">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:37:15.717" endtime="20170809 17:37:15.991"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:15.991">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:37:15.717" endtime="20170809 17:37:15.991"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:37:15.992">On != Off</msg>
<status status="FAIL" starttime="20170809 17:37:15.991" endtime="20170809 17:37:15.992"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:15.717" endtime="20170809 17:37:15.992"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:15.716" endtime="20170809 17:37:15.992"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:25.997">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:37:25.997" endtime="20170809 17:37:25.998"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:25.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:37:25.998" endtime="20170809 17:37:25.998"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:25.999">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:37:25.999" endtime="20170809 17:37:25.999"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:26.000">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:37:25.999" endtime="20170809 17:37:26.000"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:26.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:37:26.000" endtime="20170809 17:37:26.263"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:26.263">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:37:26.263">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:26.000" endtime="20170809 17:37:26.263"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:26.264">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:26.263" endtime="20170809 17:37:26.264"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:26.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:26.264" endtime="20170809 17:37:26.264"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:25.996" endtime="20170809 17:37:26.265"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:25.996" endtime="20170809 17:37:26.265"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:25.995" endtime="20170809 17:37:26.265"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:26.265">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:37:26.265" endtime="20170809 17:37:26.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:26.267">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:26.267" endtime="20170809 17:37:26.267"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:26.268">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:26.268" endtime="20170809 17:37:26.268"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:26.268" endtime="20170809 17:37:26.269"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:26.266" endtime="20170809 17:37:26.269"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:26.266" endtime="20170809 17:37:26.269"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:26.376">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:37:26.376">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:26.269" endtime="20170809 17:37:26.376"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:26.378">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:26.378" endtime="20170809 17:37:26.378"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:26.379">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:26.379" endtime="20170809 17:37:26.379"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:26.378" endtime="20170809 17:37:26.379"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:26.377" endtime="20170809 17:37:26.379"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:26.376" endtime="20170809 17:37:26.379"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:37:26.380">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:37:26.380" endtime="20170809 17:37:26.380"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:26.380">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:25.995" endtime="20170809 17:37:26.380"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:26.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:26.380" endtime="20170809 17:37:26.381"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:26.381">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:37:26.381">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:37:26.381">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:37:26.381" endtime="20170809 17:37:26.381"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:26.382">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:37:25.994" endtime="20170809 17:37:26.382"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:26.382">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:37:25.994" endtime="20170809 17:37:26.382"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:37:26.383">On != Off</msg>
<status status="FAIL" starttime="20170809 17:37:26.382" endtime="20170809 17:37:26.383"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:25.993" endtime="20170809 17:37:26.383"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:25.993" endtime="20170809 17:37:26.383"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.388">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:37:36.388" endtime="20170809 17:37:36.389"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.389">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:37:36.389" endtime="20170809 17:37:36.389"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.390">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:37:36.390" endtime="20170809 17:37:36.390"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:37:36.390" endtime="20170809 17:37:36.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.623">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:37:36.391" endtime="20170809 17:37:36.623"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:36.623">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:37:36.623">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:36.391" endtime="20170809 17:37:36.623"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.624">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:36.623" endtime="20170809 17:37:36.624"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:36.624" endtime="20170809 17:37:36.625"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.387" endtime="20170809 17:37:36.625"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.387" endtime="20170809 17:37:36.625"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.386" endtime="20170809 17:37:36.625"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.626">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:37:36.625" endtime="20170809 17:37:36.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.628">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:36.627" endtime="20170809 17:37:36.628"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.628">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:36.628" endtime="20170809 17:37:36.629"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.628" endtime="20170809 17:37:36.629"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.626" endtime="20170809 17:37:36.629"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.626" endtime="20170809 17:37:36.629"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.731">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:37:36.731">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:36.629" endtime="20170809 17:37:36.731"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.733">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:36.732" endtime="20170809 17:37:36.733"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.734">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:36.734" endtime="20170809 17:37:36.734"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.733" endtime="20170809 17:37:36.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.732" endtime="20170809 17:37:36.735"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:36.732" endtime="20170809 17:37:36.735"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:37:36.735">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:37:36.735" endtime="20170809 17:37:36.735"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:36.735">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:36.385" endtime="20170809 17:37:36.735"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:36.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:36.736" endtime="20170809 17:37:36.736"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:36.737">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:37:36.737">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:37:36.737">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:37:36.736" endtime="20170809 17:37:36.737"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:36.737">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:37:36.385" endtime="20170809 17:37:36.737"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:36.737">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:37:36.385" endtime="20170809 17:37:36.738"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:37:36.738">On != Off</msg>
<status status="FAIL" starttime="20170809 17:37:36.738" endtime="20170809 17:37:36.738"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:36.384" endtime="20170809 17:37:36.738"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:36.384" endtime="20170809 17:37:36.738"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:46.744">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:37:46.743" endtime="20170809 17:37:46.744"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:46.745">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:37:46.744" endtime="20170809 17:37:46.745"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:46.745">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:37:46.745" endtime="20170809 17:37:46.745"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:46.746">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:37:46.746" endtime="20170809 17:37:46.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:46.947">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:37:46.747" endtime="20170809 17:37:46.947"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:46.947">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:37:46.947">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:46.746" endtime="20170809 17:37:46.947"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:46.948">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:46.947" endtime="20170809 17:37:46.948"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:46.948">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:46.948" endtime="20170809 17:37:46.949"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:46.743" endtime="20170809 17:37:46.949"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:46.742" endtime="20170809 17:37:46.949"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:46.742" endtime="20170809 17:37:46.949"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:46.949">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:37:46.949" endtime="20170809 17:37:46.949"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:46.951">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:46.951" endtime="20170809 17:37:46.952"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:46.952">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:46.952" endtime="20170809 17:37:46.953"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:46.952" endtime="20170809 17:37:46.953"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:46.950" endtime="20170809 17:37:46.953"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:46.950" endtime="20170809 17:37:46.953"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:47.052">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:37:47.052">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:46.953" endtime="20170809 17:37:47.052"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:47.054">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:47.053" endtime="20170809 17:37:47.054"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:47.055">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:47.054" endtime="20170809 17:37:47.055"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:47.054" endtime="20170809 17:37:47.055"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:47.053" endtime="20170809 17:37:47.055"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:47.052" endtime="20170809 17:37:47.055"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:37:47.055">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:37:47.055" endtime="20170809 17:37:47.055"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:47.056">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:46.741" endtime="20170809 17:37:47.056"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:47.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:47.056" endtime="20170809 17:37:47.056"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:47.057">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:37:47.057">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:37:47.057">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:37:47.057" endtime="20170809 17:37:47.057"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:47.057">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:37:46.740" endtime="20170809 17:37:47.057"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:47.058">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:37:46.740" endtime="20170809 17:37:47.058"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:37:47.058">On != Off</msg>
<status status="FAIL" starttime="20170809 17:37:47.058" endtime="20170809 17:37:47.058"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:46.740" endtime="20170809 17:37:47.059"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:46.739" endtime="20170809 17:37:47.059"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.064">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:37:57.064" endtime="20170809 17:37:57.064"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.065">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:37:57.065" endtime="20170809 17:37:57.065"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.066">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:37:57.065" endtime="20170809 17:37:57.066"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.066">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:37:57.066" endtime="20170809 17:37:57.066"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.341">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:37:57.067" endtime="20170809 17:37:57.342"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:57.342">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:37:57.342">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:57.067" endtime="20170809 17:37:57.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:57.342" endtime="20170809 17:37:57.342"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:57.343" endtime="20170809 17:37:57.343"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.063" endtime="20170809 17:37:57.343"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.062" endtime="20170809 17:37:57.343"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.062" endtime="20170809 17:37:57.343"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.344">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:37:57.344" endtime="20170809 17:37:57.344"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.346">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:57.345" endtime="20170809 17:37:57.346"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.347">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:37:57.347" endtime="20170809 17:37:57.347"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.346" endtime="20170809 17:37:57.347"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.345" endtime="20170809 17:37:57.347"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.344" endtime="20170809 17:37:57.347"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:37:57.480">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:57.348" endtime="20170809 17:37:57.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.482">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:57.481" endtime="20170809 17:37:57.482"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.483">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:37:57.482" endtime="20170809 17:37:57.483"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.482" endtime="20170809 17:37:57.483"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.481" endtime="20170809 17:37:57.483"></status>
</kw>
<status status="PASS" starttime="20170809 17:37:57.480" endtime="20170809 17:37:57.483"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:37:57.484">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:37:57.484" endtime="20170809 17:37:57.484"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:57.484">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:37:57.061" endtime="20170809 17:37:57.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:37:57.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:37:57.484" endtime="20170809 17:37:57.485"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:37:57.485">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:37:57.485">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:37:57.486">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:37:57.485" endtime="20170809 17:37:57.486"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:57.486">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:37:57.060" endtime="20170809 17:37:57.486"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:37:57.486">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:37:57.060" endtime="20170809 17:37:57.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:37:57.487">On != Off</msg>
<status status="FAIL" starttime="20170809 17:37:57.486" endtime="20170809 17:37:57.487"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:57.060" endtime="20170809 17:37:57.487"></status>
</kw>
<status status="FAIL" starttime="20170809 17:37:57.059" endtime="20170809 17:37:57.487"></status>
</kw>
<kw library="state_manager" name="Is Host Running">
<doc>Check if host state is "Running".</doc>
<kw library="state_manager" name="Is Chassis On">
<doc>Check if chassis state is "On".</doc>
<kw library="state_manager" name="Get Chassis Power State">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.492">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:07.492" endtime="20170809 17:38:07.493"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.493">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:07.493" endtime="20170809 17:38:07.493"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.494">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:07.493" endtime="20170809 17:38:07.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.494">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:07.494" endtime="20170809 17:38:07.495"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.683">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:07.495" endtime="20170809 17:38:07.683"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:07.684">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:07.684">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.495" endtime="20170809 17:38:07.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.684">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.684" endtime="20170809 17:38:07.684"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.685">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.685" endtime="20170809 17:38:07.685"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.491" endtime="20170809 17:38:07.685"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.491" endtime="20170809 17:38:07.685"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.490" endtime="20170809 17:38:07.685"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.686">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" starttime="20170809 17:38:07.686" endtime="20170809 17:38:07.686"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.688">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:38:07.687" endtime="20170809 17:38:07.688"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.689">URI:https://9.41.166.169:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:38:07.689" endtime="20170809 17:38:07.689"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.688" endtime="20170809 17:38:07.689"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.687" endtime="20170809 17:38:07.689"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.686" endtime="20170809 17:38:07.689"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.773">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:07.773">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.690" endtime="20170809 17:38:07.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.775">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:38:07.774" endtime="20170809 17:38:07.775"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.776">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:38:07.775" endtime="20170809 17:38:07.776"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.775" endtime="20170809 17:38:07.776"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.774" endtime="20170809 17:38:07.776"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.773" endtime="20170809 17:38:07.776"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:07.776">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:07.776" endtime="20170809 17:38:07.776"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:07.777">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.490" endtime="20170809 17:38:07.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.777" endtime="20170809 17:38:07.777"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.778">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:07.778">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:38:07.778">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:38:07.778" endtime="20170809 17:38:07.778"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:07.778">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" starttime="20170809 17:38:07.489" endtime="20170809 17:38:07.778"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:07.779">${power_state} = Off</msg>
<status status="PASS" starttime="20170809 17:38:07.489" endtime="20170809 17:38:07.779"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:38:07.779">On != Off</msg>
<status status="FAIL" starttime="20170809 17:38:07.779" endtime="20170809 17:38:07.779"></status>
</kw>
<status status="FAIL" starttime="20170809 17:38:07.488" endtime="20170809 17:38:07.780"></status>
</kw>
<status status="FAIL" starttime="20170809 17:38:07.488" endtime="20170809 17:38:07.780"></status>
</kw>
<msg level="FAIL" timestamp="20170809 17:38:07.780">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</msg>
<status status="FAIL" starttime="20170809 17:28:02.199" endtime="20170809 17:38:07.780"></status>
</kw>
<status status="FAIL" starttime="20170809 17:28:01.232" endtime="20170809 17:38:07.780"></status>
</kw>
<status status="FAIL" starttime="20170809 17:27:53.841" endtime="20170809 17:38:07.780"></status>
</kw>
<status status="FAIL" starttime="20170809 17:27:53.840" endtime="20170809 17:38:07.780"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:07.786">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:07.785" endtime="20170809 17:38:07.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:07.786" endtime="20170809 17:38:07.787"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.787">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:07.787" endtime="20170809 17:38:07.787"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:07.788">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:07.788" endtime="20170809 17:38:07.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.006">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:07.789" endtime="20170809 17:38:08.006"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:08.006">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:08.006">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.788" endtime="20170809 17:38:08.006"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.007">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:08.006" endtime="20170809 17:38:08.007"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:08.007" endtime="20170809 17:38:08.007"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.785" endtime="20170809 17:38:08.007"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.784" endtime="20170809 17:38:08.008"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.784" endtime="20170809 17:38:08.008"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:08.008">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" starttime="20170809 17:38:08.008" endtime="20170809 17:38:08.008"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:08.010">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:38:08.010" endtime="20170809 17:38:08.010"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.012">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" starttime="20170809 17:38:08.011" endtime="20170809 17:38:08.012"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.010" endtime="20170809 17:38:08.012"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.009" endtime="20170809 17:38:08.012"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.008" endtime="20170809 17:38:08.012"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:08.106">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:08.106">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:08.012" endtime="20170809 17:38:08.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:08.108">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:38:08.107" endtime="20170809 17:38:08.108"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.109">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" starttime="20170809 17:38:08.109" endtime="20170809 17:38:08.109"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.108" endtime="20170809 17:38:08.109"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.107" endtime="20170809 17:38:08.109"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.107" endtime="20170809 17:38:08.109"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:08.110">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:08.109" endtime="20170809 17:38:08.110"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:08.110">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:07.783" endtime="20170809 17:38:08.110"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:08.110" endtime="20170809 17:38:08.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:08.111">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:08.111">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:38:08.111">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:38:08.111" endtime="20170809 17:38:08.111"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:08.112">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170809 17:38:07.782" endtime="20170809 17:38:08.112"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:08.112">${host_state} = Off</msg>
<status status="PASS" starttime="20170809 17:38:07.782" endtime="20170809 17:38:08.112"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:38:08.113">Off != Quiesced</msg>
<status status="FAIL" starttime="20170809 17:38:08.113" endtime="20170809 17:38:08.117"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:08.117">${status} = False</msg>
<status status="PASS" starttime="20170809 17:38:08.112" endtime="20170809 17:38:08.117"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:08.118">${status} = False</msg>
<status status="PASS" starttime="20170809 17:38:07.781" endtime="20170809 17:38:08.118"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:08.156">Length is 12</msg>
<status status="PASS" starttime="20170809 17:38:08.156" endtime="20170809 17:38:08.156"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:08.162">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:38:11.172">${RC} = 0</msg>
<msg level="INFO" timestamp="20170809 17:38:11.172">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=7.54 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.572 ms
64 bytes from 9.41.166.169...</msg>
<status status="PASS" starttime="20170809 17:38:08.156" endtime="20170809 17:38:11.172"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.175">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=7.54 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.572 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.582 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.684 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.572/2.346/7.547/3.003 ms</msg>
<status status="PASS" starttime="20170809 17:38:11.174" endtime="20170809 17:38:11.175"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:11.175" endtime="20170809 17:38:11.176"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.155" endtime="20170809 17:38:11.176"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.190">${cur_time} = 2017-08-09 17:38:11:190153</msg>
<status status="PASS" starttime="20170809 17:38:11.190" endtime="20170809 17:38:11.190"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.191">${cur_time} = 20170809173811190153</msg>
<status status="PASS" starttime="20170809 17:38:11.191" endtime="20170809 17:38:11.191"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.189" endtime="20170809 17:38:11.191"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.192">${FFDC_TIME} = 20170809173811190153</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.202">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170809 17:38:11.202" endtime="20170809 17:38:11.202"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.202">${suite_name} = 20170809173811190153_TestsTestBasicPoweron</msg>
<status status="PASS" starttime="20170809 17:38:11.202" endtime="20170809 17:38:11.203"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.203">${test_name} = PowerOnTest</msg>
<status status="PASS" starttime="20170809 17:38:11.203" endtime="20170809 17:38:11.203"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.204">${test_name} = 20170809173811190153_PowerOnTest</msg>
<status status="PASS" starttime="20170809 17:38:11.203" endtime="20170809 17:38:11.204"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.201" endtime="20170809 17:38:11.204"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.204">${FFDC_DIR_PATH} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170809 17:38:11.204">${FFDC_PREFIX} = 20170809173811190153_</msg>
<msg level="INFO" timestamp="20170809 17:38:11.225">${LOG_PREFIX} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.226" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.226" endtime="20170809 17:38:11.226"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.231">${FFDC_FILE_PATH} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.253" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.252" endtime="20170809 17:38:11.253"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.252" endtime="20170809 17:38:11.253"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.254" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.254" endtime="20170809 17:38:11.254"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.253" endtime="20170809 17:38:11.254"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.256" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.255" endtime="20170809 17:38:11.256"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.255" endtime="20170809 17:38:11.256"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.257" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.257" endtime="20170809 17:38:11.257"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.256" endtime="20170809 17:38:11.257"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.258" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.258" endtime="20170809 17:38:11.258"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.257" endtime="20170809 17:38:11.259"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.260" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.259" endtime="20170809 17:38:11.260"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.259" endtime="20170809 17:38:11.260"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.261" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.261" endtime="20170809 17:38:11.261"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.260" endtime="20170809 17:38:11.261"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.262" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.262" endtime="20170809 17:38:11.262"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.261" endtime="20170809 17:38:11.263"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.264" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.263" endtime="20170809 17:38:11.264"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.263" endtime="20170809 17:38:11.264"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.266" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.265" endtime="20170809 17:38:11.266"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.264" endtime="20170809 17:38:11.266"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.267" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.266" endtime="20170809 17:38:11.267"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.266" endtime="20170809 17:38:11.267"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.268" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.268" endtime="20170809 17:38:11.268"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.267" endtime="20170809 17:38:11.268"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.269" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.269" endtime="20170809 17:38:11.269"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.268" endtime="20170809 17:38:11.270"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.297">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:11.298">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170809 17:38:11.374">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 17:38:11.384">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170809 17:38:11.384">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 17:38:11.384">${rc} = 0</msg>
<status status="PASS" starttime="20170809 17:38:11.270" endtime="20170809 17:38:11.384"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.385">Length is 0</msg>
<status status="PASS" starttime="20170809 17:38:11.385" endtime="20170809 17:38:11.385"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.386">Length is 11</msg>
<status status="PASS" starttime="20170809 17:38:11.385" endtime="20170809 17:38:11.386"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.386">${model_name} = Witherspoon</msg>
<status status="PASS" starttime="20170809 17:38:11.270" endtime="20170809 17:38:11.386"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.387" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.387" endtime="20170809 17:38:11.387"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.386" endtime="20170809 17:38:11.387"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.264" endtime="20170809 17:38:11.387"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.389" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.388" endtime="20170809 17:38:11.389"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.388" endtime="20170809 17:38:11.389"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.389">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170809 17:38:11.389" endtime="20170809 17:38:11.389"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.391" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.390" endtime="20170809 17:38:11.391"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.390" endtime="20170809 17:38:11.391"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.392" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.392" endtime="20170809 17:38:11.392"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.391" endtime="20170809 17:38:11.392"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.389" endtime="20170809 17:38:11.392"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.394" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.393" endtime="20170809 17:38:11.394"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.392" endtime="20170809 17:38:11.394"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.395" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.395" endtime="20170809 17:38:11.395"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.394" endtime="20170809 17:38:11.395"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.392" endtime="20170809 17:38:11.395"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.397" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.396" endtime="20170809 17:38:11.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.396" endtime="20170809 17:38:11.397"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.398" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.397" endtime="20170809 17:38:11.398"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.397" endtime="20170809 17:38:11.398"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.395" endtime="20170809 17:38:11.398"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.389" endtime="20170809 17:38:11.398"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.399" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.399" endtime="20170809 17:38:11.399"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.398" endtime="20170809 17:38:11.399"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.251" endtime="20170809 17:38:11.399"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.406">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" starttime="20170809 17:38:11.406" endtime="20170809 17:38:11.406"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.407">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('OS FFDC', 'OS FFDC Files') | ('Core Files', 'SCP Coredump Files') |...</msg>
<status status="PASS" starttime="20170809 17:38:11.407" endtime="20170809 17:38:11.407"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:11.408" endtime="20170809 17:38:11.408"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.408">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | SEL Log | OS FFDC | Core Files | BMC Specific Files ]</msg>
<status status="PASS" starttime="20170809 17:38:11.407" endtime="20170809 17:38:11.408"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:11.410" endtime="20170809 17:38:11.410"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.410">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:11.410">${ret_values} = None</msg>
<status status="PASS" starttime="20170809 17:38:11.410" endtime="20170809 17:38:11.411"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:11.411" endtime="20170809 17:38:11.411"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.437">@{entries} = [ BMC DATA | APPLICATION DATA | DRIVER INFO ]</msg>
<status status="PASS" starttime="20170809 17:38:11.437" endtime="20170809 17:38:11.437"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.439">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" starttime="20170809 17:38:11.438" endtime="20170809 17:38:11.439"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.444">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" starttime="20170809 17:38:11.439" endtime="20170809 17:38:11.444"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.447" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.446" endtime="20170809 17:38:11.447"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.446" endtime="20170809 17:38:11.447"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.448" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.448" endtime="20170809 17:38:11.448"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.447" endtime="20170809 17:38:11.448"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.449" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.449" endtime="20170809 17:38:11.450"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.449" endtime="20170809 17:38:11.450"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.451" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.450" endtime="20170809 17:38:11.451"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.450" endtime="20170809 17:38:11.451"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.445" endtime="20170809 17:38:11.451"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.445" endtime="20170809 17:38:11.451"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.452">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:11.451" endtime="20170809 17:38:11.452"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.518">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:11.519">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170809 17:38:11.588">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:11.483" endtime="20170809 17:38:11.588"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.588">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:11.588">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" starttime="20170809 17:38:11.452" endtime="20170809 17:38:11.588"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.589">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" starttime="20170809 17:38:11.589" endtime="20170809 17:38:11.589"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.590">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:11.589" endtime="20170809 17:38:11.590"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.596" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.596" endtime="20170809 17:38:11.596"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.595" endtime="20170809 17:38:11.596"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.590" endtime="20170809 17:38:11.597"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.444" endtime="20170809 17:38:11.597"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.444" endtime="20170809 17:38:11.597"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.600" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.599" endtime="20170809 17:38:11.600"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.599" endtime="20170809 17:38:11.600"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.601" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.601" endtime="20170809 17:38:11.601"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.600" endtime="20170809 17:38:11.601"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.602" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.602" endtime="20170809 17:38:11.602"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.601" endtime="20170809 17:38:11.602"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.603" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.603" endtime="20170809 17:38:11.604"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.603" endtime="20170809 17:38:11.604"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.598" endtime="20170809 17:38:11.604"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.598" endtime="20170809 17:38:11.604"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.605">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:11.604" endtime="20170809 17:38:11.605"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.672">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:11.673">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170809 17:38:11.753">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:11.636" endtime="20170809 17:38:11.754"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.754">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:11.754">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 14:44:15 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" starttime="20170809 17:38:11.605" endtime="20170809 17:38:11.754"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.755">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 14:44:15 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" starttime="20170809 17:38:11.754" endtime="20170809 17:38:11.755"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.756">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:11.755" endtime="20170809 17:38:11.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.765" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.764" endtime="20170809 17:38:11.765"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.764" endtime="20170809 17:38:11.765"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.756" endtime="20170809 17:38:11.765"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.597" endtime="20170809 17:38:11.765"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.597" endtime="20170809 17:38:11.766"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.768" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.768" endtime="20170809 17:38:11.768"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.767" endtime="20170809 17:38:11.769"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.770" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.769" endtime="20170809 17:38:11.770"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.769" endtime="20170809 17:38:11.770"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.771" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.771" endtime="20170809 17:38:11.771"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.770" endtime="20170809 17:38:11.771"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.772" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.772" endtime="20170809 17:38:11.772"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.771" endtime="20170809 17:38:11.773"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.767" endtime="20170809 17:38:11.773"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.767" endtime="20170809 17:38:11.773"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.774">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:11.773" endtime="20170809 17:38:11.774"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.840">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:11.841">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170809 17:38:11.897">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:11.804" endtime="20170809 17:38:11.897"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:11.897">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:11.897">${ret_values} = (u' 15:59:25 up 16 min,  load average: 0.26, 0.44, 0.54', u'', 0)</msg>
<status status="PASS" starttime="20170809 17:38:11.774" endtime="20170809 17:38:11.897"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.898">${stdout} =  15:59:25 up 16 min,  load average: 0.26, 0.44, 0.54</msg>
<status status="PASS" starttime="20170809 17:38:11.898" endtime="20170809 17:38:11.898"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.898">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:11.898" endtime="20170809 17:38:11.899"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.905" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.905" endtime="20170809 17:38:11.905"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.904" endtime="20170809 17:38:11.905"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.899" endtime="20170809 17:38:11.905"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.766" endtime="20170809 17:38:11.905"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.766" endtime="20170809 17:38:11.905"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.444" endtime="20170809 17:38:11.906"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.438" endtime="20170809 17:38:11.906"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.438" endtime="20170809 17:38:11.906"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.907">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" starttime="20170809 17:38:11.906" endtime="20170809 17:38:11.907"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.907">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" starttime="20170809 17:38:11.907" endtime="20170809 17:38:11.907"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.910" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.910" endtime="20170809 17:38:11.911"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.910" endtime="20170809 17:38:11.911"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.912" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.912" endtime="20170809 17:38:11.912"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.911" endtime="20170809 17:38:11.912"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.913" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.913" endtime="20170809 17:38:11.913"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.912" endtime="20170809 17:38:11.913"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.914" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:11.914" endtime="20170809 17:38:11.915"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.914" endtime="20170809 17:38:11.915"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.909" endtime="20170809 17:38:11.915"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.909" endtime="20170809 17:38:11.915"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:11.916">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:11.915" endtime="20170809 17:38:11.916"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:11.982">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:11.983">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20170809 17:38:13.379">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:11.947" endtime="20170809 17:38:13.380"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:13.380">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:13.380">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" starttime="20170809 17:38:11.916" endtime="20170809 17:38:13.380"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.380">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" starttime="20170809 17:38:13.380" endtime="20170809 17:38:13.381"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.381">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:13.381" endtime="20170809 17:38:13.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.387" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.387" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.386" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.381" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.908" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.908" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.908" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.906" endtime="20170809 17:38:13.388"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.906" endtime="20170809 17:38:13.388"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.389">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" starttime="20170809 17:38:13.389" endtime="20170809 17:38:13.389"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.390">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" starttime="20170809 17:38:13.390" endtime="20170809 17:38:13.390"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.393" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.393" endtime="20170809 17:38:13.393"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.392" endtime="20170809 17:38:13.393"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.395" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.394" endtime="20170809 17:38:13.395"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.394" endtime="20170809 17:38:13.395"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.396" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.396" endtime="20170809 17:38:13.396"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.395" endtime="20170809 17:38:13.396"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.397" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.397" endtime="20170809 17:38:13.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.396" endtime="20170809 17:38:13.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.392" endtime="20170809 17:38:13.397"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.391" endtime="20170809 17:38:13.398"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.398">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:13.398" endtime="20170809 17:38:13.398"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.465">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:13.466">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170809 17:38:13.522">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:13.429" endtime="20170809 17:38:13.522"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:13.522">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:13.522">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-204"\nVERSION_ID="v1.99.8-204-g169a8a3"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" starttime="20170809 17:38:13.399" endtime="20170809 17:38:13.522"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.523">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-204"
VERSION_ID="v1.99.8-204-g169a8a3"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" starttime="20170809 17:38:13.523" endtime="20170809 17:38:13.523"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.524">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:13.523" endtime="20170809 17:38:13.524"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.530" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.530" endtime="20170809 17:38:13.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.529" endtime="20170809 17:38:13.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.524" endtime="20170809 17:38:13.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.390" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.390" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.390" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.388" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.388" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.437" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.437" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.411" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.409" endtime="20170809 17:38:13.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.409" endtime="20170809 17:38:13.531"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:13.533" endtime="20170809 17:38:13.533"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:13.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:13.533">${ret_values} = None</msg>
<status status="PASS" starttime="20170809 17:38:13.532" endtime="20170809 17:38:13.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:13.533" endtime="20170809 17:38:13.534"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.563">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" starttime="20170809 17:38:13.563" endtime="20170809 17:38:13.563"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.565">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status status="PASS" starttime="20170809 17:38:13.564" endtime="20170809 17:38:13.565"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.566">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_elog.txt</msg>
<status status="PASS" starttime="20170809 17:38:13.565" endtime="20170809 17:38:13.566"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.569">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:13.568" endtime="20170809 17:38:13.570"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.570">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:13.570" endtime="20170809 17:38:13.570"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.571">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:13.571" endtime="20170809 17:38:13.571"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:13.571" endtime="20170809 17:38:13.572"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.768">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:13.572" endtime="20170809 17:38:13.768"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:13.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:13.768">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.572" endtime="20170809 17:38:13.768"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.769" endtime="20170809 17:38:13.769"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.769" endtime="20170809 17:38:13.770"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.567" endtime="20170809 17:38:13.770"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.567" endtime="20170809 17:38:13.770"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.566" endtime="20170809 17:38:13.771"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.771">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" starttime="20170809 17:38:13.771" endtime="20170809 17:38:13.772"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:13.772" endtime="20170809 17:38:13.772"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.916">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:13.917">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.773" endtime="20170809 17:38:13.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:13.917" endtime="20170809 17:38:13.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:13.918">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:13.918" endtime="20170809 17:38:13.918"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:13.918">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.566" endtime="20170809 17:38:13.918"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.919">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.919" endtime="20170809 17:38:13.919"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:13.919">${status} = True</msg>
<status status="PASS" starttime="20170809 17:38:13.918" endtime="20170809 17:38:13.919"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:13.919" endtime="20170809 17:38:13.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.920">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775113466, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775047487, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:13.921">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 17:38:13.921">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" starttime="20170809 17:38:13.920" endtime="20170809 17:38:13.921"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.922" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_elog.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:13.922" endtime="20170809 17:38:13.922"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.921" endtime="20170809 17:38:13.922"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.565" endtime="20170809 17:38:13.923"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.923">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_record_log.txt</msg>
<status status="PASS" starttime="20170809 17:38:13.923" endtime="20170809 17:38:13.923"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:13.926">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:13.926" endtime="20170809 17:38:13.927"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.928">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:13.928" endtime="20170809 17:38:13.928"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.929">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:13.928" endtime="20170809 17:38:13.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:13.929">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:13.929" endtime="20170809 17:38:13.929"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.184">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:13.930" endtime="20170809 17:38:14.184"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.184">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:14.184">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.930" endtime="20170809 17:38:14.184"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.185">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.184" endtime="20170809 17:38:14.185"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.186">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.185" endtime="20170809 17:38:14.186"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.925" endtime="20170809 17:38:14.186"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.925" endtime="20170809 17:38:14.186"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.924" endtime="20170809 17:38:14.186"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.187">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" starttime="20170809 17:38:14.186" endtime="20170809 17:38:14.187"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:14.187" endtime="20170809 17:38:14.187"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.270">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:14.270">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.187" endtime="20170809 17:38:14.270"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:14.270" endtime="20170809 17:38:14.271"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:14.271">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:14.271" endtime="20170809 17:38:14.271"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.271">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:13.923" endtime="20170809 17:38:14.271"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.272">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 17:38:14.273">404 != 200</msg>
<status status="FAIL" starttime="20170809 17:38:14.272" endtime="20170809 17:38:14.273"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.273">${status} = False</msg>
<status status="PASS" starttime="20170809 17:38:14.272" endtime="20170809 17:38:14.273"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 17:38:14.274">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170809 17:38:14.274" endtime="20170809 17:38:14.274"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.273" endtime="20170809 17:38:14.274"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.923" endtime="20170809 17:38:14.274"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.275">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_sensor_list.txt</msg>
<status status="PASS" starttime="20170809 17:38:14.274" endtime="20170809 17:38:14.275"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.279">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:14.279" endtime="20170809 17:38:14.280"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:14.280" endtime="20170809 17:38:14.280"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.281">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:14.281" endtime="20170809 17:38:14.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:14.282" endtime="20170809 17:38:14.282"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.486">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:14.284" endtime="20170809 17:38:14.486"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.486">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:14.486">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.283" endtime="20170809 17:38:14.486"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.487">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.486" endtime="20170809 17:38:14.487"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.487" endtime="20170809 17:38:14.487"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.278" endtime="20170809 17:38:14.488"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.277" endtime="20170809 17:38:14.488"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.276" endtime="20170809 17:38:14.488"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.488">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" starttime="20170809 17:38:14.488" endtime="20170809 17:38:14.488"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:14.489" endtime="20170809 17:38:14.489"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.744">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:14.744">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.489" endtime="20170809 17:38:14.744"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:14.744" endtime="20170809 17:38:14.745"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:14.745">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:14.745" endtime="20170809 17:38:14.745"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.745">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.275" endtime="20170809 17:38:14.746"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.746" endtime="20170809 17:38:14.747"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.747">${status} = True</msg>
<status status="PASS" starttime="20170809 17:38:14.746" endtime="20170809 17:38:14.747"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:14.747" endtime="20170809 17:38:14.747"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.748">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:14.748">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 17:38:14.748">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" starttime="20170809 17:38:14.747" endtime="20170809 17:38:14.748"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.750" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_sensor_list.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:14.749" endtime="20170809 17:38:14.750"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.748" endtime="20170809 17:38:14.750"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.274" endtime="20170809 17:38:14.750"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.751">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_inventory.txt</msg>
<status status="PASS" starttime="20170809 17:38:14.750" endtime="20170809 17:38:14.751"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.753">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:14.753" endtime="20170809 17:38:14.754"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:14.754" endtime="20170809 17:38:14.755"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.755">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:14.755" endtime="20170809 17:38:14.755"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:14.756" endtime="20170809 17:38:14.756"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.952">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:14.757" endtime="20170809 17:38:14.952"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:14.952">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:14.952">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.756" endtime="20170809 17:38:14.952"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.953">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.953" endtime="20170809 17:38:14.953"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:14.954">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.953" endtime="20170809 17:38:14.954"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.752" endtime="20170809 17:38:14.954"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.752" endtime="20170809 17:38:14.954"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.751" endtime="20170809 17:38:14.954"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:14.955">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" starttime="20170809 17:38:14.954" endtime="20170809 17:38:14.955"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:14.955" endtime="20170809 17:38:14.955"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.218">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:15.219">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.956" endtime="20170809 17:38:15.219"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.219" endtime="20170809 17:38:15.219"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:15.220">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:15.220" endtime="20170809 17:38:15.220"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.220">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:14.751" endtime="20170809 17:38:15.220"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.221" endtime="20170809 17:38:15.221"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.221">${status} = True</msg>
<status status="PASS" starttime="20170809 17:38:15.220" endtime="20170809 17:38:15.221"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.221" endtime="20170809 17:38:15.222"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.223">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:15.223">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170809 17:38:15.223">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" starttime="20170809 17:38:15.222" endtime="20170809 17:38:15.223"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.224" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_inventory.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:15.224" endtime="20170809 17:38:15.224"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.223" endtime="20170809 17:38:15.225"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:14.750" endtime="20170809 17:38:15.225"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.225">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_led.txt</msg>
<status status="PASS" starttime="20170809 17:38:15.225" endtime="20170809 17:38:15.225"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.228">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:15.228" endtime="20170809 17:38:15.229"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.229">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:15.229" endtime="20170809 17:38:15.229"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.230">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:15.230" endtime="20170809 17:38:15.230"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:15.230" endtime="20170809 17:38:15.231"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.483">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:15.231" endtime="20170809 17:38:15.483"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.483">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:15.483">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.231" endtime="20170809 17:38:15.483"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.484">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.483" endtime="20170809 17:38:15.484"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.484" endtime="20170809 17:38:15.485"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.227" endtime="20170809 17:38:15.485"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.227" endtime="20170809 17:38:15.485"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.226" endtime="20170809 17:38:15.485"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.485">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" starttime="20170809 17:38:15.485" endtime="20170809 17:38:15.485"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.486" endtime="20170809 17:38:15.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.547">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:15.547">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.487" endtime="20170809 17:38:15.547"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.547" endtime="20170809 17:38:15.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:15.548">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:15.548" endtime="20170809 17:38:15.548"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.548">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.226" endtime="20170809 17:38:15.548"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.549">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170809 17:38:15.549">404 != 200</msg>
<status status="FAIL" starttime="20170809 17:38:15.549" endtime="20170809 17:38:15.549"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.550">${status} = False</msg>
<status status="PASS" starttime="20170809 17:38:15.548" endtime="20170809 17:38:15.550"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170809 17:38:15.550">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170809 17:38:15.550" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.550" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.225" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.565" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.564" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.564" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.563" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.563" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.534" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.531" endtime="20170809 17:38:15.551"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:13.531" endtime="20170809 17:38:15.551"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.553" endtime="20170809 17:38:15.553"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:15.553">${ret_values} = None</msg>
<status status="PASS" starttime="20170809 17:38:15.552" endtime="20170809 17:38:15.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.554" endtime="20170809 17:38:15.554"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.582">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:15.581" endtime="20170809 17:38:15.582"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:15.583" endtime="20170809 17:38:15.583"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.584">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:15.583" endtime="20170809 17:38:15.584"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.584">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:15.584" endtime="20170809 17:38:15.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.776">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:15.585" endtime="20170809 17:38:15.776"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.776">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:15.776">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.585" endtime="20170809 17:38:15.776"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.776">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.776" endtime="20170809 17:38:15.777"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.777" endtime="20170809 17:38:15.777"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.581" endtime="20170809 17:38:15.777"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.580" endtime="20170809 17:38:15.777"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.580" endtime="20170809 17:38:15.778"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.778">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" starttime="20170809 17:38:15.778" endtime="20170809 17:38:15.778"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.778" endtime="20170809 17:38:15.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.910">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:15.911">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.779" endtime="20170809 17:38:15.911"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.911" endtime="20170809 17:38:15.911"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:15.912">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:15.912" endtime="20170809 17:38:15.912"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.912">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.579" endtime="20170809 17:38:15.912"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.913" endtime="20170809 17:38:15.913"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:15.913">${status} = True</msg>
<status status="PASS" starttime="20170809 17:38:15.912" endtime="20170809 17:38:15.913"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.914" endtime="20170809 17:38:15.914"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.914">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775113466, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501775047487, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:15.914">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:38:15.915">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/3': {u'Message': u'xyz.openbmc_project.Common.Error.InternalFailure', u'AdditionalData': [], u'Timestamp': 1501775047487, u'Id': 3, u'Resolved': 0, u'as...</msg>
<status status="PASS" starttime="20170809 17:38:15.914" endtime="20170809 17:38:15.915"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.915">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" starttime="20170809 17:38:15.915" endtime="20170809 17:38:15.915"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.916">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_esel</msg>
<status status="PASS" starttime="20170809 17:38:15.916" endtime="20170809 17:38:15.916"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.917" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_esel"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_esel&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:15.916" endtime="20170809 17:38:15.917"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:15.917" endtime="20170809 17:38:15.918"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:15.921">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:15.921" endtime="20170809 17:38:15.922"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.922">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:15.922" endtime="20170809 17:38:15.922"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.923">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:15.923" endtime="20170809 17:38:15.923"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:15.924">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:15.923" endtime="20170809 17:38:15.924"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.115">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:15.924" endtime="20170809 17:38:16.115"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.115">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:16.115">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.924" endtime="20170809 17:38:16.115"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.116">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.115" endtime="20170809 17:38:16.116"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.116" endtime="20170809 17:38:16.116"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.921" endtime="20170809 17:38:16.117"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.920" endtime="20170809 17:38:16.117"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.919" endtime="20170809 17:38:16.117"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.117">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" starttime="20170809 17:38:16.117" endtime="20170809 17:38:16.117"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.118" endtime="20170809 17:38:16.118"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.199">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:16.199">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.118" endtime="20170809 17:38:16.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.199" endtime="20170809 17:38:16.200"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:16.200">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:16.200" endtime="20170809 17:38:16.200"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.201">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:15.919" endtime="20170809 17:38:16.201"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.201" endtime="20170809 17:38:16.201"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.202">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:16.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:38:16.202">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:38:16.202" endtime="20170809 17:38:16.202"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.202">${esel_data} = []</msg>
<status status="PASS" starttime="20170809 17:38:15.918" endtime="20170809 17:38:16.202"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.203">Length is 0</msg>
<msg level="INFO" timestamp="20170809 17:38:16.203">${length} = 0</msg>
<status status="PASS" starttime="20170809 17:38:16.203" endtime="20170809 17:38:16.203"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.203">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170809 17:38:16.203" endtime="20170809 17:38:16.204"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.917" endtime="20170809 17:38:16.204"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.204" endtime="20170809 17:38:16.205"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.208">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20170809 17:38:16.208" endtime="20170809 17:38:16.209"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" starttime="20170809 17:38:16.209" endtime="20170809 17:38:16.209"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.210">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" starttime="20170809 17:38:16.209" endtime="20170809 17:38:16.210"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" starttime="20170809 17:38:16.210" endtime="20170809 17:38:16.210"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.455">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" starttime="20170809 17:38:16.211" endtime="20170809 17:38:16.455"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.455">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:16.455">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.211" endtime="20170809 17:38:16.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.456">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.456" endtime="20170809 17:38:16.456"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.456" endtime="20170809 17:38:16.457"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.207" endtime="20170809 17:38:16.457"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.207" endtime="20170809 17:38:16.457"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.206" endtime="20170809 17:38:16.457"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.458">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" starttime="20170809 17:38:16.458" endtime="20170809 17:38:16.458"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.458" endtime="20170809 17:38:16.459"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20170809 17:38:16.540">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.459" endtime="20170809 17:38:16.540"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.540" endtime="20170809 17:38:16.541"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170809 17:38:16.541">Delete All Sessions</msg>
<status status="PASS" starttime="20170809 17:38:16.541" endtime="20170809 17:38:16.541"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.541">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.205" endtime="20170809 17:38:16.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20170809 17:38:16.542" endtime="20170809 17:38:16.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.543">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170809 17:38:16.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170809 17:38:16.543">${content} = {u'data': [], u'message': u'200 OK', u'status': u'ok'}</msg>
<status status="PASS" starttime="20170809 17:38:16.542" endtime="20170809 17:38:16.543"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.543">${esel_data} = []</msg>
<status status="PASS" starttime="20170809 17:38:16.205" endtime="20170809 17:38:16.543"></status>
</kw>
<kw library="BuiltIn" name="Get Length">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.544">Length is 0</msg>
<msg level="INFO" timestamp="20170809 17:38:16.544">${length} = 0</msg>
<status status="PASS" starttime="20170809 17:38:16.543" endtime="20170809 17:38:16.544"></status>
</kw>
<kw library="BuiltIn" name="Continue For Loop If">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.544">Continuing for loop from the next iteration.</msg>
<status status="PASS" starttime="20170809 17:38:16.544" endtime="20170809 17:38:16.545"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.204" endtime="20170809 17:38:16.545"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.917" endtime="20170809 17:38:16.545"></status>
</kw>
<kw library="OperatingSystem" name="Run">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.548">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:38:16.551">${out} = </msg>
<status status="PASS" starttime="20170809 17:38:16.545" endtime="20170809 17:38:16.551"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20170809 17:38:16.555">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" starttime="20170809 17:38:16.554" endtime="20170809 17:38:16.555"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.555">${status} = False</msg>
<status status="PASS" starttime="20170809 17:38:16.553" endtime="20170809 17:38:16.555"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.556">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170809 17:38:16.555" endtime="20170809 17:38:16.556"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.579" endtime="20170809 17:38:16.556"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.554" endtime="20170809 17:38:16.557"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.552" endtime="20170809 17:38:16.557"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:15.551" endtime="20170809 17:38:16.557"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.559" endtime="20170809 17:38:16.559"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.559">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:16.559">${ret_values} = None</msg>
<status status="PASS" starttime="20170809 17:38:16.558" endtime="20170809 17:38:16.559"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.560" endtime="20170809 17:38:16.560"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:16.589">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20170809 17:38:16.589" endtime="20170809 17:38:16.590"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.588" endtime="20170809 17:38:16.590"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.560" endtime="20170809 17:38:16.590"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.557" endtime="20170809 17:38:16.590"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.557" endtime="20170809 17:38:16.590"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.592" endtime="20170809 17:38:16.593"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:16.593">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:16.593">${ret_values} = None</msg>
<status status="PASS" starttime="20170809 17:38:16.592" endtime="20170809 17:38:16.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.593" endtime="20170809 17:38:16.594"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.650">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:16.651">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170809 17:38:16.747">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170809 17:38:16.759">${core_files} = /tmp/core_phosphor-fan-co.1579
/tmp/core_phosphor-fan-co.1583
/tmp/core_phosphor-fan-co.1586
/tmp/core_phosphor-fan-pr.1426
/tmp/core_phosphor-fan-pr.1490
/tmp/core_phosphor-fan-pr.1503
/tmp/core_phos...</msg>
<msg level="INFO" timestamp="20170809 17:38:16.759">${stderr} = </msg>
<msg level="INFO" timestamp="20170809 17:38:16.759">${rc} = 0</msg>
<status status="PASS" starttime="20170809 17:38:16.619" endtime="20170809 17:38:16.759"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:16.760">@{core_list} = [ /tmp/core_phosphor-fan-co.1579 | /tmp/core_phosphor-fan-co.1583 | /tmp/core_phosphor-fan-co.1586 | /tmp/core_phosphor-fan-pr.1426 | /tmp/core_phosphor-fan-pr.1490 | /tmp/core_phosphor-fan-pr.1503 | ...</msg>
<status status="PASS" starttime="20170809 17:38:16.759" endtime="20170809 17:38:16.760"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.770" endtime="20170809 17:38:16.777"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:16.778" endtime="20170809 17:38:17.489"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.778" endtime="20170809 17:38:17.489"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.777" endtime="20170809 17:38:17.489"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.769" endtime="20170809 17:38:17.489"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.760" endtime="20170809 17:38:17.489"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1579">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:17.490" endtime="20170809 17:38:17.812"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:17.846">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:17.846">Executing command 'rm /tmp/core_phosphor-fan-co.1579'.</msg>
<msg level="INFO" timestamp="20170809 17:38:17.913">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:17.812" endtime="20170809 17:38:17.925"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:17.490" endtime="20170809 17:38:17.925"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1583">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:17.926" endtime="20170809 17:38:18.184"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:18.217">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:18.218">Executing command 'rm /tmp/core_phosphor-fan-co.1583'.</msg>
<msg level="INFO" timestamp="20170809 17:38:18.289">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:18.184" endtime="20170809 17:38:18.302"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:17.926" endtime="20170809 17:38:18.302"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-co.1586">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:18.303" endtime="20170809 17:38:18.654"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:18.692">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:18.692">Executing command 'rm /tmp/core_phosphor-fan-co.1586'.</msg>
<msg level="INFO" timestamp="20170809 17:38:18.751">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:18.655" endtime="20170809 17:38:18.763"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:18.302" endtime="20170809 17:38:18.763"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-pr.1426">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:18.763" endtime="20170809 17:38:19.054"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:19.088">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:19.089">Executing command 'rm /tmp/core_phosphor-fan-pr.1426'.</msg>
<msg level="INFO" timestamp="20170809 17:38:19.204">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:19.055" endtime="20170809 17:38:19.216"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:18.763" endtime="20170809 17:38:19.216"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-pr.1490">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:19.216" endtime="20170809 17:38:19.576"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:19.612">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:19.613">Executing command 'rm /tmp/core_phosphor-fan-pr.1490'.</msg>
<msg level="INFO" timestamp="20170809 17:38:19.687">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:19.576" endtime="20170809 17:38:19.699"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:19.216" endtime="20170809 17:38:19.699"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-pr.1503">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:19.700" endtime="20170809 17:38:19.969"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:20.003">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:20.003">Executing command 'rm /tmp/core_phosphor-fan-pr.1503'.</msg>
<msg level="INFO" timestamp="20170809 17:38:20.107">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:19.969" endtime="20170809 17:38:20.119"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:19.700" endtime="20170809 17:38:20.119"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-pr.1519">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:20.119" endtime="20170809 17:38:20.417"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:20.451">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:20.452">Executing command 'rm /tmp/core_phosphor-fan-pr.1519'.</msg>
<msg level="INFO" timestamp="20170809 17:38:20.555">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:20.417" endtime="20170809 17:38:20.567"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.119" endtime="20170809 17:38:20.567"></status>
</kw>
<kw type="foritem" name="${index} = /tmp/core_phosphor-fan-pr.1522">
<kw library="scp" name="Get File">
<doc>Downloads a file from the remote machine to the local machine.</doc>
<arguments>
<arg>${index}</arg>
<arg>${LOG_PREFIX}${index.lstrip("/tmp/")}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:20.567" endtime="20170809 17:38:20.849"></status>
</kw>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>rm ${index}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:20.889">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:20.890">Executing command 'rm /tmp/core_phosphor-fan-pr.1522'.</msg>
<msg level="INFO" timestamp="20170809 17:38:20.948">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:20.849" endtime="20170809 17:38:20.960"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.567" endtime="20170809 17:38:20.960"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:17.489" endtime="20170809 17:38:20.960"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.619" endtime="20170809 17:38:20.961"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.594" endtime="20170809 17:38:20.961"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.590" endtime="20170809 17:38:20.961"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:16.590" endtime="20170809 17:38:20.961"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:20.962" endtime="20170809 17:38:20.963"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:20.963">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:20.963">${ret_values} = None</msg>
<status status="PASS" starttime="20170809 17:38:20.962" endtime="20170809 17:38:20.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:20.963" endtime="20170809 17:38:20.964"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:20.989">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" starttime="20170809 17:38:20.989" endtime="20170809 17:38:20.989"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:20.991">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_proc_fd_active_list', 'ls -Al /p...</msg>
<status status="PASS" starttime="20170809 17:38:20.991" endtime="20170809 17:38:20.991"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:20.993">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_journalctl.txt</msg>
<status status="PASS" starttime="20170809 17:38:20.992" endtime="20170809 17:38:20.993"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:20.994" endtime="20170809 17:38:20.995"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:20.996">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:20.995" endtime="20170809 17:38:20.996"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:21.069">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:21.070">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170809 17:38:22.514">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:21.027" endtime="20170809 17:38:22.516"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:22.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:22.520">${ret_values} = (u'-- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:30 UTC. --\nAug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 03 15:42:59 witherspoon kernel: Linu...</msg>
<status status="PASS" starttime="20170809 17:38:20.996" endtime="20170809 17:38:22.520"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.521">${stdout} = -- Logs begin at Thu 2017-08-03 15:42:59 UTC, end at Thu 2017-08-03 15:59:30 UTC. --
Aug 03 15:42:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 03 15:42:59 witherspoon kernel: Linux ver...</msg>
<status status="PASS" starttime="20170809 17:38:22.520" endtime="20170809 17:38:22.521"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.522">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:22.522" endtime="20170809 17:38:22.522"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:22.530" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_journalctl.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:22.529" endtime="20170809 17:38:22.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.528" endtime="20170809 17:38:22.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.523" endtime="20170809 17:38:22.530"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.993" endtime="20170809 17:38:22.531"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.991" endtime="20170809 17:38:22.531"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.531">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_procinfo.txt</msg>
<status status="PASS" starttime="20170809 17:38:22.531" endtime="20170809 17:38:22.531"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:22.532" endtime="20170809 17:38:22.533"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.533">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:22.533" endtime="20170809 17:38:22.533"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:22.601">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:22.601">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170809 17:38:22.759">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:22.564" endtime="20170809 17:38:22.759"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:22.759">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:22.759">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" starttime="20170809 17:38:22.534" endtime="20170809 17:38:22.759"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.760">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" starttime="20170809 17:38:22.760" endtime="20170809 17:38:22.760"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.761">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:22.760" endtime="20170809 17:38:22.761"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:22.767" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_procinfo.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:22.767" endtime="20170809 17:38:22.768"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.766" endtime="20170809 17:38:22.768"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.761" endtime="20170809 17:38:22.768"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.532" endtime="20170809 17:38:22.768"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.531" endtime="20170809 17:38:22.768"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.769">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_meminfo.txt</msg>
<status status="PASS" starttime="20170809 17:38:22.768" endtime="20170809 17:38:22.769"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:22.770" endtime="20170809 17:38:22.770"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.771">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:22.770" endtime="20170809 17:38:22.771"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:22.837">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:22.838">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170809 17:38:22.907">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:22.801" endtime="20170809 17:38:22.907"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:22.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:22.907">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          273176 kB\nMemAvailable:     321676 kB\nBuffers:           11684 kB\nCached:            53692 kB\nSwapCached:            0 kB\nActive:           10003...</msg>
<status status="PASS" starttime="20170809 17:38:22.771" endtime="20170809 17:38:22.907"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.908">${stdout} = MemTotal:         432260 kB
MemFree:          273176 kB
MemAvailable:     321676 kB
Buffers:           11684 kB
Cached:            53692 kB
SwapCached:            0 kB
Active:           100036 kB
Inac...</msg>
<status status="PASS" starttime="20170809 17:38:22.908" endtime="20170809 17:38:22.908"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.909">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:22.908" endtime="20170809 17:38:22.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:22.915" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_meminfo.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:22.915" endtime="20170809 17:38:22.915"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.914" endtime="20170809 17:38:22.915"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.909" endtime="20170809 17:38:22.916"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.769" endtime="20170809 17:38:22.916"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.768" endtime="20170809 17:38:22.916"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.916">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_proc_list.txt</msg>
<status status="PASS" starttime="20170809 17:38:22.916" endtime="20170809 17:38:22.917"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:22.917" endtime="20170809 17:38:22.918"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:22.919">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:22.918" endtime="20170809 17:38:22.919"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:22.992">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:22.992">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170809 17:38:23.317">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:22.955" endtime="20170809 17:38:23.317"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:23.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:23.318">${ret_values} = (u'Mem: 159116K used, 273144K free, 14564K shrd, 11684K buff, 53696K cached\nCPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 0.53 0.50 0.56 1/154 1631\n  PID  PPID ...</msg>
<status status="PASS" starttime="20170809 17:38:22.919" endtime="20170809 17:38:23.318"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:23.318">${stdout} = Mem: 159116K used, 273144K free, 14564K shrd, 11684K buff, 53696K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.53 0.50 0.56 1/154 1631
  PID  PPID USER  ...</msg>
<status status="PASS" starttime="20170809 17:38:23.318" endtime="20170809 17:38:23.318"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:23.319">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:23.319" endtime="20170809 17:38:23.319"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:23.327" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_proc_list.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:23.326" endtime="20170809 17:38:23.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:23.325" endtime="20170809 17:38:23.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:23.319" endtime="20170809 17:38:23.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.917" endtime="20170809 17:38:23.327"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:22.916" endtime="20170809 17:38:23.327"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:23.328">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" starttime="20170809 17:38:23.327" endtime="20170809 17:38:23.328"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:23.329" endtime="20170809 17:38:23.329"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:23.330">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:23.329" endtime="20170809 17:38:23.330"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:23.398">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:23.399">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20170809 17:38:24.060">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:23.361" endtime="20170809 17:38:24.060"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.060">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:24.061">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" starttime="20170809 17:38:23.330" endtime="20170809 17:38:24.061"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.062">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  3 15:59 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  3 15:59 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" starttime="20170809 17:38:24.061" endtime="20170809 17:38:24.062"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.063">${stderr} = ls: /proc/1632/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" starttime="20170809 17:38:24.062" endtime="20170809 17:38:24.063"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.070" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:24.069" endtime="20170809 17:38:24.070"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.068" endtime="20170809 17:38:24.070"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.063" endtime="20170809 17:38:24.070"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:23.328" endtime="20170809 17:38:24.070"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:23.327" endtime="20170809 17:38:24.070"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.071">${logpath} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_dmesg.txt</msg>
<status status="PASS" starttime="20170809 17:38:24.071" endtime="20170809 17:38:24.071"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.072" endtime="20170809 17:38:24.072"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.073">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" starttime="20170809 17:38:24.073" endtime="20170809 17:38:24.073"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="bmc_ssh_utils" name="Bmc Execute Command">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.140">host=9.41.166.169
width=80
index=1
term_type=vt100
prompt=# 
newline=

path_separator=/
encoding=UTF-8
height=24
alias=bmc_connection
timeout=25 seconds
port=22</msg>
<msg level="INFO" timestamp="20170809 17:38:24.141">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170809 17:38:24.197">Command exited with return code 0.</msg>
<status status="PASS" starttime="20170809 17:38:24.104" endtime="20170809 17:38:24.198"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20170809 17:38:24.198">${ret_values} = (u'[    0.000000] NR_IRQS:16 nr_irqs:16 16\n[    0.000000] i2c controller registered, irq 16\n[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7722264433...</msg>
<status status="PASS" starttime="20170809 17:38:24.073" endtime="20170809 17:38:24.198"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.199">${stdout} = [    0.000000] NR_IRQS:16 nr_irqs:16 16
[    0.000000] i2c controller registered, irq 16
[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 77222644334 ns
...</msg>
<status status="PASS" starttime="20170809 17:38:24.198" endtime="20170809 17:38:24.199"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.199">${stderr} = </msg>
<status status="PASS" starttime="20170809 17:38:24.199" endtime="20170809 17:38:24.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.206" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_dmesg.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/20170809173811190153_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:24.206" endtime="20170809 17:38:24.206"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.205" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.200" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.071" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.070" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.991" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.990" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.990" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.989" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.988" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.964" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.961" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:20.961" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.408" endtime="20170809 17:38:24.207"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.406" endtime="20170809 17:38:24.208"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.406" endtime="20170809 17:38:24.208"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.406" endtime="20170809 17:38:24.208"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key U">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status status="PASS" starttime="20170809 17:38:24.215" endtime="20170809 17:38:24.215"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.208" endtime="20170809 17:38:24.215"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:11.405" endtime="20170809 17:38:24.215"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.119" endtime="20170809 17:38:24.215"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:08.118" endtime="20170809 17:38:24.215"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.216" endtime="20170809 17:38:24.216"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.226">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" starttime="20170809 17:38:24.217" endtime="20170809 17:38:24.226"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.226">${FFDC_DIR_PATH} = /tmp/fspcibld/11132/obmc-robot/logs/20170809173811190153_TestsTestBasicPoweron/20170809173811190153_PowerOnTest/</msg>
<status status="PASS" starttime="20170809 17:38:24.226" endtime="20170809 17:38:24.226"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.227" endtime="20170809 17:38:24.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.227" endtime="20170809 17:38:24.228"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.229" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs"&gt;/tmp/fspcibld/11132/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" starttime="20170809 17:38:24.228" endtime="20170809 17:38:24.229"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.230" html="yes">File '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" starttime="20170809 17:38:24.230" endtime="20170809 17:38:24.230"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.230">${exist} = True</msg>
<status status="PASS" starttime="20170809 17:38:24.229" endtime="20170809 17:38:24.230"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.230" endtime="20170809 17:38:24.231"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.231" endtime="20170809 17:38:24.231"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.232">${cur_time} = 2017-08-09 17:38:24:231951</msg>
<status status="PASS" starttime="20170809 17:38:24.232" endtime="20170809 17:38:24.232"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.233">${cur_time} = 20170809173824231951</msg>
<status status="PASS" starttime="20170809 17:38:24.232" endtime="20170809 17:38:24.233"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.233">${cur_time} = 20170809173824231951</msg>
<status status="PASS" starttime="20170809 17:38:24.231" endtime="20170809 17:38:24.233"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.234" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/11132/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:24.233" endtime="20170809 17:38:24.234"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.216" endtime="20170809 17:38:24.234"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.781" endtime="20170809 17:38:24.234"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.236">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:38:24.236" endtime="20170809 17:38:24.236"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.237">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:38:24.236" endtime="20170809 17:38:24.237"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.237">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status status="PASS" starttime="20170809 17:38:24.235" endtime="20170809 17:38:24.237"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.238">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status status="PASS" starttime="20170809 17:38:24.238" endtime="20170809 17:38:24.238"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.238" endtime="20170809 17:38:24.239"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.243">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:38:24.247">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:38:24.247">${output} = /tmp/fspcibld/11132/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" starttime="20170809 17:38:24.239" endtime="20170809 17:38:24.248"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.250" endtime="20170809 17:38:24.250"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.251" endtime="20170809 17:38:24.251"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.252">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170809 17:38:24.252" endtime="20170809 17:38:24.252"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.253">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169</msg>
<status status="PASS" starttime="20170809 17:38:24.237" endtime="20170809 17:38:24.253"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.254">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" starttime="20170809 17:38:24.253" endtime="20170809 17:38:24.254"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.254" endtime="20170809 17:38:24.254"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.260">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170809 17:38:24.275">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:38:24.276">${os_con_pid} = </msg>
<status status="PASS" starttime="20170809 17:38:24.255" endtime="20170809 17:38:24.276"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.279" endtime="20170809 17:38:24.282"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.282">${cmd_buf} = kill -9 </msg>
<status status="PASS" starttime="20170809 17:38:24.282" endtime="20170809 17:38:24.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.283" endtime="20170809 17:38:24.286"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.287">${rc} = None</msg>
<msg level="INFO" timestamp="20170809 17:38:24.287">${output} = None</msg>
<status status="PASS" starttime="20170809 17:38:24.286" endtime="20170809 17:38:24.287"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.287" endtime="20170809 17:38:24.288"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.291" html="yes">Copied file from '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/11132/obmc-robot/logs/9.41.166.169_os_console"&gt;/tmp/fspcibld/11132/obmc-robot/logs/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20170809 17:38:24.289" endtime="20170809 17:38:24.291"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.289" endtime="20170809 17:38:24.291"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:24.288" endtime="20170809 17:38:24.291"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.292">${output} = </msg>
<status status="PASS" starttime="20170809 17:38:24.292" endtime="20170809 17:38:24.292"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170809 17:38:24.293">${loc_quiet} = 1</msg>
<status status="PASS" starttime="20170809 17:38:24.292" endtime="20170809 17:38:24.293"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status status="PASS" starttime="20170809 17:38:24.294" endtime="20170809 17:38:24.348"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.354">${rc} = 0</msg>
<msg level="INFO" timestamp="20170809 17:38:24.354">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status status="PASS" starttime="20170809 17:38:24.293" endtime="20170809 17:38:24.354"></status>
</kw>
<msg level="INFO" timestamp="20170809 17:38:24.357">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status status="PASS" starttime="20170809 17:38:24.234" endtime="20170809 17:38:24.357"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170809 17:38:24.365">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.41.166.169
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: 
</msg>
<status status="PASS" starttime="20170809 17:38:24.365" endtime="20170809 17:38:24.365"></status>
</kw>
<status status="PASS" starttime="20170809 17:38:07.781" endtime="20170809 17:38:24.366"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" starttime="20170809 17:27:53.706" critical="yes" endtime="20170809 17:38:24.367">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: On != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" starttime="20170809 17:27:53.672" endtime="20170809 17:38:24.371"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" starttime="20170809 17:27:47.626" endtime="20170809 17:38:24.379"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Tests" pass="1">Tests</stat>
<stat fail="0" id="s1-s1" name="Security" pass="1">Tests.Security</stat>
<stat fail="0" id="s1-s1-s1" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat fail="1" id="s1-s2" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
