<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170810 01:51:58.928" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170810 01:51:59.871" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170810 01:51:59.871" starttime="20170810 01:51:59.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170810 01:51:59.872" starttime="20170810 01:51:59.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 01:51:59.875" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 01:51:59.876" starttime="20170810 01:51:59.875"></status>
</kw>
<msg timestamp="20170810 01:51:59.876" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 01:51:59.876" starttime="20170810 01:51:59.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:51:59.877" starttime="20170810 01:51:59.877"></status>
</kw>
<status status="PASS" endtime="20170810 01:51:59.877" starttime="20170810 01:51:59.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 01:51:59.878" starttime="20170810 01:51:59.877"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 01:51:59.879" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 01:51:59.879" starttime="20170810 01:51:59.878"></status>
</kw>
<msg timestamp="20170810 01:51:59.879" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 01:51:59.879" starttime="20170810 01:51:59.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:51:59.881" starttime="20170810 01:51:59.880"></status>
</kw>
<status status="PASS" endtime="20170810 01:51:59.881" starttime="20170810 01:51:59.880"></status>
</kw>
<status status="PASS" endtime="20170810 01:51:59.881" starttime="20170810 01:51:59.879"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 01:51:59.882" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 01:52:01.628" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 01:52:01.628" starttime="20170810 01:51:59.881"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.628" starttime="20170810 01:51:59.874"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:52:01.629" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170810 01:52:01.706" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:52:01.706" level="INFO">${output} = 1502329075</msg>
<msg timestamp="20170810 01:52:01.706" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:52:01.706" starttime="20170810 01:52:01.629"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:52:01.706" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:52:01.706" starttime="20170810 01:52:01.706"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170810 01:52:01.707" level="INFO">${btime} = 1502329075</msg>
<status status="PASS" endtime="20170810 01:52:01.707" starttime="20170810 01:52:01.707"></status>
</kw>
<msg timestamp="20170810 01:52:01.707" level="INFO">${cur_btime} = 1502329075</msg>
<status status="PASS" endtime="20170810 01:52:01.708" starttime="20170810 01:51:59.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170810 01:52:01.710" level="INFO">${BOOT_TIME} = 1502329075</msg>
<status status="PASS" endtime="20170810 01:52:01.710" starttime="20170810 01:52:01.709"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.710" starttime="20170810 01:52:01.708"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.710" starttime="20170810 01:51:59.873"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:01.710" starttime="20170810 01:52:01.710"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:01.711" starttime="20170810 01:52:01.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:01.712" starttime="20170810 01:52:01.711"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.712" starttime="20170810 01:51:59.873"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 01:52:01.715" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 01:52:01.715" starttime="20170810 01:52:01.714"></status>
</kw>
<msg timestamp="20170810 01:52:01.715" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 01:52:01.715" starttime="20170810 01:52:01.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:01.716" starttime="20170810 01:52:01.716"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.716" starttime="20170810 01:52:01.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:01.717" starttime="20170810 01:52:01.717"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 01:52:01.718" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 01:52:01.718" starttime="20170810 01:52:01.718"></status>
</kw>
<msg timestamp="20170810 01:52:01.718" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 01:52:01.718" starttime="20170810 01:52:01.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:01.720" starttime="20170810 01:52:01.720"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.720" starttime="20170810 01:52:01.719"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:01.720" starttime="20170810 01:52:01.719"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 01:52:01.721" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 01:52:03.368" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 01:52:03.368" starttime="20170810 01:52:01.720"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.368" starttime="20170810 01:52:01.712"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 01:52:03.369" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170810 01:52:03.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:52:03.446" level="INFO">${output} = </msg>
<msg timestamp="20170810 01:52:03.446" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170810 01:52:03.446" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170810 01:52:03.446" starttime="20170810 01:52:03.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:03.447" starttime="20170810 01:52:03.447"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.448" starttime="20170810 01:52:01.712"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170810 01:52:03.450" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170810 01:52:03.450" starttime="20170810 01:52:03.449"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:03.451" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170810 01:52:03.451" starttime="20170810 01:52:03.451"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:03.454" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:03.454" starttime="20170810 01:52:03.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:03.455" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:03.455" starttime="20170810 01:52:03.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:03.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:03.456" starttime="20170810 01:52:03.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:03.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:03.457" starttime="20170810 01:52:03.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:03.654" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:52:03.654" starttime="20170810 01:52:03.459"></status>
</kw>
<msg timestamp="20170810 01:52:03.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:52:03.654" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:03.654" starttime="20170810 01:52:03.458"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:03.655" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:03.655" starttime="20170810 01:52:03.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:03.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:03.655" starttime="20170810 01:52:03.655"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.656" starttime="20170810 01:52:03.453"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.656" starttime="20170810 01:52:03.453"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.656" starttime="20170810 01:52:03.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:03.656" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170810 01:52:03.656" starttime="20170810 01:52:03.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:03.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:03.657" starttime="20170810 01:52:03.657"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:03.658" starttime="20170810 01:52:03.657"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 01:52:03.659" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170810 01:52:03.659" starttime="20170810 01:52:03.659"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 01:52:03.660" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 01:52:03.660" starttime="20170810 01:52:03.660"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.661" starttime="20170810 01:52:03.659"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.661" starttime="20170810 01:52:03.658"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:52:03.967" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 01:52:03.968" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:03.968" starttime="20170810 01:52:03.661"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 01:52:03.969" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 01:52:03.969" starttime="20170810 01:52:03.969"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 01:52:03.970" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 01:52:03.970" starttime="20170810 01:52:03.970"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.971" starttime="20170810 01:52:03.970"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.971" starttime="20170810 01:52:03.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:52:03.971" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:52:03.972" starttime="20170810 01:52:03.971"></status>
</kw>
<msg timestamp="20170810 01:52:03.972" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:03.972" starttime="20170810 01:52:03.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:03.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:03.973" starttime="20170810 01:52:03.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 01:52:03.974" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:52:03.974" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:52:03.974" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170810 01:52:03.974" starttime="20170810 01:52:03.973"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:03.974" starttime="20170810 01:52:03.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:03.974" starttime="20170810 01:52:03.974"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:03.980" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:03.980" starttime="20170810 01:52:03.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:03.981" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:03.981" starttime="20170810 01:52:03.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:03.981" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:03.981" starttime="20170810 01:52:03.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:03.982" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:03.982" starttime="20170810 01:52:03.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:05.360" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:52:05.360" starttime="20170810 01:52:03.983"></status>
</kw>
<msg timestamp="20170810 01:52:05.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:52:05.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:05.360" starttime="20170810 01:52:03.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:05.361" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:05.361" starttime="20170810 01:52:05.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:05.362" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:05.362" starttime="20170810 01:52:05.361"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:05.362" starttime="20170810 01:52:03.979"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:05.362" starttime="20170810 01:52:03.978"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:05.362" starttime="20170810 01:52:03.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:05.362" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170810 01:52:05.363" starttime="20170810 01:52:05.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:05.363" starttime="20170810 01:52:05.363"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:52:09.355" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170810 01:52:09.355" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.355" starttime="20170810 01:52:05.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:09.356" starttime="20170810 01:52:09.356"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:52:09.356" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:52:09.357" starttime="20170810 01:52:09.356"></status>
</kw>
<msg timestamp="20170810 01:52:09.357" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.357" starttime="20170810 01:52:03.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:09.357" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.358" starttime="20170810 01:52:09.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:52:09.358" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:52:09.358" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:52:09.358" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170810 01:52:09.358" starttime="20170810 01:52:09.358"></status>
</kw>
<msg timestamp="20170810 01:52:09.359" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170810 01:52:09.359" starttime="20170810 01:52:03.976"></status>
</kw>
<msg timestamp="20170810 01:52:09.359" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170810 01:52:09.359" starttime="20170810 01:52:03.976"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:09.360" starttime="20170810 01:52:09.359"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.360" starttime="20170810 01:52:03.976"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:09.364" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:09.364" starttime="20170810 01:52:09.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:09.365" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:09.365" starttime="20170810 01:52:09.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:09.366" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:09.366" starttime="20170810 01:52:09.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:09.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:09.366" starttime="20170810 01:52:09.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:09.745" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:52:09.745" starttime="20170810 01:52:09.367"></status>
</kw>
<msg timestamp="20170810 01:52:09.745" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:52:09.745" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.745" starttime="20170810 01:52:09.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:09.746" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.746" starttime="20170810 01:52:09.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:09.746" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.747" starttime="20170810 01:52:09.746"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.747" starttime="20170810 01:52:09.363"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.747" starttime="20170810 01:52:09.362"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.747" starttime="20170810 01:52:09.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:09.747" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170810 01:52:09.747" starttime="20170810 01:52:09.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:09.748" starttime="20170810 01:52:09.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:52:09.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 01:52:09.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.977" starttime="20170810 01:52:09.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:09.977" starttime="20170810 01:52:09.977"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:52:09.978" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:52:09.978" starttime="20170810 01:52:09.978"></status>
</kw>
<msg timestamp="20170810 01:52:09.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.978" starttime="20170810 01:52:09.361"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:09.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:09.979" starttime="20170810 01:52:09.979"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:52:09.979" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:52:09.980" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:52:09.980" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170810 01:52:09.980" starttime="20170810 01:52:09.979"></status>
</kw>
<msg timestamp="20170810 01:52:09.980" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170810 01:52:09.980" starttime="20170810 01:52:09.360"></status>
</kw>
<msg timestamp="20170810 01:52:09.980" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170810 01:52:09.980" starttime="20170810 01:52:09.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:09.981" starttime="20170810 01:52:09.981"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.981" starttime="20170810 01:52:03.975"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.981" starttime="20170810 01:52:03.975"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.981" starttime="20170810 01:52:03.449"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.981" starttime="20170810 01:52:03.448"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:09.981" starttime="20170810 01:52:03.448"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170810 01:52:09.982" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170810 01:52:09.982" starttime="20170810 01:52:09.982"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:09.984" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170810 01:52:09.984" starttime="20170810 01:52:09.983"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:09.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:09.987" starttime="20170810 01:52:09.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:09.988" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:09.988" starttime="20170810 01:52:09.987"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:09.988" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:09.988" starttime="20170810 01:52:09.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:09.989" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:09.989" starttime="20170810 01:52:09.989"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:10.616" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:52:10.616" starttime="20170810 01:52:09.990"></status>
</kw>
<msg timestamp="20170810 01:52:10.616" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:52:10.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:10.616" starttime="20170810 01:52:09.989"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:10.617" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:10.617" starttime="20170810 01:52:10.617"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:10.618" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:10.618" starttime="20170810 01:52:10.617"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.618" starttime="20170810 01:52:09.986"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.618" starttime="20170810 01:52:09.985"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.618" starttime="20170810 01:52:09.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:10.619" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170810 01:52:10.619" starttime="20170810 01:52:10.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:10.619" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:10.620" starttime="20170810 01:52:10.619"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:10.620" starttime="20170810 01:52:10.620"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 01:52:10.622" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 01:52:10.622" starttime="20170810 01:52:10.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 01:52:10.623" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 01:52:10.623" starttime="20170810 01:52:10.622"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.623" starttime="20170810 01:52:10.622"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.623" starttime="20170810 01:52:10.620"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:52:10.877" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 01:52:10.877" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:10.877" starttime="20170810 01:52:10.623"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 01:52:10.879" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 01:52:10.879" starttime="20170810 01:52:10.878"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 01:52:10.880" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 01:52:10.880" starttime="20170810 01:52:10.880"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.880" starttime="20170810 01:52:10.879"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.880" starttime="20170810 01:52:10.878"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:52:10.881" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:52:10.881" starttime="20170810 01:52:10.881"></status>
</kw>
<msg timestamp="20170810 01:52:10.881" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:10.881" starttime="20170810 01:52:09.984"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:10.882" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:10.882" starttime="20170810 01:52:10.881"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 01:52:10.883" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:52:10.883" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:52:10.883" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170810 01:52:10.883" starttime="20170810 01:52:10.882"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:10.883" starttime="20170810 01:52:09.983"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:10.889" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:10.889" starttime="20170810 01:52:10.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:10.890" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:10.890" starttime="20170810 01:52:10.890"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:10.891" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:10.891" starttime="20170810 01:52:10.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:10.891" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:10.891" starttime="20170810 01:52:10.891"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.086" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:52:11.086" starttime="20170810 01:52:10.892"></status>
</kw>
<msg timestamp="20170810 01:52:11.086" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:52:11.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.086" starttime="20170810 01:52:10.892"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.087" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.087" starttime="20170810 01:52:11.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.087" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.088" starttime="20170810 01:52:11.087"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.088" starttime="20170810 01:52:10.888"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.088" starttime="20170810 01:52:10.887"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.088" starttime="20170810 01:52:10.884"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:11.089" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170810 01:52:11.089" starttime="20170810 01:52:11.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:11.089" starttime="20170810 01:52:11.089"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:52:11.173" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170810 01:52:11.173" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.173" starttime="20170810 01:52:11.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:11.174" starttime="20170810 01:52:11.174"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:52:11.174" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:52:11.175" starttime="20170810 01:52:11.174"></status>
</kw>
<msg timestamp="20170810 01:52:11.175" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.175" starttime="20170810 01:52:10.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.175" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.175" starttime="20170810 01:52:11.175"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:52:11.176" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:52:11.176" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:52:11.176" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170810 01:52:11.176" starttime="20170810 01:52:11.176"></status>
</kw>
<msg timestamp="20170810 01:52:11.176" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170810 01:52:11.177" starttime="20170810 01:52:10.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:11.177" starttime="20170810 01:52:11.177"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.177" starttime="20170810 01:52:09.982"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:11.178" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170810 01:52:11.178" starttime="20170810 01:52:11.178"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:11.181" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:11.182" starttime="20170810 01:52:11.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:11.182" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:11.182" starttime="20170810 01:52:11.182"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:11.183" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:11.183" starttime="20170810 01:52:11.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:11.184" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:11.184" starttime="20170810 01:52:11.183"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.403" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:52:11.403" starttime="20170810 01:52:11.184"></status>
</kw>
<msg timestamp="20170810 01:52:11.403" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:52:11.403" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.403" starttime="20170810 01:52:11.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.404" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.404" starttime="20170810 01:52:11.404"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.405" starttime="20170810 01:52:11.405"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.405" starttime="20170810 01:52:11.180"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.405" starttime="20170810 01:52:11.180"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:11.405" starttime="20170810 01:52:11.179"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:52:11.406" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170810 01:52:11.406" starttime="20170810 01:52:11.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:11.407" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:11.407" starttime="20170810 01:52:11.406"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:11.407" starttime="20170810 01:52:11.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:11.408" starttime="20170810 01:52:11.407"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:52:11.774" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170810 01:52:11.774" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.774" starttime="20170810 01:52:11.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:11.775" starttime="20170810 01:52:11.775"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:52:11.776" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:52:11.776" starttime="20170810 01:52:11.775"></status>
</kw>
<msg timestamp="20170810 01:52:11.776" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.776" starttime="20170810 01:52:11.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:52:11.776" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:52:11.777" starttime="20170810 01:52:11.776"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170810 01:52:21.777" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170810 01:52:21.777" starttime="20170810 01:52:11.777"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:21.778" starttime="20170810 01:52:11.177"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 01:52:21.781" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170810 01:52:21.781" starttime="20170810 01:52:21.780"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 01:52:21.788" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 01:52:24.799" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 01:52:24.799" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.588 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170810 01:52:24.799" starttime="20170810 01:52:21.781"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 01:52:24.802" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.41 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.588 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.43 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.584 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.584/1.006/1.437/0.422 ms</msg>
<status status="PASS" endtime="20170810 01:52:24.802" starttime="20170810 01:52:24.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:24.802" starttime="20170810 01:52:24.802"></status>
</kw>
<status status="PASS" endtime="20170810 01:52:24.803" starttime="20170810 01:52:21.780"></status>
</kw>
<msg timestamp="20170810 01:52:24.803" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170810 01:52:24.803" starttime="20170810 01:52:21.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170810 01:52:24.804" starttime="20170810 01:52:24.803"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:24.806" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:24.807" starttime="20170810 01:52:24.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:24.808" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:24.808" starttime="20170810 01:52:24.808"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:24.809" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:24.809" starttime="20170810 01:52:24.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:24.809" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:24.809" starttime="20170810 01:52:24.809"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:52:24.899" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170810 01:52:24.900" starttime="20170810 01:52:24.810"></status>
</kw>
<msg timestamp="20170810 01:52:24.900" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170810 01:52:24.900" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170810 01:52:24.900" starttime="20170810 01:52:24.810"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:52:24.900" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 01:52:24.901" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 01:52:24.901" starttime="20170810 01:52:24.900"></status>
</kw>
<status status="FAIL" endtime="20170810 01:52:24.901" starttime="20170810 01:52:24.806"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:52:44.903" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:52:44.904" starttime="20170810 01:52:44.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:52:44.904" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:52:44.904" starttime="20170810 01:52:44.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:52:44.905" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:52:44.905" starttime="20170810 01:52:44.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:52:44.906" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:52:44.906" starttime="20170810 01:52:44.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:53:04.929" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffb42eb290&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170810 01:53:25.151" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffb42eb210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170810 01:53:52.182" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170810 01:53:52.182" starttime="20170810 01:52:44.906"></status>
</kw>
<msg timestamp="20170810 01:53:52.182" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170810 01:53:52.182" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170810 01:53:52.182" starttime="20170810 01:52:44.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:53:52.183" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 01:53:52.183" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 01:53:52.183" starttime="20170810 01:53:52.183"></status>
</kw>
<status status="FAIL" endtime="20170810 01:53:52.183" starttime="20170810 01:52:44.902"></status>
</kw>
<msg timestamp="20170810 01:53:52.184" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 01:53:52.184" starttime="20170810 01:52:24.805"></status>
</kw>
<status status="FAIL" endtime="20170810 01:53:52.184" starttime="20170810 01:52:24.804"></status>
</kw>
<msg timestamp="20170810 01:53:52.184" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170810 01:53:52.184" starttime="20170810 01:52:24.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170810 01:53:52.185" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170810 01:53:52.185" starttime="20170810 01:53:52.185"></status>
</kw>
<status status="FAIL" endtime="20170810 01:53:52.185" starttime="20170810 01:53:52.184"></status>
</kw>
<status status="FAIL" endtime="20170810 01:53:52.185" starttime="20170810 01:52:21.779"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 01:54:02.188" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170810 01:54:02.188" starttime="20170810 01:54:02.188"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 01:54:02.194" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 01:54:05.203" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 01:54:05.203" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.77 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.772 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170810 01:54:05.203" starttime="20170810 01:54:02.189"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 01:54:05.207" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.77 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.772 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.30 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.681 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.681/1.132/1.773/0.439 ms</msg>
<status status="PASS" endtime="20170810 01:54:05.207" starttime="20170810 01:54:05.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:05.208" starttime="20170810 01:54:05.207"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:05.208" starttime="20170810 01:54:02.187"></status>
</kw>
<msg timestamp="20170810 01:54:05.208" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170810 01:54:05.208" starttime="20170810 01:54:02.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:05.209" starttime="20170810 01:54:05.209"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:54:05.212" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:54:05.213" starttime="20170810 01:54:05.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:05.214" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:05.214" starttime="20170810 01:54:05.213"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:54:05.214" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:54:05.214" starttime="20170810 01:54:05.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:54:05.215" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:54:05.215" starttime="20170810 01:54:05.215"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:54:25.242" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170810 01:54:25.242" starttime="20170810 01:54:05.216"></status>
</kw>
<msg timestamp="20170810 01:54:25.243" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170810 01:54:25.243" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170810 01:54:25.243" starttime="20170810 01:54:05.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:54:25.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 01:54:25.244" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170810 01:54:25.244" starttime="20170810 01:54:25.243"></status>
</kw>
<status status="FAIL" endtime="20170810 01:54:25.244" starttime="20170810 01:54:05.211"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:54:45.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:54:45.247" starttime="20170810 01:54:45.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:45.247" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:45.247" starttime="20170810 01:54:45.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:54:45.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:54:45.248" starttime="20170810 01:54:45.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:54:45.249" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:54:45.249" starttime="20170810 01:54:45.248"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:54:45.465" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:54:45.465" starttime="20170810 01:54:45.249"></status>
</kw>
<msg timestamp="20170810 01:54:45.465" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:54:45.465" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:45.465" starttime="20170810 01:54:45.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:54:45.466" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:45.466" starttime="20170810 01:54:45.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:45.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:45.467" starttime="20170810 01:54:45.466"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:45.467" starttime="20170810 01:54:45.244"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:45.467" starttime="20170810 01:54:05.210"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:45.467" starttime="20170810 01:54:05.210"></status>
</kw>
<msg timestamp="20170810 01:54:45.467" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170810 01:54:45.467" starttime="20170810 01:54:05.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:45.468" starttime="20170810 01:54:45.468"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 01:54:45.470" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 01:54:45.470" starttime="20170810 01:54:45.469"></status>
</kw>
<msg timestamp="20170810 01:54:45.470" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 01:54:45.470" starttime="20170810 01:54:45.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:45.471" starttime="20170810 01:54:45.471"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:45.471" starttime="20170810 01:54:45.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:45.472" starttime="20170810 01:54:45.471"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 01:54:45.473" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 01:54:45.473" starttime="20170810 01:54:45.473"></status>
</kw>
<msg timestamp="20170810 01:54:45.473" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 01:54:45.473" starttime="20170810 01:54:45.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:45.475" starttime="20170810 01:54:45.474"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:45.475" starttime="20170810 01:54:45.474"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:45.475" starttime="20170810 01:54:45.473"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 01:54:45.476" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 01:54:47.422" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 01:54:47.423" starttime="20170810 01:54:45.475"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.423" starttime="20170810 01:54:45.468"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:54:47.423" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170810 01:54:47.500" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:54:47.501" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170810 01:54:47.501" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:54:47.501" starttime="20170810 01:54:47.423"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:54:47.501" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:54:47.501" starttime="20170810 01:54:47.501"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.501" starttime="20170810 01:54:02.186"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.502" starttime="20170810 01:52:21.779"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.502" starttime="20170810 01:52:21.778"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 01:54:47.504" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 01:54:47.504" starttime="20170810 01:54:47.504"></status>
</kw>
<msg timestamp="20170810 01:54:47.505" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 01:54:47.505" starttime="20170810 01:54:47.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:47.506" starttime="20170810 01:54:47.506"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.506" starttime="20170810 01:54:47.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:47.507" starttime="20170810 01:54:47.506"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 01:54:47.508" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 01:54:47.508" starttime="20170810 01:54:47.507"></status>
</kw>
<msg timestamp="20170810 01:54:47.508" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 01:54:47.508" starttime="20170810 01:54:47.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:47.510" starttime="20170810 01:54:47.509"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.510" starttime="20170810 01:54:47.509"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:47.510" starttime="20170810 01:54:47.508"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 01:54:47.510" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 01:54:49.301" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 01:54:49.301" starttime="20170810 01:54:47.510"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.301" starttime="20170810 01:54:47.503"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:54:49.302" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170810 01:54:49.379" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:54:49.379" level="INFO">${output} = 1502329975</msg>
<msg timestamp="20170810 01:54:49.380" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:54:49.380" starttime="20170810 01:54:49.302"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.380" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:54:49.380" starttime="20170810 01:54:49.380"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170810 01:54:49.381" level="INFO">${btime} = 1502329975</msg>
<status status="PASS" endtime="20170810 01:54:49.381" starttime="20170810 01:54:49.381"></status>
</kw>
<msg timestamp="20170810 01:54:49.382" level="INFO">${cur_btime} = 1502329975</msg>
<status status="PASS" endtime="20170810 01:54:49.382" starttime="20170810 01:54:47.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.384" level="INFO">${BOOT_TIME} = 1502329975</msg>
<status status="PASS" endtime="20170810 01:54:49.384" starttime="20170810 01:54:49.383"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.385" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170810 01:54:49.385" starttime="20170810 01:54:49.384"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.385" starttime="20170810 01:54:49.383"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.385" starttime="20170810 01:54:49.382"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.385" starttime="20170810 01:54:47.502"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.386" starttime="20170810 01:54:49.385"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.386" starttime="20170810 01:54:49.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.387" starttime="20170810 01:54:49.386"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.387" starttime="20170810 01:54:47.502"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:54:49.390" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:54:49.391" starttime="20170810 01:54:49.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:49.391" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:49.391" starttime="20170810 01:54:49.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:54:49.392" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:54:49.392" starttime="20170810 01:54:49.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:54:49.393" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:54:49.393" starttime="20170810 01:54:49.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.591" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:54:49.592" starttime="20170810 01:54:49.393"></status>
</kw>
<msg timestamp="20170810 01:54:49.592" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:54:49.592" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.592" starttime="20170810 01:54:49.393"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.592" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.592" starttime="20170810 01:54:49.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.593" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.593" starttime="20170810 01:54:49.593"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.594" starttime="20170810 01:54:49.389"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.594" starttime="20170810 01:54:49.389"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.594" starttime="20170810 01:54:49.388"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:54:49.594" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170810 01:54:49.594" starttime="20170810 01:54:49.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.595" starttime="20170810 01:54:49.595"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:54:49.639" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170810 01:54:49.639" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.639" starttime="20170810 01:54:49.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.640" starttime="20170810 01:54:49.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:54:49.640" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:54:49.640" starttime="20170810 01:54:49.640"></status>
</kw>
<msg timestamp="20170810 01:54:49.641" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.641" starttime="20170810 01:54:49.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 01:54:49.641" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170810 01:54:49.642" starttime="20170810 01:54:49.641"></status>
</kw>
<status status="FAIL" endtime="20170810 01:54:49.642" starttime="20170810 01:54:49.387"></status>
</kw>
<msg timestamp="20170810 01:54:49.642" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:54:49.642" starttime="20170810 01:54:49.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170810 01:54:49.643" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170810 01:54:49.643" starttime="20170810 01:54:49.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:54:49.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:54:49.649" starttime="20170810 01:54:49.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:49.649" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:49.649" starttime="20170810 01:54:49.649"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:54:49.650" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:54:49.650" starttime="20170810 01:54:49.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:54:49.651" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:54:49.651" starttime="20170810 01:54:49.650"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.841" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:54:49.841" starttime="20170810 01:54:49.652"></status>
</kw>
<msg timestamp="20170810 01:54:49.841" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:54:49.841" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.841" starttime="20170810 01:54:49.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.842" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.842" starttime="20170810 01:54:49.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.843" starttime="20170810 01:54:49.842"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.843" starttime="20170810 01:54:49.648"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.843" starttime="20170810 01:54:49.647"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.843" starttime="20170810 01:54:49.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:54:49.844" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170810 01:54:49.844" starttime="20170810 01:54:49.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.845" starttime="20170810 01:54:49.844"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:54:49.977" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170810 01:54:49.977" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.977" starttime="20170810 01:54:49.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.978" starttime="20170810 01:54:49.977"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:54:49.978" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:54:49.978" starttime="20170810 01:54:49.978"></status>
</kw>
<msg timestamp="20170810 01:54:49.978" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.979" starttime="20170810 01:54:49.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:49.979" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:49.979" starttime="20170810 01:54:49.979"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:54:49.980" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:54:49.980" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:54:49.980" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170810 01:54:49.980" starttime="20170810 01:54:49.980"></status>
</kw>
<msg timestamp="20170810 01:54:49.980" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170810 01:54:49.980" starttime="20170810 01:54:49.645"></status>
</kw>
<msg timestamp="20170810 01:54:49.981" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170810 01:54:49.981" starttime="20170810 01:54:49.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:49.981" starttime="20170810 01:54:49.981"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:54:49.645"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:54:49.644"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:54:49.644"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:54:49.643"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:54:49.642"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:51:59.872"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:49.982" starttime="20170810 01:51:59.872"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170810 01:54:49.993" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170810 01:54:49.993" starttime="20170810 01:54:49.993"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170810 01:54:49.994" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170810 01:54:49.994" starttime="20170810 01:54:49.993"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:54:49.995" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170810 01:54:49.995" starttime="20170810 01:54:49.994"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:54:49.998" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:54:49.998" starttime="20170810 01:54:49.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:49.999" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:49.999" starttime="20170810 01:54:49.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:54:50.000" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:54:50.000" starttime="20170810 01:54:49.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:54:50.001" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:54:50.001" starttime="20170810 01:54:50.000"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.189" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:54:50.189" starttime="20170810 01:54:50.001"></status>
</kw>
<msg timestamp="20170810 01:54:50.189" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:54:50.189" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.189" starttime="20170810 01:54:50.001"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.190" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.190" starttime="20170810 01:54:50.189"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.190" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.190" starttime="20170810 01:54:50.190"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.191" starttime="20170810 01:54:49.997"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.191" starttime="20170810 01:54:49.996"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.191" starttime="20170810 01:54:49.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:54:50.191" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170810 01:54:50.191" starttime="20170810 01:54:50.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:50.192" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:50.192" starttime="20170810 01:54:50.192"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:50.193" starttime="20170810 01:54:50.192"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 01:54:50.194" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 01:54:50.194" starttime="20170810 01:54:50.193"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 01:54:50.195" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170810 01:54:50.195" starttime="20170810 01:54:50.195"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.195" starttime="20170810 01:54:50.194"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.195" starttime="20170810 01:54:50.193"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:54:50.449" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170810 01:54:50.449" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.449" starttime="20170810 01:54:50.196"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170810 01:54:50.451" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 01:54:50.451" starttime="20170810 01:54:50.450"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170810 01:54:50.452" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170810 01:54:50.452" starttime="20170810 01:54:50.451"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.452" starttime="20170810 01:54:50.451"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.452" starttime="20170810 01:54:50.450"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:54:50.454" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:54:50.454" starttime="20170810 01:54:50.453"></status>
</kw>
<msg timestamp="20170810 01:54:50.454" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.454" starttime="20170810 01:54:49.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.455" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.455" starttime="20170810 01:54:50.454"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170810 01:54:50.456" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:54:50.456" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:54:50.456" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170810 01:54:50.456" starttime="20170810 01:54:50.455"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.456" starttime="20170810 01:54:49.994"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:54:50.460" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:54:50.460" starttime="20170810 01:54:50.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:54:50.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:54:50.461" starttime="20170810 01:54:50.460"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:54:50.461" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:54:50.461" starttime="20170810 01:54:50.461"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:54:50.462" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:54:50.462" starttime="20170810 01:54:50.462"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.659" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:54:50.659" starttime="20170810 01:54:50.463"></status>
</kw>
<msg timestamp="20170810 01:54:50.659" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:54:50.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.659" starttime="20170810 01:54:50.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.660" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.660" starttime="20170810 01:54:50.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.661" starttime="20170810 01:54:50.660"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.661" starttime="20170810 01:54:50.458"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.661" starttime="20170810 01:54:50.458"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.661" starttime="20170810 01:54:50.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:54:50.662" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170810 01:54:50.662" starttime="20170810 01:54:50.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:50.662" starttime="20170810 01:54:50.662"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:54:50.765" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170810 01:54:50.765" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.765" starttime="20170810 01:54:50.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:50.765" starttime="20170810 01:54:50.765"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:54:50.766" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:54:50.766" starttime="20170810 01:54:50.766"></status>
</kw>
<msg timestamp="20170810 01:54:50.766" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.766" starttime="20170810 01:54:50.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:54:50.767" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:54:50.767" starttime="20170810 01:54:50.766"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:54:50.767" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:54:50.768" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:54:50.768" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170810 01:54:50.768" starttime="20170810 01:54:50.767"></status>
</kw>
<msg timestamp="20170810 01:54:50.768" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170810 01:54:50.768" starttime="20170810 01:54:50.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:50.769" starttime="20170810 01:54:50.768"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.769" starttime="20170810 01:54:49.992"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:50.769" starttime="20170810 01:54:49.983"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170810013744.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:50.785" starttime="20170810 01:54:50.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:51.484" starttime="20170810 01:54:50.786"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:51.484" starttime="20170810 01:54:50.785"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:51.484" starttime="20170810 01:54:50.777"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170810 01:54:51.486" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170810 01:54:51.486" starttime="20170810 01:54:51.486"></status>
</kw>
<msg timestamp="20170810 01:54:51.486" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170810 01:54:51.486" starttime="20170810 01:54:51.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:51.488" starttime="20170810 01:54:51.487"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:51.488" starttime="20170810 01:54:51.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:51.489" starttime="20170810 01:54:51.488"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170810 01:54:51.491" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170810 01:54:51.491" starttime="20170810 01:54:51.491"></status>
</kw>
<msg timestamp="20170810 01:54:51.492" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170810 01:54:51.492" starttime="20170810 01:54:51.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:54:51.493" starttime="20170810 01:54:51.493"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:51.493" starttime="20170810 01:54:51.493"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:51.494" starttime="20170810 01:54:51.492"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170810 01:54:51.494" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 01:54:53.159" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170810 01:54:53.159" starttime="20170810 01:54:51.494"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:53.159" starttime="20170810 01:54:51.485"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 01:54:53.161" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:54:53.161" starttime="20170810 01:54:53.161"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:54:53.162" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:54:53.208" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:54:53.208" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 01:54:53.208" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:54:53.208" starttime="20170810 01:54:53.162"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:54:53.209" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:54:53.209" starttime="20170810 01:54:53.209"></status>
</kw>
<status status="PASS" endtime="20170810 01:54:53.209" starttime="20170810 01:54:53.161"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:55:11.479" starttime="20170810 01:54:53.210"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:55:11.481" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:55:11.539" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:55:11.539" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg</msg>
<msg timestamp="20170810 01:55:11.539" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:55:11.539" starttime="20170810 01:55:11.480"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:55:11.540" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:55:11.540" starttime="20170810 01:55:11.539"></status>
</kw>
<msg timestamp="20170810 01:55:11.540" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:55:11.540" starttime="20170810 01:55:11.480"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 01:55:11.541" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 01:55:11.541" starttime="20170810 01:55:11.541"></status>
</kw>
<msg timestamp="20170810 01:55:11.541" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:55:11.541" starttime="20170810 01:55:11.540"></status>
</kw>
<msg timestamp="20170810 01:55:11.541" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:55:11.542" starttime="20170810 01:54:53.160"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 01:55:11.542" starttime="20170810 01:55:11.542"></status>
</kw>
<status status="PASS" endtime="20170810 01:55:11.542" starttime="20170810 01:54:53.160"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 01:55:11.543" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:55:11.543" starttime="20170810 01:55:11.543"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:55:11.544" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:55:11.649" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:55:11.649" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 01:55:11.649" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:55:11.649" starttime="20170810 01:55:11.544"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:55:11.650" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:55:11.650" starttime="20170810 01:55:11.650"></status>
</kw>
<status status="PASS" endtime="20170810 01:55:11.650" starttime="20170810 01:55:11.544"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:55:29.694" starttime="20170810 01:55:11.650"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:55:29.696" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:55:29.752" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:55:29.752" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg</msg>
<msg timestamp="20170810 01:55:29.752" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:55:29.752" starttime="20170810 01:55:29.695"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:55:29.753" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:55:29.753" starttime="20170810 01:55:29.753"></status>
</kw>
<msg timestamp="20170810 01:55:29.753" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:55:29.753" starttime="20170810 01:55:29.695"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 01:55:29.755" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 01:55:29.755" starttime="20170810 01:55:29.754"></status>
</kw>
<msg timestamp="20170810 01:55:29.755" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:55:29.755" starttime="20170810 01:55:29.754"></status>
</kw>
<msg timestamp="20170810 01:55:29.755" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:55:29.755" starttime="20170810 01:55:11.543"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 01:55:29.756" starttime="20170810 01:55:29.756"></status>
</kw>
<status status="PASS" endtime="20170810 01:55:29.756" starttime="20170810 01:55:11.542"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 01:55:29.758" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:55:29.758" starttime="20170810 01:55:29.758"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:55:29.759" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:55:29.864" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:55:29.864" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 01:55:29.864" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:55:29.864" starttime="20170810 01:55:29.759"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:55:29.865" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:55:29.865" starttime="20170810 01:55:29.864"></status>
</kw>
<status status="PASS" endtime="20170810 01:55:29.865" starttime="20170810 01:55:29.758"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:55:48.402" starttime="20170810 01:55:29.865"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:55:48.403" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:55:48.480" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:55:48.480" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg</msg>
<msg timestamp="20170810 01:55:48.480" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:55:48.480" starttime="20170810 01:55:48.403"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:55:48.481" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:55:48.481" starttime="20170810 01:55:48.481"></status>
</kw>
<msg timestamp="20170810 01:55:48.481" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:55:48.481" starttime="20170810 01:55:48.402"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 01:55:48.482" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 01:55 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 01:55:48.483" starttime="20170810 01:55:48.482"></status>
</kw>
<msg timestamp="20170810 01:55:48.483" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:55:48.483" starttime="20170810 01:55:48.482"></status>
</kw>
<msg timestamp="20170810 01:55:48.483" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:55:48.483" starttime="20170810 01:55:29.757"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 01:55:48.484" starttime="20170810 01:55:48.483"></status>
</kw>
<status status="PASS" endtime="20170810 01:55:48.484" starttime="20170810 01:55:29.756"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170810 01:55:48.485" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:55:48.485" starttime="20170810 01:55:48.485"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:55:48.487" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:55:48.596" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:55:48.596" level="INFO">${stdout} = </msg>
<msg timestamp="20170810 01:55:48.596" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:55:48.596" starttime="20170810 01:55:48.486"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:55:48.596" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:55:48.596" starttime="20170810 01:55:48.596"></status>
</kw>
<status status="PASS" endtime="20170810 01:55:48.597" starttime="20170810 01:55:48.486"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:05.301" starttime="20170810 01:55:48.597"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:05.303" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170810 01:56:05.359" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:56:05.359" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug 10 01:56 /tmp/flashimg</msg>
<msg timestamp="20170810 01:56:05.359" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:05.359" starttime="20170810 01:56:05.302"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:56:05.360" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:56:05.360" starttime="20170810 01:56:05.360"></status>
</kw>
<msg timestamp="20170810 01:56:05.360" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug 10 01:56 /tmp/flashimg</msg>
<status status="PASS" endtime="20170810 01:56:05.360" starttime="20170810 01:56:05.302"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170810 01:56:05.362" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug 10 01:56 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170810 01:56:05.362" starttime="20170810 01:56:05.361"></status>
</kw>
<msg timestamp="20170810 01:56:05.362" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:05.362" starttime="20170810 01:56:05.361"></status>
</kw>
<msg timestamp="20170810 01:56:05.362" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:05.362" starttime="20170810 01:55:48.484"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:05.363" starttime="20170810 01:56:05.362"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.363" starttime="20170810 01:55:48.484"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.363" starttime="20170810 01:54:53.160"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.363" starttime="20170810 01:54:53.159"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.363" starttime="20170810 01:54:50.776"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.363" starttime="20170810 01:54:50.770"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170810 01:56:05.372" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170810 01:56:05.372" starttime="20170810 01:56:05.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:05.374" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170810 01:56:05.374" starttime="20170810 01:56:05.373"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:05.378" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:05.379" starttime="20170810 01:56:05.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:05.379" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:05.379" starttime="20170810 01:56:05.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:05.380" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:05.380" starttime="20170810 01:56:05.379"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:05.381" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:05.381" starttime="20170810 01:56:05.380"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:05.594" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:05.594" starttime="20170810 01:56:05.381"></status>
</kw>
<msg timestamp="20170810 01:56:05.594" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:05.594" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:05.594" starttime="20170810 01:56:05.381"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:05.595" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:05.595" starttime="20170810 01:56:05.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:05.596" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:05.596" starttime="20170810 01:56:05.595"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.596" starttime="20170810 01:56:05.377"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.596" starttime="20170810 01:56:05.375"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:05.596" starttime="20170810 01:56:05.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:05.597" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170810 01:56:05.597" starttime="20170810 01:56:05.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:05.597" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:05.597" starttime="20170810 01:56:05.597"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:05.598" starttime="20170810 01:56:05.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:05.599" starttime="20170810 01:56:05.599"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:09.483" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170810 01:56:09.483" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.484" starttime="20170810 01:56:05.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:09.484" starttime="20170810 01:56:09.484"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:09.485" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:09.485" starttime="20170810 01:56:09.485"></status>
</kw>
<msg timestamp="20170810 01:56:09.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.485" starttime="20170810 01:56:05.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.486" starttime="20170810 01:56:09.485"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:09.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:09.489" starttime="20170810 01:56:09.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:09.490" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:09.490" starttime="20170810 01:56:09.490"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:09.491" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:09.491" starttime="20170810 01:56:09.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:09.491" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:09.491" starttime="20170810 01:56:09.491"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.673" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:09.673" starttime="20170810 01:56:09.492"></status>
</kw>
<msg timestamp="20170810 01:56:09.673" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:09.673" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.673" starttime="20170810 01:56:09.492"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.674" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.674" starttime="20170810 01:56:09.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.675" starttime="20170810 01:56:09.674"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:09.675" starttime="20170810 01:56:09.488"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:09.675" starttime="20170810 01:56:09.488"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:09.675" starttime="20170810 01:56:09.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:09.675" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170810 01:56:09.676" starttime="20170810 01:56:09.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:09.676" starttime="20170810 01:56:09.676"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:09.769" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170810 01:56:09.770" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.770" starttime="20170810 01:56:09.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:09.770" starttime="20170810 01:56:09.770"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:09.771" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:09.771" starttime="20170810 01:56:09.771"></status>
</kw>
<msg timestamp="20170810 01:56:09.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.771" starttime="20170810 01:56:09.487"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.772" starttime="20170810 01:56:09.771"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:56:09.773" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:09.773" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:56:09.773" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170810 01:56:09.773" starttime="20170810 01:56:09.772"></status>
</kw>
<msg timestamp="20170810 01:56:09.773" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170810 01:56:09.773" starttime="20170810 01:56:09.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:09.774" starttime="20170810 01:56:09.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170810 01:56:09.774" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170810 01:56:09.774" starttime="20170810 01:56:09.774"></status>
</kw>
<status status="FAIL" endtime="20170810 01:56:09.775" starttime="20170810 01:56:05.371"></status>
</kw>
<msg timestamp="20170810 01:56:09.781" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170810 01:56:09.781" starttime="20170810 01:56:05.364"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:09.793" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:09.794" starttime="20170810 01:56:09.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:09.794" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:09.794" starttime="20170810 01:56:09.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:09.795" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:09.795" starttime="20170810 01:56:09.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:09.796" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:09.796" starttime="20170810 01:56:09.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.992" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:09.992" starttime="20170810 01:56:09.797"></status>
</kw>
<msg timestamp="20170810 01:56:09.992" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:09.992" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.992" starttime="20170810 01:56:09.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.993" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.993" starttime="20170810 01:56:09.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:09.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:09.994" starttime="20170810 01:56:09.993"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:09.994" starttime="20170810 01:56:09.793"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:09.994" starttime="20170810 01:56:09.792"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:09.994" starttime="20170810 01:56:09.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:09.995" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170810 01:56:09.995" starttime="20170810 01:56:09.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:09.995" starttime="20170810 01:56:09.995"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:10.084" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170810 01:56:10.084" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:10.084" starttime="20170810 01:56:09.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:10.085" starttime="20170810 01:56:10.085"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:10.085" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:10.086" starttime="20170810 01:56:10.085"></status>
</kw>
<msg timestamp="20170810 01:56:10.086" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:10.086" starttime="20170810 01:56:09.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:10.086" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:10.086" starttime="20170810 01:56:10.086"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:56:10.087" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:10.087" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:56:10.087" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170810 01:56:10.087" starttime="20170810 01:56:10.087"></status>
</kw>
<msg timestamp="20170810 01:56:10.088" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170810 01:56:10.088" starttime="20170810 01:56:09.790"></status>
</kw>
<msg timestamp="20170810 01:56:10.088" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170810 01:56:10.088" starttime="20170810 01:56:09.790"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170810 01:56:10.089" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170810 01:56:10.089" starttime="20170810 01:56:10.089"></status>
</kw>
<msg timestamp="20170810 01:56:10.089" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:10.089" starttime="20170810 01:56:10.088"></status>
</kw>
<msg timestamp="20170810 01:56:10.089" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:10.089" starttime="20170810 01:56:09.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170810 01:56:10.100" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170810 01:56:10.101" starttime="20170810 01:56:10.100"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170810 01:56:10.106" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 01:56:13.116" level="INFO">${RC} = 0</msg>
<msg timestamp="20170810 01:56:13.116" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.30 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.881 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170810 01:56:13.116" starttime="20170810 01:56:10.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.119" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.30 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.881 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.727 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.716 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.716/0.908/1.308/0.239 ms</msg>
<status status="PASS" endtime="20170810 01:56:13.119" starttime="20170810 01:56:13.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:13.120" starttime="20170810 01:56:13.120"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.120" starttime="20170810 01:56:10.100"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 01:56:13.141" level="INFO">${cur_time} = 2017-08-10 01:56:13:140304</msg>
<status status="PASS" endtime="20170810 01:56:13.141" starttime="20170810 01:56:13.140"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 01:56:13.142" level="INFO">${cur_time} = 20170810015613140304</msg>
<status status="PASS" endtime="20170810 01:56:13.142" starttime="20170810 01:56:13.141"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.142" starttime="20170810 01:56:13.140"></status>
</kw>
<msg timestamp="20170810 01:56:13.150" level="INFO">${FFDC_TIME} = 20170810015613140304</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 01:56:13.152" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170810 01:56:13.152" starttime="20170810 01:56:13.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170810 01:56:13.153" level="INFO">${suite_name} = 20170810015613140304_UpdateBmc</msg>
<status status="PASS" endtime="20170810 01:56:13.153" starttime="20170810 01:56:13.153"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 01:56:13.154" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170810 01:56:13.154" starttime="20170810 01:56:13.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170810 01:56:13.154" level="INFO">${test_name} = 20170810015613140304_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170810 01:56:13.154" starttime="20170810 01:56:13.154"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.155" starttime="20170810 01:56:13.151"></status>
</kw>
<msg timestamp="20170810 01:56:13.159" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170810 01:56:13.164" level="INFO">${FFDC_PREFIX} = 20170810015613140304_</msg>
<msg timestamp="20170810 01:56:13.187" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170810 01:56:13.192" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.192" starttime="20170810 01:56:13.187"></status>
</kw>
<msg timestamp="20170810 01:56:13.197" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.208" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.208" starttime="20170810 01:56:13.207"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.208" starttime="20170810 01:56:13.207"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.209" starttime="20170810 01:56:13.209"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.210" starttime="20170810 01:56:13.208"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.211" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.211" starttime="20170810 01:56:13.210"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.211" starttime="20170810 01:56:13.210"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.212" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.212" starttime="20170810 01:56:13.212"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.212" starttime="20170810 01:56:13.211"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.214" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.214" starttime="20170810 01:56:13.214"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.214" starttime="20170810 01:56:13.213"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.216" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.216" starttime="20170810 01:56:13.215"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.216" starttime="20170810 01:56:13.214"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.217" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.217" starttime="20170810 01:56:13.217"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.217" starttime="20170810 01:56:13.216"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.219" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.219" starttime="20170810 01:56:13.218"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.219" starttime="20170810 01:56:13.218"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.220" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.220" starttime="20170810 01:56:13.220"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.220" starttime="20170810 01:56:13.219"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.222" starttime="20170810 01:56:13.222"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.222" starttime="20170810 01:56:13.221"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.223" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.223" starttime="20170810 01:56:13.223"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.224" starttime="20170810 01:56:13.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.225" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.225" starttime="20170810 01:56:13.224"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.225" starttime="20170810 01:56:13.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:13.226" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:13.226" starttime="20170810 01:56:13.226"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:13.226" starttime="20170810 01:56:13.225"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 01:56:13.246" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:13.246" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170810 01:56:14.073" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170810 01:56:14.074" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170810 01:56:14.151" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170810 01:56:14.160" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170810 01:56:14.160" level="INFO">${stderr} = </msg>
<msg timestamp="20170810 01:56:14.160" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170810 01:56:14.160" starttime="20170810 01:56:13.227"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.161" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170810 01:56:14.161" starttime="20170810 01:56:14.160"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.161" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170810 01:56:14.161" starttime="20170810 01:56:14.161"></status>
</kw>
<msg timestamp="20170810 01:56:14.162" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170810 01:56:14.162" starttime="20170810 01:56:13.226"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.163" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.163" starttime="20170810 01:56:14.163"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.163" starttime="20170810 01:56:14.162"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.164" starttime="20170810 01:56:13.220"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.165" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.165" starttime="20170810 01:56:14.164"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.165" starttime="20170810 01:56:14.164"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 01:56:14.166" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170810 01:56:14.166" starttime="20170810 01:56:14.165"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.167" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.167" starttime="20170810 01:56:14.167"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.167" starttime="20170810 01:56:14.166"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.168" starttime="20170810 01:56:14.168"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.169" starttime="20170810 01:56:14.167"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.169" starttime="20170810 01:56:14.166"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.170" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.170" starttime="20170810 01:56:14.170"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.170" starttime="20170810 01:56:14.169"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.171" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.171" starttime="20170810 01:56:14.171"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.171" starttime="20170810 01:56:14.170"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.171" starttime="20170810 01:56:14.169"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.173" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.173" starttime="20170810 01:56:14.172"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.173" starttime="20170810 01:56:14.172"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.175" starttime="20170810 01:56:14.174"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.175" starttime="20170810 01:56:14.173"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.175" starttime="20170810 01:56:14.172"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.175" starttime="20170810 01:56:14.166"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.176" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.176" starttime="20170810 01:56:14.176"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.176" starttime="20170810 01:56:14.175"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.176" starttime="20170810 01:56:13.206"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 01:56:14.182" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170810 01:56:14.182" starttime="20170810 01:56:14.182"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170810 01:56:14.183" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170810 01:56:14.183" starttime="20170810 01:56:14.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:14.185" starttime="20170810 01:56:14.184"></status>
</kw>
<msg timestamp="20170810 01:56:14.185" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170810 01:56:14.185" starttime="20170810 01:56:14.184"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:14.187" starttime="20170810 01:56:14.187"></status>
</kw>
<msg timestamp="20170810 01:56:14.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:14.187" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 01:56:14.187" starttime="20170810 01:56:14.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:14.188" starttime="20170810 01:56:14.188"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 01:56:14.203" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170810 01:56:14.203" starttime="20170810 01:56:14.202"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 01:56:14.204" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170810 01:56:14.204" starttime="20170810 01:56:14.204"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.210" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170810 01:56:14.210" starttime="20170810 01:56:14.204"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.213" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.213" starttime="20170810 01:56:14.213"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.213" starttime="20170810 01:56:14.212"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.215" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.215" starttime="20170810 01:56:14.214"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.215" starttime="20170810 01:56:14.214"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.216" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.216" starttime="20170810 01:56:14.216"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.216" starttime="20170810 01:56:14.215"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:14.218" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:14.218" starttime="20170810 01:56:14.217"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.218" starttime="20170810 01:56:14.217"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.218" starttime="20170810 01:56:14.212"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:14.218" starttime="20170810 01:56:14.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:14.219" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:14.219" starttime="20170810 01:56:14.218"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:14.260" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:14.260" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170810 01:56:15.586" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:15.586" starttime="20170810 01:56:14.237"></status>
</kw>
<msg timestamp="20170810 01:56:15.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:15.586" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170810 01:56:15.586" starttime="20170810 01:56:14.219"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:15.587" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170810 01:56:15.587" starttime="20170810 01:56:15.587"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:15.588" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:15.588" starttime="20170810 01:56:15.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.601" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:15.600"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:15.599"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:15.588"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:14.210"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:14.210"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:14.210"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:14.203"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.601" starttime="20170810 01:56:14.203"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 01:56:15.602" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170810 01:56:15.602" starttime="20170810 01:56:15.602"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.603" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170810 01:56:15.603" starttime="20170810 01:56:15.603"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.606" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.606" starttime="20170810 01:56:15.606"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.606" starttime="20170810 01:56:15.605"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.608" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.608" starttime="20170810 01:56:15.607"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.608" starttime="20170810 01:56:15.607"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.609" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.609" starttime="20170810 01:56:15.609"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.609" starttime="20170810 01:56:15.608"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.610" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.611" starttime="20170810 01:56:15.610"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.611" starttime="20170810 01:56:15.610"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.611" starttime="20170810 01:56:15.605"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.611" starttime="20170810 01:56:15.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:15.612" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:15.612" starttime="20170810 01:56:15.611"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:15.652" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:15.653" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170810 01:56:15.758" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:15.758" starttime="20170810 01:56:15.630"></status>
</kw>
<msg timestamp="20170810 01:56:15.758" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:15.758" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170810 01:56:15.758" starttime="20170810 01:56:15.612"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:15.759" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170810 01:56:15.759" starttime="20170810 01:56:15.759"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:15.760" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:15.760" starttime="20170810 01:56:15.759"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.767" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.766"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.766"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.760"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.604"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.603"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.603"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.601"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.767" starttime="20170810 01:56:15.601"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 01:56:15.769" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170810 01:56:15.769" starttime="20170810 01:56:15.768"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.769" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170810 01:56:15.769" starttime="20170810 01:56:15.769"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.773" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.773" starttime="20170810 01:56:15.772"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.773" starttime="20170810 01:56:15.772"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.774" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.774" starttime="20170810 01:56:15.774"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.774" starttime="20170810 01:56:15.773"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.775" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.775" starttime="20170810 01:56:15.775"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.776" starttime="20170810 01:56:15.774"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.777" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.777" starttime="20170810 01:56:15.776"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.777" starttime="20170810 01:56:15.776"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.777" starttime="20170810 01:56:15.771"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.777" starttime="20170810 01:56:15.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:15.778" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:15.778" starttime="20170810 01:56:15.777"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:15.820" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:15.821" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170810 01:56:15.890" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:15.891" starttime="20170810 01:56:15.796"></status>
</kw>
<msg timestamp="20170810 01:56:15.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:15.891" level="INFO">${ret_values} = (u' 01:56:21 up 3 min,  load average: 2.13, 1.59, 0.68', u'', 0)</msg>
<status status="PASS" endtime="20170810 01:56:15.891" starttime="20170810 01:56:15.778"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:15.891" level="INFO">${stdout} =  01:56:21 up 3 min,  load average: 2.13, 1.59, 0.68</msg>
<status status="PASS" endtime="20170810 01:56:15.891" starttime="20170810 01:56:15.891"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:15.892" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:15.892" starttime="20170810 01:56:15.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.899" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.899" starttime="20170810 01:56:15.899"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.900" starttime="20170810 01:56:15.898"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.900" starttime="20170810 01:56:15.892"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.900" starttime="20170810 01:56:15.770"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.900" starttime="20170810 01:56:15.770"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.903" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.903" starttime="20170810 01:56:15.902"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.903" starttime="20170810 01:56:15.902"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.904" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.904" starttime="20170810 01:56:15.904"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.905" starttime="20170810 01:56:15.903"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.906" starttime="20170810 01:56:15.905"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.906" starttime="20170810 01:56:15.905"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:15.907" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:15.907" starttime="20170810 01:56:15.907"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.907" starttime="20170810 01:56:15.906"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.907" starttime="20170810 01:56:15.901"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:15.907" starttime="20170810 01:56:15.901"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:15.908" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:15.908" starttime="20170810 01:56:15.908"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:15.950" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:15.950" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170810 01:56:16.011" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:16.011" starttime="20170810 01:56:15.927"></status>
</kw>
<msg timestamp="20170810 01:56:16.011" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:16.011" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170810 01:56:16.011" starttime="20170810 01:56:15.909"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:16.012" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170810 01:56:16.012" starttime="20170810 01:56:16.012"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:16.013" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:16.013" starttime="20170810 01:56:16.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.020" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.020" starttime="20170810 01:56:16.019"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.020" starttime="20170810 01:56:16.019"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.020" starttime="20170810 01:56:16.013"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.020" starttime="20170810 01:56:15.900"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.020" starttime="20170810 01:56:15.900"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.024" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.024" starttime="20170810 01:56:16.024"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.024" starttime="20170810 01:56:16.023"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.026" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.026" starttime="20170810 01:56:16.025"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.026" starttime="20170810 01:56:16.025"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.027" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.027" starttime="20170810 01:56:16.027"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.027" starttime="20170810 01:56:16.026"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.029" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.029" starttime="20170810 01:56:16.028"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.029" starttime="20170810 01:56:16.027"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.029" starttime="20170810 01:56:16.022"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.029" starttime="20170810 01:56:16.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:16.030" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:16.030" starttime="20170810 01:56:16.029"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:16.071" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:16.071" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170810 01:56:16.127" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:16.127" starttime="20170810 01:56:16.048"></status>
</kw>
<msg timestamp="20170810 01:56:16.127" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:16.127" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170810 01:56:16.127" starttime="20170810 01:56:16.030"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:16.128" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170810 01:56:16.128" starttime="20170810 01:56:16.128"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:16.129" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:16.129" starttime="20170810 01:56:16.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.139" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:16.138"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:16.137"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:16.129"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:16.020"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:16.020"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:15.769"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:15.768"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:15.768"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:14.203"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:14.202"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.139" starttime="20170810 01:56:14.188"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.140" starttime="20170810 01:56:14.185"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.140" starttime="20170810 01:56:14.185"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.142" starttime="20170810 01:56:16.141"></status>
</kw>
<msg timestamp="20170810 01:56:16.142" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:16.142" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 01:56:16.142" starttime="20170810 01:56:16.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.142" starttime="20170810 01:56:16.142"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 01:56:16.157" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170810 01:56:16.157" starttime="20170810 01:56:16.156"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 01:56:16.158" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170810 01:56:16.158" starttime="20170810 01:56:16.158"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:16.159" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_elog.txt</msg>
<status status="PASS" endtime="20170810 01:56:16.160" starttime="20170810 01:56:16.159"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:16.162" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:16.163" starttime="20170810 01:56:16.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:16.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:16.163" starttime="20170810 01:56:16.163"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:16.164" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:16.164" starttime="20170810 01:56:16.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:16.165" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:16.165" starttime="20170810 01:56:16.164"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.347" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:16.347" starttime="20170810 01:56:16.166"></status>
</kw>
<msg timestamp="20170810 01:56:16.347" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:16.347" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.347" starttime="20170810 01:56:16.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.348" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.348" starttime="20170810 01:56:16.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.349" starttime="20170810 01:56:16.348"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.349" starttime="20170810 01:56:16.161"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.349" starttime="20170810 01:56:16.161"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.349" starttime="20170810 01:56:16.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:16.350" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170810 01:56:16.350" starttime="20170810 01:56:16.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.350" starttime="20170810 01:56:16.350"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:16.475" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 01:56:16.475" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.475" starttime="20170810 01:56:16.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.476" starttime="20170810 01:56:16.475"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:16.476" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:16.476" starttime="20170810 01:56:16.476"></status>
</kw>
<msg timestamp="20170810 01:56:16.476" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.477" starttime="20170810 01:56:16.160"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.478" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.478" starttime="20170810 01:56:16.477"></status>
</kw>
<msg timestamp="20170810 01:56:16.478" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 01:56:16.478" starttime="20170810 01:56:16.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.479" starttime="20170810 01:56:16.478"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 01:56:16.480" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502330052285, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:16.480" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 01:56:16.480" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170810 01:56:16.480" starttime="20170810 01:56:16.479"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.483" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_elog.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.483" starttime="20170810 01:56:16.482"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.484" starttime="20170810 01:56:16.481"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.484" starttime="20170810 01:56:16.158"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:16.484" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170810 01:56:16.484" starttime="20170810 01:56:16.484"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:16.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:16.488" starttime="20170810 01:56:16.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:16.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:16.488" starttime="20170810 01:56:16.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:16.489" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:16.489" starttime="20170810 01:56:16.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:16.490" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:16.490" starttime="20170810 01:56:16.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.667" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:16.667" starttime="20170810 01:56:16.490"></status>
</kw>
<msg timestamp="20170810 01:56:16.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:16.667" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.667" starttime="20170810 01:56:16.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.668" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.668" starttime="20170810 01:56:16.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.669" starttime="20170810 01:56:16.668"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.669" starttime="20170810 01:56:16.486"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.669" starttime="20170810 01:56:16.486"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.669" starttime="20170810 01:56:16.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:16.670" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170810 01:56:16.670" starttime="20170810 01:56:16.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.670" starttime="20170810 01:56:16.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:16.899" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 01:56:16.899" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.900" starttime="20170810 01:56:16.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.900" starttime="20170810 01:56:16.900"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:16.901" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:16.901" starttime="20170810 01:56:16.901"></status>
</kw>
<msg timestamp="20170810 01:56:16.901" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.901" starttime="20170810 01:56:16.485"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:16.903" starttime="20170810 01:56:16.902"></status>
</kw>
<msg timestamp="20170810 01:56:16.903" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 01:56:16.903" starttime="20170810 01:56:16.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:16.903" starttime="20170810 01:56:16.903"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 01:56:16.904" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:16.904" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 01:56:16.904" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170810 01:56:16.904" starttime="20170810 01:56:16.904"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:16.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:16.906" starttime="20170810 01:56:16.905"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.906" starttime="20170810 01:56:16.905"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:16.906" starttime="20170810 01:56:16.484"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:16.907" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170810 01:56:16.907" starttime="20170810 01:56:16.906"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:16.910" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:16.910" starttime="20170810 01:56:16.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:16.911" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:16.911" starttime="20170810 01:56:16.911"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:16.912" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:16.912" starttime="20170810 01:56:16.911"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:16.912" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:16.912" starttime="20170810 01:56:16.912"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.132" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:17.132" starttime="20170810 01:56:16.913"></status>
</kw>
<msg timestamp="20170810 01:56:17.132" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:17.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.132" starttime="20170810 01:56:16.913"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.133" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.133" starttime="20170810 01:56:17.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.134" starttime="20170810 01:56:17.133"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.134" starttime="20170810 01:56:16.909"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.134" starttime="20170810 01:56:16.909"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.134" starttime="20170810 01:56:16.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:17.135" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170810 01:56:17.135" starttime="20170810 01:56:17.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.136" starttime="20170810 01:56:17.135"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:17.309" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 01:56:17.309" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.309" starttime="20170810 01:56:17.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.310" starttime="20170810 01:56:17.309"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:17.310" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:17.310" starttime="20170810 01:56:17.310"></status>
</kw>
<msg timestamp="20170810 01:56:17.311" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.311" starttime="20170810 01:56:16.907"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.312" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.312" starttime="20170810 01:56:17.311"></status>
</kw>
<msg timestamp="20170810 01:56:17.312" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 01:56:17.312" starttime="20170810 01:56:17.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.313" starttime="20170810 01:56:17.312"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170810 01:56:17.313" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:17.313" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170810 01:56:17.314" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170810 01:56:17.314" starttime="20170810 01:56:17.313"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.315" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:17.315" starttime="20170810 01:56:17.314"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.315" starttime="20170810 01:56:17.314"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.315" starttime="20170810 01:56:16.906"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:17.316" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_led.txt</msg>
<status status="PASS" endtime="20170810 01:56:17.316" starttime="20170810 01:56:17.316"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:17.319" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:17.319" starttime="20170810 01:56:17.319"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:17.320" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:17.320" starttime="20170810 01:56:17.320"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:17.321" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:17.321" starttime="20170810 01:56:17.321"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:17.322" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:17.322" starttime="20170810 01:56:17.322"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.501" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:17.501" starttime="20170810 01:56:17.324"></status>
</kw>
<msg timestamp="20170810 01:56:17.501" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:17.501" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.501" starttime="20170810 01:56:17.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.502" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.502" starttime="20170810 01:56:17.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.503" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.503" starttime="20170810 01:56:17.502"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.503" starttime="20170810 01:56:17.318"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.503" starttime="20170810 01:56:17.318"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.503" starttime="20170810 01:56:17.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:17.504" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170810 01:56:17.504" starttime="20170810 01:56:17.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.504" starttime="20170810 01:56:17.504"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:17.557" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 01:56:17.557" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.557" starttime="20170810 01:56:17.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.558" starttime="20170810 01:56:17.558"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:17.559" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:17.559" starttime="20170810 01:56:17.558"></status>
</kw>
<msg timestamp="20170810 01:56:17.559" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.559" starttime="20170810 01:56:17.316"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.560" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 01:56:17.560" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170810 01:56:17.560" starttime="20170810 01:56:17.560"></status>
</kw>
<msg timestamp="20170810 01:56:17.560" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:17.560" starttime="20170810 01:56:17.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 01:56:17.561" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170810 01:56:17.562" starttime="20170810 01:56:17.561"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.562" starttime="20170810 01:56:17.561"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.562" starttime="20170810 01:56:17.315"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:17.562" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170810 01:56:17.563" starttime="20170810 01:56:17.562"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:17.565" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:17.566" starttime="20170810 01:56:17.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:17.566" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:17.566" starttime="20170810 01:56:17.566"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:17.567" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:17.567" starttime="20170810 01:56:17.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:17.568" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:17.568" starttime="20170810 01:56:17.567"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.748" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:17.748" starttime="20170810 01:56:17.568"></status>
</kw>
<msg timestamp="20170810 01:56:17.748" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:17.748" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.748" starttime="20170810 01:56:17.568"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.749" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.749" starttime="20170810 01:56:17.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.750" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.750" starttime="20170810 01:56:17.749"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.750" starttime="20170810 01:56:17.564"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.750" starttime="20170810 01:56:17.564"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.750" starttime="20170810 01:56:17.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:17.751" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170810 01:56:17.751" starttime="20170810 01:56:17.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.751" starttime="20170810 01:56:17.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:17.792" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170810 01:56:17.793" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.793" starttime="20170810 01:56:17.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.793" starttime="20170810 01:56:17.793"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:17.794" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:17.794" starttime="20170810 01:56:17.794"></status>
</kw>
<msg timestamp="20170810 01:56:17.794" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:17.794" starttime="20170810 01:56:17.563"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:17.795" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170810 01:56:17.795" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170810 01:56:17.795" starttime="20170810 01:56:17.795"></status>
</kw>
<msg timestamp="20170810 01:56:17.796" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:17.796" starttime="20170810 01:56:17.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170810 01:56:17.797" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:17.796"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:17.796"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:17.562"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.158"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.157"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.157"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.157"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.156"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.143"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.140"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:17.797" starttime="20170810 01:56:16.140"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.799" starttime="20170810 01:56:17.799"></status>
</kw>
<msg timestamp="20170810 01:56:17.799" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:17.799" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 01:56:17.799" starttime="20170810 01:56:17.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.800" starttime="20170810 01:56:17.800"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170810 01:56:17.834" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:17.835" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170810 01:56:17.904" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170810 01:56:17.915" level="INFO">${core_files} = None</msg>
<msg timestamp="20170810 01:56:17.915" level="INFO">${stderr} = None</msg>
<msg timestamp="20170810 01:56:17.915" level="INFO">${rc} = None</msg>
<msg timestamp="20170810 01:56:17.915" level="FAIL">#(UTC) 2017/08/10 01:56:17.914293 -    3.754802 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170810 01:56:17.916" starttime="20170810 01:56:17.815"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170810 01:56:17.916" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170810 01:56:17.916" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170810 01:56:17.916" starttime="20170810 01:56:17.916"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:17.926" starttime="20170810 01:56:17.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:18.578" starttime="20170810 01:56:17.927"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:18.578" starttime="20170810 01:56:17.926"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:18.578" starttime="20170810 01:56:17.924"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:18.578" starttime="20170810 01:56:17.917"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170810 01:56:18.579" starttime="20170810 01:56:18.578"></status>
</kw>
<status status="FAIL" endtime="20170810 01:56:18.579" starttime="20170810 01:56:17.814"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:18.579" starttime="20170810 01:56:17.800"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:18.579" starttime="20170810 01:56:17.798"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:18.579" starttime="20170810 01:56:17.797"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:18.581" starttime="20170810 01:56:18.581"></status>
</kw>
<msg timestamp="20170810 01:56:18.581" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:18.581" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 01:56:18.581" starttime="20170810 01:56:18.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:18.582" starttime="20170810 01:56:18.582"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170810 01:56:18.596" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170810 01:56:18.596" starttime="20170810 01:56:18.596"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170810 01:56:18.598" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170810 01:56:18.598" starttime="20170810 01:56:18.597"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:18.598" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170810 01:56:18.598" starttime="20170810 01:56:18.598"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:18.600" starttime="20170810 01:56:18.599"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:18.601" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:18.601" starttime="20170810 01:56:18.600"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:18.644" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:18.645" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170810 01:56:19.208" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:19.209" starttime="20170810 01:56:18.619"></status>
</kw>
<msg timestamp="20170810 01:56:19.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:19.210" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug 10 01:56 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug 10 01:56 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170810 01:56:19.210" starttime="20170810 01:56:18.601"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:19.211" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug 10 01:56 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug 10 01:56 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170810 01:56:19.211" starttime="20170810 01:56:19.210"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:19.212" level="INFO">${stderr} = ls: /proc/1242/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170810 01:56:19.212" starttime="20170810 01:56:19.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:19.220" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:19.220" starttime="20170810 01:56:19.219"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.220" starttime="20170810 01:56:19.218"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.220" starttime="20170810 01:56:19.212"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.220" starttime="20170810 01:56:18.599"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.220" starttime="20170810 01:56:18.598"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:19.221" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170810 01:56:19.221" starttime="20170810 01:56:19.221"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:19.222" starttime="20170810 01:56:19.222"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:19.223" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:19.223" starttime="20170810 01:56:19.223"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:19.271" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:19.272" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170810 01:56:19.316" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:19.317" starttime="20170810 01:56:19.247"></status>
</kw>
<msg timestamp="20170810 01:56:19.317" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:19.317" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170810 01:56:19.317" starttime="20170810 01:56:19.224"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:19.317" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170810 01:56:19.318" starttime="20170810 01:56:19.317"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:19.318" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:19.318" starttime="20170810 01:56:19.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:19.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:19.326" starttime="20170810 01:56:19.325"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.326" starttime="20170810 01:56:19.324"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.326" starttime="20170810 01:56:19.318"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.326" starttime="20170810 01:56:19.221"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.326" starttime="20170810 01:56:19.220"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:19.327" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170810 01:56:19.327" starttime="20170810 01:56:19.326"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:19.328" starttime="20170810 01:56:19.328"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:19.329" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:19.329" starttime="20170810 01:56:19.329"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:19.373" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:19.373" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170810 01:56:19.440" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:19.440" starttime="20170810 01:56:19.347"></status>
</kw>
<msg timestamp="20170810 01:56:19.440" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:19.440" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          181420 kB\nMemAvailable:     227368 kB\nBuffers:           11264 kB\nCached:           150276 kB\nSwapCached:            0 kB\nActive:           14587...</msg>
<status status="PASS" endtime="20170810 01:56:19.440" starttime="20170810 01:56:19.329"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:19.441" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          181420 kB
MemAvailable:     227368 kB
Buffers:           11264 kB
Cached:           150276 kB
SwapCached:            0 kB
Active:           145876 kB
Inac...</msg>
<status status="PASS" endtime="20170810 01:56:19.441" starttime="20170810 01:56:19.440"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:19.441" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:19.441" starttime="20170810 01:56:19.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:19.448" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:19.448" starttime="20170810 01:56:19.448"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.449" starttime="20170810 01:56:19.447"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.449" starttime="20170810 01:56:19.442"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.449" starttime="20170810 01:56:19.327"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.449" starttime="20170810 01:56:19.326"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:19.450" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170810 01:56:19.450" starttime="20170810 01:56:19.450"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:19.452" starttime="20170810 01:56:19.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:19.453" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:19.453" starttime="20170810 01:56:19.452"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:19.494" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:19.495" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170810 01:56:19.803" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:19.803" starttime="20170810 01:56:19.471"></status>
</kw>
<msg timestamp="20170810 01:56:19.803" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:19.804" level="INFO">${ret_values} = (u'Mem: 250848K used, 181420K free, 113140K shrd, 11264K buff, 150280K cached\nCPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq\nLoad average: 2.14 1.60 0.68 1/152 1245\n  PID  PPI...</msg>
<status status="PASS" endtime="20170810 01:56:19.804" starttime="20170810 01:56:19.453"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:19.804" level="INFO">${stdout} = Mem: 250848K used, 181420K free, 113140K shrd, 11264K buff, 150280K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 2.14 1.60 0.68 1/152 1245
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170810 01:56:19.804" starttime="20170810 01:56:19.804"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:19.805" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:19.805" starttime="20170810 01:56:19.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:19.812" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:19.812" starttime="20170810 01:56:19.812"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.812" starttime="20170810 01:56:19.811"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.813" starttime="20170810 01:56:19.805"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.813" starttime="20170810 01:56:19.450"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.813" starttime="20170810 01:56:19.449"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:19.813" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170810 01:56:19.814" starttime="20170810 01:56:19.813"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:19.815" starttime="20170810 01:56:19.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:19.816" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:19.816" starttime="20170810 01:56:19.815"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:19.858" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:19.858" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170810 01:56:19.915" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:19.915" starttime="20170810 01:56:19.834"></status>
</kw>
<msg timestamp="20170810 01:56:19.915" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:19.915" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170810 01:56:19.915" starttime="20170810 01:56:19.816"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:19.916" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170810 01:56:19.916" starttime="20170810 01:56:19.916"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:19.917" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:19.917" starttime="20170810 01:56:19.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:19.924" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:19.925" starttime="20170810 01:56:19.924"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.925" starttime="20170810 01:56:19.923"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.925" starttime="20170810 01:56:19.917"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.925" starttime="20170810 01:56:19.814"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:19.925" starttime="20170810 01:56:19.813"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:19.926" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170810 01:56:19.926" starttime="20170810 01:56:19.925"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:19.927" starttime="20170810 01:56:19.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170810 01:56:19.928" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170810 01:56:19.928" starttime="20170810 01:56:19.927"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170810 01:56:19.969" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170810 01:56:19.970" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170810 01:56:20.886" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170810 01:56:20.887" starttime="20170810 01:56:19.946"></status>
</kw>
<msg timestamp="20170810 01:56:20.887" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:20.889" level="INFO">${ret_values} = (u'-- Logs begin at Thu 2017-08-10 01:53:13 UTC, end at Thu 2017-08-10 01:56:24 UTC. --\nAug 10 01:53:13 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 10 01:53:13 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170810 01:56:20.889" starttime="20170810 01:56:19.928"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170810 01:56:20.890" level="INFO">${stdout} = -- Logs begin at Thu 2017-08-10 01:53:13 UTC, end at Thu 2017-08-10 01:56:24 UTC. --
Aug 10 01:53:13 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 10 01:53:13 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170810 01:56:20.890" starttime="20170810 01:56:20.889"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170810 01:56:20.891" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170810 01:56:20.891" starttime="20170810 01:56:20.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170810 01:56:20.902" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:20.902" starttime="20170810 01:56:20.901"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.902" starttime="20170810 01:56:20.900"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.902" starttime="20170810 01:56:20.891"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:19.926"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:19.925"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.598"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.597"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.596"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.596"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.595"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.582"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.579"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:20.903" starttime="20170810 01:56:18.579"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:20.905" starttime="20170810 01:56:20.905"></status>
</kw>
<msg timestamp="20170810 01:56:20.905" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:20.905" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 01:56:20.905" starttime="20170810 01:56:20.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:20.906" starttime="20170810 01:56:20.906"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:20.925" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:20.925" starttime="20170810 01:56:20.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:20.926" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:20.926" starttime="20170810 01:56:20.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:20.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:20.926" starttime="20170810 01:56:20.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:20.927" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:20.927" starttime="20170810 01:56:20.927"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.131" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:21.131" starttime="20170810 01:56:20.928"></status>
</kw>
<msg timestamp="20170810 01:56:21.131" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:21.131" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.132" starttime="20170810 01:56:20.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.132" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.132" starttime="20170810 01:56:21.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.133" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.133" starttime="20170810 01:56:21.133"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.133" starttime="20170810 01:56:20.922"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.133" starttime="20170810 01:56:20.922"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.134" starttime="20170810 01:56:20.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:21.134" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170810 01:56:21.134" starttime="20170810 01:56:21.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.135" starttime="20170810 01:56:21.134"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:21.251" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170810 01:56:21.251" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.251" starttime="20170810 01:56:21.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.252" starttime="20170810 01:56:21.251"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:21.252" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:21.252" starttime="20170810 01:56:21.252"></status>
</kw>
<msg timestamp="20170810 01:56:21.253" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.253" starttime="20170810 01:56:20.921"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.254" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.254" starttime="20170810 01:56:21.253"></status>
</kw>
<msg timestamp="20170810 01:56:21.254" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170810 01:56:21.254" starttime="20170810 01:56:21.253"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.255" starttime="20170810 01:56:21.254"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:56:21.255" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502330052285, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:21.256" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:56:21.256" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170810 01:56:21.256" starttime="20170810 01:56:21.255"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170810 01:56:21.257" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170810 01:56:21.257" starttime="20170810 01:56:21.256"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170810 01:56:21.258" level="INFO">${logpath} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_esel</msg>
<status status="PASS" endtime="20170810 01:56:21.258" starttime="20170810 01:56:21.257"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.259" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_esel"&gt;/home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/20170810015613140304_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:21.259" starttime="20170810 01:56:21.258"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.260" starttime="20170810 01:56:21.260"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170810 01:56:21.264" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170810 01:56:21.264" starttime="20170810 01:56:21.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170810 01:56:21.265" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170810 01:56:21.265" starttime="20170810 01:56:21.265"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170810 01:56:21.266" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170810 01:56:21.266" starttime="20170810 01:56:21.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170810 01:56:21.266" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170810 01:56:21.266" starttime="20170810 01:56:21.266"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.473" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170810 01:56:21.473" starttime="20170810 01:56:21.267"></status>
</kw>
<msg timestamp="20170810 01:56:21.473" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:21.473" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.473" starttime="20170810 01:56:21.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.474" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.474" starttime="20170810 01:56:21.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.475" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.475" starttime="20170810 01:56:21.474"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.475" starttime="20170810 01:56:21.263"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.475" starttime="20170810 01:56:21.263"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.475" starttime="20170810 01:56:21.262"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170810 01:56:21.476" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170810 01:56:21.476" starttime="20170810 01:56:21.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.477" starttime="20170810 01:56:21.476"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170810 01:56:21.559" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170810 01:56:21.559" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.560" starttime="20170810 01:56:21.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.561" starttime="20170810 01:56:21.560"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170810 01:56:21.561" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170810 01:56:21.561" starttime="20170810 01:56:21.561"></status>
</kw>
<msg timestamp="20170810 01:56:21.562" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.562" starttime="20170810 01:56:21.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170810 01:56:21.563" starttime="20170810 01:56:21.562"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170810 01:56:21.564" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170810 01:56:21.564" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170810 01:56:21.564" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170810 01:56:21.564" starttime="20170810 01:56:21.563"></status>
</kw>
<msg timestamp="20170810 01:56:21.564" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170810 01:56:21.564" starttime="20170810 01:56:21.260"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170810 01:56:21.565" level="INFO">Length is 0</msg>
<msg timestamp="20170810 01:56:21.565" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170810 01:56:21.565" starttime="20170810 01:56:21.565"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.566" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170810 01:56:21.567" starttime="20170810 01:56:21.566"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.567" starttime="20170810 01:56:21.259"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.567" starttime="20170810 01:56:21.259"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170810 01:56:21.588" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170810 01:56:21.596" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170810 01:56:21.596" starttime="20170810 01:56:21.567"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170810 01:56:21.601" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170810 01:56:21.601" starttime="20170810 01:56:21.600"></status>
</kw>
<msg timestamp="20170810 01:56:21.601" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170810 01:56:21.601" starttime="20170810 01:56:21.599"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170810 01:56:21.602" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170810 01:56:21.602" starttime="20170810 01:56:21.601"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.602" starttime="20170810 01:56:20.920"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.602" starttime="20170810 01:56:20.906"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.602" starttime="20170810 01:56:20.903"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.603" starttime="20170810 01:56:20.903"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.605" starttime="20170810 01:56:21.605"></status>
</kw>
<msg timestamp="20170810 01:56:21.606" level="INFO">${status} = PASS</msg>
<msg timestamp="20170810 01:56:21.606" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170810 01:56:21.606" starttime="20170810 01:56:21.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.606" starttime="20170810 01:56:21.606"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170810 01:56:21.623" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:21.623"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:21.622"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:21.607"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:21.603"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:21.603"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:14.185"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:14.182"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:14.182"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.624" starttime="20170810 01:56:14.182"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170810 01:56:21.703" starttime="20170810 01:56:21.631"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.703" starttime="20170810 01:56:21.625"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.703" starttime="20170810 01:56:14.181"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.704" starttime="20170810 01:56:10.090"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.704" starttime="20170810 01:56:10.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.705" starttime="20170810 01:56:21.705"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170810 01:56:21.706" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170810 01:56:21.706" starttime="20170810 01:56:21.706"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170810 01:56:21.707" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170810015613140304_UpdateBmc/20170810015613140304_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170810 01:56:21.707" starttime="20170810 01:56:21.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.708" starttime="20170810 01:56:21.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.708" starttime="20170810 01:56:21.708"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.709" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170810 01:56:21.709" starttime="20170810 01:56:21.709"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.710" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170810 01:56:21.710" starttime="20170810 01:56:21.710"></status>
</kw>
<msg timestamp="20170810 01:56:21.710" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170810 01:56:21.710" starttime="20170810 01:56:21.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.711" starttime="20170810 01:56:21.711"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170810 01:56:21.712" starttime="20170810 01:56:21.711"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 01:56:21.714" level="INFO">${cur_time} = 2017-08-10 01:56:21:713330</msg>
<status status="PASS" endtime="20170810 01:56:21.714" starttime="20170810 01:56:21.713"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170810 01:56:21.714" level="INFO">${cur_time} = 20170810015621713330</msg>
<status status="PASS" endtime="20170810 01:56:21.714" starttime="20170810 01:56:21.714"></status>
</kw>
<msg timestamp="20170810 01:56:21.714" level="INFO">${cur_time} = 20170810015621713330</msg>
<status status="PASS" endtime="20170810 01:56:21.714" starttime="20170810 01:56:21.712"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170810 01:56:21.716" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170810 01:56:21.716" starttime="20170810 01:56:21.715"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.716" starttime="20170810 01:56:21.705"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.716" starttime="20170810 01:56:09.789"></status>
</kw>
<status status="PASS" endtime="20170810 01:56:21.716" starttime="20170810 01:56:09.782"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170810 01:56:21.716" critical="yes" starttime="20170810 01:51:59.867">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170810 01:56:21.718" starttime="20170810 01:51:58.930"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170810 01:53:04.929" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffb42eb290&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170810 01:53:25.151" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffb42eb210&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
