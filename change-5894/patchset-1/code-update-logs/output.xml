<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170809 16:46:12.749" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/code_update.robot" id="s1" name="Code Update">
<test id="s1-t1" name="REST Host Code Update">
<kw type="setup" name="Code Update Setup">
<doc>Do code update test case setup.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'true' == '${DELETE_OLD_PNOR_IMAGES}'</arg>
<arg>Delete All PNOR Images</arg>
</arguments>
<kw name="Delete All Pnor Images" library="code_update">
<doc>Delete all PNOR images from the BMC.</doc>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/enumerate</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:13.331" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:13.331" starttime="20170809 16:46:13.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:13.332" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:13.332" starttime="20170809 16:46:13.331"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:13.333" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:13.333" starttime="20170809 16:46:13.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:13.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:13.333" starttime="20170809 16:46:13.333"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.516" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:13.516" starttime="20170809 16:46:13.334"></status>
</kw>
<msg timestamp="20170809 16:46:13.516" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:13.516" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.516" starttime="20170809 16:46:13.334"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.517" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.517" starttime="20170809 16:46:13.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.517" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.517" starttime="20170809 16:46:13.517"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.518" starttime="20170809 16:46:13.330"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.518" starttime="20170809 16:46:13.329"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.518" starttime="20170809 16:46:13.329"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:13.518" level="INFO">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20170809 16:46:13.518" starttime="20170809 16:46:13.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:13.519" starttime="20170809 16:46:13.519"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:13.681" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:46:13.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.681" starttime="20170809 16:46:13.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:13.682" starttime="20170809 16:46:13.681"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:13.682" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:13.682" starttime="20170809 16:46:13.682"></status>
</kw>
<msg timestamp="20170809 16:46:13.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.682" starttime="20170809 16:46:13.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.683" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.683" starttime="20170809 16:46:13.683"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:46:13.684" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/136cf504": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
    }, 
    "/xyz/openbmc_project/software/2b936eb2": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.8-203-g5f7170f"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:46:13.684" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:46:13.684" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/software/2b936eb2': {u'Path': u'', u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedA...</msg>
<status status="PASS" endtime="20170809 16:46:13.684" starttime="20170809 16:46:13.684"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.684" starttime="20170809 16:46:13.328"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
<arg>delete</arg>
<arg>data={"data":[]}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:13.701" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:46:13.701" starttime="20170809 16:46:13.701"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:13.704" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:13.704" starttime="20170809 16:46:13.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:13.705" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:13.705" starttime="20170809 16:46:13.705"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:13.706" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:13.706" starttime="20170809 16:46:13.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:13.706" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:13.706" starttime="20170809 16:46:13.706"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.884" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:13.884" starttime="20170809 16:46:13.707"></status>
</kw>
<msg timestamp="20170809 16:46:13.884" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:13.884" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.884" starttime="20170809 16:46:13.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.884" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.885" starttime="20170809 16:46:13.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:13.885" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:13.886" starttime="20170809 16:46:13.885"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.886" starttime="20170809 16:46:13.703"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.886" starttime="20170809 16:46:13.703"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:13.886" starttime="20170809 16:46:13.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:13.886" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504/action/delete</msg>
<status status="PASS" endtime="20170809 16:46:13.887" starttime="20170809 16:46:13.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:13.887" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:13.887" starttime="20170809 16:46:13.887"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:13.888" starttime="20170809 16:46:13.887"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:13.888" starttime="20170809 16:46:13.888"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:14.267" level="INFO">Post Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504/action/delete, data={"data":[]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 16:46:14.268" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:14.268" starttime="20170809 16:46:13.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:14.268" starttime="20170809 16:46:14.268"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:14.269" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:14.269" starttime="20170809 16:46:14.269"></status>
</kw>
<msg timestamp="20170809 16:46:14.269" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:14.269" starttime="20170809 16:46:13.701"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:14.269" starttime="20170809 16:46:13.700"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
<arg>delete</arg>
<arg>data={"data":[]}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:14.286" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:46:14.286" starttime="20170809 16:46:14.286"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:14.289" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:14.289" starttime="20170809 16:46:14.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:14.290" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:14.290" starttime="20170809 16:46:14.290"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:14.291" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:14.291" starttime="20170809 16:46:14.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:14.291" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:14.291" starttime="20170809 16:46:14.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:15.087" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:15.087" starttime="20170809 16:46:14.292"></status>
</kw>
<msg timestamp="20170809 16:46:15.088" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:15.088" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:15.088" starttime="20170809 16:46:14.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:15.088" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:15.088" starttime="20170809 16:46:15.088"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:15.089" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:15.089" starttime="20170809 16:46:15.089"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.089" starttime="20170809 16:46:14.288"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.089" starttime="20170809 16:46:14.288"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.089" starttime="20170809 16:46:14.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:15.090" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504/action/delete</msg>
<status status="PASS" endtime="20170809 16:46:15.090" starttime="20170809 16:46:15.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:15.091" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:15.091" starttime="20170809 16:46:15.090"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:15.091" starttime="20170809 16:46:15.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:15.092" starttime="20170809 16:46:15.092"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:15.137" level="INFO">Post Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504/action/delete, data={"data":[]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 16:46:15.137" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:15.137" starttime="20170809 16:46:15.092"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:15.138" starttime="20170809 16:46:15.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:15.138" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:15.139" starttime="20170809 16:46:15.138"></status>
</kw>
<msg timestamp="20170809 16:46:15.139" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:15.139" starttime="20170809 16:46:14.286"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.139" starttime="20170809 16:46:14.285"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.139" starttime="20170809 16:46:13.236"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.139" starttime="20170809 16:46:13.235"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:15.139" starttime="20170809 16:46:13.235"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<msg timestamp="20170809 16:46:15.140" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170809 16:46:15.140" starttime="20170809 16:46:15.140"></status>
</kw>
<kw name="Get Version Tar" library="test_uploadimage">
<doc>Read the image version from the MANIFEST inside the tarball.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${IMAGE_VERSION}</var>
</assign>
<msg timestamp="20170809 16:46:15.144" level="INFO">${IMAGE_VERSION} = IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87</msg>
<status status="PASS" endtime="20170809 16:46:15.144" starttime="20170809 16:46:15.140"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${IMAGE_FILE_PATH}</arg>
</arguments>
<assign>
<var>${image_data}</var>
</assign>
<msg timestamp="20170809 16:46:15.144" html="yes" level="INFO">Getting file '&lt;a href="file:///home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar"&gt;/home/fspcibld/witherspoon_910_golden.pnor.squashfs.tar&lt;/a&gt;'.</msg>
<msg timestamp="20170809 16:46:26.983" level="INFO">${image_data} = MANIFEST0000664075750014206770000000057213136125753011562 0...</msg>
<status status="PASS" endtime="20170809 16:46:26.983" starttime="20170809 16:46:15.144"></status>
</kw>
<kw name="Upload Image To BMC" library="rest_client">
<arguments>
<arg>/upload/image</arg>
<arg>data=${image_data}</arg>
</arguments>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:26.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:26.991" starttime="20170809 16:46:26.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:26.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:26.991" starttime="20170809 16:46:26.991"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:26.992" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:26.992" starttime="20170809 16:46:26.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:26.993" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:26.993" starttime="20170809 16:46:26.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:27.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:27.604" starttime="20170809 16:46:26.993"></status>
</kw>
<msg timestamp="20170809 16:46:27.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:27.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:27.605" starttime="20170809 16:46:26.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:27.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:27.605" starttime="20170809 16:46:27.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:27.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:27.606" starttime="20170809 16:46:27.605"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:27.606" starttime="20170809 16:46:26.989"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:27.606" starttime="20170809 16:46:26.989"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:27.606" starttime="20170809 16:46:26.988"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:27.607" level="INFO">${base_uri} = /upload/image</msg>
<status status="PASS" endtime="20170809 16:46:27.607" starttime="20170809 16:46:27.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/octet-stream</arg>
<arg>Accept=application/octet-stream</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:27.607" level="INFO">${headers} = {u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}</msg>
<status status="PASS" endtime="20170809 16:46:27.607" starttime="20170809 16:46:27.607"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:27.608" starttime="20170809 16:46:27.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:27.609" starttime="20170809 16:46:27.608"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:40.734" level="INFO">Post Request using : alias=openbmc, uri=/upload/image, data=&lt;application/octet-stream&gt;, headers={u'Content-Type': u'application/octet-stream', u'Accept': u'application/octet-stream'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170809 16:46:40.735" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:40.735" starttime="20170809 16:46:27.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:40.736" starttime="20170809 16:46:40.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${ret.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:40.736" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:40.736" starttime="20170809 16:46:40.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:40.737" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:40.737" starttime="20170809 16:46:40.737"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:40.737" starttime="20170809 16:46:26.984"></status>
</kw>
<kw name="Verify Image Upload" library="test_uploadimage">
<doc>Verify the image was uploaded correctly and that it created</doc>
<assign>
<var>${ret}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:46:40.742" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 16:46:40.743" starttime="20170809 16:46:40.742"></status>
</kw>
<msg timestamp="20170809 16:46:40.743" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 16:46:40.743" starttime="20170809 16:46:40.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:40.744" starttime="20170809 16:46:40.743"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:40.744" starttime="20170809 16:46:40.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:40.745" starttime="20170809 16:46:40.744"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:46:40.746" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 16:46:40.746" starttime="20170809 16:46:40.745"></status>
</kw>
<msg timestamp="20170809 16:46:40.746" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 16:46:40.746" starttime="20170809 16:46:40.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:40.748" starttime="20170809 16:46:40.747"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:40.748" starttime="20170809 16:46:40.747"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:40.748" starttime="20170809 16:46:40.746"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:46:40.748" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:46:43.709" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 16:46:43.709" starttime="20170809 16:46:40.748"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:43.709" starttime="20170809 16:46:40.741"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -d /tmp/images/*/</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:46:43.725" level="INFO">Executing command 'ls -d /tmp/images/*/'.</msg>
<msg timestamp="20170809 16:46:43.953" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:46:43.953" level="INFO">${stdout} = /tmp/images/136cf504/</msg>
<msg timestamp="20170809 16:46:43.954" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:46:43.954" starttime="20170809 16:46:43.724"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:46:43.954" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 16:46:43.954" starttime="20170809 16:46:43.954"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:43.954" starttime="20170809 16:46:43.724"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:46:43.959" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 16:46:43.959" starttime="20170809 16:46:43.959"></status>
</kw>
<msg timestamp="20170809 16:46:43.960" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 16:46:43.960" starttime="20170809 16:46:43.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:43.961" starttime="20170809 16:46:43.960"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:43.961" starttime="20170809 16:46:43.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:43.962" starttime="20170809 16:46:43.961"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:46:43.963" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 16:46:43.963" starttime="20170809 16:46:43.962"></status>
</kw>
<msg timestamp="20170809 16:46:43.963" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 16:46:43.963" starttime="20170809 16:46:43.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:43.964" starttime="20170809 16:46:43.964"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:43.965" starttime="20170809 16:46:43.964"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:43.965" starttime="20170809 16:46:43.963"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:46:43.965" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:46:47.012" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 16:46:47.013" starttime="20170809 16:46:43.965"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:47.013" starttime="20170809 16:46:43.958"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/136cf504/MANIFEST | grep "version="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:46:47.028" level="INFO">Executing command 'cat /tmp/images/136cf504/MANIFEST | grep "version="'.</msg>
<msg timestamp="20170809 16:46:47.196" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:46:47.197" level="INFO">${stdout} = version=IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87
extended_version=op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v...</msg>
<msg timestamp="20170809 16:46:47.197" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:46:47.197" starttime="20170809 16:46:47.028"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:46:47.197" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 16:46:47.197" starttime="20170809 16:46:47.197"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:47.197" starttime="20170809 16:46:47.027"></status>
</kw>
<msg timestamp="20170809 16:46:47.198" level="INFO">${version_id} = 136cf504</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:46:47.203" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 16:46:47.203" starttime="20170809 16:46:47.202"></status>
</kw>
<msg timestamp="20170809 16:46:47.203" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 16:46:47.203" starttime="20170809 16:46:47.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:47.204" starttime="20170809 16:46:47.204"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:47.204" starttime="20170809 16:46:47.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:47.205" starttime="20170809 16:46:47.204"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:46:47.206" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 16:46:47.206" starttime="20170809 16:46:47.205"></status>
</kw>
<msg timestamp="20170809 16:46:47.206" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 16:46:47.206" starttime="20170809 16:46:47.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:47.208" starttime="20170809 16:46:47.207"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:47.208" starttime="20170809 16:46:47.207"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:47.208" starttime="20170809 16:46:47.206"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:46:47.208" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:46:49.150" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170809 16:46:49.150" starttime="20170809 16:46:47.208"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:49.150" starttime="20170809 16:46:47.201"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:46:49.157" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 16:46:49.157" starttime="20170809 16:46:49.156"></status>
</kw>
<msg timestamp="20170809 16:46:49.157" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 16:46:49.157" starttime="20170809 16:46:49.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:49.158" starttime="20170809 16:46:49.158"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:49.158" starttime="20170809 16:46:49.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:49.159" starttime="20170809 16:46:49.159"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:46:49.160" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 16:46:49.160" starttime="20170809 16:46:49.160"></status>
</kw>
<msg timestamp="20170809 16:46:49.160" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 16:46:49.160" starttime="20170809 16:46:49.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:49.162" starttime="20170809 16:46:49.162"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:49.162" starttime="20170809 16:46:49.162"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:49.162" starttime="20170809 16:46:49.161"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:46:49.163" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:46:51.243" level="INFO">Read output:</msg>
<status status="PASS" endtime="20170809 16:46:51.243" starttime="20170809 16:46:49.163"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:51.243" starttime="20170809 16:46:49.155"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>cat /tmp/images/136cf504/MANIFEST | grep "purpose="</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:46:51.258" level="INFO">Executing command 'cat /tmp/images/136cf504/MANIFEST | grep "purpose="'.</msg>
<msg timestamp="20170809 16:46:51.336" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:46:51.336" level="INFO">${stdout} = purpose=xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<msg timestamp="20170809 16:46:51.336" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:46:51.336" starttime="20170809 16:46:51.258"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:46:51.337" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 16:46:51.337" starttime="20170809 16:46:51.337"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:51.337" starttime="20170809 16:46:51.258"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
<arg>Activation</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:51.356" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:51.357" starttime="20170809 16:46:51.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:51.358" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:51.358" starttime="20170809 16:46:51.357"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:51.359" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:51.359" starttime="20170809 16:46:51.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:51.360" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:51.360" starttime="20170809 16:46:51.359"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:51.542" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:51.542" starttime="20170809 16:46:51.361"></status>
</kw>
<msg timestamp="20170809 16:46:51.542" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:51.542" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:51.542" starttime="20170809 16:46:51.360"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:51.543" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:51.543" starttime="20170809 16:46:51.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:51.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:51.544" starttime="20170809 16:46:51.543"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:51.544" starttime="20170809 16:46:51.355"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:51.544" starttime="20170809 16:46:51.354"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:51.544" starttime="20170809 16:46:51.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:51.545" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504/attr/Activation</msg>
<status status="PASS" endtime="20170809 16:46:51.545" starttime="20170809 16:46:51.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:51.545" starttime="20170809 16:46:51.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:51.673" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504/attr/Activation, headers=None json=None</msg>
<msg timestamp="20170809 16:46:51.673" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:51.673" starttime="20170809 16:46:51.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:51.674" starttime="20170809 16:46:51.674"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:51.675" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:51.675" starttime="20170809 16:46:51.675"></status>
</kw>
<msg timestamp="20170809 16:46:51.675" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:51.675" starttime="20170809 16:46:51.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:51.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:51.676" starttime="20170809 16:46:51.675"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:46:51.676" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:46:51.676" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:46:51.676" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.Software.Activation.Activations.Ready'}</msg>
<status status="PASS" endtime="20170809 16:46:51.677" starttime="20170809 16:46:51.676"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:51.677" starttime="20170809 16:46:51.352"></status>
</kw>
<msg timestamp="20170809 16:46:51.677" level="INFO">${ret} = True</msg>
<status status="PASS" endtime="20170809 16:46:51.677" starttime="20170809 16:46:40.737"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:51.677" starttime="20170809 16:46:51.677"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:51.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:51.681" starttime="20170809 16:46:51.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:51.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:51.682" starttime="20170809 16:46:51.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:51.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:51.682" starttime="20170809 16:46:51.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:51.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:51.683" starttime="20170809 16:46:51.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.490" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:52.490" starttime="20170809 16:46:51.684"></status>
</kw>
<msg timestamp="20170809 16:46:52.490" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:52.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.490" starttime="20170809 16:46:51.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.491" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.491" starttime="20170809 16:46:52.491"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.492" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.492" starttime="20170809 16:46:52.491"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.492" starttime="20170809 16:46:51.680"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.492" starttime="20170809 16:46:51.679"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.492" starttime="20170809 16:46:51.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:52.493" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:46:52.493" starttime="20170809 16:46:52.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:52.493" starttime="20170809 16:46:52.493"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:52.624" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 16:46:52.624" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.624" starttime="20170809 16:46:52.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:52.625" starttime="20170809 16:46:52.625"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:52.626" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:52.626" starttime="20170809 16:46:52.625"></status>
</kw>
<msg timestamp="20170809 16:46:52.626" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.626" starttime="20170809 16:46:51.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.627" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.627" starttime="20170809 16:46:52.626"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:46:52.627" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Ready", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:46:52.627" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:46:52.628" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': ...</msg>
<status status="PASS" endtime="20170809 16:46:52.628" starttime="20170809 16:46:52.627"></status>
</kw>
<msg timestamp="20170809 16:46:52.628" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Ready', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpo...</msg>
<status status="PASS" endtime="20170809 16:46:52.628" starttime="20170809 16:46:51.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${READY}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.629" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.629" starttime="20170809 16:46:52.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${REQUESTED_ACTIVE}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170809 16:46:52.630" level="INFO">${args} = {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}</msg>
<status status="PASS" endtime="20170809 16:46:52.630" starttime="20170809 16:46:52.629"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
<arg>RequestedActivation</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:52.631" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:46:52.631" starttime="20170809 16:46:52.631"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:52.635" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:52.636" starttime="20170809 16:46:52.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:52.636" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:52.636" starttime="20170809 16:46:52.636"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:52.637" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:52.637" starttime="20170809 16:46:52.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:52.637" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:52.637" starttime="20170809 16:46:52.637"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.811" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:52.811" starttime="20170809 16:46:52.638"></status>
</kw>
<msg timestamp="20170809 16:46:52.812" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:52.812" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.812" starttime="20170809 16:46:52.638"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.812" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.812" starttime="20170809 16:46:52.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:52.813" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:52.814" starttime="20170809 16:46:52.813"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.814" starttime="20170809 16:46:52.633"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.814" starttime="20170809 16:46:52.633"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.814" starttime="20170809 16:46:52.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:52.814" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504/attr/RequestedActivation</msg>
<status status="PASS" endtime="20170809 16:46:52.814" starttime="20170809 16:46:52.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:52.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:52.815" starttime="20170809 16:46:52.815"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:52.816" starttime="20170809 16:46:52.815"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:46:52.817" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/software/136cf504/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'he...</msg>
<status status="PASS" endtime="20170809 16:46:52.817" starttime="20170809 16:46:52.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:46:52.818" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/software/136cf504/attr/RequestedActivation, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.Software.Activation.RequestedActivations.Active'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170809 16:46:52.818" starttime="20170809 16:46:52.818"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.818" starttime="20170809 16:46:52.817"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:52.819" starttime="20170809 16:46:52.816"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:53.776" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504/attr/RequestedActivation, data={"data": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170809 16:46:53.776" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:53.776" starttime="20170809 16:46:52.819"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170809 16:46:53.777" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 16:46:53.777" starttime="20170809 16:46:53.777"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170809 16:46:53.778" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170809 16:46:53.778" starttime="20170809 16:46:53.778"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:53.778" starttime="20170809 16:46:53.777"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:53.779" starttime="20170809 16:46:53.776"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:53.780" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:53.780" starttime="20170809 16:46:53.780"></status>
</kw>
<msg timestamp="20170809 16:46:53.780" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:53.780" starttime="20170809 16:46:52.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:53.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:53.781" starttime="20170809 16:46:53.781"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170809 16:46:53.782" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:46:53.782" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:46:53.782" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170809 16:46:53.782" starttime="20170809 16:46:53.781"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:53.782" starttime="20170809 16:46:52.630"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:53.786" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:53.786" starttime="20170809 16:46:53.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:53.787" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:53.787" starttime="20170809 16:46:53.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:53.788" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:53.788" starttime="20170809 16:46:53.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:53.788" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:53.788" starttime="20170809 16:46:53.788"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:53.963" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:53.963" starttime="20170809 16:46:53.789"></status>
</kw>
<msg timestamp="20170809 16:46:53.963" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:53.963" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:53.963" starttime="20170809 16:46:53.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:53.964" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:53.965" starttime="20170809 16:46:53.964"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:53.965" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:53.966" starttime="20170809 16:46:53.965"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:53.966" starttime="20170809 16:46:53.785"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:53.966" starttime="20170809 16:46:53.784"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:53.966" starttime="20170809 16:46:53.784"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:53.967" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:46:53.967" starttime="20170809 16:46:53.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:53.968" starttime="20170809 16:46:53.967"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:54.288" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 16:46:54.288" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:54.288" starttime="20170809 16:46:53.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:54.289" starttime="20170809 16:46:54.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:54.289" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:54.290" starttime="20170809 16:46:54.289"></status>
</kw>
<msg timestamp="20170809 16:46:54.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:54.290" starttime="20170809 16:46:53.783"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:54.290" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:54.291" starttime="20170809 16:46:54.290"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:46:54.291" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:46:54.291" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:46:54.291" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 16:46:54.291" starttime="20170809 16:46:54.291"></status>
</kw>
<msg timestamp="20170809 16:46:54.292" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpose': u'xyz.openbmc_project.Software.Version.Version...</msg>
<status status="PASS" endtime="20170809 16:46:54.292" starttime="20170809 16:46:53.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[RequestedActivation]</arg>
<arg>${REQUESTED_ACTIVE}</arg>
</arguments>
<msg timestamp="20170809 16:46:54.293" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:54.293" starttime="20170809 16:46:54.292"></status>
</kw>
<kw name="Wait For Activation State Change" library="code_update">
<doc>Wait for the current activation state of ${version_id} to</doc>
<arguments>
<arg>${version_id}</arg>
<arg>${ACTIVATING}</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:46:54.299" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 16:46:54.299" starttime="20170809 16:46:54.299"></status>
</kw>
<msg timestamp="20170809 16:46:54.299" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 16:46:54.299" starttime="20170809 16:46:54.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:54.301" starttime="20170809 16:46:54.301"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:54.301" starttime="20170809 16:46:54.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:54.302" starttime="20170809 16:46:54.301"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:46:54.303" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 16:46:54.303" starttime="20170809 16:46:54.302"></status>
</kw>
<msg timestamp="20170809 16:46:54.303" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 16:46:54.303" starttime="20170809 16:46:54.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:54.307" starttime="20170809 16:46:54.304"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:54.307" starttime="20170809 16:46:54.304"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:54.307" starttime="20170809 16:46:54.303"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:46:54.308" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:46:56.196" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 16:46:56.196" starttime="20170809 16:46:54.307"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:56.197" starttime="20170809 16:46:54.297"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:46:56.221" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:46:56.222" starttime="20170809 16:46:56.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:46:56.223" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:46:56.223" starttime="20170809 16:46:56.222"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:46:56.224" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:46:56.224" starttime="20170809 16:46:56.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:46:56.225" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:46:56.225" starttime="20170809 16:46:56.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:46:57.049" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:46:57.049" starttime="20170809 16:46:56.226"></status>
</kw>
<msg timestamp="20170809 16:46:57.049" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:46:57.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:57.050" starttime="20170809 16:46:56.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:46:57.050" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:57.050" starttime="20170809 16:46:57.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:57.051" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:57.051" starttime="20170809 16:46:57.051"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:57.051" starttime="20170809 16:46:56.220"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:57.051" starttime="20170809 16:46:56.219"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:57.051" starttime="20170809 16:46:56.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:46:57.052" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:46:57.052" starttime="20170809 16:46:57.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:57.053" starttime="20170809 16:46:57.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:46:57.206" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 16:46:57.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:57.206" starttime="20170809 16:46:57.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:46:57.207" starttime="20170809 16:46:57.206"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:46:57.207" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:46:57.207" starttime="20170809 16:46:57.207"></status>
</kw>
<msg timestamp="20170809 16:46:57.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:46:57.207" starttime="20170809 16:46:56.217"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:46:57.208" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:46:57.208" starttime="20170809 16:46:57.208"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:46:57.209" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Activating", 
    "ExtendedVersion": "op-build-v1.17-210-gbabb528,buildroot-2017.05-93-g9b91216,skiboot-v5.7,hostboot-f523eaa,linux-4.12.1-openpower1-p8927fdf,petitboot-v1.5.1-pce8abef,machine-xml-5575e7e,occ-ca84830,hostboot-binaries-c24fccd,capp-ucode-9c73e9f,sbe-02021c6-p6a0f00f", 
    "Path": "/tmp/images/136cf504", 
    "Progress": 10, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.Active", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87"
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:46:57.209" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:46:57.209" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Activating', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.17_1.87', u'Purpo...</msg>
<status status="PASS" endtime="20170809 16:46:57.209" starttime="20170809 16:46:57.208"></status>
</kw>
<status status="PASS" endtime="20170809 16:46:57.209" starttime="20170809 16:46:56.217"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/software/136cf504</arg>
</arguments>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:47:57.287" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:47:57.288" starttime="20170809 16:47:57.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:47:57.288" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:47:57.288" starttime="20170809 16:47:57.288"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:47:57.289" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:47:57.289" starttime="20170809 16:47:57.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:47:57.290" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:47:57.290" starttime="20170809 16:47:57.289"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.494" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:47:57.494" starttime="20170809 16:47:57.290"></status>
</kw>
<msg timestamp="20170809 16:47:57.494" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:47:57.494" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.494" starttime="20170809 16:47:57.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.495" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.495" starttime="20170809 16:47:57.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.496" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.496" starttime="20170809 16:47:57.495"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.496" starttime="20170809 16:47:57.286"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.496" starttime="20170809 16:47:57.286"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.496" starttime="20170809 16:47:57.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:47:57.497" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:47:57.497" starttime="20170809 16:47:57.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:57.497" starttime="20170809 16:47:57.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:47:57.650" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 16:47:57.650" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.650" starttime="20170809 16:47:57.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:57.650" starttime="20170809 16:47:57.650"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:47:57.651" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:47:57.651" starttime="20170809 16:47:57.651"></status>
</kw>
<msg timestamp="20170809 16:47:57.651" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.651" starttime="20170809 16:47:57.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.652" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.652" starttime="20170809 16:47:57.651"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:47:57.652" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Invalid", 
    "ExtendedVersion": "", 
    "Path": "", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": ""
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:47:57.652" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:47:57.653" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.V...</msg>
<status status="PASS" endtime="20170809 16:47:57.653" starttime="20170809 16:47:57.652"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.653" starttime="20170809 16:47:57.284"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.653" starttime="20170809 16:46:54.294"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}${version_id}</arg>
</arguments>
<assign>
<var>${software_state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:47:57.663" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:47:57.664" starttime="20170809 16:47:57.663"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:47:57.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:47:57.664" starttime="20170809 16:47:57.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:47:57.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:47:57.665" starttime="20170809 16:47:57.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:47:57.666" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:47:57.666" starttime="20170809 16:47:57.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.861" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:47:57.861" starttime="20170809 16:47:57.666"></status>
</kw>
<msg timestamp="20170809 16:47:57.861" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:47:57.861" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.861" starttime="20170809 16:47:57.666"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.862" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.862" starttime="20170809 16:47:57.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.863" starttime="20170809 16:47:57.862"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.863" starttime="20170809 16:47:57.662"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.863" starttime="20170809 16:47:57.662"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:57.863" starttime="20170809 16:47:57.655"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:47:57.864" level="INFO">${base_uri} = /xyz/openbmc_project/software/136cf504</msg>
<status status="PASS" endtime="20170809 16:47:57.864" starttime="20170809 16:47:57.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:57.864" starttime="20170809 16:47:57.864"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:47:57.989" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/136cf504, headers=None json=None</msg>
<msg timestamp="20170809 16:47:57.989" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.989" starttime="20170809 16:47:57.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:57.990" starttime="20170809 16:47:57.989"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:47:57.990" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:47:57.990" starttime="20170809 16:47:57.990"></status>
</kw>
<msg timestamp="20170809 16:47:57.990" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.990" starttime="20170809 16:47:57.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:47:57.991" starttime="20170809 16:47:57.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:47:57.992" level="INFO">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Invalid", 
    "ExtendedVersion": "", 
    "Path": "", 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": ""
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:47:57.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:47:57.992" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.V...</msg>
<status status="PASS" endtime="20170809 16:47:57.992" starttime="20170809 16:47:57.991"></status>
</kw>
<msg timestamp="20170809 16:47:57.992" level="INFO">${software_state} = {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Invalid', u'Version': u'', u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'ExtendedVersion': u'', u'Pat...</msg>
<status status="PASS" endtime="20170809 16:47:57.992" starttime="20170809 16:47:57.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>&amp;{software_state}[Activation]</arg>
<arg>${ACTIVE}</arg>
</arguments>
<msg timestamp="20170809 16:47:57.993" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<msg timestamp="20170809 16:47:57.993" level="FAIL">xyz.openbmc_project.Software.Activation.Activations.Invalid != xyz.openbmc_project.Software.Activation.Activations.Active</msg>
<status status="FAIL" endtime="20170809 16:47:57.993" starttime="20170809 16:47:57.993"></status>
</kw>
<kw type="teardown" name="Code Update Teardown">
<doc>Do code update test case teardown.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170809 16:47:58.001" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170809 16:47:58.001" starttime="20170809 16:47:58.000"></status>
</kw>
<msg timestamp="20170809 16:47:58.001" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170809 16:47:58.001" starttime="20170809 16:47:58.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:58.003" starttime="20170809 16:47:58.002"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:58.003" starttime="20170809 16:47:58.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:58.004" starttime="20170809 16:47:58.003"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170809 16:47:58.005" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170809 16:47:58.006" starttime="20170809 16:47:58.005"></status>
</kw>
<msg timestamp="20170809 16:47:58.006" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170809 16:47:58.006" starttime="20170809 16:47:58.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:47:58.008" starttime="20170809 16:47:58.008"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:58.008" starttime="20170809 16:47:58.007"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:58.008" starttime="20170809 16:47:58.006"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170809 16:47:58.009" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:47:59.704" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170809 16:47:59.704" starttime="20170809 16:47:58.009"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:59.704" starttime="20170809 16:47:57.999"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -rf /tmp/images/*</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:47:59.705" level="INFO">Executing command 'rm -rf /tmp/images/*'.</msg>
<msg timestamp="20170809 16:47:59.774" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:47:59.774" level="INFO">${stdout} = </msg>
<msg timestamp="20170809 16:47:59.774" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:47:59.775" starttime="20170809 16:47:59.705"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:47:59.775" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 16:47:59.775" starttime="20170809 16:47:59.775"></status>
</kw>
<status status="PASS" endtime="20170809 16:47:59.775" starttime="20170809 16:47:59.704"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170809 16:48:00.051" starttime="20170809 16:47:59.776"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:00.056" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:00.056" starttime="20170809 16:48:00.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:00.057" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:00.057" starttime="20170809 16:48:00.056"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:00.058" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:00.058" starttime="20170809 16:48:00.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:00.058" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:00.058" starttime="20170809 16:48:00.058"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:00.432" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:00.432" starttime="20170809 16:48:00.059"></status>
</kw>
<msg timestamp="20170809 16:48:00.432" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:00.432" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:00.432" starttime="20170809 16:48:00.059"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:00.433" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:00.433" starttime="20170809 16:48:00.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:00.434" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:00.434" starttime="20170809 16:48:00.433"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:00.434" starttime="20170809 16:48:00.055"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:00.434" starttime="20170809 16:48:00.054"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:00.434" starttime="20170809 16:48:00.054"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:00.435" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170809 16:48:00.435" starttime="20170809 16:48:00.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:00.435" starttime="20170809 16:48:00.435"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:00.538" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170809 16:48:00.538" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:00.538" starttime="20170809 16:48:00.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:00.539" starttime="20170809 16:48:00.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:00.540" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:00.540" starttime="20170809 16:48:00.539"></status>
</kw>
<msg timestamp="20170809 16:48:00.540" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:00.540" starttime="20170809 16:48:00.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:00.541" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:00.541" starttime="20170809 16:48:00.540"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:48:00.541" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:48:00.541" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:48:00.541" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170809 16:48:00.541" starttime="20170809 16:48:00.541"></status>
</kw>
<msg timestamp="20170809 16:48:00.542" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 16:48:00.542" starttime="20170809 16:48:00.053"></status>
</kw>
<msg timestamp="20170809 16:48:00.542" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170809 16:48:00.542" starttime="20170809 16:48:00.052"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170809 16:48:00.543" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170809 16:48:00.543" starttime="20170809 16:48:00.543"></status>
</kw>
<msg timestamp="20170809 16:48:00.543" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 16:48:00.543" starttime="20170809 16:48:00.542"></status>
</kw>
<msg timestamp="20170809 16:48:00.544" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 16:48:00.544" starttime="20170809 16:48:00.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170809 16:48:00.562" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170809 16:48:00.562" starttime="20170809 16:48:00.562"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170809 16:48:00.574" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:48:03.581" level="INFO">${RC} = 0</msg>
<msg timestamp="20170809 16:48:03.581" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.58 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.33 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170809 16:48:03.582" starttime="20170809 16:48:00.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.600" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.58 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=1.33 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.30 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.623 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.623/1.211/1.586/0.356 ms</msg>
<status status="PASS" endtime="20170809 16:48:03.600" starttime="20170809 16:48:03.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:03.601" starttime="20170809 16:48:03.600"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.603" starttime="20170809 16:48:00.561"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:48:03.634" level="INFO">${cur_time} = 2017-08-09 16:48:03:633912</msg>
<status status="PASS" endtime="20170809 16:48:03.634" starttime="20170809 16:48:03.633"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:48:03.635" level="INFO">${cur_time} = 20170809164803633912</msg>
<status status="PASS" endtime="20170809 16:48:03.635" starttime="20170809 16:48:03.635"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.635" starttime="20170809 16:48:03.632"></status>
</kw>
<msg timestamp="20170809 16:48:03.640" level="INFO">${FFDC_TIME} = 20170809164803633912</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 16:48:03.650" level="INFO">${suite_name} = CodeUpdate</msg>
<status status="PASS" endtime="20170809 16:48:03.650" starttime="20170809 16:48:03.650"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170809 16:48:03.651" level="INFO">${suite_name} = 20170809164803633912_CodeUpdate</msg>
<status status="PASS" endtime="20170809 16:48:03.651" starttime="20170809 16:48:03.650"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 16:48:03.651" level="INFO">${test_name} = RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170809 16:48:03.651" starttime="20170809 16:48:03.651"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170809 16:48:03.652" level="INFO">${test_name} = 20170809164803633912_RESTHostCodeUpdate</msg>
<status status="PASS" endtime="20170809 16:48:03.652" starttime="20170809 16:48:03.652"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.652" starttime="20170809 16:48:03.649"></status>
</kw>
<msg timestamp="20170809 16:48:03.657" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/</msg>
<msg timestamp="20170809 16:48:03.661" level="INFO">${FFDC_PREFIX} = 20170809164803633912_</msg>
<msg timestamp="20170809 16:48:03.680" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/</arg>
</arguments>
<msg timestamp="20170809 16:48:03.681" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.681" starttime="20170809 16:48:03.680"></status>
</kw>
<msg timestamp="20170809 16:48:03.685" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.704" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.704" starttime="20170809 16:48:03.704"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.704" starttime="20170809 16:48:03.703"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.706" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.706" starttime="20170809 16:48:03.705"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.706" starttime="20170809 16:48:03.704"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.707" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.707" starttime="20170809 16:48:03.707"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.707" starttime="20170809 16:48:03.706"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.708" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.708" starttime="20170809 16:48:03.708"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.708" starttime="20170809 16:48:03.707"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.710" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.710" starttime="20170809 16:48:03.709"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.710" starttime="20170809 16:48:03.709"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.711" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.711" starttime="20170809 16:48:03.711"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.711" starttime="20170809 16:48:03.710"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.713" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.713" starttime="20170809 16:48:03.712"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.713" starttime="20170809 16:48:03.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.714" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.714" starttime="20170809 16:48:03.714"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.714" starttime="20170809 16:48:03.713"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.715" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.715" starttime="20170809 16:48:03.715"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.715" starttime="20170809 16:48:03.714"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.717" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.717" starttime="20170809 16:48:03.717"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.717" starttime="20170809 16:48:03.716"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.718" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.718" starttime="20170809 16:48:03.718"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.718" starttime="20170809 16:48:03.717"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.719" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.720" starttime="20170809 16:48:03.719"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.720" starttime="20170809 16:48:03.718"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:03.721" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:03.721" starttime="20170809 16:48:03.720"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:03.721" starttime="20170809 16:48:03.720"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 16:48:03.747" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:03.747" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170809 16:48:04.487" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170809 16:48:04.488" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170809 16:48:04.555" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170809 16:48:04.564" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170809 16:48:04.564" level="INFO">${stderr} = </msg>
<msg timestamp="20170809 16:48:04.564" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170809 16:48:04.564" starttime="20170809 16:48:03.722"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.564" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170809 16:48:04.564" starttime="20170809 16:48:04.564"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.565" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170809 16:48:04.565" starttime="20170809 16:48:04.565"></status>
</kw>
<msg timestamp="20170809 16:48:04.565" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170809 16:48:04.565" starttime="20170809 16:48:03.721"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.566" starttime="20170809 16:48:04.566"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.567" starttime="20170809 16:48:04.565"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.567" starttime="20170809 16:48:03.716"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.568" starttime="20170809 16:48:04.568"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.568" starttime="20170809 16:48:04.567"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:48:04.569" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170809 16:48:04.569" starttime="20170809 16:48:04.568"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.570" starttime="20170809 16:48:04.570"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.570" starttime="20170809 16:48:04.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.572" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.572" starttime="20170809 16:48:04.571"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.572" starttime="20170809 16:48:04.571"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.572" starttime="20170809 16:48:04.569"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.573" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.573" starttime="20170809 16:48:04.573"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.573" starttime="20170809 16:48:04.572"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.574" starttime="20170809 16:48:04.574"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.575" starttime="20170809 16:48:04.574"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.575" starttime="20170809 16:48:04.572"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.576" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.576" starttime="20170809 16:48:04.576"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.576" starttime="20170809 16:48:04.575"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.577" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.577" starttime="20170809 16:48:04.577"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.577" starttime="20170809 16:48:04.576"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.577" starttime="20170809 16:48:04.575"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.577" starttime="20170809 16:48:04.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.578" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.579" starttime="20170809 16:48:04.578"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.579" starttime="20170809 16:48:04.578"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.579" starttime="20170809 16:48:03.703"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:48:04.584" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170809 16:48:04.585" starttime="20170809 16:48:04.584"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170809 16:48:04.586" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170809 16:48:04.586" starttime="20170809 16:48:04.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:04.587" starttime="20170809 16:48:04.587"></status>
</kw>
<msg timestamp="20170809 16:48:04.587" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170809 16:48:04.587" starttime="20170809 16:48:04.586"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:04.589" starttime="20170809 16:48:04.589"></status>
</kw>
<msg timestamp="20170809 16:48:04.589" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:04.589" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 16:48:04.589" starttime="20170809 16:48:04.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:04.590" starttime="20170809 16:48:04.590"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:48:04.612" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170809 16:48:04.612" starttime="20170809 16:48:04.612"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:48:04.614" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170809 16:48:04.614" starttime="20170809 16:48:04.613"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.619" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170809 16:48:04.619" starttime="20170809 16:48:04.614"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.622" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.622" starttime="20170809 16:48:04.622"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.622" starttime="20170809 16:48:04.621"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.623" starttime="20170809 16:48:04.623"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.624" starttime="20170809 16:48:04.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.625" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.625" starttime="20170809 16:48:04.624"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.625" starttime="20170809 16:48:04.624"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:04.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:04.626" starttime="20170809 16:48:04.626"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.626" starttime="20170809 16:48:04.625"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.626" starttime="20170809 16:48:04.621"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:04.626" starttime="20170809 16:48:04.620"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:04.627" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:04.627" starttime="20170809 16:48:04.627"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:04.688" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:04.688" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170809 16:48:06.119" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:06.119" starttime="20170809 16:48:04.653"></status>
</kw>
<msg timestamp="20170809 16:48:06.119" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.119" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170809 16:48:06.119" starttime="20170809 16:48:04.627"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:06.120" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170809 16:48:06.120" starttime="20170809 16:48:06.119"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:06.120" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:06.120" starttime="20170809 16:48:06.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.127" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:06.126"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:06.126"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:06.121"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:04.619"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:04.619"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:04.619"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:04.613"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.127" starttime="20170809 16:48:04.613"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:48:06.129" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170809 16:48:06.129" starttime="20170809 16:48:06.128"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.129" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170809 16:48:06.130" starttime="20170809 16:48:06.129"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.133" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.133" starttime="20170809 16:48:06.132"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.133" starttime="20170809 16:48:06.132"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.134" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.134" starttime="20170809 16:48:06.134"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.134" starttime="20170809 16:48:06.133"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.135" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.135" starttime="20170809 16:48:06.135"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.135" starttime="20170809 16:48:06.134"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.137" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.137" starttime="20170809 16:48:06.136"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.137" starttime="20170809 16:48:06.136"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.137" starttime="20170809 16:48:06.131"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.137" starttime="20170809 16:48:06.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:06.138" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:06.138" starttime="20170809 16:48:06.137"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:06.195" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:06.196" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170809 16:48:06.243" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:06.243" starttime="20170809 16:48:06.164"></status>
</kw>
<msg timestamp="20170809 16:48:06.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.244" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-203"\nVERSION_ID="v1.99.8-203-g5f7170f"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170809 16:48:06.244" starttime="20170809 16:48:06.138"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:06.244" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-203"
VERSION_ID="v1.99.8-203-g5f7170f"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170809 16:48:06.244" starttime="20170809 16:48:06.244"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:06.245" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:06.245" starttime="20170809 16:48:06.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.251" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.251" starttime="20170809 16:48:06.251"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.250"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.245"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.130"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.130"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.130"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.128"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.252" starttime="20170809 16:48:06.128"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:48:06.253" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170809 16:48:06.253" starttime="20170809 16:48:06.253"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.254" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170809 16:48:06.254" starttime="20170809 16:48:06.253"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.257" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.257" starttime="20170809 16:48:06.256"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.257" starttime="20170809 16:48:06.256"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.258" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.258" starttime="20170809 16:48:06.258"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.258" starttime="20170809 16:48:06.257"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.259" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.260" starttime="20170809 16:48:06.259"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.260" starttime="20170809 16:48:06.259"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.261" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.261" starttime="20170809 16:48:06.260"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.261" starttime="20170809 16:48:06.260"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.261" starttime="20170809 16:48:06.255"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.261" starttime="20170809 16:48:06.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:06.262" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:06.262" starttime="20170809 16:48:06.261"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:06.320" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:06.320" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170809 16:48:06.376" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:06.376" starttime="20170809 16:48:06.289"></status>
</kw>
<msg timestamp="20170809 16:48:06.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.376" level="INFO">${ret_values} = (u' 16:48:11 up 4 min,  load average: 2.28, 2.49, 1.13', u'', 0)</msg>
<status status="PASS" endtime="20170809 16:48:06.376" starttime="20170809 16:48:06.262"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:06.377" level="INFO">${stdout} =  16:48:11 up 4 min,  load average: 2.28, 2.49, 1.13</msg>
<status status="PASS" endtime="20170809 16:48:06.377" starttime="20170809 16:48:06.376"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:06.377" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:06.377" starttime="20170809 16:48:06.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.384" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.384" starttime="20170809 16:48:06.383"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.384" starttime="20170809 16:48:06.383"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.384" starttime="20170809 16:48:06.378"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.384" starttime="20170809 16:48:06.254"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.384" starttime="20170809 16:48:06.254"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.387" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.387" starttime="20170809 16:48:06.387"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.387" starttime="20170809 16:48:06.386"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.388" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.389" starttime="20170809 16:48:06.388"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.389" starttime="20170809 16:48:06.387"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.390" starttime="20170809 16:48:06.389"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.390" starttime="20170809 16:48:06.389"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.391" starttime="20170809 16:48:06.391"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.391" starttime="20170809 16:48:06.390"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.391" starttime="20170809 16:48:06.386"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.391" starttime="20170809 16:48:06.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:06.392" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:06.392" starttime="20170809 16:48:06.392"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:06.450" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:06.451" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170809 16:48:06.508" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:06.508" starttime="20170809 16:48:06.419"></status>
</kw>
<msg timestamp="20170809 16:48:06.508" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.508" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170809 16:48:06.509" starttime="20170809 16:48:06.392"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:06.510" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.1...</msg>
<status status="PASS" endtime="20170809 16:48:06.510" starttime="20170809 16:48:06.509"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:06.510" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:06.511" starttime="20170809 16:48:06.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.520" starttime="20170809 16:48:06.520"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.520" starttime="20170809 16:48:06.519"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.520" starttime="20170809 16:48:06.511"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.521" starttime="20170809 16:48:06.384"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.521" starttime="20170809 16:48:06.384"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.523" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.524" starttime="20170809 16:48:06.523"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.524" starttime="20170809 16:48:06.523"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.525" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.525" starttime="20170809 16:48:06.525"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.525" starttime="20170809 16:48:06.524"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.526" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.526" starttime="20170809 16:48:06.526"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.526" starttime="20170809 16:48:06.525"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.527" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.527" starttime="20170809 16:48:06.527"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.528" starttime="20170809 16:48:06.526"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.528" starttime="20170809 16:48:06.522"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.528" starttime="20170809 16:48:06.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:06.528" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:06.529" starttime="20170809 16:48:06.528"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:06.586" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:06.587" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170809 16:48:06.654" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:06.654" starttime="20170809 16:48:06.555"></status>
</kw>
<msg timestamp="20170809 16:48:06.654" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.655" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 14:31:18 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170809 16:48:06.655" starttime="20170809 16:48:06.529"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:06.655" level="INFO">${stdout} = Linux witherspoon 4.10.17-baeb50beb784ac5993d2bfb5d06d909971b60506 #1 Wed Aug 9 14:31:18 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170809 16:48:06.655" starttime="20170809 16:48:06.655"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:06.656" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:06.656" starttime="20170809 16:48:06.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.662" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:06.662" starttime="20170809 16:48:06.662"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.662" starttime="20170809 16:48:06.661"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:06.656"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:06.521"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:06.521"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:06.254"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:06.252"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:06.252"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:04.613"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:04.612"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:04.590"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:04.588"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.663" starttime="20170809 16:48:04.587"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:06.665" starttime="20170809 16:48:06.665"></status>
</kw>
<msg timestamp="20170809 16:48:06.665" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.665" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 16:48:06.665" starttime="20170809 16:48:06.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:06.666" starttime="20170809 16:48:06.666"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:48:06.688" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170809 16:48:06.688" starttime="20170809 16:48:06.688"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:48:06.690" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170809 16:48:06.690" starttime="20170809 16:48:06.689"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:06.690" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_elog.txt</msg>
<status status="PASS" endtime="20170809 16:48:06.691" starttime="20170809 16:48:06.690"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:06.693" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:06.694" starttime="20170809 16:48:06.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:06.695" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:06.695" starttime="20170809 16:48:06.695"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:06.696" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:06.696" starttime="20170809 16:48:06.695"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:06.696" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:06.696" starttime="20170809 16:48:06.696"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.900" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:06.900" starttime="20170809 16:48:06.697"></status>
</kw>
<msg timestamp="20170809 16:48:06.900" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:06.900" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:06.900" starttime="20170809 16:48:06.697"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.901" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:06.901" starttime="20170809 16:48:06.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:06.902" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:06.902" starttime="20170809 16:48:06.902"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.902" starttime="20170809 16:48:06.693"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.902" starttime="20170809 16:48:06.692"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:06.902" starttime="20170809 16:48:06.691"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:06.903" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170809 16:48:06.903" starttime="20170809 16:48:06.903"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:06.904" starttime="20170809 16:48:06.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:07.031" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:48:07.031" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.031" starttime="20170809 16:48:06.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.032" starttime="20170809 16:48:07.032"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:07.033" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:07.033" starttime="20170809 16:48:07.032"></status>
</kw>
<msg timestamp="20170809 16:48:07.033" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.033" starttime="20170809 16:48:06.691"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.034" starttime="20170809 16:48:07.034"></status>
</kw>
<msg timestamp="20170809 16:48:07.034" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 16:48:07.034" starttime="20170809 16:48:07.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.035" starttime="20170809 16:48:07.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 16:48:07.036" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502297193686, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:48:07.036" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 16:48:07.036" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [],
            "Id": 2,
            "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFile...</msg>
<status status="PASS" endtime="20170809 16:48:07.036" starttime="20170809 16:48:07.035"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.037" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_elog.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:07.037" starttime="20170809 16:48:07.037"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.037" starttime="20170809 16:48:07.036"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.038" starttime="20170809 16:48:06.690"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:07.038" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170809 16:48:07.038" starttime="20170809 16:48:07.038"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:07.042" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:07.043" starttime="20170809 16:48:07.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:07.043" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:07.043" starttime="20170809 16:48:07.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:07.044" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:07.044" starttime="20170809 16:48:07.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:07.045" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:07.045" starttime="20170809 16:48:07.044"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.257" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:07.257" starttime="20170809 16:48:07.045"></status>
</kw>
<msg timestamp="20170809 16:48:07.257" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:07.257" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.257" starttime="20170809 16:48:07.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.258" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.258" starttime="20170809 16:48:07.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.259" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.259" starttime="20170809 16:48:07.258"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.259" starttime="20170809 16:48:07.041"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.259" starttime="20170809 16:48:07.041"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.259" starttime="20170809 16:48:07.040"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:07.260" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170809 16:48:07.260" starttime="20170809 16:48:07.259"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.260" starttime="20170809 16:48:07.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:07.441" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:48:07.441" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.441" starttime="20170809 16:48:07.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.442" starttime="20170809 16:48:07.441"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:07.442" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:07.442" starttime="20170809 16:48:07.442"></status>
</kw>
<msg timestamp="20170809 16:48:07.442" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.443" starttime="20170809 16:48:07.038"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.444" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.444" starttime="20170809 16:48:07.443"></status>
</kw>
<msg timestamp="20170809 16:48:07.444" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 16:48:07.444" starttime="20170809 16:48:07.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.444" starttime="20170809 16:48:07.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 16:48:07.445" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:48:07.445" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 16:48:07.445" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170809 16:48:07.445" starttime="20170809 16:48:07.445"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.447" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:07.447" starttime="20170809 16:48:07.446"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.447" starttime="20170809 16:48:07.446"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.447" starttime="20170809 16:48:07.038"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:07.448" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170809 16:48:07.448" starttime="20170809 16:48:07.447"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:07.451" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:07.451" starttime="20170809 16:48:07.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:07.452" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:07.452" starttime="20170809 16:48:07.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:07.453" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:07.453" starttime="20170809 16:48:07.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:07.454" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:07.454" starttime="20170809 16:48:07.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.629" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:07.629" starttime="20170809 16:48:07.454"></status>
</kw>
<msg timestamp="20170809 16:48:07.629" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:07.629" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.630" starttime="20170809 16:48:07.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.630" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.630" starttime="20170809 16:48:07.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.631" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.631" starttime="20170809 16:48:07.630"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.631" starttime="20170809 16:48:07.450"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.631" starttime="20170809 16:48:07.449"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.631" starttime="20170809 16:48:07.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:07.632" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170809 16:48:07.632" starttime="20170809 16:48:07.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.633" starttime="20170809 16:48:07.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:07.840" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:48:07.841" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.841" starttime="20170809 16:48:07.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.841" starttime="20170809 16:48:07.841"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:07.842" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:07.842" starttime="20170809 16:48:07.842"></status>
</kw>
<msg timestamp="20170809 16:48:07.842" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.842" starttime="20170809 16:48:07.448"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.843" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:07.843" starttime="20170809 16:48:07.843"></status>
</kw>
<msg timestamp="20170809 16:48:07.843" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 16:48:07.843" starttime="20170809 16:48:07.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:07.844" starttime="20170809 16:48:07.844"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170809 16:48:07.845" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:48:07.845" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170809 16:48:07.845" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 0
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170809 16:48:07.845" starttime="20170809 16:48:07.844"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:07.846" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:07.846" starttime="20170809 16:48:07.846"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.846" starttime="20170809 16:48:07.845"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:07.846" starttime="20170809 16:48:07.447"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:07.847" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_led.txt</msg>
<status status="PASS" endtime="20170809 16:48:07.847" starttime="20170809 16:48:07.847"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:07.850" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:07.851" starttime="20170809 16:48:07.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:07.851" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:07.851" starttime="20170809 16:48:07.851"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:07.852" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:07.852" starttime="20170809 16:48:07.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:07.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:07.853" starttime="20170809 16:48:07.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.062" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:08.062" starttime="20170809 16:48:07.854"></status>
</kw>
<msg timestamp="20170809 16:48:08.063" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:08.063" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.063" starttime="20170809 16:48:07.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.063" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.063" starttime="20170809 16:48:08.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.064" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.064" starttime="20170809 16:48:08.064"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.064" starttime="20170809 16:48:07.849"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.064" starttime="20170809 16:48:07.849"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.064" starttime="20170809 16:48:07.848"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:08.065" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170809 16:48:08.065" starttime="20170809 16:48:08.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.066" starttime="20170809 16:48:08.065"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:08.108" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:48:08.108" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.108" starttime="20170809 16:48:08.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.109" starttime="20170809 16:48:08.108"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:08.109" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:08.109" starttime="20170809 16:48:08.109"></status>
</kw>
<msg timestamp="20170809 16:48:08.109" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.109" starttime="20170809 16:48:07.847"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 16:48:08.111" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 16:48:08.111" starttime="20170809 16:48:08.110"></status>
</kw>
<msg timestamp="20170809 16:48:08.111" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 16:48:08.111" starttime="20170809 16:48:08.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 16:48:08.112" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 16:48:08.112" starttime="20170809 16:48:08.112"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.112" starttime="20170809 16:48:08.111"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.112" starttime="20170809 16:48:07.847"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:08.113" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170809 16:48:08.113" starttime="20170809 16:48:08.112"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:08.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:08.116" starttime="20170809 16:48:08.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:08.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:08.117" starttime="20170809 16:48:08.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:08.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:08.118" starttime="20170809 16:48:08.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:08.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:08.118" starttime="20170809 16:48:08.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.306" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:08.306" starttime="20170809 16:48:08.119"></status>
</kw>
<msg timestamp="20170809 16:48:08.306" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:08.306" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.306" starttime="20170809 16:48:08.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.307" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.307" starttime="20170809 16:48:08.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.308" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.308" starttime="20170809 16:48:08.307"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.308" starttime="20170809 16:48:08.115"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.308" starttime="20170809 16:48:08.114"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.308" starttime="20170809 16:48:08.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:08.309" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170809 16:48:08.309" starttime="20170809 16:48:08.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.310" starttime="20170809 16:48:08.309"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:08.386" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:48:08.387" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.387" starttime="20170809 16:48:08.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.387" starttime="20170809 16:48:08.387"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:08.388" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:08.388" starttime="20170809 16:48:08.388"></status>
</kw>
<msg timestamp="20170809 16:48:08.388" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:08.388" starttime="20170809 16:48:08.113"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:08.389" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170809 16:48:08.389" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170809 16:48:08.389" starttime="20170809 16:48:08.389"></status>
</kw>
<msg timestamp="20170809 16:48:08.389" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 16:48:08.389" starttime="20170809 16:48:08.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170809 16:48:08.390" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:08.390"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:08.390"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:08.112"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.690"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.689"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.689"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.688"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.688"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.666"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.664"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:08.391" starttime="20170809 16:48:06.663"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.393" starttime="20170809 16:48:08.393"></status>
</kw>
<msg timestamp="20170809 16:48:08.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:08.393" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 16:48:08.393" starttime="20170809 16:48:08.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.394" starttime="20170809 16:48:08.394"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170809 16:48:08.444" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:08.444" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170809 16:48:08.491" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170809 16:48:08.502" level="INFO">${core_files} = None</msg>
<msg timestamp="20170809 16:48:08.502" level="INFO">${stderr} = None</msg>
<msg timestamp="20170809 16:48:08.502" level="INFO">${rc} = None</msg>
<msg timestamp="20170809 16:48:08.502" level="FAIL">#(UTC) 2017/08/09 16:48:08.500685 -    3.937459 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170809 16:48:08.502" starttime="20170809 16:48:08.416"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170809 16:48:08.503" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170809 16:48:08.503" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170809 16:48:08.503" starttime="20170809 16:48:08.503"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:08.518" starttime="20170809 16:48:08.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:09.217" starttime="20170809 16:48:08.519"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.218" starttime="20170809 16:48:08.519"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.218" starttime="20170809 16:48:08.511"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.218" starttime="20170809 16:48:08.503"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170809 16:48:09.218" starttime="20170809 16:48:09.218"></status>
</kw>
<status status="FAIL" endtime="20170809 16:48:09.218" starttime="20170809 16:48:08.416"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.218" starttime="20170809 16:48:08.394"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.218" starttime="20170809 16:48:08.391"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.219" starttime="20170809 16:48:08.391"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:09.221" starttime="20170809 16:48:09.220"></status>
</kw>
<msg timestamp="20170809 16:48:09.221" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:09.221" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 16:48:09.221" starttime="20170809 16:48:09.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:09.221" starttime="20170809 16:48:09.221"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170809 16:48:09.244" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170809 16:48:09.244" starttime="20170809 16:48:09.244"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170809 16:48:09.245" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170809 16:48:09.245" starttime="20170809 16:48:09.245"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:09.246" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170809 16:48:09.246" starttime="20170809 16:48:09.246"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:09.248" starttime="20170809 16:48:09.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:09.248" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:09.248" starttime="20170809 16:48:09.248"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:09.305" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:09.306" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170809 16:48:09.818" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:09.818" starttime="20170809 16:48:09.274"></status>
</kw>
<msg timestamp="20170809 16:48:09.819" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:09.820" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  9 16:48 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  9 16:48 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170809 16:48:09.820" starttime="20170809 16:48:09.249"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:09.820" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  9 16:48 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  9 16:48 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170809 16:48:09.821" starttime="20170809 16:48:09.820"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:09.821" level="INFO">${stderr} = ls: /proc/1399/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170809 16:48:09.821" starttime="20170809 16:48:09.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:09.828" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:09.828" starttime="20170809 16:48:09.828"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.829" starttime="20170809 16:48:09.826"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.829" starttime="20170809 16:48:09.821"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.829" starttime="20170809 16:48:09.246"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.829" starttime="20170809 16:48:09.246"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:09.830" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170809 16:48:09.830" starttime="20170809 16:48:09.829"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:09.834" starttime="20170809 16:48:09.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:09.835" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:09.835" starttime="20170809 16:48:09.834"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:09.899" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:09.899" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170809 16:48:09.956" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:09.956" starttime="20170809 16:48:09.863"></status>
</kw>
<msg timestamp="20170809 16:48:09.956" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:09.956" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170809 16:48:09.956" starttime="20170809 16:48:09.835"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:09.957" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170809 16:48:09.957" starttime="20170809 16:48:09.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:09.958" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:09.958" starttime="20170809 16:48:09.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:09.964" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:09.964" starttime="20170809 16:48:09.964"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.965" starttime="20170809 16:48:09.963"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.965" starttime="20170809 16:48:09.958"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.965" starttime="20170809 16:48:09.830"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:09.965" starttime="20170809 16:48:09.829"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:09.966" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170809 16:48:09.966" starttime="20170809 16:48:09.965"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:09.967" starttime="20170809 16:48:09.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:09.968" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:09.968" starttime="20170809 16:48:09.967"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:10.025" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:10.025" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170809 16:48:10.071" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:10.072" starttime="20170809 16:48:09.994"></status>
</kw>
<msg timestamp="20170809 16:48:10.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:10.072" level="INFO">${ret_values} = (u'MemTotal:         432260 kB\nMemFree:          279144 kB\nMemAvailable:     325656 kB\nBuffers:           11284 kB\nCached:            52196 kB\nSwapCached:            0 kB\nActive:            9674...</msg>
<status status="PASS" endtime="20170809 16:48:10.072" starttime="20170809 16:48:09.968"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:10.073" level="INFO">${stdout} = MemTotal:         432260 kB
MemFree:          279144 kB
MemAvailable:     325656 kB
Buffers:           11284 kB
Cached:            52196 kB
SwapCached:            0 kB
Active:            96748 kB
Inac...</msg>
<status status="PASS" endtime="20170809 16:48:10.073" starttime="20170809 16:48:10.072"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:10.073" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:10.073" starttime="20170809 16:48:10.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:10.080" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:10.080" starttime="20170809 16:48:10.079"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.080" starttime="20170809 16:48:10.079"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.080" starttime="20170809 16:48:10.073"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.080" starttime="20170809 16:48:09.966"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.080" starttime="20170809 16:48:09.965"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:10.081" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170809 16:48:10.081" starttime="20170809 16:48:10.081"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:10.082" starttime="20170809 16:48:10.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:10.083" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:10.083" starttime="20170809 16:48:10.083"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:10.145" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:10.146" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170809 16:48:10.467" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:10.468" starttime="20170809 16:48:10.114"></status>
</kw>
<msg timestamp="20170809 16:48:10.468" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:10.468" level="INFO">${ret_values} = (u'Mem: 153116K used, 279144K free, 14508K shrd, 11284K buff, 52200K cached\nCPU:  23% usr   7% sys   0% nic  69% idle   0% io   0% irq   0% sirq\nLoad average: 2.18 2.47 1.14 1/151 1402\n  PID  PPID ...</msg>
<status status="PASS" endtime="20170809 16:48:10.468" starttime="20170809 16:48:10.084"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:10.469" level="INFO">${stdout} = Mem: 153116K used, 279144K free, 14508K shrd, 11284K buff, 52200K cached
CPU:  23% usr   7% sys   0% nic  69% idle   0% io   0% irq   0% sirq
Load average: 2.18 2.47 1.14 1/151 1402
  PID  PPID USER  ...</msg>
<status status="PASS" endtime="20170809 16:48:10.469" starttime="20170809 16:48:10.468"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:10.469" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:10.469" starttime="20170809 16:48:10.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:10.476" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:10.476" starttime="20170809 16:48:10.475"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.476" starttime="20170809 16:48:10.475"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.476" starttime="20170809 16:48:10.470"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.476" starttime="20170809 16:48:10.081"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.476" starttime="20170809 16:48:10.080"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:10.477" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170809 16:48:10.477" starttime="20170809 16:48:10.477"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:10.478" starttime="20170809 16:48:10.478"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:10.479" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:10.479" starttime="20170809 16:48:10.479"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:10.537" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:10.537" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170809 16:48:10.614" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:10.614" starttime="20170809 16:48:10.505"></status>
</kw>
<msg timestamp="20170809 16:48:10.615" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:10.615" level="INFO">${ret_values} = (u'[    0.000000] NR_IRQS:16 nr_irqs:16 16\n[    0.000000] i2c controller registered, irq 16\n[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7722264433...</msg>
<status status="PASS" endtime="20170809 16:48:10.615" starttime="20170809 16:48:10.479"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:10.616" level="INFO">${stdout} = [    0.000000] NR_IRQS:16 nr_irqs:16 16
[    0.000000] i2c controller registered, irq 16
[    0.000000] clocksource: moxart_timer: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 77222644334 ns
...</msg>
<status status="PASS" endtime="20170809 16:48:10.616" starttime="20170809 16:48:10.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:10.616" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:10.616" starttime="20170809 16:48:10.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:10.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:10.626" starttime="20170809 16:48:10.625"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.626" starttime="20170809 16:48:10.624"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.626" starttime="20170809 16:48:10.617"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.626" starttime="20170809 16:48:10.477"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:10.626" starttime="20170809 16:48:10.476"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:10.627" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170809 16:48:10.627" starttime="20170809 16:48:10.626"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:10.628" starttime="20170809 16:48:10.628"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170809 16:48:10.629" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170809 16:48:10.629" starttime="20170809 16:48:10.628"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170809 16:48:10.686" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170809 16:48:10.687" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170809 16:48:11.714" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170809 16:48:11.715" starttime="20170809 16:48:10.655"></status>
</kw>
<msg timestamp="20170809 16:48:11.715" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:11.717" level="INFO">${ret_values} = (u'-- Logs begin at Wed 2017-08-09 16:44:16 UTC, end at Wed 2017-08-09 16:48:14 UTC. --\nAug 09 16:44:16 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 09 16:44:16 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170809 16:48:11.717" starttime="20170809 16:48:10.629"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170809 16:48:11.718" level="INFO">${stdout} = -- Logs begin at Wed 2017-08-09 16:44:16 UTC, end at Wed 2017-08-09 16:48:14 UTC. --
Aug 09 16:44:16 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 09 16:44:16 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170809 16:48:11.718" starttime="20170809 16:48:11.717"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170809 16:48:11.718" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170809 16:48:11.718" starttime="20170809 16:48:11.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170809 16:48:11.726" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:11.726" starttime="20170809 16:48:11.725"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:11.724"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:11.719"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:10.627"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:10.626"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:09.245"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:09.244"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:09.244"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:09.244"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:09.243"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.727" starttime="20170809 16:48:09.222"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.728" starttime="20170809 16:48:09.219"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.728" starttime="20170809 16:48:09.219"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:11.731" starttime="20170809 16:48:11.730"></status>
</kw>
<msg timestamp="20170809 16:48:11.731" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:11.731" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 16:48:11.731" starttime="20170809 16:48:11.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:11.732" starttime="20170809 16:48:11.731"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:11.758" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:11.758" starttime="20170809 16:48:11.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:11.759" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:11.759" starttime="20170809 16:48:11.759"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:11.759" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:11.760" starttime="20170809 16:48:11.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:11.760" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:11.760" starttime="20170809 16:48:11.760"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:11.946" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:11.946" starttime="20170809 16:48:11.761"></status>
</kw>
<msg timestamp="20170809 16:48:11.947" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:11.947" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:11.947" starttime="20170809 16:48:11.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:11.947" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:11.947" starttime="20170809 16:48:11.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:11.948" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:11.948" starttime="20170809 16:48:11.948"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.948" starttime="20170809 16:48:11.757"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.948" starttime="20170809 16:48:11.757"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:11.948" starttime="20170809 16:48:11.756"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:11.949" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170809 16:48:11.949" starttime="20170809 16:48:11.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:11.950" starttime="20170809 16:48:11.949"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:12.073" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170809 16:48:12.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.074" starttime="20170809 16:48:11.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.074" starttime="20170809 16:48:12.074"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:12.075" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:12.075" starttime="20170809 16:48:12.075"></status>
</kw>
<msg timestamp="20170809 16:48:12.075" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.075" starttime="20170809 16:48:11.755"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.076" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.076" starttime="20170809 16:48:12.076"></status>
</kw>
<msg timestamp="20170809 16:48:12.076" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170809 16:48:12.076" starttime="20170809 16:48:12.075"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.077" starttime="20170809 16:48:12.077"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:48:12.077" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Software.Version.Error.ManifestFileFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1502297193686, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:48:12.077" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:48:12.078" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170809 16:48:12.078" starttime="20170809 16:48:12.077"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170809 16:48:12.078" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20170809 16:48:12.078" starttime="20170809 16:48:12.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170809 16:48:12.079" level="INFO">${logpath} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_esel</msg>
<status status="PASS" endtime="20170809 16:48:12.079" starttime="20170809 16:48:12.079"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.079" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_esel"&gt;/home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/20170809164803633912_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:12.080" starttime="20170809 16:48:12.079"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.081" starttime="20170809 16:48:12.080"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170809 16:48:12.084" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170809 16:48:12.084" starttime="20170809 16:48:12.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170809 16:48:12.085" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170809 16:48:12.085" starttime="20170809 16:48:12.085"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170809 16:48:12.086" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170809 16:48:12.086" starttime="20170809 16:48:12.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170809 16:48:12.087" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170809 16:48:12.087" starttime="20170809 16:48:12.086"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.289" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170809 16:48:12.290" starttime="20170809 16:48:12.087"></status>
</kw>
<msg timestamp="20170809 16:48:12.290" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:12.290" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.290" starttime="20170809 16:48:12.087"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.290" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.291" starttime="20170809 16:48:12.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.291" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.291" starttime="20170809 16:48:12.291"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.291" starttime="20170809 16:48:12.083"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.292" starttime="20170809 16:48:12.083"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.292" starttime="20170809 16:48:12.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170809 16:48:12.292" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20170809 16:48:12.292" starttime="20170809 16:48:12.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.293" starttime="20170809 16:48:12.293"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170809 16:48:12.374" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170809 16:48:12.374" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.374" starttime="20170809 16:48:12.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.375" starttime="20170809 16:48:12.375"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170809 16:48:12.376" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170809 16:48:12.376" starttime="20170809 16:48:12.375"></status>
</kw>
<msg timestamp="20170809 16:48:12.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.376" starttime="20170809 16:48:12.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170809 16:48:12.377" starttime="20170809 16:48:12.376"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170809 16:48:12.377" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170809 16:48:12.377" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170809 16:48:12.377" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170809 16:48:12.377" starttime="20170809 16:48:12.377"></status>
</kw>
<msg timestamp="20170809 16:48:12.378" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170809 16:48:12.378" starttime="20170809 16:48:12.081"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170809 16:48:12.378" level="INFO">Length is 0</msg>
<msg timestamp="20170809 16:48:12.378" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170809 16:48:12.378" starttime="20170809 16:48:12.378"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.379" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170809 16:48:12.379" starttime="20170809 16:48:12.379"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.379" starttime="20170809 16:48:12.080"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.379" starttime="20170809 16:48:12.080"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170809 16:48:12.384" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170809 16:48:12.394" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170809 16:48:12.394" starttime="20170809 16:48:12.379"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170809 16:48:12.416" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170809 16:48:12.416" starttime="20170809 16:48:12.411"></status>
</kw>
<msg timestamp="20170809 16:48:12.416" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170809 16:48:12.416" starttime="20170809 16:48:12.409"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170809 16:48:12.417" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170809 16:48:12.417" starttime="20170809 16:48:12.417"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.418" starttime="20170809 16:48:11.755"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.418" starttime="20170809 16:48:11.732"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.418" starttime="20170809 16:48:11.728"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.418" starttime="20170809 16:48:11.728"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.421" starttime="20170809 16:48:12.420"></status>
</kw>
<msg timestamp="20170809 16:48:12.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20170809 16:48:12.421" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170809 16:48:12.421" starttime="20170809 16:48:12.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.421" starttime="20170809 16:48:12.421"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170809 16:48:12.446" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170809 16:48:12.446" starttime="20170809 16:48:12.446"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.446" starttime="20170809 16:48:12.445"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.446" starttime="20170809 16:48:12.422"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.446" starttime="20170809 16:48:12.418"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.446" starttime="20170809 16:48:12.418"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.447" starttime="20170809 16:48:04.587"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.447" starttime="20170809 16:48:04.585"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.447" starttime="20170809 16:48:04.585"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.447" starttime="20170809 16:48:04.585"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170809 16:48:12.453" starttime="20170809 16:48:12.452"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.453" starttime="20170809 16:48:12.447"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.453" starttime="20170809 16:48:04.583"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.453" starttime="20170809 16:48:00.544"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.453" starttime="20170809 16:48:00.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.454" starttime="20170809 16:48:12.454"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170809 16:48:12.464" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170809 16:48:12.464" starttime="20170809 16:48:12.455"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170809 16:48:12.465" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170809164803633912_CodeUpdate/20170809164803633912_RESTHostCodeUpdate/</msg>
<status status="PASS" endtime="20170809 16:48:12.465" starttime="20170809 16:48:12.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.465" starttime="20170809 16:48:12.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.466" starttime="20170809 16:48:12.466"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.467" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170809 16:48:12.467" starttime="20170809 16:48:12.466"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.468" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170809 16:48:12.468" starttime="20170809 16:48:12.467"></status>
</kw>
<msg timestamp="20170809 16:48:12.468" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170809 16:48:12.468" starttime="20170809 16:48:12.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.468" starttime="20170809 16:48:12.468"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170809 16:48:12.469" starttime="20170809 16:48:12.469"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:48:12.471" level="INFO">${cur_time} = 2017-08-09 16:48:12:469813</msg>
<status status="PASS" endtime="20170809 16:48:12.471" starttime="20170809 16:48:12.470"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170809 16:48:12.471" level="INFO">${cur_time} = 20170809164812469813</msg>
<status status="PASS" endtime="20170809 16:48:12.471" starttime="20170809 16:48:12.471"></status>
</kw>
<msg timestamp="20170809 16:48:12.471" level="INFO">${cur_time} = 20170809164812469813</msg>
<status status="PASS" endtime="20170809 16:48:12.472" starttime="20170809 16:48:12.469"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170809 16:48:12.472" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170809 16:48:12.472" starttime="20170809 16:48:12.472"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.473" starttime="20170809 16:48:12.454"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.473" starttime="20170809 16:48:00.051"></status>
</kw>
<status status="PASS" endtime="20170809 16:48:12.473" starttime="20170809 16:47:57.994"></status>
</kw>
<doc>Do a PNOR code update by uploading image on BMC via REST.</doc>
<tags>
<tag>REST_Host_Code_Update</tag>
</tags>
<status status="FAIL" endtime="20170809 16:48:12.474" critical="yes" starttime="20170809 16:46:13.234">xyz.openbmc_project.Software.Activation.Activations.Invalid != xyz.openbmc_project.Software.Activation.Activations.Active</status>
</test>
<doc>Code update to a target BMC.
Execution Method:
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v DELETE_OLD_PNOR_IMAGES:&lt;"true" or "false"&gt;
-v IMAGE_FILE_PATH:&lt;path/*.tar&gt; code_update.robot

Code update method BMC
Update work flow sequence:
- Upload image via REST
- Verify that the file exists on the BMC
- Check software "Activation" status to be "Ready"
- Set "Requested Activation" to "Active"
- Wait for code update to complete
- Verify the new version</doc>
<status status="FAIL" endtime="20170809 16:48:12.475" starttime="20170809 16:46:12.751"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">REST_Host_Code_Update</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Code Update" pass="0">Code Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
