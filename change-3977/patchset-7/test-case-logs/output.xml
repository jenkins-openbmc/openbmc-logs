<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170515 14:42:31.821">
<suite id="s1" name="Tests" source="/tmp/fspcibld/20567/obmc-robot/tests">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:32.403">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:42:32.403" status="FAIL" endtime="20170515 14:42:32.403"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:32.403">${has_host} = False</msg>
<status starttime="20170515 14:42:32.402" status="PASS" endtime="20170515 14:42:32.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:42:32.404" status="PASS" endtime="20170515 14:42:32.404"></status>
</kw>
<status starttime="20170515 14:42:32.404" status="PASS" endtime="20170515 14:42:32.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:32.406">${port_num} = 22</msg>
<status starttime="20170515 14:42:32.406" status="PASS" endtime="20170515 14:42:32.406"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:32.406">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:42:32.406" status="PASS" endtime="20170515 14:42:32.406"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:32.407">${https_num} = 443</msg>
<status starttime="20170515 14:42:32.407" status="PASS" endtime="20170515 14:42:32.407"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:32.408">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:42:32.407" status="PASS" endtime="20170515 14:42:32.408"></status>
</kw>
<status starttime="20170515 14:42:32.405" status="PASS" endtime="20170515 14:42:32.408"></status>
</kw>
<status starttime="20170515 14:42:32.405" status="PASS" endtime="20170515 14:42:32.408"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:32.409">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:42:32.408" status="FAIL" endtime="20170515 14:42:32.409"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:32.409">${has_port} = False</msg>
<status starttime="20170515 14:42:32.408" status="PASS" endtime="20170515 14:42:32.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:42:32.410" status="PASS" endtime="20170515 14:42:32.410"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:42:32.411" status="PASS" endtime="20170515 14:42:32.411"></status>
</kw>
<status starttime="20170515 14:42:32.410" status="PASS" endtime="20170515 14:42:32.411"></status>
</kw>
<status starttime="20170515 14:42:32.409" status="PASS" endtime="20170515 14:42:32.411"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:32.412">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:42:34.321">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:42:32.411" status="PASS" endtime="20170515 14:42:34.321"></status>
</kw>
<status starttime="20170515 14:42:32.402" status="PASS" endtime="20170515 14:42:34.321"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:34.323">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170515 14:42:34.389">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:42:34.390">${output} = VERSION_ID="v1.99.5-42-gbdc80c3"</msg>
<msg level="INFO" timestamp="20170515 14:42:34.390">${stderr} = </msg>
<status starttime="20170515 14:42:34.322" status="PASS" endtime="20170515 14:42:34.390"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:34.390">Length is 0</msg>
<status starttime="20170515 14:42:34.390" status="PASS" endtime="20170515 14:42:34.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:34.391">VERSION_ID="v1.99.5-42-gbdc80c3"</msg>
<status starttime="20170515 14:42:34.391" status="PASS" endtime="20170515 14:42:34.391"></status>
</kw>
<status starttime="20170515 14:42:34.322" status="PASS" endtime="20170515 14:42:34.391"></status>
</kw>
<status starttime="20170515 14:42:34.322" status="PASS" endtime="20170515 14:42:34.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:34.392">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170515 14:42:34.511">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:42:34.512">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170515 14:42:34.512">${stderr} = </msg>
<status starttime="20170515 14:42:34.392" status="PASS" endtime="20170515 14:42:34.512"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:34.512">Length is 0</msg>
<status starttime="20170515 14:42:34.512" status="PASS" endtime="20170515 14:42:34.512"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:34.512">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170515 14:42:34.392" status="PASS" endtime="20170515 14:42:34.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:34.513">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170515 14:42:34.513" status="PASS" endtime="20170515 14:42:34.514"></status>
</kw>
<status starttime="20170515 14:42:34.392" status="PASS" endtime="20170515 14:42:34.514"></status>
</kw>
<status starttime="20170515 14:42:34.391" status="PASS" endtime="20170515 14:42:34.514"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:34.517">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:42:34.516" status="FAIL" endtime="20170515 14:42:34.517"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:34.517">${has_host} = False</msg>
<status starttime="20170515 14:42:34.516" status="PASS" endtime="20170515 14:42:34.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:42:34.518" status="PASS" endtime="20170515 14:42:34.518"></status>
</kw>
<status starttime="20170515 14:42:34.517" status="PASS" endtime="20170515 14:42:34.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:34.519">${port_num} = 22</msg>
<status starttime="20170515 14:42:34.519" status="PASS" endtime="20170515 14:42:34.519"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:34.520">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:42:34.520" status="PASS" endtime="20170515 14:42:34.520"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:34.520">${https_num} = 443</msg>
<status starttime="20170515 14:42:34.520" status="PASS" endtime="20170515 14:42:34.520"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:34.521">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:42:34.521" status="PASS" endtime="20170515 14:42:34.521"></status>
</kw>
<status starttime="20170515 14:42:34.519" status="PASS" endtime="20170515 14:42:34.521"></status>
</kw>
<status starttime="20170515 14:42:34.518" status="PASS" endtime="20170515 14:42:34.521"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:34.522">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:42:34.522" status="FAIL" endtime="20170515 14:42:34.522"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:34.522">${has_port} = False</msg>
<status starttime="20170515 14:42:34.522" status="PASS" endtime="20170515 14:42:34.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:42:34.524" status="PASS" endtime="20170515 14:42:34.524"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:42:34.524" status="PASS" endtime="20170515 14:42:34.524"></status>
</kw>
<status starttime="20170515 14:42:34.523" status="PASS" endtime="20170515 14:42:34.525"></status>
</kw>
<status starttime="20170515 14:42:34.523" status="PASS" endtime="20170515 14:42:34.525"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:34.525">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:42:36.170">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:42:34.525" status="PASS" endtime="20170515 14:42:36.171"></status>
</kw>
<status starttime="20170515 14:42:34.515" status="PASS" endtime="20170515 14:42:36.171"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:36.171">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170515 14:42:36.248">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:42:36.248">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170515 14:42:36.248">${stderr} = </msg>
<status starttime="20170515 14:42:36.171" status="PASS" endtime="20170515 14:42:36.248"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:36.249">Length is 0</msg>
<status starttime="20170515 14:42:36.248" status="PASS" endtime="20170515 14:42:36.249"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:36.249">Length is 11</msg>
<status starttime="20170515 14:42:36.249" status="PASS" endtime="20170515 14:42:36.249"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:36.249">${bmc_model} = Witherspoon</msg>
<status starttime="20170515 14:42:34.515" status="PASS" endtime="20170515 14:42:36.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:36.250">BMC Model=Witherspoon</msg>
<status starttime="20170515 14:42:36.250" status="PASS" endtime="20170515 14:42:36.250"></status>
</kw>
<status starttime="20170515 14:42:34.515" status="PASS" endtime="20170515 14:42:36.250"></status>
</kw>
<status starttime="20170515 14:42:34.514" status="PASS" endtime="20170515 14:42:36.250"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:36.252">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:42:36.252" status="FAIL" endtime="20170515 14:42:36.252"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:36.252">${has_host} = False</msg>
<status starttime="20170515 14:42:36.251" status="PASS" endtime="20170515 14:42:36.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:42:36.253" status="PASS" endtime="20170515 14:42:36.253"></status>
</kw>
<status starttime="20170515 14:42:36.252" status="PASS" endtime="20170515 14:42:36.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:36.255">${port_num} = 22</msg>
<status starttime="20170515 14:42:36.254" status="PASS" endtime="20170515 14:42:36.255"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:36.255">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:42:36.255" status="PASS" endtime="20170515 14:42:36.255"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:36.256">${https_num} = 443</msg>
<status starttime="20170515 14:42:36.256" status="PASS" endtime="20170515 14:42:36.256"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:36.257">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:42:36.256" status="PASS" endtime="20170515 14:42:36.257"></status>
</kw>
<status starttime="20170515 14:42:36.254" status="PASS" endtime="20170515 14:42:36.257"></status>
</kw>
<status starttime="20170515 14:42:36.254" status="PASS" endtime="20170515 14:42:36.257"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:36.258">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:42:36.257" status="FAIL" endtime="20170515 14:42:36.258"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:36.258">${has_port} = False</msg>
<status starttime="20170515 14:42:36.257" status="PASS" endtime="20170515 14:42:36.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:42:36.259" status="PASS" endtime="20170515 14:42:36.259"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:42:36.260" status="PASS" endtime="20170515 14:42:36.260"></status>
</kw>
<status starttime="20170515 14:42:36.259" status="PASS" endtime="20170515 14:42:36.260"></status>
</kw>
<status starttime="20170515 14:42:36.258" status="PASS" endtime="20170515 14:42:36.260"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:36.261">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.006">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:42:36.260" status="PASS" endtime="20170515 14:42:38.006"></status>
</kw>
<status starttime="20170515 14:42:36.251" status="PASS" endtime="20170515 14:42:38.007"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.008">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.084">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.084">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170515 14:42:38.084">${stderr} = </msg>
<status starttime="20170515 14:42:38.007" status="PASS" endtime="20170515 14:42:38.084"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.085">Length is 0</msg>
<status starttime="20170515 14:42:38.085" status="PASS" endtime="20170515 14:42:38.085"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.085">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170515 14:42:38.007" status="PASS" endtime="20170515 14:42:38.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170515 14:42:38.085" status="PASS" endtime="20170515 14:42:38.086"></status>
</kw>
<status starttime="20170515 14:42:36.251" status="PASS" endtime="20170515 14:42:38.086"></status>
</kw>
<status starttime="20170515 14:42:36.250" status="PASS" endtime="20170515 14:42:38.086"></status>
</kw>
<status starttime="20170515 14:42:32.401" status="PASS" endtime="20170515 14:42:38.086"></status>
</kw>
<suite id="s1-s1" name="Security" source="/tmp/fspcibld/20567/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/fspcibld/20567/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.170">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:42:38.169" status="PASS" endtime="20170515 14:42:38.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.171">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:42:38.170" status="PASS" endtime="20170515 14:42:38.171"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.172">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:42:38.171" status="PASS" endtime="20170515 14:42:38.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.172">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:42:38.172" status="PASS" endtime="20170515 14:42:38.172"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.374">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:42:38.173" status="PASS" endtime="20170515 14:42:38.374"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.374">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:42:38.374">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:38.172" status="PASS" endtime="20170515 14:42:38.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.375">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:38.374" status="PASS" endtime="20170515 14:42:38.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:38.375" status="PASS" endtime="20170515 14:42:38.375"></status>
</kw>
<status starttime="20170515 14:42:38.169" status="PASS" endtime="20170515 14:42:38.376"></status>
</kw>
<status starttime="20170515 14:42:38.169" status="PASS" endtime="20170515 14:42:38.376"></status>
</kw>
<status starttime="20170515 14:42:38.168" status="PASS" endtime="20170515 14:42:38.376"></status>
</kw>
<kw name="FFDC On Test Case Fail" type="teardown" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.381">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:42:38.380" status="PASS" endtime="20170515 14:42:38.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:42:38.382" status="PASS" endtime="20170515 14:42:38.382"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.383">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:42:38.382" status="PASS" endtime="20170515 14:42:38.383"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.384">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:42:38.383" status="PASS" endtime="20170515 14:42:38.384"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:42:38.385" status="PASS" endtime="20170515 14:42:38.619"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:42:38.619">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:38.384" status="PASS" endtime="20170515 14:42:38.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:38.620" status="PASS" endtime="20170515 14:42:38.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:38.620" status="PASS" endtime="20170515 14:42:38.621"></status>
</kw>
<status starttime="20170515 14:42:38.379" status="PASS" endtime="20170515 14:42:38.621"></status>
</kw>
<status starttime="20170515 14:42:38.379" status="PASS" endtime="20170515 14:42:38.621"></status>
</kw>
<status starttime="20170515 14:42:38.378" status="PASS" endtime="20170515 14:42:38.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.622">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170515 14:42:38.621" status="PASS" endtime="20170515 14:42:38.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.624">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170515 14:42:38.623" status="PASS" endtime="20170515 14:42:38.624"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.625">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170515 14:42:38.624" status="PASS" endtime="20170515 14:42:38.625"></status>
</kw>
<status starttime="20170515 14:42:38.624" status="PASS" endtime="20170515 14:42:38.625"></status>
</kw>
<status starttime="20170515 14:42:38.622" status="PASS" endtime="20170515 14:42:38.625"></status>
</kw>
<status starttime="20170515 14:42:38.622" status="PASS" endtime="20170515 14:42:38.625"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.692">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:42:38.692">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:38.625" status="PASS" endtime="20170515 14:42:38.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.694">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:42:38.694" status="PASS" endtime="20170515 14:42:38.694"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.695">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:42:38.695" status="PASS" endtime="20170515 14:42:38.695"></status>
</kw>
<status starttime="20170515 14:42:38.694" status="PASS" endtime="20170515 14:42:38.696"></status>
</kw>
<status starttime="20170515 14:42:38.693" status="PASS" endtime="20170515 14:42:38.696"></status>
</kw>
<status starttime="20170515 14:42:38.693" status="PASS" endtime="20170515 14:42:38.696"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.696">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:38.378" status="PASS" endtime="20170515 14:42:38.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.697">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:38.696" status="PASS" endtime="20170515 14:42:38.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.697">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:42:38.697">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170515 14:42:38.697">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170515 14:42:38.697" status="PASS" endtime="20170515 14:42:38.697"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.698">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170515 14:42:38.377" status="PASS" endtime="20170515 14:42:38.698"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.698">${host_state} = Running</msg>
<status starttime="20170515 14:42:38.377" status="PASS" endtime="20170515 14:42:38.698"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:38.699">Running != Quiesced</msg>
<status starttime="20170515 14:42:38.699" status="FAIL" endtime="20170515 14:42:38.699"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.699">${status} = False</msg>
<status starttime="20170515 14:42:38.698" status="PASS" endtime="20170515 14:42:38.699"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.699">${status} = False</msg>
<status starttime="20170515 14:42:38.376" status="PASS" endtime="20170515 14:42:38.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170515 14:42:38.700" status="PASS" endtime="20170515 14:42:38.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170515 14:42:38.700" status="PASS" endtime="20170515 14:42:38.701"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.709">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170515 14:42:38.701" status="PASS" endtime="20170515 14:42:38.709"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.716">${FFDC_DIR_PATH} = </msg>
<status starttime="20170515 14:42:38.709" status="PASS" endtime="20170515 14:42:38.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.728">${cur_time} = 2017-05-15 14:42:38:728150</msg>
<status starttime="20170515 14:42:38.728" status="PASS" endtime="20170515 14:42:38.728"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.729">${cur_time} = 20170515144238728150</msg>
<status starttime="20170515 14:42:38.729" status="PASS" endtime="20170515 14:42:38.729"></status>
</kw>
<status starttime="20170515 14:42:38.727" status="PASS" endtime="20170515 14:42:38.729"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.735">${FFDC_TIME} = 20170515144238728150</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.737">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170515 14:42:38.736" status="PASS" endtime="20170515 14:42:38.737"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.737">${suite_name} = 20170515144238728150_TestsSecurityTestSsl</msg>
<status starttime="20170515 14:42:38.737" status="PASS" endtime="20170515 14:42:38.737"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.738">${test_name} = TestSSLConnection</msg>
<status starttime="20170515 14:42:38.737" status="PASS" endtime="20170515 14:42:38.738"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.738">${test_name} = 20170515144238728150_TestSSLConnection</msg>
<status starttime="20170515 14:42:38.738" status="PASS" endtime="20170515 14:42:38.738"></status>
</kw>
<status starttime="20170515 14:42:38.736" status="PASS" endtime="20170515 14:42:38.739"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.739">${FFDC_DIR_PATH} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144238728150_TestsSecurityTestSsl/20170515144238728150_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170515 14:42:38.743">${FFDC_PREFIX} = 20170515144238728150_</msg>
<status starttime="20170515 14:42:38.717" status="PASS" endtime="20170515 14:42:38.743"></status>
</kw>
<status starttime="20170515 14:42:38.717" status="PASS" endtime="20170515 14:42:38.743"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170515 14:42:38.743" status="PASS" endtime="20170515 14:42:38.744"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.744" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs"&gt;/tmp/fspcibld/20567/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170515 14:42:38.744" status="PASS" endtime="20170515 14:42:38.744"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:38.745">File '/tmp/fspcibld/20567/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170515 14:42:38.745" status="FAIL" endtime="20170515 14:42:38.745"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.746">${exist} = False</msg>
<status starttime="20170515 14:42:38.745" status="PASS" endtime="20170515 14:42:38.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.747" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:42:38.746" status="PASS" endtime="20170515 14:42:38.747"></status>
</kw>
<status starttime="20170515 14:42:38.746" status="PASS" endtime="20170515 14:42:38.747"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170515 14:42:38.747" status="PASS" endtime="20170515 14:42:38.747"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.748">${cur_time} = 2017-05-15 14:42:38:748148</msg>
<status starttime="20170515 14:42:38.748" status="PASS" endtime="20170515 14:42:38.748"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.749">${cur_time} = 20170515144238748148</msg>
<status starttime="20170515 14:42:38.749" status="PASS" endtime="20170515 14:42:38.749"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.749">${cur_time} = 20170515144238748148</msg>
<status starttime="20170515 14:42:38.748" status="PASS" endtime="20170515 14:42:38.749"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.750" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:42:38.749" status="PASS" endtime="20170515 14:42:38.750"></status>
</kw>
<status starttime="20170515 14:42:38.701" status="PASS" endtime="20170515 14:42:38.750"></status>
</kw>
<status starttime="20170515 14:42:38.376" status="PASS" endtime="20170515 14:42:38.750"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" starttime="20170515 14:42:38.167" status="PASS" endtime="20170515 14:42:38.751"></status>
</test>
<kw name="Delete All Sessions" type="teardown" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170515 14:42:38.751">Delete All Sessions</msg>
<status starttime="20170515 14:42:38.751" status="PASS" endtime="20170515 14:42:38.752"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170515 14:42:38.088" status="PASS" endtime="20170515 14:42:38.752"></status>
</suite>
<status starttime="20170515 14:42:38.086" status="PASS" endtime="20170515 14:42:38.753"></status>
</suite>
<suite id="s1-s2" name="Test Basic Poweron" source="/tmp/fspcibld/20567/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s2-t1" name="Power On Test">
<kw name="Start SOL Console Logging" type="setup" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.788">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:42:38.788" status="PASS" endtime="20170515 14:42:38.788"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.789">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:42:38.788" status="PASS" endtime="20170515 14:42:38.789"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.789">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:42:38.787" status="PASS" endtime="20170515 14:42:38.789"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.790">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:42:38.790" status="PASS" endtime="20170515 14:42:38.790"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.791">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:42:38.791" status="PASS" endtime="20170515 14:42:38.791"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.791">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:42:38.790" status="PASS" endtime="20170515 14:42:38.791"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.792">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170515 14:42:38.792" status="PASS" endtime="20170515 14:42:38.792"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:42:38.792" status="PASS" endtime="20170515 14:42:38.800"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.804">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.809">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:42:38.809">${output} = /tmp/fspcibld/20567/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170515 14:42:38.800" status="PASS" endtime="20170515 14:42:38.809"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170515 14:42:38.811" status="PASS" endtime="20170515 14:42:38.818"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170515 14:42:38.819" status="PASS" endtime="20170515 14:42:38.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.820">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170515 14:42:38.820" status="PASS" endtime="20170515 14:42:38.820"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.820">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170515 14:42:38.791" status="PASS" endtime="20170515 14:42:38.820"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.821">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170515 14:42:38.821" status="PASS" endtime="20170515 14:42:38.821"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:42:38.821" status="PASS" endtime="20170515 14:42:38.829"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.836">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.841">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:42:38.841">${os_con_pid} = </msg>
<status starttime="20170515 14:42:38.829" status="PASS" endtime="20170515 14:42:38.841"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170515 14:42:38.842" status="PASS" endtime="20170515 14:42:38.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.851">${cmd_buf} = kill -9 </msg>
<status starttime="20170515 14:42:38.851" status="PASS" endtime="20170515 14:42:38.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:42:38.851" status="PASS" endtime="20170515 14:42:38.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.853">${rc} = None</msg>
<msg level="INFO" timestamp="20170515 14:42:38.853">${output} = None</msg>
<status starttime="20170515 14:42:38.852" status="PASS" endtime="20170515 14:42:38.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170515 14:42:38.853" status="PASS" endtime="20170515 14:42:38.853"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.854">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170515 14:42:38.853" status="PASS" endtime="20170515 14:42:38.854"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:42:38.854" status="PASS" endtime="20170515 14:42:38.864"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.868">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.871">${rc} = 1</msg>
<msg level="INFO" timestamp="20170515 14:42:38.871">${output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170515 14:42:38.865" status="PASS" endtime="20170515 14:42:38.871"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170515 14:42:38.873" status="PASS" endtime="20170515 14:42:38.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170515 14:42:38.883" status="PASS" endtime="20170515 14:42:38.883"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.884">${log_output} = cat: /tmp/9.41.166.169_os_console: No such file or directory</msg>
<status starttime="20170515 14:42:38.789" status="PASS" endtime="20170515 14:42:38.884"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.884" html="yes">Created file '&lt;a href="file:///tmp/9.41.166.169_os_console"&gt;/tmp/9.41.166.169_os_console&lt;/a&gt;'.</msg>
<status starttime="20170515 14:42:38.884" status="PASS" endtime="20170515 14:42:38.884"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.885">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170515 14:42:38.885" status="PASS" endtime="20170515 14:42:38.885"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:42:38.886" status="PASS" endtime="20170515 14:42:38.896"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.900">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.905">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:42:38.905">${output} = /tmp/fspcibld/20567/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170515 14:42:38.896" status="PASS" endtime="20170515 14:42:38.905"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170515 14:42:38.907" status="PASS" endtime="20170515 14:42:38.914"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170515 14:42:38.915" status="PASS" endtime="20170515 14:42:38.915"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.916">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170515 14:42:38.916" status="PASS" endtime="20170515 14:42:38.916"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:38.916">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170515 14:42:38.885" status="PASS" endtime="20170515 14:42:38.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.917">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170515 14:42:38.917" status="PASS" endtime="20170515 14:42:38.917"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:42:38.917" status="PASS" endtime="20170515 14:42:38.925"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.928">Running command 'ssh_pw 0penBmc -p 2200 root@9.41.166.169 &gt; /tmp/9.41.166.169_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170515 14:42:38.933">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:42:38.933">${output} = </msg>
<status starttime="20170515 14:42:38.925" status="PASS" endtime="20170515 14:42:38.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170515 14:42:38.935" status="PASS" endtime="20170515 14:42:38.935"></status>
</kw>
<status starttime="20170515 14:42:38.787" status="PASS" endtime="20170515 14:42:38.936"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.937">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.941">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170515 14:42:38.940" status="PASS" endtime="20170515 14:42:38.941"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.943">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170515 14:42:38.942" status="PASS" endtime="20170515 14:42:38.943"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:38.948">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:42:38.947" status="PASS" endtime="20170515 14:42:38.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.950">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:42:38.949" status="PASS" endtime="20170515 14:42:38.950"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.951">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:42:38.950" status="PASS" endtime="20170515 14:42:38.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:38.952">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:42:38.951" status="PASS" endtime="20170515 14:42:38.952"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.467">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:42:38.953" status="PASS" endtime="20170515 14:42:39.467"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:39.467">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:42:39.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:38.952" status="PASS" endtime="20170515 14:42:39.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.468">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:39.468" status="PASS" endtime="20170515 14:42:39.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:39.468" status="PASS" endtime="20170515 14:42:39.469"></status>
</kw>
<status starttime="20170515 14:42:38.946" status="PASS" endtime="20170515 14:42:39.469"></status>
</kw>
<status starttime="20170515 14:42:38.946" status="PASS" endtime="20170515 14:42:39.469"></status>
</kw>
<status starttime="20170515 14:42:38.945" status="PASS" endtime="20170515 14:42:39.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.470">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170515 14:42:39.469" status="PASS" endtime="20170515 14:42:39.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:42:39.470" status="PASS" endtime="20170515 14:42:39.470"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170515 14:42:39.470" status="PASS" endtime="20170515 14:42:39.471"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.472">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Conten...</msg>
<status starttime="20170515 14:42:39.472" status="PASS" endtime="20170515 14:42:39.472"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.473">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170515 14:42:39.473" status="PASS" endtime="20170515 14:42:39.473"></status>
</kw>
<status starttime="20170515 14:42:39.472" status="PASS" endtime="20170515 14:42:39.474"></status>
</kw>
<status starttime="20170515 14:42:39.471" status="PASS" endtime="20170515 14:42:39.474"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.782">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170515 14:42:39.783">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:39.474" status="PASS" endtime="20170515 14:42:39.783"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.784">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:42:39.783" status="PASS" endtime="20170515 14:42:39.784"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.785">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:42:39.784" status="PASS" endtime="20170515 14:42:39.785"></status>
</kw>
<status starttime="20170515 14:42:39.784" status="PASS" endtime="20170515 14:42:39.785"></status>
</kw>
<status starttime="20170515 14:42:39.783" status="PASS" endtime="20170515 14:42:39.785"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:39.785">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:38.943" status="PASS" endtime="20170515 14:42:39.785"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:39.786" status="PASS" endtime="20170515 14:42:39.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.786">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:42:39.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170515 14:42:39.787">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170515 14:42:39.786" status="PASS" endtime="20170515 14:42:39.787"></status>
</kw>
<status starttime="20170515 14:42:38.941" status="PASS" endtime="20170515 14:42:39.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170515 14:42:39.787" status="PASS" endtime="20170515 14:42:39.787"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:39.792">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:42:39.792" status="PASS" endtime="20170515 14:42:39.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.793">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:42:39.793" status="PASS" endtime="20170515 14:42:39.793"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.794">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:42:39.793" status="PASS" endtime="20170515 14:42:39.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:39.794">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:42:39.794" status="PASS" endtime="20170515 14:42:39.794"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:40.795">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:42:39.795" status="PASS" endtime="20170515 14:42:40.795"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:40.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:42:40.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:39.795" status="PASS" endtime="20170515 14:42:40.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:40.796">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:40.796" status="PASS" endtime="20170515 14:42:40.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:40.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:40.796" status="PASS" endtime="20170515 14:42:40.797"></status>
</kw>
<status starttime="20170515 14:42:39.791" status="PASS" endtime="20170515 14:42:40.797"></status>
</kw>
<status starttime="20170515 14:42:39.791" status="PASS" endtime="20170515 14:42:40.797"></status>
</kw>
<status starttime="20170515 14:42:39.790" status="PASS" endtime="20170515 14:42:40.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:40.798">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170515 14:42:40.797" status="PASS" endtime="20170515 14:42:40.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:40.800">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170515 14:42:40.799" status="PASS" endtime="20170515 14:42:40.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:40.801">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170515 14:42:40.800" status="PASS" endtime="20170515 14:42:40.801"></status>
</kw>
<status starttime="20170515 14:42:40.800" status="PASS" endtime="20170515 14:42:40.801"></status>
</kw>
<status starttime="20170515 14:42:40.798" status="PASS" endtime="20170515 14:42:40.801"></status>
</kw>
<status starttime="20170515 14:42:40.798" status="PASS" endtime="20170515 14:42:40.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:41.377">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:42:41.377">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:40.801" status="PASS" endtime="20170515 14:42:41.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:41.379">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:42:41.379" status="PASS" endtime="20170515 14:42:41.380"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:41.380">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:42:41.380" status="PASS" endtime="20170515 14:42:41.380"></status>
</kw>
<status starttime="20170515 14:42:41.380" status="PASS" endtime="20170515 14:42:41.381"></status>
</kw>
<status starttime="20170515 14:42:41.378" status="PASS" endtime="20170515 14:42:41.381"></status>
</kw>
<status starttime="20170515 14:42:41.378" status="PASS" endtime="20170515 14:42:41.381"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:41.381">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:42:39.789" status="PASS" endtime="20170515 14:42:41.381"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:41.382">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:42:41.381" status="PASS" endtime="20170515 14:42:41.382"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:41.382">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:42:41.382">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170515 14:42:41.383">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170515 14:42:41.382" status="PASS" endtime="20170515 14:42:41.383"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:41.383">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170515 14:42:39.789" status="PASS" endtime="20170515 14:42:41.383"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:42:41.383">${host_state} = Running</msg>
<status starttime="20170515 14:42:39.788" status="PASS" endtime="20170515 14:42:41.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:42:41.384">Off != Running</msg>
<status starttime="20170515 14:42:41.383" status="FAIL" endtime="20170515 14:42:41.384"></status>
</kw>
<status starttime="20170515 14:42:39.788" status="FAIL" endtime="20170515 14:42:41.384"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:42:51.389">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:42:51.389" status="PASS" endtime="20170515 14:42:51.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:51.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:42:51.390" status="PASS" endtime="20170515 14:42:51.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:51.391">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:42:51.390" status="PASS" endtime="20170515 14:42:51.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:42:51.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:42:51.391" status="PASS" endtime="20170515 14:42:51.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:43:01.406">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:42:51.392" status="FAIL" endtime="20170515 14:43:01.406"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:43:01.406">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:43:01.406">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:42:51.391" status="PASS" endtime="20170515 14:43:01.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:43:01.407">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:43:01.407">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:43:01.407" status="FAIL" endtime="20170515 14:43:01.407"></status>
</kw>
<status starttime="20170515 14:42:51.388" status="FAIL" endtime="20170515 14:43:01.407"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:43:21.410">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:43:21.409" status="PASS" endtime="20170515 14:43:21.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:43:21.411">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:43:21.410" status="PASS" endtime="20170515 14:43:21.411"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:43:21.411">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:43:21.411" status="PASS" endtime="20170515 14:43:21.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:43:21.412">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:43:21.412" status="PASS" endtime="20170515 14:43:21.412"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:43:31.422">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:43:21.413" status="FAIL" endtime="20170515 14:43:31.422"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:43:31.422">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:43:31.422">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:43:21.412" status="PASS" endtime="20170515 14:43:31.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:43:31.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:43:31.423">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:43:31.423" status="FAIL" endtime="20170515 14:43:31.423"></status>
</kw>
<status starttime="20170515 14:43:21.408" status="FAIL" endtime="20170515 14:43:31.424"></status>
</kw>
<msg level="FAIL" timestamp="20170515 14:43:31.424">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:42:51.388" status="FAIL" endtime="20170515 14:43:31.424"></status>
</kw>
<status starttime="20170515 14:42:51.387" status="FAIL" endtime="20170515 14:43:31.424"></status>
</kw>
<status starttime="20170515 14:42:51.386" status="FAIL" endtime="20170515 14:43:31.424"></status>
</kw>
<status starttime="20170515 14:42:51.386" status="FAIL" endtime="20170515 14:43:31.424"></status>
</kw>
<status starttime="20170515 14:42:51.385" status="FAIL" endtime="20170515 14:43:31.424"></status>
</kw>
<status starttime="20170515 14:42:51.385" status="FAIL" endtime="20170515 14:43:31.425"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:43:41.429">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:43:41.429" status="PASS" endtime="20170515 14:43:41.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:43:41.430">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:43:41.430" status="PASS" endtime="20170515 14:43:41.431"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:43:41.431">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:43:41.431" status="PASS" endtime="20170515 14:43:41.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:43:41.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:43:41.431" status="PASS" endtime="20170515 14:43:41.432"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:43:51.441">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:43:41.432" status="FAIL" endtime="20170515 14:43:51.441"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:43:51.442">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:43:51.442">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:43:41.432" status="PASS" endtime="20170515 14:43:51.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:43:51.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:43:51.443">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:43:51.442" status="FAIL" endtime="20170515 14:43:51.443"></status>
</kw>
<status starttime="20170515 14:43:41.429" status="FAIL" endtime="20170515 14:43:51.443"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:44:11.445">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:44:11.444" status="PASS" endtime="20170515 14:44:11.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:44:11.446">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:44:11.445" status="PASS" endtime="20170515 14:44:11.446"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:44:11.446">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:44:11.446" status="PASS" endtime="20170515 14:44:11.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:44:11.447">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:44:11.447" status="PASS" endtime="20170515 14:44:11.447"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:44:21.462">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:44:11.448" status="FAIL" endtime="20170515 14:44:21.462"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:44:21.462">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:44:21.462">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:44:11.447" status="PASS" endtime="20170515 14:44:21.462"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:44:21.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:44:21.463">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:44:21.462" status="FAIL" endtime="20170515 14:44:21.463"></status>
</kw>
<status starttime="20170515 14:44:11.443" status="FAIL" endtime="20170515 14:44:21.463"></status>
</kw>
<msg level="FAIL" timestamp="20170515 14:44:21.463">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:43:41.428" status="FAIL" endtime="20170515 14:44:21.463"></status>
</kw>
<status starttime="20170515 14:43:41.427" status="FAIL" endtime="20170515 14:44:21.464"></status>
</kw>
<status starttime="20170515 14:43:41.427" status="FAIL" endtime="20170515 14:44:21.464"></status>
</kw>
<status starttime="20170515 14:43:41.426" status="FAIL" endtime="20170515 14:44:21.464"></status>
</kw>
<status starttime="20170515 14:43:41.426" status="FAIL" endtime="20170515 14:44:21.464"></status>
</kw>
<status starttime="20170515 14:43:41.425" status="FAIL" endtime="20170515 14:44:21.464"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:44:31.469">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:44:31.469" status="PASS" endtime="20170515 14:44:31.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:44:31.470">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:44:31.470" status="PASS" endtime="20170515 14:44:31.470"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:44:31.471">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:44:31.471" status="PASS" endtime="20170515 14:44:31.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:44:31.472">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:44:31.471" status="PASS" endtime="20170515 14:44:31.472"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:44:41.489">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:44:31.473" status="FAIL" endtime="20170515 14:44:41.489"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:44:41.490">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:44:41.490">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:44:31.472" status="PASS" endtime="20170515 14:44:41.490"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:44:41.490">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:44:41.491">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:44:41.490" status="FAIL" endtime="20170515 14:44:41.491"></status>
</kw>
<status starttime="20170515 14:44:31.468" status="FAIL" endtime="20170515 14:44:41.491"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:45:01.494">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:45:01.494" status="PASS" endtime="20170515 14:45:01.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:01.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:45:01.496" status="PASS" endtime="20170515 14:45:01.496"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:01.496">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:45:01.496" status="PASS" endtime="20170515 14:45:01.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:01.497">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:45:01.497" status="PASS" endtime="20170515 14:45:01.497"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:45:11.513">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:45:01.498" status="FAIL" endtime="20170515 14:45:11.513"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:45:11.513">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:45:11.513">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:45:01.497" status="PASS" endtime="20170515 14:45:11.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:45:11.514">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:45:11.514">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:45:11.513" status="FAIL" endtime="20170515 14:45:11.514"></status>
</kw>
<status starttime="20170515 14:45:01.491" status="FAIL" endtime="20170515 14:45:11.514"></status>
</kw>
<msg level="FAIL" timestamp="20170515 14:45:11.515">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:44:31.468" status="FAIL" endtime="20170515 14:45:11.515"></status>
</kw>
<status starttime="20170515 14:44:31.467" status="FAIL" endtime="20170515 14:45:11.515"></status>
</kw>
<status starttime="20170515 14:44:31.466" status="FAIL" endtime="20170515 14:45:11.515"></status>
</kw>
<status starttime="20170515 14:44:31.466" status="FAIL" endtime="20170515 14:45:11.515"></status>
</kw>
<status starttime="20170515 14:44:31.465" status="FAIL" endtime="20170515 14:45:11.515"></status>
</kw>
<status starttime="20170515 14:44:31.465" status="FAIL" endtime="20170515 14:45:11.515"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:45:21.520">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:45:21.519" status="PASS" endtime="20170515 14:45:21.520"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:21.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:45:21.520" status="PASS" endtime="20170515 14:45:21.521"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:21.522">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:45:21.521" status="PASS" endtime="20170515 14:45:21.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:21.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:45:21.522" status="PASS" endtime="20170515 14:45:21.522"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:45:31.539">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:45:21.523" status="FAIL" endtime="20170515 14:45:31.539"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:45:31.539">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:45:31.539">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:45:21.523" status="PASS" endtime="20170515 14:45:31.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:45:31.540">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:45:31.540">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:45:31.540" status="FAIL" endtime="20170515 14:45:31.540"></status>
</kw>
<status starttime="20170515 14:45:21.519" status="FAIL" endtime="20170515 14:45:31.541"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:45:51.542">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:45:51.542" status="PASS" endtime="20170515 14:45:51.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:51.544">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:45:51.543" status="PASS" endtime="20170515 14:45:51.544"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:51.544">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:45:51.544" status="PASS" endtime="20170515 14:45:51.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:45:51.545">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:45:51.545" status="PASS" endtime="20170515 14:45:51.545"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:01.559">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:45:51.546" status="FAIL" endtime="20170515 14:46:01.560"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:01.560">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:46:01.560">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:45:51.545" status="PASS" endtime="20170515 14:46:01.560"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:01.561">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:46:01.561">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:46:01.560" status="FAIL" endtime="20170515 14:46:01.561"></status>
</kw>
<status starttime="20170515 14:45:51.541" status="FAIL" endtime="20170515 14:46:01.561"></status>
</kw>
<msg level="FAIL" timestamp="20170515 14:46:01.561">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:45:21.519" status="FAIL" endtime="20170515 14:46:01.561"></status>
</kw>
<status starttime="20170515 14:45:21.518" status="FAIL" endtime="20170515 14:46:01.561"></status>
</kw>
<status starttime="20170515 14:45:21.517" status="FAIL" endtime="20170515 14:46:01.562"></status>
</kw>
<status starttime="20170515 14:45:21.517" status="FAIL" endtime="20170515 14:46:01.562"></status>
</kw>
<status starttime="20170515 14:45:21.516" status="FAIL" endtime="20170515 14:46:01.562"></status>
</kw>
<status starttime="20170515 14:45:21.516" status="FAIL" endtime="20170515 14:46:01.562"></status>
</kw>
<msg level="FAIL" timestamp="20170515 14:46:01.562">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:42:39.788" status="FAIL" endtime="20170515 14:46:01.562"></status>
</kw>
<status starttime="20170515 14:42:38.937" status="FAIL" endtime="20170515 14:46:01.562"></status>
</kw>
<status starttime="20170515 14:42:38.937" status="FAIL" endtime="20170515 14:46:01.563"></status>
</kw>
<status starttime="20170515 14:42:38.936" status="FAIL" endtime="20170515 14:46:01.563"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:01.569">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:01.568" status="PASS" endtime="20170515 14:46:01.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:01.572">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:01.572" status="PASS" endtime="20170515 14:46:01.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:01.573">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:01.572" status="PASS" endtime="20170515 14:46:01.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:01.574">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:01.573" status="PASS" endtime="20170515 14:46:01.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:11.589">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:46:01.575" status="FAIL" endtime="20170515 14:46:11.589"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:11.589">${status} = FAIL</msg>
<msg level="INFO" timestamp="20170515 14:46:11.589">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0)</msg>
<status starttime="20170515 14:46:01.574" status="PASS" endtime="20170515 14:46:11.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:11.590">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:46:11.590">ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status starttime="20170515 14:46:11.590" status="FAIL" endtime="20170515 14:46:11.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:11.591">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status starttime="20170515 14:46:11.591" status="FAIL" endtime="20170515 14:46:11.591"></status>
</kw>
<status starttime="20170515 14:46:01.568" status="FAIL" endtime="20170515 14:46:11.592"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:31.593">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:31.593" status="PASS" endtime="20170515 14:46:31.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:31.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:31.594" status="PASS" endtime="20170515 14:46:31.594"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:31.595">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:31.594" status="PASS" endtime="20170515 14:46:31.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:31.595">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:31.595" status="PASS" endtime="20170515 14:46:31.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.405">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:31.596" status="PASS" endtime="20170515 14:46:33.406"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:33.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:33.406">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:31.596" status="PASS" endtime="20170515 14:46:33.406"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.406">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:33.406" status="PASS" endtime="20170515 14:46:33.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:33.407" status="PASS" endtime="20170515 14:46:33.407"></status>
</kw>
<status starttime="20170515 14:46:31.592" status="PASS" endtime="20170515 14:46:33.407"></status>
</kw>
<status starttime="20170515 14:46:01.567" status="PASS" endtime="20170515 14:46:33.407"></status>
</kw>
<status starttime="20170515 14:46:01.566" status="PASS" endtime="20170515 14:46:33.408"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:33.408">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170515 14:46:33.408" status="PASS" endtime="20170515 14:46:33.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:33.410">${msg} = URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170515 14:46:33.410" status="PASS" endtime="20170515 14:46:33.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.412">URI:https://9.41.166.169:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170515 14:46:33.411" status="PASS" endtime="20170515 14:46:33.412"></status>
</kw>
<status starttime="20170515 14:46:33.411" status="PASS" endtime="20170515 14:46:33.412"></status>
</kw>
<status starttime="20170515 14:46:33.409" status="PASS" endtime="20170515 14:46:33.412"></status>
</kw>
<status starttime="20170515 14:46:33.408" status="PASS" endtime="20170515 14:46:33.412"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:33.475">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:33.475">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:33.412" status="PASS" endtime="20170515 14:46:33.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:33.477">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:46:33.476" status="PASS" endtime="20170515 14:46:33.477"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.478">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170515 14:46:33.478" status="PASS" endtime="20170515 14:46:33.478"></status>
</kw>
<status starttime="20170515 14:46:33.477" status="PASS" endtime="20170515 14:46:33.478"></status>
</kw>
<status starttime="20170515 14:46:33.476" status="PASS" endtime="20170515 14:46:33.478"></status>
</kw>
<status starttime="20170515 14:46:33.475" status="PASS" endtime="20170515 14:46:33.479"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:33.479">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:01.565" status="PASS" endtime="20170515 14:46:33.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:33.479" status="PASS" endtime="20170515 14:46:33.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:33.480">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:46:33.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170515 14:46:33.480">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170515 14:46:33.480" status="PASS" endtime="20170515 14:46:33.480"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:33.480">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170515 14:46:01.565" status="PASS" endtime="20170515 14:46:33.480"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:33.481">${host_state} = Off</msg>
<status starttime="20170515 14:46:01.564" status="PASS" endtime="20170515 14:46:33.481"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:33.482">Off != Quiesced</msg>
<status starttime="20170515 14:46:33.481" status="FAIL" endtime="20170515 14:46:33.482"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:33.482">${status} = False</msg>
<status starttime="20170515 14:46:33.481" status="PASS" endtime="20170515 14:46:33.482"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:33.482">${status} = False</msg>
<status starttime="20170515 14:46:01.564" status="PASS" endtime="20170515 14:46:33.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.41.166.169</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:33.846">Length is 12</msg>
<status starttime="20170515 14:46:33.846" status="PASS" endtime="20170515 14:46:33.846"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:33.853">Running command 'ping -c 4 9.41.166.169 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:46:36.852">${RC} = 0</msg>
<msg level="INFO" timestamp="20170515 14:46:36.853">${output} = PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.693 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.615 ms
64 bytes from 9.41.166.16...</msg>
<status starttime="20170515 14:46:33.847" status="PASS" endtime="20170515 14:46:36.853"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.856">RC: 0
Output:
PING 9.41.166.169 (9.41.166.169) 56(84) bytes of data.
64 bytes from 9.41.166.169: icmp_seq=1 ttl=63 time=0.693 ms
64 bytes from 9.41.166.169: icmp_seq=2 ttl=63 time=0.615 ms
64 bytes from 9.41.166.169: icmp_seq=3 ttl=63 time=0.612 ms
64 bytes from 9.41.166.169: icmp_seq=4 ttl=63 time=0.602 ms

--- 9.41.166.169 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.602/0.630/0.693/0.044 ms</msg>
<status starttime="20170515 14:46:36.855" status="PASS" endtime="20170515 14:46:36.856"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170515 14:46:36.856" status="PASS" endtime="20170515 14:46:36.857"></status>
</kw>
<status starttime="20170515 14:46:33.845" status="PASS" endtime="20170515 14:46:36.857"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.882">${cur_time} = 2017-05-15 14:46:36:881688</msg>
<status starttime="20170515 14:46:36.881" status="PASS" endtime="20170515 14:46:36.882"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.883">${cur_time} = 20170515144636881688</msg>
<status starttime="20170515 14:46:36.882" status="PASS" endtime="20170515 14:46:36.883"></status>
</kw>
<status starttime="20170515 14:46:36.881" status="PASS" endtime="20170515 14:46:36.883"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:36.883">${FFDC_TIME} = 20170515144636881688</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.894">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170515 14:46:36.893" status="PASS" endtime="20170515 14:46:36.894"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.894">${suite_name} = 20170515144636881688_TestsTestBasicPoweron</msg>
<status starttime="20170515 14:46:36.894" status="PASS" endtime="20170515 14:46:36.894"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.895">${test_name} = PowerOnTest</msg>
<status starttime="20170515 14:46:36.895" status="PASS" endtime="20170515 14:46:36.895"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.895">${test_name} = 20170515144636881688_PowerOnTest</msg>
<status starttime="20170515 14:46:36.895" status="PASS" endtime="20170515 14:46:36.896"></status>
</kw>
<status starttime="20170515 14:46:36.893" status="PASS" endtime="20170515 14:46:36.896"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:36.896">${FFDC_DIR_PATH} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170515 14:46:36.896">${FFDC_PREFIX} = 20170515144636881688_</msg>
<msg level="INFO" timestamp="20170515 14:46:36.924">${LOG_PREFIX} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.925" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.924" status="PASS" endtime="20170515 14:46:36.925"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:36.929">${FFDC_FILE_PATH} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.958" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.958" status="PASS" endtime="20170515 14:46:36.958"></status>
</kw>
<status starttime="20170515 14:46:36.957" status="PASS" endtime="20170515 14:46:36.958"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.959" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.959" status="PASS" endtime="20170515 14:46:36.960"></status>
</kw>
<status starttime="20170515 14:46:36.958" status="PASS" endtime="20170515 14:46:36.960"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.961" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.960" status="PASS" endtime="20170515 14:46:36.961"></status>
</kw>
<status starttime="20170515 14:46:36.960" status="PASS" endtime="20170515 14:46:36.961"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.964" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.963" status="PASS" endtime="20170515 14:46:36.965"></status>
</kw>
<status starttime="20170515 14:46:36.961" status="PASS" endtime="20170515 14:46:36.965"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.967" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.967" status="PASS" endtime="20170515 14:46:36.967"></status>
</kw>
<status starttime="20170515 14:46:36.965" status="PASS" endtime="20170515 14:46:36.968"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.970" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.969" status="PASS" endtime="20170515 14:46:36.971"></status>
</kw>
<status starttime="20170515 14:46:36.968" status="PASS" endtime="20170515 14:46:36.971"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.972" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.972" status="PASS" endtime="20170515 14:46:36.973"></status>
</kw>
<status starttime="20170515 14:46:36.971" status="PASS" endtime="20170515 14:46:36.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.974" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.974" status="PASS" endtime="20170515 14:46:36.974"></status>
</kw>
<status starttime="20170515 14:46:36.973" status="PASS" endtime="20170515 14:46:36.974"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.975" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.975" status="PASS" endtime="20170515 14:46:36.975"></status>
</kw>
<status starttime="20170515 14:46:36.974" status="PASS" endtime="20170515 14:46:36.975"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.977" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.976" status="PASS" endtime="20170515 14:46:36.977"></status>
</kw>
<status starttime="20170515 14:46:36.976" status="PASS" endtime="20170515 14:46:36.977"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.978" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.978" status="PASS" endtime="20170515 14:46:36.978"></status>
</kw>
<status starttime="20170515 14:46:36.977" status="PASS" endtime="20170515 14:46:36.978"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.980" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.979" status="PASS" endtime="20170515 14:46:36.980"></status>
</kw>
<status starttime="20170515 14:46:36.979" status="PASS" endtime="20170515 14:46:36.980"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.981" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:36.981" status="PASS" endtime="20170515 14:46:36.981"></status>
</kw>
<status starttime="20170515 14:46:36.980" status="PASS" endtime="20170515 14:46:36.982"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:36.984">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:46:36.983" status="FAIL" endtime="20170515 14:46:36.984"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:36.984">${has_host} = False</msg>
<status starttime="20170515 14:46:36.983" status="PASS" endtime="20170515 14:46:36.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:46:36.985" status="PASS" endtime="20170515 14:46:36.985"></status>
</kw>
<status starttime="20170515 14:46:36.984" status="PASS" endtime="20170515 14:46:36.985"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.987">${port_num} = 22</msg>
<status starttime="20170515 14:46:36.987" status="PASS" endtime="20170515 14:46:36.987"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.988">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:46:36.987" status="PASS" endtime="20170515 14:46:36.988"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:36.988">${https_num} = 443</msg>
<status starttime="20170515 14:46:36.988" status="PASS" endtime="20170515 14:46:36.988"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.989">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:46:36.988" status="PASS" endtime="20170515 14:46:36.989"></status>
</kw>
<status starttime="20170515 14:46:36.986" status="PASS" endtime="20170515 14:46:36.989"></status>
</kw>
<status starttime="20170515 14:46:36.985" status="PASS" endtime="20170515 14:46:36.989"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:36.990">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:46:36.990" status="FAIL" endtime="20170515 14:46:36.990"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:36.990">${has_port} = False</msg>
<status starttime="20170515 14:46:36.989" status="PASS" endtime="20170515 14:46:36.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:46:36.992" status="PASS" endtime="20170515 14:46:36.992"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:46:36.992" status="PASS" endtime="20170515 14:46:36.993"></status>
</kw>
<status starttime="20170515 14:46:36.991" status="PASS" endtime="20170515 14:46:36.993"></status>
</kw>
<status starttime="20170515 14:46:36.991" status="PASS" endtime="20170515 14:46:36.993"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:36.993">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:46:38.640">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:46:36.993" status="PASS" endtime="20170515 14:46:38.640"></status>
</kw>
<status starttime="20170515 14:46:36.982" status="PASS" endtime="20170515 14:46:38.640"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.641">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170515 14:46:38.708">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:38.708">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170515 14:46:38.708">${stderr} = </msg>
<status starttime="20170515 14:46:38.641" status="PASS" endtime="20170515 14:46:38.708"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.708">Length is 0</msg>
<status starttime="20170515 14:46:38.708" status="PASS" endtime="20170515 14:46:38.708"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.709">Length is 11</msg>
<status starttime="20170515 14:46:38.709" status="PASS" endtime="20170515 14:46:38.709"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:38.709">${model_name} = Witherspoon</msg>
<status starttime="20170515 14:46:36.982" status="PASS" endtime="20170515 14:46:38.709"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.711" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.710" status="PASS" endtime="20170515 14:46:38.711"></status>
</kw>
<status starttime="20170515 14:46:38.709" status="PASS" endtime="20170515 14:46:38.711"></status>
</kw>
<status starttime="20170515 14:46:36.976" status="PASS" endtime="20170515 14:46:38.711"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.712" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.712" status="PASS" endtime="20170515 14:46:38.712"></status>
</kw>
<status starttime="20170515 14:46:38.711" status="PASS" endtime="20170515 14:46:38.712"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.713">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20170515 14:46:38.712" status="PASS" endtime="20170515 14:46:38.713"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.714" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.714" status="PASS" endtime="20170515 14:46:38.715"></status>
</kw>
<status starttime="20170515 14:46:38.713" status="PASS" endtime="20170515 14:46:38.715"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.716" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.715" status="PASS" endtime="20170515 14:46:38.716"></status>
</kw>
<status starttime="20170515 14:46:38.715" status="PASS" endtime="20170515 14:46:38.716"></status>
</kw>
<status starttime="20170515 14:46:38.713" status="PASS" endtime="20170515 14:46:38.716"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.717" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.717" status="PASS" endtime="20170515 14:46:38.717"></status>
</kw>
<status starttime="20170515 14:46:38.716" status="PASS" endtime="20170515 14:46:38.717"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.718" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.718" status="PASS" endtime="20170515 14:46:38.719"></status>
</kw>
<status starttime="20170515 14:46:38.718" status="PASS" endtime="20170515 14:46:38.719"></status>
</kw>
<status starttime="20170515 14:46:38.716" status="PASS" endtime="20170515 14:46:38.719"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.720" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.720" status="PASS" endtime="20170515 14:46:38.720"></status>
</kw>
<status starttime="20170515 14:46:38.719" status="PASS" endtime="20170515 14:46:38.720"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.721" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.721" status="PASS" endtime="20170515 14:46:38.721"></status>
</kw>
<status starttime="20170515 14:46:38.720" status="PASS" endtime="20170515 14:46:38.721"></status>
</kw>
<status starttime="20170515 14:46:38.719" status="PASS" endtime="20170515 14:46:38.721"></status>
</kw>
<status starttime="20170515 14:46:38.713" status="PASS" endtime="20170515 14:46:38.722"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.723" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:38.722" status="PASS" endtime="20170515 14:46:38.723"></status>
</kw>
<status starttime="20170515 14:46:38.722" status="PASS" endtime="20170515 14:46:38.723"></status>
</kw>
<status starttime="20170515 14:46:36.957" status="PASS" endtime="20170515 14:46:38.723"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.732">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170515 14:46:38.732" status="PASS" endtime="20170515 14:46:38.732"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.734">@{method_list} = [ ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('Core Files', 'SCP Coredump Files') | ('SEL Log', 'Collect eSEL Log') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Ge...</msg>
<status starttime="20170515 14:46:38.733" status="PASS" endtime="20170515 14:46:38.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170515 14:46:38.735" status="PASS" endtime="20170515 14:46:38.735"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:38.735">@{ffdc_function_list} = [ OS FFDC | BMC Specific Files | Core Files | SEL Log | FFDC Generic Report | Get Request FFDC ]</msg>
<status starttime="20170515 14:46:38.734" status="PASS" endtime="20170515 14:46:38.735"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170515 14:46:38.737" status="PASS" endtime="20170515 14:46:38.737"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:38.737">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:38.737">${ret_values} = None</msg>
<status starttime="20170515 14:46:38.736" status="PASS" endtime="20170515 14:46:38.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170515 14:46:38.738" status="PASS" endtime="20170515 14:46:38.738"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.776">Returning from the enclosing user keyword.</msg>
<status starttime="20170515 14:46:38.776" status="PASS" endtime="20170515 14:46:38.776"></status>
</kw>
<status starttime="20170515 14:46:38.775" status="PASS" endtime="20170515 14:46:38.777"></status>
</kw>
<status starttime="20170515 14:46:38.738" status="PASS" endtime="20170515 14:46:38.777"></status>
</kw>
<status starttime="20170515 14:46:38.735" status="PASS" endtime="20170515 14:46:38.777"></status>
</kw>
<status starttime="20170515 14:46:38.735" status="PASS" endtime="20170515 14:46:38.777"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170515 14:46:38.779" status="PASS" endtime="20170515 14:46:38.780"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:38.780">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:38.780">${ret_values} = None</msg>
<status starttime="20170515 14:46:38.779" status="PASS" endtime="20170515 14:46:38.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170515 14:46:38.780" status="PASS" endtime="20170515 14:46:38.780"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:38.817">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:46:38.817" status="FAIL" endtime="20170515 14:46:38.817"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:38.822">${has_host} = False</msg>
<status starttime="20170515 14:46:38.817" status="PASS" endtime="20170515 14:46:38.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:46:38.823" status="PASS" endtime="20170515 14:46:38.824"></status>
</kw>
<status starttime="20170515 14:46:38.823" status="PASS" endtime="20170515 14:46:38.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.826">${port_num} = 22</msg>
<status starttime="20170515 14:46:38.825" status="PASS" endtime="20170515 14:46:38.826"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.826">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:46:38.826" status="PASS" endtime="20170515 14:46:38.826"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:38.827">${https_num} = 443</msg>
<status starttime="20170515 14:46:38.826" status="PASS" endtime="20170515 14:46:38.827"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.827">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:46:38.827" status="PASS" endtime="20170515 14:46:38.828"></status>
</kw>
<status starttime="20170515 14:46:38.825" status="PASS" endtime="20170515 14:46:38.828"></status>
</kw>
<status starttime="20170515 14:46:38.824" status="PASS" endtime="20170515 14:46:38.828"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:38.829">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:46:38.828" status="FAIL" endtime="20170515 14:46:38.829"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:38.829">${has_port} = False</msg>
<status starttime="20170515 14:46:38.828" status="PASS" endtime="20170515 14:46:38.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:46:38.831" status="PASS" endtime="20170515 14:46:38.831"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:46:38.831" status="PASS" endtime="20170515 14:46:38.832"></status>
</kw>
<status starttime="20170515 14:46:38.830" status="PASS" endtime="20170515 14:46:38.832"></status>
</kw>
<status starttime="20170515 14:46:38.829" status="PASS" endtime="20170515 14:46:38.832"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:38.832">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:46:40.477">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:46:38.832" status="PASS" endtime="20170515 14:46:40.478"></status>
</kw>
<status starttime="20170515 14:46:38.816" status="PASS" endtime="20170515 14:46:40.478"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:40.479">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170515 14:46:40.479" status="PASS" endtime="20170515 14:46:40.479"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:40.480">@{cmd_list} = [ ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_dmesg', 'dmesg') ]</msg>
<status starttime="20170515 14:46:40.480" status="PASS" endtime="20170515 14:46:40.480"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:40.481">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_procinfo.txt</msg>
<status starttime="20170515 14:46:40.481" status="PASS" endtime="20170515 14:46:40.481"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170515 14:46:40.482" status="PASS" endtime="20170515 14:46:40.483"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:40.483">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170515 14:46:40.530">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:40.530">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170515 14:46:40.530">${stderr} = </msg>
<status starttime="20170515 14:46:40.483" status="PASS" endtime="20170515 14:46:40.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:40.537" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_procinfo.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:40.536" status="PASS" endtime="20170515 14:46:40.537"></status>
</kw>
<status starttime="20170515 14:46:40.535" status="PASS" endtime="20170515 14:46:40.537"></status>
</kw>
<status starttime="20170515 14:46:40.530" status="PASS" endtime="20170515 14:46:40.537"></status>
</kw>
<status starttime="20170515 14:46:40.482" status="PASS" endtime="20170515 14:46:40.537"></status>
</kw>
<status starttime="20170515 14:46:40.481" status="PASS" endtime="20170515 14:46:40.537"></status>
</kw>
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:40.538">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_journalctl.txt</msg>
<status starttime="20170515 14:46:40.538" status="PASS" endtime="20170515 14:46:40.538"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170515 14:46:40.539" status="PASS" endtime="20170515 14:46:40.540"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:40.540">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.201">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.203">${stdout} = -- Logs begin at Thu 2017-04-20 17:29:21 UTC, end at Thu 2017-04-20 17:45:42 UTC. --
Apr 20 17:29:21 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 20 17:29:21 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170515 14:46:44.203">${stderr} = </msg>
<status starttime="20170515 14:46:40.540" status="PASS" endtime="20170515 14:46:44.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:44.212" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_journalctl.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:44.211" status="PASS" endtime="20170515 14:46:44.213"></status>
</kw>
<status starttime="20170515 14:46:44.208" status="PASS" endtime="20170515 14:46:44.213"></status>
</kw>
<status starttime="20170515 14:46:44.204" status="PASS" endtime="20170515 14:46:44.213"></status>
</kw>
<status starttime="20170515 14:46:40.538" status="PASS" endtime="20170515 14:46:44.213"></status>
</kw>
<status starttime="20170515 14:46:40.538" status="PASS" endtime="20170515 14:46:44.213"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.214">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_proc_list.txt</msg>
<status starttime="20170515 14:46:44.213" status="PASS" endtime="20170515 14:46:44.214"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170515 14:46:44.215" status="PASS" endtime="20170515 14:46:44.215"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.216">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.624">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.624">${stdout} = Mem: 157476K used, 275456K free, 14604K shrd, 10492K buff, 49928K cached
CPU:  11% usr   5% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.09 1.34 1.18 1/130 1763
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170515 14:46:44.624">${stderr} = </msg>
<status starttime="20170515 14:46:44.216" status="PASS" endtime="20170515 14:46:44.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:44.631" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_proc_list.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:44.630" status="PASS" endtime="20170515 14:46:44.631"></status>
</kw>
<status starttime="20170515 14:46:44.629" status="PASS" endtime="20170515 14:46:44.631"></status>
</kw>
<status starttime="20170515 14:46:44.625" status="PASS" endtime="20170515 14:46:44.631"></status>
</kw>
<status starttime="20170515 14:46:44.214" status="PASS" endtime="20170515 14:46:44.631"></status>
</kw>
<status starttime="20170515 14:46:44.213" status="PASS" endtime="20170515 14:46:44.631"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.632">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_meminfo.txt</msg>
<status starttime="20170515 14:46:44.631" status="PASS" endtime="20170515 14:46:44.632"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170515 14:46:44.633" status="PASS" endtime="20170515 14:46:44.633"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.634">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.708">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.708">${stdout} = MemTotal:         432932 kB
MemFree:          275456 kB
MemAvailable:     317104 kB
Buffers:           10492 kB
Cached:            49928 kB
SwapCached:            0 kB
Active:           108568 kB
Inac...</msg>
<msg level="INFO" timestamp="20170515 14:46:44.709">${stderr} = </msg>
<status starttime="20170515 14:46:44.633" status="PASS" endtime="20170515 14:46:44.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:44.715" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_meminfo.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:44.714" status="PASS" endtime="20170515 14:46:44.715"></status>
</kw>
<status starttime="20170515 14:46:44.713" status="PASS" endtime="20170515 14:46:44.715"></status>
</kw>
<status starttime="20170515 14:46:44.709" status="PASS" endtime="20170515 14:46:44.715"></status>
</kw>
<status starttime="20170515 14:46:44.632" status="PASS" endtime="20170515 14:46:44.715"></status>
</kw>
<status starttime="20170515 14:46:44.631" status="PASS" endtime="20170515 14:46:44.715"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.716">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_dmesg.txt</msg>
<status starttime="20170515 14:46:44.715" status="PASS" endtime="20170515 14:46:44.716"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170515 14:46:44.717" status="PASS" endtime="20170515 14:46:44.717"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.718">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.803">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:44.803">${stdout} = UDP hash table entries: 256 (order: 0, 4096 bytes)
UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
NET: Registered protocol family 1
RPC: Registered named UNIX socket transport module.
RPC: Re...</msg>
<msg level="INFO" timestamp="20170515 14:46:44.803">${stderr} = </msg>
<status starttime="20170515 14:46:44.718" status="PASS" endtime="20170515 14:46:44.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:44.809" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_dmesg.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:44.809" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:44.808" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:44.804" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:44.716" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:44.715" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:40.481" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:40.480" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:40.479" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:40.479" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:38.816" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:38.781" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:38.777" status="PASS" endtime="20170515 14:46:44.810"></status>
</kw>
<status starttime="20170515 14:46:38.777" status="PASS" endtime="20170515 14:46:44.811"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170515 14:46:44.812" status="PASS" endtime="20170515 14:46:44.812"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:44.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:44.812">${ret_values} = None</msg>
<status starttime="20170515 14:46:44.812" status="PASS" endtime="20170515 14:46:44.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170515 14:46:44.813" status="PASS" endtime="20170515 14:46:44.813"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:44.853">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:46:44.853" status="FAIL" endtime="20170515 14:46:44.853"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:44.853">${has_host} = False</msg>
<status starttime="20170515 14:46:44.852" status="PASS" endtime="20170515 14:46:44.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:46:44.858" status="PASS" endtime="20170515 14:46:44.858"></status>
</kw>
<status starttime="20170515 14:46:44.853" status="PASS" endtime="20170515 14:46:44.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.860">${port_num} = 22</msg>
<status starttime="20170515 14:46:44.860" status="PASS" endtime="20170515 14:46:44.860"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.861">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:46:44.860" status="PASS" endtime="20170515 14:46:44.861"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:44.861">${https_num} = 443</msg>
<status starttime="20170515 14:46:44.861" status="PASS" endtime="20170515 14:46:44.861"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:44.862">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:46:44.862" status="PASS" endtime="20170515 14:46:44.863"></status>
</kw>
<status starttime="20170515 14:46:44.859" status="PASS" endtime="20170515 14:46:44.863"></status>
</kw>
<status starttime="20170515 14:46:44.859" status="PASS" endtime="20170515 14:46:44.863"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:44.864">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:46:44.863" status="FAIL" endtime="20170515 14:46:44.864"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:44.864">${has_port} = False</msg>
<status starttime="20170515 14:46:44.863" status="PASS" endtime="20170515 14:46:44.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:46:44.865" status="PASS" endtime="20170515 14:46:44.866"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:46:44.866" status="PASS" endtime="20170515 14:46:44.866"></status>
</kw>
<status starttime="20170515 14:46:44.865" status="PASS" endtime="20170515 14:46:44.866"></status>
</kw>
<status starttime="20170515 14:46:44.864" status="PASS" endtime="20170515 14:46:44.866"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:44.867">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:46:46.512">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:46:44.867" status="PASS" endtime="20170515 14:46:46.513"></status>
</kw>
<status starttime="20170515 14:46:44.851" status="PASS" endtime="20170515 14:46:46.513"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:46.513">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170515 14:46:46.560">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170515 14:46:46.560">${core_files} = </msg>
<status starttime="20170515 14:46:46.513" status="PASS" endtime="20170515 14:46:46.560"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:46.560">@{core_list} = [ ]</msg>
<status starttime="20170515 14:46:46.560" status="PASS" endtime="20170515 14:46:46.560"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170515 14:46:46.561" status="PASS" endtime="20170515 14:46:46.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170515 14:46:46.571" status="PASS" endtime="20170515 14:46:47.169"></status>
</kw>
<status starttime="20170515 14:46:46.570" status="PASS" endtime="20170515 14:46:47.169"></status>
</kw>
<status starttime="20170515 14:46:46.570" status="PASS" endtime="20170515 14:46:47.169"></status>
</kw>
<status starttime="20170515 14:46:46.560" status="PASS" endtime="20170515 14:46:47.170"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status starttime="20170515 14:46:47.170" status="PASS" endtime="20170515 14:46:47.170"></status>
</kw>
<status starttime="20170515 14:46:44.851" status="PASS" endtime="20170515 14:46:47.170"></status>
</kw>
<status starttime="20170515 14:46:44.813" status="PASS" endtime="20170515 14:46:47.170"></status>
</kw>
<status starttime="20170515 14:46:44.811" status="PASS" endtime="20170515 14:46:47.170"></status>
</kw>
<status starttime="20170515 14:46:44.811" status="PASS" endtime="20170515 14:46:47.170"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170515 14:46:47.172" status="PASS" endtime="20170515 14:46:47.172"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.173">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:47.173">${ret_values} = None</msg>
<status starttime="20170515 14:46:47.172" status="PASS" endtime="20170515 14:46:47.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170515 14:46:47.173" status="PASS" endtime="20170515 14:46:47.173"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.220">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:47.220" status="PASS" endtime="20170515 14:46:47.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.221">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:47.221" status="PASS" endtime="20170515 14:46:47.221"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.222">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:47.222" status="PASS" endtime="20170515 14:46:47.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.223">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:47.223" status="PASS" endtime="20170515 14:46:47.223"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.433">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:47.224" status="PASS" endtime="20170515 14:46:47.434"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.434">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:47.434">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:47.224" status="PASS" endtime="20170515 14:46:47.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.434">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:47.434" status="PASS" endtime="20170515 14:46:47.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.435">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:47.435" status="PASS" endtime="20170515 14:46:47.435"></status>
</kw>
<status starttime="20170515 14:46:47.217" status="PASS" endtime="20170515 14:46:47.435"></status>
</kw>
<status starttime="20170515 14:46:47.217" status="PASS" endtime="20170515 14:46:47.435"></status>
</kw>
<status starttime="20170515 14:46:47.216" status="PASS" endtime="20170515 14:46:47.436"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.436">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170515 14:46:47.436" status="PASS" endtime="20170515 14:46:47.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170515 14:46:47.436" status="PASS" endtime="20170515 14:46:47.437"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:47.480">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170515 14:46:47.437" status="PASS" endtime="20170515 14:46:47.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170515 14:46:47.480" status="PASS" endtime="20170515 14:46:47.481"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.481">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170515 14:46:47.215" status="PASS" endtime="20170515 14:46:47.481"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:46:47.483">404 != 200</msg>
<status starttime="20170515 14:46:47.482" status="FAIL" endtime="20170515 14:46:47.483"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.483">${status} = False</msg>
<status starttime="20170515 14:46:47.482" status="PASS" endtime="20170515 14:46:47.483"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.484">Returning from the enclosing user keyword.</msg>
<status starttime="20170515 14:46:47.484" status="PASS" endtime="20170515 14:46:47.484"></status>
</kw>
<status starttime="20170515 14:46:47.215" status="PASS" endtime="20170515 14:46:47.484"></status>
</kw>
<status starttime="20170515 14:46:47.173" status="PASS" endtime="20170515 14:46:47.484"></status>
</kw>
<status starttime="20170515 14:46:47.171" status="PASS" endtime="20170515 14:46:47.485"></status>
</kw>
<status starttime="20170515 14:46:47.171" status="PASS" endtime="20170515 14:46:47.485"></status>
</kw>
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170515 14:46:47.487" status="PASS" endtime="20170515 14:46:47.487"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.487">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:47.487">${ret_values} = None</msg>
<status starttime="20170515 14:46:47.486" status="PASS" endtime="20170515 14:46:47.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170515 14:46:47.488" status="PASS" endtime="20170515 14:46:47.488"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:47.527">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:46:47.527" status="FAIL" endtime="20170515 14:46:47.528"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.528">${has_host} = False</msg>
<status starttime="20170515 14:46:47.527" status="PASS" endtime="20170515 14:46:47.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:46:47.528" status="PASS" endtime="20170515 14:46:47.529"></status>
</kw>
<status starttime="20170515 14:46:47.528" status="PASS" endtime="20170515 14:46:47.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.534">${port_num} = 22</msg>
<status starttime="20170515 14:46:47.533" status="PASS" endtime="20170515 14:46:47.534"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.534">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:46:47.534" status="PASS" endtime="20170515 14:46:47.534"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:47.535">${https_num} = 443</msg>
<status starttime="20170515 14:46:47.535" status="PASS" endtime="20170515 14:46:47.535"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.536">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:46:47.535" status="PASS" endtime="20170515 14:46:47.536"></status>
</kw>
<status starttime="20170515 14:46:47.533" status="PASS" endtime="20170515 14:46:47.536"></status>
</kw>
<status starttime="20170515 14:46:47.529" status="PASS" endtime="20170515 14:46:47.536"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:47.537">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:46:47.537" status="FAIL" endtime="20170515 14:46:47.537"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:47.537">${has_port} = False</msg>
<status starttime="20170515 14:46:47.536" status="PASS" endtime="20170515 14:46:47.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:46:47.539" status="PASS" endtime="20170515 14:46:47.540"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:46:47.540" status="PASS" endtime="20170515 14:46:47.540"></status>
</kw>
<status starttime="20170515 14:46:47.538" status="PASS" endtime="20170515 14:46:47.540"></status>
</kw>
<status starttime="20170515 14:46:47.538" status="PASS" endtime="20170515 14:46:47.540"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:47.541">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:46:49.187">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:46:47.541" status="PASS" endtime="20170515 14:46:49.187"></status>
</kw>
<status starttime="20170515 14:46:47.526" status="PASS" endtime="20170515 14:46:49.187"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:49.188">@{entries} = [ DRIVER INFO | APPLICATION DATA | BMC DATA ]</msg>
<status starttime="20170515 14:46:49.188" status="PASS" endtime="20170515 14:46:49.188"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:49.189">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170515 14:46:49.189" status="PASS" endtime="20170515 14:46:49.189"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.195">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170515 14:46:49.190" status="PASS" endtime="20170515 14:46:49.195"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.198" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.198" status="PASS" endtime="20170515 14:46:49.199"></status>
</kw>
<status starttime="20170515 14:46:49.197" status="PASS" endtime="20170515 14:46:49.199"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.200" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.200" status="PASS" endtime="20170515 14:46:49.200"></status>
</kw>
<status starttime="20170515 14:46:49.199" status="PASS" endtime="20170515 14:46:49.200"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.202" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.201" status="PASS" endtime="20170515 14:46:49.202"></status>
</kw>
<status starttime="20170515 14:46:49.201" status="PASS" endtime="20170515 14:46:49.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.203" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.203" status="PASS" endtime="20170515 14:46:49.203"></status>
</kw>
<status starttime="20170515 14:46:49.202" status="PASS" endtime="20170515 14:46:49.203"></status>
</kw>
<status starttime="20170515 14:46:49.197" status="PASS" endtime="20170515 14:46:49.203"></status>
</kw>
<status starttime="20170515 14:46:49.196" status="PASS" endtime="20170515 14:46:49.203"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:49.204">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170515 14:46:49.261">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:49.261">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-42"
VERSION_ID="v1.99.5-42-gbdc80c3"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170515 14:46:49.261">${stderr} = </msg>
<status starttime="20170515 14:46:49.204" status="PASS" endtime="20170515 14:46:49.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.269" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.268" status="PASS" endtime="20170515 14:46:49.269"></status>
</kw>
<status starttime="20170515 14:46:49.267" status="PASS" endtime="20170515 14:46:49.269"></status>
</kw>
<status starttime="20170515 14:46:49.261" status="PASS" endtime="20170515 14:46:49.269"></status>
</kw>
<status starttime="20170515 14:46:49.195" status="PASS" endtime="20170515 14:46:49.269"></status>
</kw>
<status starttime="20170515 14:46:49.195" status="PASS" endtime="20170515 14:46:49.269"></status>
</kw>
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.272" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.272" status="PASS" endtime="20170515 14:46:49.272"></status>
</kw>
<status starttime="20170515 14:46:49.271" status="PASS" endtime="20170515 14:46:49.272"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.273" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.273" status="PASS" endtime="20170515 14:46:49.273"></status>
</kw>
<status starttime="20170515 14:46:49.272" status="PASS" endtime="20170515 14:46:49.274"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.275" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.274" status="PASS" endtime="20170515 14:46:49.275"></status>
</kw>
<status starttime="20170515 14:46:49.274" status="PASS" endtime="20170515 14:46:49.275"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.276" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.276" status="PASS" endtime="20170515 14:46:49.276"></status>
</kw>
<status starttime="20170515 14:46:49.275" status="PASS" endtime="20170515 14:46:49.276"></status>
</kw>
<status starttime="20170515 14:46:49.271" status="PASS" endtime="20170515 14:46:49.276"></status>
</kw>
<status starttime="20170515 14:46:49.270" status="PASS" endtime="20170515 14:46:49.276"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:49.277">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170515 14:46:49.335">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170515 14:46:49.336">${stdout} = </msg>
<msg level="INFO" timestamp="20170515 14:46:49.336">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170515 14:46:49.277" status="PASS" endtime="20170515 14:46:49.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.342" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.341" status="PASS" endtime="20170515 14:46:49.342"></status>
</kw>
<status starttime="20170515 14:46:49.340" status="PASS" endtime="20170515 14:46:49.342"></status>
</kw>
<status starttime="20170515 14:46:49.336" status="PASS" endtime="20170515 14:46:49.342"></status>
</kw>
<status starttime="20170515 14:46:49.269" status="PASS" endtime="20170515 14:46:49.342"></status>
</kw>
<status starttime="20170515 14:46:49.269" status="PASS" endtime="20170515 14:46:49.342"></status>
</kw>
<status starttime="20170515 14:46:49.195" status="PASS" endtime="20170515 14:46:49.342"></status>
</kw>
<status starttime="20170515 14:46:49.188" status="PASS" endtime="20170515 14:46:49.343"></status>
</kw>
<status starttime="20170515 14:46:49.188" status="PASS" endtime="20170515 14:46:49.343"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:49.344">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170515 14:46:49.343" status="PASS" endtime="20170515 14:46:49.344"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.344">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170515 14:46:49.344" status="PASS" endtime="20170515 14:46:49.344"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.348" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.348" status="PASS" endtime="20170515 14:46:49.348"></status>
</kw>
<status starttime="20170515 14:46:49.347" status="PASS" endtime="20170515 14:46:49.348"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.350" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.349" status="PASS" endtime="20170515 14:46:49.350"></status>
</kw>
<status starttime="20170515 14:46:49.349" status="PASS" endtime="20170515 14:46:49.350"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.351" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.351" status="PASS" endtime="20170515 14:46:49.351"></status>
</kw>
<status starttime="20170515 14:46:49.350" status="PASS" endtime="20170515 14:46:49.351"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:49.352" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:49.352" status="PASS" endtime="20170515 14:46:49.352"></status>
</kw>
<status starttime="20170515 14:46:49.351" status="PASS" endtime="20170515 14:46:49.353"></status>
</kw>
<status starttime="20170515 14:46:49.346" status="PASS" endtime="20170515 14:46:49.353"></status>
</kw>
<status starttime="20170515 14:46:49.346" status="PASS" endtime="20170515 14:46:49.353"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:49.353">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.610">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.611">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg level="INFO" timestamp="20170515 14:46:50.611">${stderr} = </msg>
<status starttime="20170515 14:46:49.353" status="PASS" endtime="20170515 14:46:50.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.617" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.616" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:50.616" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:50.611" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:49.345" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:49.345" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:49.345" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:49.343" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<status starttime="20170515 14:46:49.343" status="PASS" endtime="20170515 14:46:50.617"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:50.618">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170515 14:46:50.618" status="PASS" endtime="20170515 14:46:50.618"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.619">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170515 14:46:50.619" status="PASS" endtime="20170515 14:46:50.619"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.624" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.623" status="PASS" endtime="20170515 14:46:50.624"></status>
</kw>
<status starttime="20170515 14:46:50.623" status="PASS" endtime="20170515 14:46:50.624"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.625" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.625" status="PASS" endtime="20170515 14:46:50.626"></status>
</kw>
<status starttime="20170515 14:46:50.624" status="PASS" endtime="20170515 14:46:50.626"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.627" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.626" status="PASS" endtime="20170515 14:46:50.627"></status>
</kw>
<status starttime="20170515 14:46:50.626" status="PASS" endtime="20170515 14:46:50.627"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.628" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.628" status="PASS" endtime="20170515 14:46:50.628"></status>
</kw>
<status starttime="20170515 14:46:50.627" status="PASS" endtime="20170515 14:46:50.628"></status>
</kw>
<status starttime="20170515 14:46:50.622" status="PASS" endtime="20170515 14:46:50.628"></status>
</kw>
<status starttime="20170515 14:46:50.621" status="PASS" endtime="20170515 14:46:50.628"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:50.629">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.783">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.783">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170515 14:46:50.783">${stderr} = </msg>
<status starttime="20170515 14:46:50.629" status="PASS" endtime="20170515 14:46:50.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.789" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.788" status="PASS" endtime="20170515 14:46:50.789"></status>
</kw>
<status starttime="20170515 14:46:50.788" status="PASS" endtime="20170515 14:46:50.789"></status>
</kw>
<status starttime="20170515 14:46:50.783" status="PASS" endtime="20170515 14:46:50.789"></status>
</kw>
<status starttime="20170515 14:46:50.620" status="PASS" endtime="20170515 14:46:50.789"></status>
</kw>
<status starttime="20170515 14:46:50.620" status="PASS" endtime="20170515 14:46:50.789"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.792" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.792" status="PASS" endtime="20170515 14:46:50.792"></status>
</kw>
<status starttime="20170515 14:46:50.791" status="PASS" endtime="20170515 14:46:50.792"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.794" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.793" status="PASS" endtime="20170515 14:46:50.794"></status>
</kw>
<status starttime="20170515 14:46:50.793" status="PASS" endtime="20170515 14:46:50.794"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.795" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.795" status="PASS" endtime="20170515 14:46:50.795"></status>
</kw>
<status starttime="20170515 14:46:50.794" status="PASS" endtime="20170515 14:46:50.795"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.797" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.796" status="PASS" endtime="20170515 14:46:50.797"></status>
</kw>
<status starttime="20170515 14:46:50.795" status="PASS" endtime="20170515 14:46:50.797"></status>
</kw>
<status starttime="20170515 14:46:50.791" status="PASS" endtime="20170515 14:46:50.797"></status>
</kw>
<status starttime="20170515 14:46:50.790" status="PASS" endtime="20170515 14:46:50.797"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:50.798">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.874">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.874">${stdout} =  17:45:53 up 16 min,  load average: 1.15, 1.34, 1.17</msg>
<msg level="INFO" timestamp="20170515 14:46:50.874">${stderr} = </msg>
<status starttime="20170515 14:46:50.798" status="PASS" endtime="20170515 14:46:50.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.880" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.880" status="PASS" endtime="20170515 14:46:50.880"></status>
</kw>
<status starttime="20170515 14:46:50.879" status="PASS" endtime="20170515 14:46:50.880"></status>
</kw>
<status starttime="20170515 14:46:50.874" status="PASS" endtime="20170515 14:46:50.881"></status>
</kw>
<status starttime="20170515 14:46:50.790" status="PASS" endtime="20170515 14:46:50.881"></status>
</kw>
<status starttime="20170515 14:46:50.789" status="PASS" endtime="20170515 14:46:50.881"></status>
</kw>
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.884" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.883" status="PASS" endtime="20170515 14:46:50.884"></status>
</kw>
<status starttime="20170515 14:46:50.883" status="PASS" endtime="20170515 14:46:50.884"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.885" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.885" status="PASS" endtime="20170515 14:46:50.885"></status>
</kw>
<status starttime="20170515 14:46:50.884" status="PASS" endtime="20170515 14:46:50.885"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.886" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.886" status="PASS" endtime="20170515 14:46:50.886"></status>
</kw>
<status starttime="20170515 14:46:50.885" status="PASS" endtime="20170515 14:46:50.886"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.888" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.887" status="PASS" endtime="20170515 14:46:50.888"></status>
</kw>
<status starttime="20170515 14:46:50.887" status="PASS" endtime="20170515 14:46:50.888"></status>
</kw>
<status starttime="20170515 14:46:50.882" status="PASS" endtime="20170515 14:46:50.888"></status>
</kw>
<status starttime="20170515 14:46:50.882" status="PASS" endtime="20170515 14:46:50.888"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:50.888">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.963">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170515 14:46:50.963">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Mon May 15 14:18:22 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170515 14:46:50.963">${stderr} = </msg>
<status starttime="20170515 14:46:50.888" status="PASS" endtime="20170515 14:46:50.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:50.969" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:50.968" status="PASS" endtime="20170515 14:46:50.969"></status>
</kw>
<status starttime="20170515 14:46:50.968" status="PASS" endtime="20170515 14:46:50.969"></status>
</kw>
<status starttime="20170515 14:46:50.963" status="PASS" endtime="20170515 14:46:50.969"></status>
</kw>
<status starttime="20170515 14:46:50.881" status="PASS" endtime="20170515 14:46:50.969"></status>
</kw>
<status starttime="20170515 14:46:50.881" status="PASS" endtime="20170515 14:46:50.969"></status>
</kw>
<status starttime="20170515 14:46:50.620" status="PASS" endtime="20170515 14:46:50.969"></status>
</kw>
<status starttime="20170515 14:46:50.618" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<status starttime="20170515 14:46:50.617" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<status starttime="20170515 14:46:49.188" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<status starttime="20170515 14:46:47.526" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<status starttime="20170515 14:46:47.489" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<status starttime="20170515 14:46:47.485" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<status starttime="20170515 14:46:47.485" status="PASS" endtime="20170515 14:46:50.970"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170515 14:46:50.972" status="PASS" endtime="20170515 14:46:50.972"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:50.972">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:50.972">${ret_values} = None</msg>
<status starttime="20170515 14:46:50.971" status="PASS" endtime="20170515 14:46:50.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170515 14:46:50.973" status="PASS" endtime="20170515 14:46:50.973"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:51.013">Dictionary does not contain key 'host'.</msg>
<status starttime="20170515 14:46:51.013" status="FAIL" endtime="20170515 14:46:51.013"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:51.014">${has_host} = False</msg>
<status starttime="20170515 14:46:51.012" status="PASS" endtime="20170515 14:46:51.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170515 14:46:51.018" status="PASS" endtime="20170515 14:46:51.018"></status>
</kw>
<status starttime="20170515 14:46:51.017" status="PASS" endtime="20170515 14:46:51.018"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:51.020">${port_num} = 22</msg>
<status starttime="20170515 14:46:51.020" status="PASS" endtime="20170515 14:46:51.020"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:51.021">${SSH_PORT} = 22</msg>
<status starttime="20170515 14:46:51.020" status="PASS" endtime="20170515 14:46:51.021"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:51.021">${https_num} = 443</msg>
<status starttime="20170515 14:46:51.021" status="PASS" endtime="20170515 14:46:51.021"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:51.022">${AUTH_URI} = https://9.41.166.169:443</msg>
<status starttime="20170515 14:46:51.021" status="PASS" endtime="20170515 14:46:51.022"></status>
</kw>
<status starttime="20170515 14:46:51.019" status="PASS" endtime="20170515 14:46:51.022"></status>
</kw>
<status starttime="20170515 14:46:51.019" status="PASS" endtime="20170515 14:46:51.022"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170515 14:46:51.023">Dictionary does not contain key 'port'.</msg>
<status starttime="20170515 14:46:51.023" status="FAIL" endtime="20170515 14:46:51.023"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:51.023">${has_port} = False</msg>
<status starttime="20170515 14:46:51.022" status="PASS" endtime="20170515 14:46:51.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170515 14:46:51.025" status="PASS" endtime="20170515 14:46:51.025"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170515 14:46:51.026" status="PASS" endtime="20170515 14:46:51.026"></status>
</kw>
<status starttime="20170515 14:46:51.024" status="PASS" endtime="20170515 14:46:51.026"></status>
</kw>
<status starttime="20170515 14:46:51.024" status="PASS" endtime="20170515 14:46:51.026"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:51.027">Logging into '9.41.166.169:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170515 14:46:52.672">Read output: root@witherspoon:~#</msg>
<status starttime="20170515 14:46:51.027" status="PASS" endtime="20170515 14:46:52.672"></status>
</kw>
<status starttime="20170515 14:46:51.011" status="PASS" endtime="20170515 14:46:52.673"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.673">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170515 14:46:52.673" status="PASS" endtime="20170515 14:46:52.673"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.675">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/org/op...</msg>
<status starttime="20170515 14:46:52.674" status="PASS" endtime="20170515 14:46:52.675"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.676">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_record_log.txt</msg>
<status starttime="20170515 14:46:52.675" status="PASS" endtime="20170515 14:46:52.676"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:52.680">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:52.680" status="PASS" endtime="20170515 14:46:52.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:52.681" status="PASS" endtime="20170515 14:46:52.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.682">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:52.682" status="PASS" endtime="20170515 14:46:52.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:52.683" status="PASS" endtime="20170515 14:46:52.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:52.882">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:52.684" status="PASS" endtime="20170515 14:46:52.883"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:52.883">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:52.883">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:52.683" status="PASS" endtime="20170515 14:46:52.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:52.884">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:52.883" status="PASS" endtime="20170515 14:46:52.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:52.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:52.884" status="PASS" endtime="20170515 14:46:52.885"></status>
</kw>
<status starttime="20170515 14:46:52.679" status="PASS" endtime="20170515 14:46:52.885"></status>
</kw>
<status starttime="20170515 14:46:52.678" status="PASS" endtime="20170515 14:46:52.885"></status>
</kw>
<status starttime="20170515 14:46:52.677" status="PASS" endtime="20170515 14:46:52.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.886">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170515 14:46:52.886" status="PASS" endtime="20170515 14:46:52.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170515 14:46:52.887" status="PASS" endtime="20170515 14:46:52.887"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.930">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:52.930">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170515 14:46:52.887" status="PASS" endtime="20170515 14:46:52.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170515 14:46:52.931" status="PASS" endtime="20170515 14:46:52.931"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:52.931">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170515 14:46:52.676" status="PASS" endtime="20170515 14:46:52.931"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:52.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:46:52.932">404 != 200</msg>
<status starttime="20170515 14:46:52.932" status="FAIL" endtime="20170515 14:46:52.932"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:52.932">${status} = False</msg>
<status starttime="20170515 14:46:52.931" status="PASS" endtime="20170515 14:46:52.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170515 14:46:52.934">Continuing for loop from the next iteration.</msg>
<status starttime="20170515 14:46:52.933" status="PASS" endtime="20170515 14:46:52.934"></status>
</kw>
<status starttime="20170515 14:46:52.933" status="PASS" endtime="20170515 14:46:52.934"></status>
</kw>
<status starttime="20170515 14:46:52.675" status="PASS" endtime="20170515 14:46:52.934"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.935">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_sensor_list.txt</msg>
<status starttime="20170515 14:46:52.934" status="PASS" endtime="20170515 14:46:52.935"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:52.938">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:52.938" status="PASS" endtime="20170515 14:46:52.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.939">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:52.939" status="PASS" endtime="20170515 14:46:52.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.940">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:52.940" status="PASS" endtime="20170515 14:46:52.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:52.941">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:52.940" status="PASS" endtime="20170515 14:46:52.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.134">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:52.941" status="PASS" endtime="20170515 14:46:53.134"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.134">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:53.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:52.941" status="PASS" endtime="20170515 14:46:53.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.135">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.135" status="PASS" endtime="20170515 14:46:53.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.135" status="PASS" endtime="20170515 14:46:53.136"></status>
</kw>
<status starttime="20170515 14:46:52.938" status="PASS" endtime="20170515 14:46:53.136"></status>
</kw>
<status starttime="20170515 14:46:52.937" status="PASS" endtime="20170515 14:46:53.136"></status>
</kw>
<status starttime="20170515 14:46:52.936" status="PASS" endtime="20170515 14:46:53.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.137">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170515 14:46:53.136" status="PASS" endtime="20170515 14:46:53.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170515 14:46:53.137" status="PASS" endtime="20170515 14:46:53.137"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.357">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:53.357">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:53.138" status="PASS" endtime="20170515 14:46:53.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170515 14:46:53.357" status="PASS" endtime="20170515 14:46:53.358"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.358">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:52.935" status="PASS" endtime="20170515 14:46:53.358"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.359" status="PASS" endtime="20170515 14:46:53.359"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.359">${status} = True</msg>
<status starttime="20170515 14:46:53.358" status="PASS" endtime="20170515 14:46:53.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170515 14:46:53.360" status="PASS" endtime="20170515 14:46:53.360"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.361">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:46:53.361">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170515 14:46:53.361">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170515 14:46:53.360" status="PASS" endtime="20170515 14:46:53.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.363" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_sensor_list.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:53.362" status="PASS" endtime="20170515 14:46:53.363"></status>
</kw>
<status starttime="20170515 14:46:53.362" status="PASS" endtime="20170515 14:46:53.363"></status>
</kw>
<status starttime="20170515 14:46:52.934" status="PASS" endtime="20170515 14:46:53.363"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.364">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_elog.txt</msg>
<status starttime="20170515 14:46:53.363" status="PASS" endtime="20170515 14:46:53.364"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.366">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:53.366" status="PASS" endtime="20170515 14:46:53.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.367">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:53.367" status="PASS" endtime="20170515 14:46:53.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.368">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:53.368" status="PASS" endtime="20170515 14:46:53.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:53.368" status="PASS" endtime="20170515 14:46:53.369"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:53.369" status="PASS" endtime="20170515 14:46:53.555"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.555">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:53.555">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:53.369" status="PASS" endtime="20170515 14:46:53.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.556">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.555" status="PASS" endtime="20170515 14:46:53.556"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.556" status="PASS" endtime="20170515 14:46:53.556"></status>
</kw>
<status starttime="20170515 14:46:53.366" status="PASS" endtime="20170515 14:46:53.557"></status>
</kw>
<status starttime="20170515 14:46:53.365" status="PASS" endtime="20170515 14:46:53.557"></status>
</kw>
<status starttime="20170515 14:46:53.365" status="PASS" endtime="20170515 14:46:53.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.557">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170515 14:46:53.557" status="PASS" endtime="20170515 14:46:53.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170515 14:46:53.558" status="PASS" endtime="20170515 14:46:53.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:53.604">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170515 14:46:53.558" status="PASS" endtime="20170515 14:46:53.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170515 14:46:53.604" status="PASS" endtime="20170515 14:46:53.604"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.604">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170515 14:46:53.364" status="PASS" endtime="20170515 14:46:53.604"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.606">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170515 14:46:53.606">404 != 200</msg>
<status starttime="20170515 14:46:53.605" status="FAIL" endtime="20170515 14:46:53.606"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.606">${status} = False</msg>
<status starttime="20170515 14:46:53.605" status="PASS" endtime="20170515 14:46:53.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170515 14:46:53.607">Continuing for loop from the next iteration.</msg>
<status starttime="20170515 14:46:53.607" status="PASS" endtime="20170515 14:46:53.608"></status>
</kw>
<status starttime="20170515 14:46:53.607" status="PASS" endtime="20170515 14:46:53.608"></status>
</kw>
<status starttime="20170515 14:46:53.363" status="PASS" endtime="20170515 14:46:53.608"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.609">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_led.txt</msg>
<status starttime="20170515 14:46:53.608" status="PASS" endtime="20170515 14:46:53.609"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.613">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:53.612" status="PASS" endtime="20170515 14:46:53.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.614">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:53.613" status="PASS" endtime="20170515 14:46:53.614"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.615">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:53.614" status="PASS" endtime="20170515 14:46:53.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:53.615" status="PASS" endtime="20170515 14:46:53.616"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.984">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:53.617" status="PASS" endtime="20170515 14:46:53.984"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:53.985">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:53.985">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:53.616" status="PASS" endtime="20170515 14:46:53.985"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.985">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.985" status="PASS" endtime="20170515 14:46:53.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:53.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:53.986" status="PASS" endtime="20170515 14:46:53.986"></status>
</kw>
<status starttime="20170515 14:46:53.611" status="PASS" endtime="20170515 14:46:53.986"></status>
</kw>
<status starttime="20170515 14:46:53.611" status="PASS" endtime="20170515 14:46:53.986"></status>
</kw>
<status starttime="20170515 14:46:53.610" status="PASS" endtime="20170515 14:46:53.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:53.987">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170515 14:46:53.987" status="PASS" endtime="20170515 14:46:53.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170515 14:46:53.988" status="PASS" endtime="20170515 14:46:53.988"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.069">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:54.069">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:53.988" status="PASS" endtime="20170515 14:46:54.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170515 14:46:54.069" status="PASS" endtime="20170515 14:46:54.070"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:54.070">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:53.609" status="PASS" endtime="20170515 14:46:54.070"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:54.071">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:54.071" status="PASS" endtime="20170515 14:46:54.071"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:54.071">${status} = True</msg>
<status starttime="20170515 14:46:54.070" status="PASS" endtime="20170515 14:46:54.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170515 14:46:54.072" status="PASS" endtime="20170515 14:46:54.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.073">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:46:54.073">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170515 14:46:54.073">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170515 14:46:54.072" status="PASS" endtime="20170515 14:46:54.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:54.074" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_led.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:54.074" status="PASS" endtime="20170515 14:46:54.074"></status>
</kw>
<status starttime="20170515 14:46:54.073" status="PASS" endtime="20170515 14:46:54.075"></status>
</kw>
<status starttime="20170515 14:46:53.608" status="PASS" endtime="20170515 14:46:54.075"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.075">${logpath} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_inventory.txt</msg>
<status starttime="20170515 14:46:54.075" status="PASS" endtime="20170515 14:46:54.075"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:54.078">Creating Session using : alias=openbmc, url=https://9.41.166.169:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170515 14:46:54.078" status="PASS" endtime="20170515 14:46:54.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.079">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170515 14:46:54.079" status="PASS" endtime="20170515 14:46:54.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.080">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170515 14:46:54.079" status="PASS" endtime="20170515 14:46:54.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.080">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170515 14:46:54.080" status="PASS" endtime="20170515 14:46:54.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:54.269">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170515 14:46:54.081" status="PASS" endtime="20170515 14:46:54.269"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:54.269">${status} = PASS</msg>
<msg level="INFO" timestamp="20170515 14:46:54.269">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:54.081" status="PASS" endtime="20170515 14:46:54.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:54.270">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:54.269" status="PASS" endtime="20170515 14:46:54.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:54.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:54.270" status="PASS" endtime="20170515 14:46:54.270"></status>
</kw>
<status starttime="20170515 14:46:54.077" status="PASS" endtime="20170515 14:46:54.271"></status>
</kw>
<status starttime="20170515 14:46:54.077" status="PASS" endtime="20170515 14:46:54.271"></status>
</kw>
<status starttime="20170515 14:46:54.076" status="PASS" endtime="20170515 14:46:54.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:54.271">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170515 14:46:54.271" status="PASS" endtime="20170515 14:46:54.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170515 14:46:54.272" status="PASS" endtime="20170515 14:46:54.272"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:55.927">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170515 14:46:55.928">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:54.272" status="PASS" endtime="20170515 14:46:55.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170515 14:46:55.928" status="PASS" endtime="20170515 14:46:55.928"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:55.928">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170515 14:46:54.076" status="PASS" endtime="20170515 14:46:55.929"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:55.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170515 14:46:55.929" status="PASS" endtime="20170515 14:46:55.930"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:55.930">${status} = True</msg>
<status starttime="20170515 14:46:55.929" status="PASS" endtime="20170515 14:46:55.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170515 14:46:55.930" status="PASS" endtime="20170515 14:46:55.930"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:55.933">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "2", 
      "PartNumber": "0000000000000000", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "0000000", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933815990", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL982", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817514", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0d83", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e72", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9a", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e66", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e88", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dad", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e8f", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e9d", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0daf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0dc7", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e95", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ec3", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0db6", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0ebf", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0da9", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0xce80", 
      "Model": "M393A1G40EB2-CTD    ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x030a0e73", 
      "Version": "0x00"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170515 14:46:55.934">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170515 14:46:55.934">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
 ...</msg>
<status starttime="20170515 14:46:55.931" status="PASS" endtime="20170515 14:46:55.934"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:55.936" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_inventory.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/20170515144636881688_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:55.935" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:55.934" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:54.075" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:52.675" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:52.674" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:52.674" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:52.673" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:51.011" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:50.974" status="PASS" endtime="20170515 14:46:55.936"></status>
</kw>
<status starttime="20170515 14:46:50.970" status="PASS" endtime="20170515 14:46:55.937"></status>
</kw>
<status starttime="20170515 14:46:50.970" status="PASS" endtime="20170515 14:46:55.937"></status>
</kw>
<status starttime="20170515 14:46:38.735" status="PASS" endtime="20170515 14:46:55.937"></status>
</kw>
<status starttime="20170515 14:46:38.733" status="PASS" endtime="20170515 14:46:55.937"></status>
</kw>
<status starttime="20170515 14:46:38.733" status="PASS" endtime="20170515 14:46:55.937"></status>
</kw>
<status starttime="20170515 14:46:38.732" status="PASS" endtime="20170515 14:46:55.937"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170515 14:46:55.937" status="PASS" endtime="20170515 14:46:56.083"></status>
</kw>
<status starttime="20170515 14:46:38.731" status="PASS" endtime="20170515 14:46:56.083"></status>
</kw>
<status starttime="20170515 14:46:33.483" status="PASS" endtime="20170515 14:46:56.084"></status>
</kw>
<status starttime="20170515 14:46:33.483" status="PASS" endtime="20170515 14:46:56.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170515 14:46:56.084" status="PASS" endtime="20170515 14:46:56.084"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.093">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170515 14:46:56.085" status="PASS" endtime="20170515 14:46:56.093"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.094">${FFDC_DIR_PATH} = /tmp/fspcibld/20567/obmc-robot/logs/20170515144636881688_TestsTestBasicPoweron/20170515144636881688_PowerOnTest/</msg>
<status starttime="20170515 14:46:56.094" status="PASS" endtime="20170515 14:46:56.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170515 14:46:56.095" status="PASS" endtime="20170515 14:46:56.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170515 14:46:56.096" status="PASS" endtime="20170515 14:46:56.096"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:56.097" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs"&gt;/tmp/fspcibld/20567/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170515 14:46:56.096" status="PASS" endtime="20170515 14:46:56.097"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:56.098" html="yes">File '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170515 14:46:56.098" status="PASS" endtime="20170515 14:46:56.098"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:56.098">${exist} = True</msg>
<status starttime="20170515 14:46:56.097" status="PASS" endtime="20170515 14:46:56.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170515 14:46:56.098" status="PASS" endtime="20170515 14:46:56.099"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170515 14:46:56.099" status="PASS" endtime="20170515 14:46:56.099"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.100">${cur_time} = 2017-05-15 14:46:56:100035</msg>
<status starttime="20170515 14:46:56.100" status="PASS" endtime="20170515 14:46:56.100"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.101">${cur_time} = 20170515144656100035</msg>
<status starttime="20170515 14:46:56.101" status="PASS" endtime="20170515 14:46:56.101"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:56.101">${cur_time} = 20170515144656100035</msg>
<status starttime="20170515 14:46:56.099" status="PASS" endtime="20170515 14:46:56.101"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:56.102" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/20567/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/20567/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170515 14:46:56.101" status="PASS" endtime="20170515 14:46:56.102"></status>
</kw>
<status starttime="20170515 14:46:56.085" status="PASS" endtime="20170515 14:46:56.102"></status>
</kw>
<status starttime="20170515 14:46:01.563" status="PASS" endtime="20170515 14:46:56.102"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.104">${default_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:46:56.104" status="PASS" endtime="20170515 14:46:56.104"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.104">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:46:56.104" status="PASS" endtime="20170515 14:46:56.105"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:56.105">${log_file_path} = /tmp/9.41.166.169_os_console</msg>
<status starttime="20170515 14:46:56.103" status="PASS" endtime="20170515 14:46:56.105"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.106">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170515 14:46:56.105" status="PASS" endtime="20170515 14:46:56.106"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:46:56.106" status="PASS" endtime="20170515 14:46:56.116"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.130">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:46:56.147">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:46:56.147">${output} = /tmp/fspcibld/20567/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170515 14:46:56.116" status="PASS" endtime="20170515 14:46:56.148"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170515 14:46:56.158" status="PASS" endtime="20170515 14:46:56.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170515 14:46:56.173" status="PASS" endtime="20170515 14:46:56.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.175">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170515 14:46:56.174" status="PASS" endtime="20170515 14:46:56.175"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:56.175">${search_string} = ssh_pw 0penBmc -p 2200 root@9.41.166.169</msg>
<status starttime="20170515 14:46:56.105" status="PASS" endtime="20170515 14:46:56.175"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.176">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170515 14:46:56.175" status="PASS" endtime="20170515 14:46:56.176"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:46:56.176" status="PASS" endtime="20170515 14:46:56.224"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.230">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.41.166.169' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:46:56.239">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:46:56.239">${os_con_pid} = 194</msg>
<status starttime="20170515 14:46:56.225" status="PASS" endtime="20170515 14:46:56.240"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170515 14:46:56.242" status="PASS" endtime="20170515 14:46:56.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.256">${cmd_buf} = kill -9 194</msg>
<status starttime="20170515 14:46:56.256" status="PASS" endtime="20170515 14:46:56.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:46:56.258" status="PASS" endtime="20170515 14:46:56.268"></status>
</kw>
<status starttime="20170515 14:46:56.257" status="PASS" endtime="20170515 14:46:56.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:56.273">Running command 'kill -9 194 2&gt;&amp;1'.</msg>
<status starttime="20170515 14:46:56.269" status="PASS" endtime="20170515 14:46:56.276"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:56.277">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:46:56.277">${output} = </msg>
<status starttime="20170515 14:46:56.268" status="PASS" endtime="20170515 14:46:56.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170515 14:46:56.281" status="PASS" endtime="20170515 14:46:56.290"></status>
</kw>
<status starttime="20170515 14:46:56.280" status="PASS" endtime="20170515 14:46:56.291"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.291">${cmd_buf} = cat /tmp/9.41.166.169_os_console 2&gt;&amp;1</msg>
<status starttime="20170515 14:46:56.291" status="PASS" endtime="20170515 14:46:56.291"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170515 14:46:56.291" status="PASS" endtime="20170515 14:46:56.298"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170515 14:46:56.303">Running command 'cat /tmp/9.41.166.169_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170515 14:46:56.306">${rc} = 0</msg>
<msg level="INFO" timestamp="20170515 14:46:56.307">${output} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170515 14:46:56.299" status="PASS" endtime="20170515 14:46:56.307"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170515 14:46:56.309" status="PASS" endtime="20170515 14:46:56.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170515 14:46:56.321" status="PASS" endtime="20170515 14:46:56.322"></status>
</kw>
<msg level="INFO" timestamp="20170515 14:46:56.322">${sol_log} = spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0...</msg>
<status starttime="20170515 14:46:56.103" status="PASS" endtime="20170515 14:46:56.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170515 14:46:56.323">spawn ssh -p 2200 root@9.41.166.169
The authenticity of host '[9.41.166.169]:2200 ([9.41.166.169]:2200)' can't be established.
RSA key fingerprint is SHA256:e7Qu5V+LK+aPKCU4tW+3WcuQhuy8UIg90KdZdUk+XK0.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.41.166.169]:2200' (RSA) to the list of known hosts.
root@9.41.166.169's password: </msg>
<status starttime="20170515 14:46:56.323" status="PASS" endtime="20170515 14:46:56.323"></status>
</kw>
<status starttime="20170515 14:46:01.563" status="PASS" endtime="20170515 14:46:56.323"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" starttime="20170515 14:42:38.786" status="FAIL" endtime="20170515 14:46:56.323">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.41.166.169', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170515 14:42:38.753" status="FAIL" endtime="20170515 14:46:56.325"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170515 14:42:31.823" status="FAIL" endtime="20170515 14:46:56.328"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" name="Tests" pass="1" fail="1">Tests</stat>
<stat id="s1-s1" name="Security" pass="1" fail="0">Tests.Security</stat>
<stat id="s1-s1-s1" name="Test Ssl" pass="1" fail="0">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" name="Test Basic Poweron" pass="0" fail="1">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
