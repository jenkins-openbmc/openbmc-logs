<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161111 15:01:10.716">
<suite id="s1" name="Tests" source="/tmp/root/5463/obmc-robot/tests">
<suite id="s1-s1" name="Security" source="/tmp/root/5463/obmc-robot/tests/security">
<suite id="s1-s1-s1" name="Test Ssl" source="/tmp/root/5463/obmc-robot/tests/security/test_ssl.robot">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:11.420">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:11.421" starttime="20161111 15:01:11.420" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:11.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:11.422" starttime="20161111 15:01:11.421" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:11.423">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:11.423" starttime="20161111 15:01:11.422" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:11.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:11.424" starttime="20161111 15:01:11.423" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:11.776">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:11.776">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:11.776" starttime="20161111 15:01:11.424" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.344">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:12.345">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:12.345" starttime="20161111 15:01:11.777" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:12.346" starttime="20161111 15:01:12.345" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.347">To JSON using : content={
  "data": [
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/records/events/339/fru", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/records/events/339", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:12.348">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:12.349">${jsondata} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board/...</msg>
<status endtime="20161111 15:01:12.349" starttime="20161111 15:01:12.346" status="PASS"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.349">Length is 3</msg>
<status endtime="20161111 15:01:12.350" starttime="20161111 15:01:12.349" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:01:12.353" starttime="20161111 15:01:12.351" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.354" html="yes">Created directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20161111 15:01:12.354" starttime="20161111 15:01:12.354" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:12.355">File '/tmp/root/5463/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20161111 15:01:12.355" starttime="20161111 15:01:12.355" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:12.355">${exist} = False</msg>
<status endtime="20161111 15:01:12.355" starttime="20161111 15:01:12.355" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.359" html="yes">Created file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:01:12.359" starttime="20161111 15:01:12.358" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.359" starttime="20161111 15:01:12.356" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.360">${cur_time} = 2016-11-11 15:01:12:359578</msg>
<status endtime="20161111 15:01:12.360" starttime="20161111 15:01:12.359" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.360">${cur_time} = 20161111150112359578</msg>
<status endtime="20161111 15:01:12.360" starttime="20161111 15:01:12.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:12.361">${cur_time} = 20161111150112359578</msg>
<status endtime="20161111 15:01:12.361" starttime="20161111 15:01:12.359" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.361" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:01:12.361" starttime="20161111 15:01:12.361" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.361" starttime="20161111 15:01:12.353" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.361" starttime="20161111 15:01:12.350" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20161111 15:01:12.362" critical="yes" starttime="20161111 15:01:11.419" status="PASS"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161111 15:01:12.362">Delete All Sessions</msg>
<status endtime="20161111 15:01:12.362" starttime="20161111 15:01:12.362" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20161111 15:01:12.363" starttime="20161111 15:01:10.739" status="PASS"></status>
</suite>
<status endtime="20161111 15:01:12.365" starttime="20161111 15:01:10.738" status="PASS"></status>
</suite>
<suite id="s1-s2" name="Test Association" source="/tmp/root/5463/obmc-robot/tests/test_association.robot">
<kw name="Suite Initialization Setup" type="setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:12.386">Dictionary does not contain key 'host'.</msg>
<status endtime="20161111 15:01:12.386" starttime="20161111 15:01:12.385" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:12.386">${has_host} = False</msg>
<status endtime="20161111 15:01:12.386" starttime="20161111 15:01:12.385" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161111 15:01:12.389" starttime="20161111 15:01:12.389" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.389" starttime="20161111 15:01:12.386" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.393">${port_num} = 22</msg>
<status endtime="20161111 15:01:12.393" starttime="20161111 15:01:12.393" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.393">${SSH_PORT} = 22</msg>
<status endtime="20161111 15:01:12.393" starttime="20161111 15:01:12.393" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:12.394">${https_num} = 443</msg>
<status endtime="20161111 15:01:12.394" starttime="20161111 15:01:12.394" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.395">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161111 15:01:12.395" starttime="20161111 15:01:12.394" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.395" starttime="20161111 15:01:12.392" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.395" starttime="20161111 15:01:12.390" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:12.396">Dictionary does not contain key 'port'.</msg>
<status endtime="20161111 15:01:12.396" starttime="20161111 15:01:12.395" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:12.396">${has_port} = False</msg>
<status endtime="20161111 15:01:12.396" starttime="20161111 15:01:12.395" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161111 15:01:12.400" starttime="20161111 15:01:12.400" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161111 15:01:12.401" starttime="20161111 15:01:12.400" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.401" starttime="20161111 15:01:12.399" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:12.401" starttime="20161111 15:01:12.396" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:12.402">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161111 15:01:14.699">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161111 15:01:14.700" starttime="20161111 15:01:12.401" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:14.700" starttime="20161111 15:01:12.385" status="PASS"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:14.703">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161111 15:01:14.703" starttime="20161111 15:01:14.703" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:14.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:14.704" starttime="20161111 15:01:14.704" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:14.705" starttime="20161111 15:01:14.705" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:14.707">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:14.707" starttime="20161111 15:01:14.706" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:14.708">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:14.709" starttime="20161111 15:01:14.708" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:14.709" starttime="20161111 15:01:14.707" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:14.709" starttime="20161111 15:01:14.705" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:14.710">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:14.711" starttime="20161111 15:01:14.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:14.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:14.711" starttime="20161111 15:01:14.711" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:14.712">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:14.712" starttime="20161111 15:01:14.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:14.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:14.712" starttime="20161111 15:01:14.712" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.042">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:15.042">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:15.042" starttime="20161111 15:01:14.713" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.043">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:15.043" starttime="20161111 15:01:15.042" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.043" starttime="20161111 15:01:14.709" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.450">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:15.451">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:15.451" starttime="20161111 15:01:15.043" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.453">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:15.453" starttime="20161111 15:01:15.452" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.454">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:15.454" starttime="20161111 15:01:15.454" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.454" starttime="20161111 15:01:15.453" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.454" starttime="20161111 15:01:15.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:15.455">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:15.455" starttime="20161111 15:01:14.701" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.456">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:15.456" starttime="20161111 15:01:15.455" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.457">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161111 15:01:15.457" starttime="20161111 15:01:15.457" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.460">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:01:15.460" starttime="20161111 15:01:15.458" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.461">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:01:15.461" starttime="20161111 15:01:15.460" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.461" starttime="20161111 15:01:15.460" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.461" starttime="20161111 15:01:15.458" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.462">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:15.462" starttime="20161111 15:01:15.461" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.463">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:15.463" starttime="20161111 15:01:15.462" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.463">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:15.463" starttime="20161111 15:01:15.463" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.464">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:15.464" starttime="20161111 15:01:15.464" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.916">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:15.916">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:15.916" starttime="20161111 15:01:15.464" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:15.917" starttime="20161111 15:01:15.917" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.917" starttime="20161111 15:01:15.461" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.980">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:15.980">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:15.980" starttime="20161111 15:01:15.917" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.981">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:15.981" starttime="20161111 15:01:15.981" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.982">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:15.982" starttime="20161111 15:01:15.982" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.982" starttime="20161111 15:01:15.982" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.983" starttime="20161111 15:01:15.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:15.983">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:15.983" starttime="20161111 15:01:15.456" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.983">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:15.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:15.983">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20161111 15:01:15.983" starttime="20161111 15:01:15.983" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.984">Length is 0</msg>
<status endtime="20161111 15:01:15.984" starttime="20161111 15:01:15.984" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.984" starttime="20161111 15:01:14.701" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.984" starttime="20161111 15:01:14.701" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.984" starttime="20161111 15:01:12.384" status="PASS"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.986">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161111 15:01:15.986" starttime="20161111 15:01:15.986" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:15.987" starttime="20161111 15:01:15.986" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:15.987" starttime="20161111 15:01:15.987" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.989">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:15.989" starttime="20161111 15:01:15.988" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.990">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:15.990" starttime="20161111 15:01:15.989" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.990" starttime="20161111 15:01:15.989" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:15.991" starttime="20161111 15:01:15.987" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:15.991">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:15.992" starttime="20161111 15:01:15.991" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.992">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:15.992" starttime="20161111 15:01:15.992" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.993">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:15.993" starttime="20161111 15:01:15.992" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:15.993">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:15.993" starttime="20161111 15:01:15.993" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.358">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:16.359">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:16.359" starttime="20161111 15:01:15.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:16.360">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:16.360" starttime="20161111 15:01:16.359" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:16.360" starttime="20161111 15:01:15.991" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.581">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:16.581">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:16.581" starttime="20161111 15:01:16.360" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.583">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:16.583" starttime="20161111 15:01:16.582" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:16.584">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:16.585" starttime="20161111 15:01:16.584" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:16.585" starttime="20161111 15:01:16.583" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:16.585" starttime="20161111 15:01:16.581" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:16.585">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:16.585" starttime="20161111 15:01:15.985" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:16.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:16.586" starttime="20161111 15:01:16.586" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.588">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161111 15:01:16.589" starttime="20161111 15:01:16.587" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.591">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:01:16.591" starttime="20161111 15:01:16.590" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:16.592">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:01:16.592" starttime="20161111 15:01:16.592" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:16.592" starttime="20161111 15:01:16.591" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:16.592" starttime="20161111 15:01:16.589" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:16.593">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:16.594" starttime="20161111 15:01:16.593" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:16.594" starttime="20161111 15:01:16.594" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.595">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:16.595" starttime="20161111 15:01:16.595" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:16.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:16.596" starttime="20161111 15:01:16.595" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.000">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:17.000">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:17.001" starttime="20161111 15:01:16.596" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.001">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:17.001" starttime="20161111 15:01:17.001" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.002" starttime="20161111 15:01:16.592" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.058">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:17.058">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:17.058" starttime="20161111 15:01:17.002" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.059">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:17.059" starttime="20161111 15:01:17.059" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.060">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:17.060" starttime="20161111 15:01:17.060" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.060" starttime="20161111 15:01:17.059" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.060" starttime="20161111 15:01:17.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:17.061">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:17.061" starttime="20161111 15:01:16.586" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.061">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:17.061">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:17.061">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20161111 15:01:17.061" starttime="20161111 15:01:17.061" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.062">Length is 0</msg>
<status endtime="20161111 15:01:17.062" starttime="20161111 15:01:17.061" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.062" starttime="20161111 15:01:15.985" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.062" starttime="20161111 15:01:15.985" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.062">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161111 15:01:17.423">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161111 15:01:17.427">${elog} = q 340</msg>
<msg level="INFO" timestamp="20161111 15:01:17.427">${stderr} = </msg>
<status endtime="20161111 15:01:17.428" starttime="20161111 15:01:17.062" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.428">Length is 0</msg>
<status endtime="20161111 15:01:17.428" starttime="20161111 15:01:17.428" status="PASS"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.430">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161111 15:01:17.430" starttime="20161111 15:01:17.429" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.432">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:01:17.432" starttime="20161111 15:01:17.431" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.433">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:01:17.433" starttime="20161111 15:01:17.433" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.433" starttime="20161111 15:01:17.432" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.434" starttime="20161111 15:01:17.430" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.435">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:17.435" starttime="20161111 15:01:17.434" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.436">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:17.436" starttime="20161111 15:01:17.436" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.437">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:17.437" starttime="20161111 15:01:17.437" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.438">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:17.438" starttime="20161111 15:01:17.438" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.818">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:17.818">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:17.818" starttime="20161111 15:01:17.438" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:17.819" starttime="20161111 15:01:17.818" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.819" starttime="20161111 15:01:17.434" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.874">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:17.874">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:17.874" starttime="20161111 15:01:17.819" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.876">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/340"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:17.876" starttime="20161111 15:01:17.875" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.877">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/340"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:17.877" starttime="20161111 15:01:17.877" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.877" starttime="20161111 15:01:17.876" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.877" starttime="20161111 15:01:17.875" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:17.877">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:17.877" starttime="20161111 15:01:17.429" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.878">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:17.878" starttime="20161111 15:01:17.878" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.878">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/340"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:17.878">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:17.878">${jsondata} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/340']}</msg>
<status endtime="20161111 15:01:17.879" starttime="20161111 15:01:17.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:17.879">${log_list} = [u'/org/openbmc/records/events/340']</msg>
<status endtime="20161111 15:01:17.879" starttime="20161111 15:01:17.428" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status endtime="20161111 15:01:17.879" starttime="20161111 15:01:17.879" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.880">${association_uri} = /org/openbmc/records/events/340/fru</msg>
<status endtime="20161111 15:01:17.880" starttime="20161111 15:01:17.879" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.881">${base_uri} = /org/openbmc/records/events/340/fru/attr/endpoints</msg>
<status endtime="20161111 15:01:17.881" starttime="20161111 15:01:17.881" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.883">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/340/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:17.883" starttime="20161111 15:01:17.882" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.883">URI:https://9.3.23.30:443/org/openbmc/records/events/340/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:17.884" starttime="20161111 15:01:17.883" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.884" starttime="20161111 15:01:17.883" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:17.884" starttime="20161111 15:01:17.881" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:17.885">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:17.885" starttime="20161111 15:01:17.884" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.886">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:17.886" starttime="20161111 15:01:17.885" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.886">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:17.886" starttime="20161111 15:01:17.886" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:17.887">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:17.887" starttime="20161111 15:01:17.887" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.308">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:18.309">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:18.309" starttime="20161111 15:01:17.887" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.310">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:18.310" starttime="20161111 15:01:18.309" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.310" starttime="20161111 15:01:17.884" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.393">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/340/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:18.393">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:18.393" starttime="20161111 15:01:18.311" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.394">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:18.394" starttime="20161111 15:01:18.394" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.395">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:18.396" starttime="20161111 15:01:18.395" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.396" starttime="20161111 15:01:18.395" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.396" starttime="20161111 15:01:18.393" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:18.396">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:18.396" starttime="20161111 15:01:17.880" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.397">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:18.397">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:18.397">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']}</msg>
<status endtime="20161111 15:01:18.397" starttime="20161111 15:01:18.396" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:18.398">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status endtime="20161111 15:01:18.398" starttime="20161111 15:01:17.880" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status endtime="20161111 15:01:18.398" starttime="20161111 15:01:18.398" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.400">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status endtime="20161111 15:01:18.400" starttime="20161111 15:01:18.400" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.402">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:18.402" starttime="20161111 15:01:18.401" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.403">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:18.403" starttime="20161111 15:01:18.403" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.403" starttime="20161111 15:01:18.402" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.404" starttime="20161111 15:01:18.401" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.405">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:18.405" starttime="20161111 15:01:18.404" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:18.406" starttime="20161111 15:01:18.405" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.407">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:18.407" starttime="20161111 15:01:18.406" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:18.408" starttime="20161111 15:01:18.407" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:18.745">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:18.745" starttime="20161111 15:01:18.408" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:18.745" starttime="20161111 15:01:18.745" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.746" starttime="20161111 15:01:18.404" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.829">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:18.829">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:18.829" starttime="20161111 15:01:18.746" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.831">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/340"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:18.831" starttime="20161111 15:01:18.830" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.831">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/340"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:18.832" starttime="20161111 15:01:18.831" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.832" starttime="20161111 15:01:18.831" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.832" starttime="20161111 15:01:18.830" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:18.832">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:18.832" starttime="20161111 15:01:18.399" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.833">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/340"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:18.833">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:18.833">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/340']}</msg>
<status endtime="20161111 15:01:18.833" starttime="20161111 15:01:18.832" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:18.833">${dimm1_event} = [u'/org/openbmc/records/events/340']</msg>
<status endtime="20161111 15:01:18.833" starttime="20161111 15:01:18.398" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status endtime="20161111 15:01:18.834" starttime="20161111 15:01:18.833" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:01:18.837" starttime="20161111 15:01:18.834" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.838" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:01:18.838" starttime="20161111 15:01:18.837" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.838" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:01:18.839" starttime="20161111 15:01:18.838" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:18.839">${exist} = True</msg>
<status endtime="20161111 15:01:18.839" starttime="20161111 15:01:18.838" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:01:18.842" starttime="20161111 15:01:18.839" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.843">${cur_time} = 2016-11-11 15:01:18:842390</msg>
<status endtime="20161111 15:01:18.843" starttime="20161111 15:01:18.842" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.843">${cur_time} = 20161111150118842390</msg>
<status endtime="20161111 15:01:18.843" starttime="20161111 15:01:18.843" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:18.844">${cur_time} = 20161111150118842390</msg>
<status endtime="20161111 15:01:18.844" starttime="20161111 15:01:18.842" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.845" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:01:18.845" starttime="20161111 15:01:18.844" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.845" starttime="20161111 15:01:18.837" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.845" starttime="20161111 15:01:18.834" status="PASS"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status endtime="20161111 15:01:18.845" critical="yes" starttime="20161111 15:01:15.984" status="PASS"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.847">${data} = {u'data': []}</msg>
<status endtime="20161111 15:01:18.847" starttime="20161111 15:01:18.846" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.848">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161111 15:01:18.848" starttime="20161111 15:01:18.847" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.848">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:18.848" starttime="20161111 15:01:18.848" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:18.849" starttime="20161111 15:01:18.848" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.850">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:18.850" starttime="20161111 15:01:18.849" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.851">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:18.851" starttime="20161111 15:01:18.851" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.851" starttime="20161111 15:01:18.850" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:18.851" starttime="20161111 15:01:18.849" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:18.852">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:18.852" starttime="20161111 15:01:18.852" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:18.853" starttime="20161111 15:01:18.852" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.853">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:18.853" starttime="20161111 15:01:18.853" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:18.854">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:18.854" starttime="20161111 15:01:18.853" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:19.420">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:19.420">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:19.420" starttime="20161111 15:01:18.854" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:19.421">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:19.422" starttime="20161111 15:01:19.421" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:19.422" starttime="20161111 15:01:18.851" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.055">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:20.056">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:20.056" starttime="20161111 15:01:19.422" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.057">${msg} = Response code:200, Content:{
  "data": 341, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:20.058" starttime="20161111 15:01:20.057" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:20.059">Response code:200, Content:{
  "data": 341, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:20.059" starttime="20161111 15:01:20.058" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:20.059" starttime="20161111 15:01:20.058" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:20.059" starttime="20161111 15:01:20.056" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:20.060">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:20.060" starttime="20161111 15:01:18.847" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:20.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:20.061" starttime="20161111 15:01:20.060" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.062">To JSON using : content={
  "data": 341, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:20.062">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:20.062">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 341}</msg>
<status endtime="20161111 15:01:20.062" starttime="20161111 15:01:20.061" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.063">${LOGID} = 341</msg>
<status endtime="20161111 15:01:20.063" starttime="20161111 15:01:20.062" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.064">${uri} = /org/openbmc/records/events/341</msg>
<status endtime="20161111 15:01:20.064" starttime="20161111 15:01:20.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:20.064">${log_uri1} = /org/openbmc/records/events/341</msg>
<status endtime="20161111 15:01:20.064" starttime="20161111 15:01:18.846" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.065">${association_uri1} = /org/openbmc/records/events/341/fru</msg>
<status endtime="20161111 15:01:20.065" starttime="20161111 15:01:20.064" status="PASS"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.066">${data} = {u'data': []}</msg>
<status endtime="20161111 15:01:20.066" starttime="20161111 15:01:20.066" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.068">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161111 15:01:20.068" starttime="20161111 15:01:20.067" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:20.069" starttime="20161111 15:01:20.068" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:20.070" starttime="20161111 15:01:20.069" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.071">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:20.071" starttime="20161111 15:01:20.071" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:20.072">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:20.072" starttime="20161111 15:01:20.072" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:20.072" starttime="20161111 15:01:20.071" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:20.072" starttime="20161111 15:01:20.070" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:20.073">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:20.074" starttime="20161111 15:01:20.073" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.074">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:20.074" starttime="20161111 15:01:20.074" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.075">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:20.075" starttime="20161111 15:01:20.074" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.075">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:20.075" starttime="20161111 15:01:20.075" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:20.811">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:20.811">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:20.811" starttime="20161111 15:01:20.075" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:20.812">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:20.812" starttime="20161111 15:01:20.812" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:20.813" starttime="20161111 15:01:20.072" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.098">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:21.098">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:21.099" starttime="20161111 15:01:20.813" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.101">${msg} = Response code:200, Content:{
  "data": 342, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:21.101" starttime="20161111 15:01:21.100" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.102">Response code:200, Content:{
  "data": 342, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:21.102" starttime="20161111 15:01:21.102" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.102" starttime="20161111 15:01:21.101" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.103" starttime="20161111 15:01:21.099" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:21.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:21.103" starttime="20161111 15:01:20.067" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:21.104" starttime="20161111 15:01:21.103" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.105">To JSON using : content={
  "data": 342, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:21.105">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:21.105">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 342}</msg>
<status endtime="20161111 15:01:21.105" starttime="20161111 15:01:21.104" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.106">${LOGID} = 342</msg>
<status endtime="20161111 15:01:21.106" starttime="20161111 15:01:21.105" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.107">${uri} = /org/openbmc/records/events/342</msg>
<status endtime="20161111 15:01:21.107" starttime="20161111 15:01:21.106" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:21.107">${log_uri2} = /org/openbmc/records/events/342</msg>
<status endtime="20161111 15:01:21.107" starttime="20161111 15:01:20.065" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.108">${del_uri} = /org/openbmc/records/events/341/action/delete</msg>
<status endtime="20161111 15:01:21.108" starttime="20161111 15:01:21.108" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.110">${base_uri} = /org/openbmc/records/events/341/action/delete</msg>
<status endtime="20161111 15:01:21.110" starttime="20161111 15:01:21.109" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:21.111" starttime="20161111 15:01:21.110" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:21.111" starttime="20161111 15:01:21.111" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.112">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/341/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:21.112" starttime="20161111 15:01:21.112" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.113">URI:https://9.3.23.30:443/org/openbmc/records/events/341/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:21.113" starttime="20161111 15:01:21.113" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.113" starttime="20161111 15:01:21.112" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.114" starttime="20161111 15:01:21.111" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.114">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:21.115" starttime="20161111 15:01:21.114" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.115">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:21.115" starttime="20161111 15:01:21.115" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.116">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:21.116" starttime="20161111 15:01:21.115" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.116">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:21.116" starttime="20161111 15:01:21.116" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.507">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:21.508">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:21.508" starttime="20161111 15:01:21.116" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:21.509" starttime="20161111 15:01:21.508" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.509" starttime="20161111 15:01:21.114" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.727">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/341/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:21.727">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:21.727" starttime="20161111 15:01:21.509" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.729">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:21.730" starttime="20161111 15:01:21.728" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.731">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:21.731" starttime="20161111 15:01:21.731" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.731" starttime="20161111 15:01:21.730" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.732" starttime="20161111 15:01:21.727" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:21.732">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:21.732" starttime="20161111 15:01:21.108" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:21.733" starttime="20161111 15:01:21.732" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.735">${base_uri} = /org/openbmc/records/events/341/fru</msg>
<status endtime="20161111 15:01:21.735" starttime="20161111 15:01:21.734" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.739">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/341/fru, method:Get, args:{}</msg>
<status endtime="20161111 15:01:21.739" starttime="20161111 15:01:21.736" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.740">URI:https://9.3.23.30:443/org/openbmc/records/events/341/fru, method:Get, args:{}</msg>
<status endtime="20161111 15:01:21.740" starttime="20161111 15:01:21.740" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.740" starttime="20161111 15:01:21.739" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:21.740" starttime="20161111 15:01:21.735" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:21.741">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:21.742" starttime="20161111 15:01:21.741" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.742">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:21.742" starttime="20161111 15:01:21.742" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.743">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:21.743" starttime="20161111 15:01:21.742" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:21.743">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:21.743" starttime="20161111 15:01:21.743" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:22.147">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:22.147" starttime="20161111 15:01:21.743" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:22.148" starttime="20161111 15:01:22.148" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.148" starttime="20161111 15:01:21.741" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.202">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/341/fru, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:22.202">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20161111 15:01:22.203" starttime="20161111 15:01:22.148" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.205">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/341/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status endtime="20161111 15:01:22.205" starttime="20161111 15:01:22.204" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.206">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/341/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status endtime="20161111 15:01:22.206" starttime="20161111 15:01:22.206" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.206" starttime="20161111 15:01:22.205" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.207" starttime="20161111 15:01:22.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:22.207">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20161111 15:01:22.207" starttime="20161111 15:01:21.733" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.208">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/341/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:22.208">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:22.208">${jsondata} = {u'message': u'404 Not Found', u'status': u'error', u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/341/fru'}}</msg>
<status endtime="20161111 15:01:22.208" starttime="20161111 15:01:22.207" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status endtime="20161111 15:01:22.209" starttime="20161111 15:01:22.209" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.211">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status endtime="20161111 15:01:22.212" starttime="20161111 15:01:22.211" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.214">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:22.214" starttime="20161111 15:01:22.213" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.215">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:22.216" starttime="20161111 15:01:22.215" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.216" starttime="20161111 15:01:22.214" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.216" starttime="20161111 15:01:22.212" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.217">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:22.218" starttime="20161111 15:01:22.217" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.219">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:22.219" starttime="20161111 15:01:22.219" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.220">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:22.220" starttime="20161111 15:01:22.219" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:22.221" starttime="20161111 15:01:22.220" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.550">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:22.550">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:22.550" starttime="20161111 15:01:22.221" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:22.551" starttime="20161111 15:01:22.551" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.551" starttime="20161111 15:01:22.216" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.635">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:22.635">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:22.635" starttime="20161111 15:01:22.551" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.636">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/342"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:22.636" starttime="20161111 15:01:22.635" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.637">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/342"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:22.637" starttime="20161111 15:01:22.636" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.637" starttime="20161111 15:01:22.636" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.637" starttime="20161111 15:01:22.635" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:22.637">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:22.637" starttime="20161111 15:01:22.210" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.638">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/342"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:22.638">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:22.638">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/342']}</msg>
<status endtime="20161111 15:01:22.638" starttime="20161111 15:01:22.637" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:22.638">${dimm3_event} = [u'/org/openbmc/records/events/342']</msg>
<status endtime="20161111 15:01:22.638" starttime="20161111 15:01:22.209" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161111 15:01:22.638" starttime="20161111 15:01:22.638" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.640">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status endtime="20161111 15:01:22.640" starttime="20161111 15:01:22.640" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.641">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:22.641" starttime="20161111 15:01:22.641" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.642">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161111 15:01:22.642" starttime="20161111 15:01:22.642" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.642" starttime="20161111 15:01:22.642" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.643" starttime="20161111 15:01:22.640" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.643">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:22.644" starttime="20161111 15:01:22.643" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.644">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:22.644" starttime="20161111 15:01:22.644" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.645">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:22.645" starttime="20161111 15:01:22.644" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.645">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:22.645" starttime="20161111 15:01:22.645" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:22.974">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:22.975">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:22.975" starttime="20161111 15:01:22.645" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:22.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:22.975" starttime="20161111 15:01:22.975" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:22.976" starttime="20161111 15:01:22.643" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.054">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:23.055">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:23.055" starttime="20161111 15:01:22.976" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.056">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/342"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:23.056" starttime="20161111 15:01:23.055" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:23.057">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/342"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:23.057" starttime="20161111 15:01:23.057" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.057" starttime="20161111 15:01:23.056" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.057" starttime="20161111 15:01:23.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:23.057">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:23.057" starttime="20161111 15:01:22.639" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.058">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/342"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:23.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:23.058">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/342']}</msg>
<status endtime="20161111 15:01:23.058" starttime="20161111 15:01:23.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:23.058">${dimm2_event} = [u'/org/openbmc/records/events/342']</msg>
<status endtime="20161111 15:01:23.058" starttime="20161111 15:01:22.639" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161111 15:01:23.059" starttime="20161111 15:01:23.059" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:01:23.062" starttime="20161111 15:01:23.059" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:23.063" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:01:23.063" starttime="20161111 15:01:23.063" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:23.064" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:01:23.064" starttime="20161111 15:01:23.063" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:23.064">${exist} = True</msg>
<status endtime="20161111 15:01:23.064" starttime="20161111 15:01:23.063" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:01:23.067" starttime="20161111 15:01:23.064" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.067">${cur_time} = 2016-11-11 15:01:23:067281</msg>
<status endtime="20161111 15:01:23.067" starttime="20161111 15:01:23.067" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.068">${cur_time} = 20161111150123067281</msg>
<status endtime="20161111 15:01:23.068" starttime="20161111 15:01:23.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:23.068">${cur_time} = 20161111150123067281</msg>
<status endtime="20161111 15:01:23.068" starttime="20161111 15:01:23.067" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:23.069" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:01:23.069" starttime="20161111 15:01:23.068" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.069" starttime="20161111 15:01:23.062" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.070" starttime="20161111 15:01:23.059" status="PASS"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status endtime="20161111 15:01:23.070" critical="yes" starttime="20161111 15:01:18.846" status="PASS"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161111 15:01:23.079" starttime="20161111 15:01:23.071" status="PASS"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status endtime="20161111 15:01:23.079" starttime="20161111 15:01:12.366" status="PASS"></status>
</suite>
<suite id="s1-s3" name="Test Basic Poweron" source="/tmp/root/5463/obmc-robot/tests/test_basic_poweron.robot">
<test id="s1-s3-t1" name="power on test">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:23.107">Dictionary does not contain key 'host'.</msg>
<status endtime="20161111 15:01:23.107" starttime="20161111 15:01:23.107" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:23.107">${has_host} = False</msg>
<status endtime="20161111 15:01:23.107" starttime="20161111 15:01:23.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161111 15:01:23.111" starttime="20161111 15:01:23.110" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.111" starttime="20161111 15:01:23.108" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.114">${port_num} = 22</msg>
<status endtime="20161111 15:01:23.114" starttime="20161111 15:01:23.114" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.115">${SSH_PORT} = 22</msg>
<status endtime="20161111 15:01:23.115" starttime="20161111 15:01:23.114" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:23.115">${https_num} = 443</msg>
<status endtime="20161111 15:01:23.115" starttime="20161111 15:01:23.115" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:23.116">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161111 15:01:23.116" starttime="20161111 15:01:23.115" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.116" starttime="20161111 15:01:23.114" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.116" starttime="20161111 15:01:23.111" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:23.117">Dictionary does not contain key 'port'.</msg>
<status endtime="20161111 15:01:23.117" starttime="20161111 15:01:23.117" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:23.117">${has_port} = False</msg>
<status endtime="20161111 15:01:23.117" starttime="20161111 15:01:23.117" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161111 15:01:23.122" starttime="20161111 15:01:23.121" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161111 15:01:23.122" starttime="20161111 15:01:23.122" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.122" starttime="20161111 15:01:23.121" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:23.122" starttime="20161111 15:01:23.118" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:23.123">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161111 15:01:25.645">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161111 15:01:25.645" starttime="20161111 15:01:23.122" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.645" starttime="20161111 15:01:23.106" status="PASS"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:25.647">${cur_time} = 20161111150125646804</msg>
<status endtime="20161111 15:01:25.647" starttime="20161111 15:01:25.647" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:25.647">${cur_time} = 20161111150125646804</msg>
<status endtime="20161111 15:01:25.648" starttime="20161111 15:01:25.646" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:25.653">${LOG_TIME} = 20161111150125646804</msg>
<status endtime="20161111 15:01:25.653" starttime="20161111 15:01:25.648" status="PASS"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:25.654">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161111150125646804_$$'.</msg>
<status endtime="20161111 15:01:25.662" starttime="20161111 15:01:25.653" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.662" starttime="20161111 15:01:23.106" status="PASS"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:25.666">Dictionary does not contain key 'host'.</msg>
<status endtime="20161111 15:01:25.666" starttime="20161111 15:01:25.666" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:25.667">${has_host} = False</msg>
<status endtime="20161111 15:01:25.667" starttime="20161111 15:01:25.665" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161111 15:01:25.673" starttime="20161111 15:01:25.673" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.673" starttime="20161111 15:01:25.667" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:25.679">${port_num} = 22</msg>
<status endtime="20161111 15:01:25.679" starttime="20161111 15:01:25.679" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:25.680">${SSH_PORT} = 22</msg>
<status endtime="20161111 15:01:25.680" starttime="20161111 15:01:25.680" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:25.681">${https_num} = 443</msg>
<status endtime="20161111 15:01:25.681" starttime="20161111 15:01:25.680" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:25.682">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161111 15:01:25.682" starttime="20161111 15:01:25.681" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.682" starttime="20161111 15:01:25.678" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.682" starttime="20161111 15:01:25.674" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:25.683">Dictionary does not contain key 'port'.</msg>
<status endtime="20161111 15:01:25.683" starttime="20161111 15:01:25.683" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:25.683">${has_port} = False</msg>
<status endtime="20161111 15:01:25.683" starttime="20161111 15:01:25.682" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161111 15:01:25.688" starttime="20161111 15:01:25.688" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161111 15:01:25.689" starttime="20161111 15:01:25.689" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.689" starttime="20161111 15:01:25.688" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:25.689" starttime="20161111 15:01:25.683" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:25.690">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161111 15:01:28.172">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161111 15:01:28.172" starttime="20161111 15:01:25.689" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.173" starttime="20161111 15:01:25.664" status="PASS"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.174">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:28.174" starttime="20161111 15:01:28.174" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.175">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:28.175" starttime="20161111 15:01:28.175" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.177">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:01:28.177" starttime="20161111 15:01:28.176" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.179">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status endtime="20161111 15:01:28.180" starttime="20161111 15:01:28.179" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.181">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:28.181" starttime="20161111 15:01:28.180" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:28.181" starttime="20161111 15:01:28.181" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.184">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:28.184" starttime="20161111 15:01:28.183" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.185">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:28.185" starttime="20161111 15:01:28.185" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.185" starttime="20161111 15:01:28.184" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.186" starttime="20161111 15:01:28.182" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.187">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:28.188" starttime="20161111 15:01:28.186" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.188">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:28.188" starttime="20161111 15:01:28.188" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.189">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:28.189" starttime="20161111 15:01:28.189" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.190">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:28.190" starttime="20161111 15:01:28.190" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.519">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:28.519">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:28.519" starttime="20161111 15:01:28.190" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:28.520" starttime="20161111 15:01:28.519" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.520" starttime="20161111 15:01:28.186" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.804">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:28.804">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:28.804" starttime="20161111 15:01:28.520" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.805">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:28.805" starttime="20161111 15:01:28.805" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.806">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:28.806" starttime="20161111 15:01:28.806" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.806" starttime="20161111 15:01:28.805" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.806" starttime="20161111 15:01:28.804" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:28.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:28.807" starttime="20161111 15:01:28.177" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:28.807">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:28.807" starttime="20161111 15:01:28.176" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.807">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:28.807" starttime="20161111 15:01:28.807" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.809">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:28.809" starttime="20161111 15:01:28.809" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.809">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:28.809" starttime="20161111 15:01:28.809" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.810">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:01:28.810" starttime="20161111 15:01:28.810" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.811">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161111 15:01:28.812" starttime="20161111 15:01:28.811" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.812">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:28.812" starttime="20161111 15:01:28.812" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:28.812" starttime="20161111 15:01:28.812" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.814">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:28.814" starttime="20161111 15:01:28.813" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.815">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:28.815" starttime="20161111 15:01:28.814" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.815" starttime="20161111 15:01:28.814" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:28.815" starttime="20161111 15:01:28.813" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:28.816">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:28.816" starttime="20161111 15:01:28.815" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:28.817" starttime="20161111 15:01:28.816" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.817">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:28.817" starttime="20161111 15:01:28.817" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:28.818">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:28.818" starttime="20161111 15:01:28.818" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:29.699">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:29.699">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:29.699" starttime="20161111 15:01:28.818" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:29.701">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:29.701" starttime="20161111 15:01:29.700" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:29.701" starttime="20161111 15:01:28.815" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.922">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:30.922">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:30.922" starttime="20161111 15:01:29.701" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.924">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:30.924" starttime="20161111 15:01:30.923" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:30.925">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:30.925" starttime="20161111 15:01:30.925" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.925" starttime="20161111 15:01:30.924" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.926" starttime="20161111 15:01:30.922" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:30.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:30.926" starttime="20161111 15:01:28.811" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:30.926">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:30.926" starttime="20161111 15:01:28.810" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:30.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:30.927" starttime="20161111 15:01:30.927" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.928">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:30.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:30.928">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status endtime="20161111 15:01:30.928" starttime="20161111 15:01:30.928" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:30.929">${state} = 0</msg>
<status endtime="20161111 15:01:30.929" starttime="20161111 15:01:28.808" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161111 15:01:30.930" starttime="20161111 15:01:30.929" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.930" starttime="20161111 15:01:28.808" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.930" starttime="20161111 15:01:28.808" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.930" starttime="20161111 15:01:28.173" status="PASS"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.931">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:30.931" starttime="20161111 15:01:30.931" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.932">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:30.932" starttime="20161111 15:01:30.931" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.933">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:01:30.933" starttime="20161111 15:01:30.932" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.934">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161111 15:01:30.934" starttime="20161111 15:01:30.934" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.934">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:30.934" starttime="20161111 15:01:30.934" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:30.935" starttime="20161111 15:01:30.935" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.938">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:30.938" starttime="20161111 15:01:30.937" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:30.938">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:30.938" starttime="20161111 15:01:30.938" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.939" starttime="20161111 15:01:30.938" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:30.939" starttime="20161111 15:01:30.935" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:30.940">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:30.940" starttime="20161111 15:01:30.939" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:30.941" starttime="20161111 15:01:30.941" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.942">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:30.942" starttime="20161111 15:01:30.941" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:30.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:30.942" starttime="20161111 15:01:30.942" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.145">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:32.145">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:32.145" starttime="20161111 15:01:30.943" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:32.147">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:32.147" starttime="20161111 15:01:32.146" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:32.147" starttime="20161111 15:01:30.939" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.956">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:32.956">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:32.957" starttime="20161111 15:01:32.147" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.958">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:32.959" starttime="20161111 15:01:32.958" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:32.960">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:32.960" starttime="20161111 15:01:32.960" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:32.961" starttime="20161111 15:01:32.959" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:32.961" starttime="20161111 15:01:32.957" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:32.961">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:32.961" starttime="20161111 15:01:30.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:32.962">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:32.962" starttime="20161111 15:01:30.932" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:32.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:32.963" starttime="20161111 15:01:32.962" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.963">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:32.963">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:32.964">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status endtime="20161111 15:01:32.964" starttime="20161111 15:01:32.963" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:32.964">${power_state} = 0</msg>
<status endtime="20161111 15:01:32.964" starttime="20161111 15:01:30.931" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161111 15:01:32.965" starttime="20161111 15:01:32.965" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status endtime="20161111 15:01:32.966" starttime="20161111 15:01:32.965" status="PASS"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.969">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20161111 15:01:32.969" starttime="20161111 15:01:32.969" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.971">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161111 15:01:32.971" starttime="20161111 15:01:32.970" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:32.972">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161111 15:01:32.972" starttime="20161111 15:01:32.972" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:32.972" starttime="20161111 15:01:32.971" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:32.972" starttime="20161111 15:01:32.970" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:32.973">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:32.973" starttime="20161111 15:01:32.973" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:32.974" starttime="20161111 15:01:32.974" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.974">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:32.974" starttime="20161111 15:01:32.974" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:32.975">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:32.975" starttime="20161111 15:01:32.975" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:33.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:33.349" starttime="20161111 15:01:32.975" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:33.350">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:33.350" starttime="20161111 15:01:33.349" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:33.350" starttime="20161111 15:01:32.972" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.427">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:01:33.427">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:33.427" starttime="20161111 15:01:33.350" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.429">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:33.429" starttime="20161111 15:01:33.428" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:33.430">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:33.430" starttime="20161111 15:01:33.430" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:33.430" starttime="20161111 15:01:33.429" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:33.431" starttime="20161111 15:01:33.427" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:33.431">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:33.431" starttime="20161111 15:01:32.968" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.432">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:33.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:33.432">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20161111 15:01:33.432" starttime="20161111 15:01:33.431" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:33.432">${state} = Off</msg>
<status endtime="20161111 15:01:33.432" starttime="20161111 15:01:32.967" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:33.432">${boot_progress} = Off</msg>
<status endtime="20161111 15:01:33.433" starttime="20161111 15:01:32.966" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20161111 15:01:33.433" starttime="20161111 15:01:33.433" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status endtime="20161111 15:01:33.434" starttime="20161111 15:01:33.433" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.434">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status endtime="20161111 15:01:33.435" starttime="20161111 15:01:33.434" status="PASS"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.436">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:33.436" starttime="20161111 15:01:33.435" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.436">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:33.436" starttime="20161111 15:01:33.436" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.438">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161111 15:01:33.438" starttime="20161111 15:01:33.437" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.440">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161111 15:01:33.440" starttime="20161111 15:01:33.439" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:33.441" starttime="20161111 15:01:33.440" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:33.441" starttime="20161111 15:01:33.441" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.443">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:33.443" starttime="20161111 15:01:33.442" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:33.443">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:33.443" starttime="20161111 15:01:33.443" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:33.444" starttime="20161111 15:01:33.443" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:33.444" starttime="20161111 15:01:33.441" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:33.444">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:33.445" starttime="20161111 15:01:33.444" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.445">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:33.445" starttime="20161111 15:01:33.445" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.446">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:33.446" starttime="20161111 15:01:33.446" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.446">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:33.446" starttime="20161111 15:01:33.446" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:33.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:33.887">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:33.888" starttime="20161111 15:01:33.447" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:33.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:33.888" starttime="20161111 15:01:33.888" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:33.888" starttime="20161111 15:01:33.444" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.200">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:34.200">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:34.200" starttime="20161111 15:01:33.889" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.202">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:34.202" starttime="20161111 15:01:34.201" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:34.204">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:34.204" starttime="20161111 15:01:34.204" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.204" starttime="20161111 15:01:34.203" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.205" starttime="20161111 15:01:34.200" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:34.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:34.205" starttime="20161111 15:01:33.438" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:34.205">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:34.205" starttime="20161111 15:01:33.437" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:34.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:34.206" starttime="20161111 15:01:34.206" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.207">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:34.207">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:34.207">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'BMC_READY'}</msg>
<status endtime="20161111 15:01:34.208" starttime="20161111 15:01:34.207" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:34.208">${bmc_state} = BMC_READY</msg>
<status endtime="20161111 15:01:34.208" starttime="20161111 15:01:33.435" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status endtime="20161111 15:01:34.209" starttime="20161111 15:01:34.208" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status endtime="20161111 15:01:34.210" starttime="20161111 15:01:34.209" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.210" starttime="20161111 15:01:30.930" status="PASS"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status endtime="20161111 15:01:34.324" starttime="20161111 15:01:34.210" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.324" starttime="20161111 15:01:25.663" status="PASS"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.325">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status endtime="20161111 15:01:34.325" starttime="20161111 15:01:34.325" status="PASS"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:34.327">Dictionary does not contain key 'host'.</msg>
<status endtime="20161111 15:01:34.327" starttime="20161111 15:01:34.326" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:34.327">${has_host} = False</msg>
<status endtime="20161111 15:01:34.327" starttime="20161111 15:01:34.326" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161111 15:01:34.330" starttime="20161111 15:01:34.330" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.330" starttime="20161111 15:01:34.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.334">${port_num} = 22</msg>
<status endtime="20161111 15:01:34.334" starttime="20161111 15:01:34.334" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.334">${SSH_PORT} = 22</msg>
<status endtime="20161111 15:01:34.334" starttime="20161111 15:01:34.334" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:34.335">${https_num} = 443</msg>
<status endtime="20161111 15:01:34.335" starttime="20161111 15:01:34.335" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:34.336">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161111 15:01:34.336" starttime="20161111 15:01:34.335" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.336" starttime="20161111 15:01:34.333" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.336" starttime="20161111 15:01:34.331" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:34.337">Dictionary does not contain key 'port'.</msg>
<status endtime="20161111 15:01:34.337" starttime="20161111 15:01:34.337" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:34.337">${has_port} = False</msg>
<status endtime="20161111 15:01:34.337" starttime="20161111 15:01:34.336" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161111 15:01:34.341" starttime="20161111 15:01:34.341" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161111 15:01:34.342" starttime="20161111 15:01:34.341" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.342" starttime="20161111 15:01:34.340" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:34.342" starttime="20161111 15:01:34.337" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:34.342">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161111 15:01:36.623">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161111 15:01:36.623" starttime="20161111 15:01:34.342" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:36.624" starttime="20161111 15:01:34.325" status="PASS"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.625">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:36.625" starttime="20161111 15:01:36.625" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.626">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:36.626" starttime="20161111 15:01:36.625" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.628">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:01:36.628" starttime="20161111 15:01:36.627" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.630">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status endtime="20161111 15:01:36.630" starttime="20161111 15:01:36.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:36.631" starttime="20161111 15:01:36.630" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:36.632" starttime="20161111 15:01:36.631" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.635">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:36.635" starttime="20161111 15:01:36.633" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:36.636">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:36.636" starttime="20161111 15:01:36.636" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:36.636" starttime="20161111 15:01:36.635" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:36.637" starttime="20161111 15:01:36.632" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:36.638">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:36.639" starttime="20161111 15:01:36.638" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.640">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:36.640" starttime="20161111 15:01:36.639" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.640">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:36.640" starttime="20161111 15:01:36.640" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:36.641">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:36.641" starttime="20161111 15:01:36.640" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.036">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:37.036">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:37.036" starttime="20161111 15:01:36.641" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:37.037">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:37.037" starttime="20161111 15:01:37.037" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:37.037" starttime="20161111 15:01:36.637" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.439">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:37.439">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:37.439" starttime="20161111 15:01:37.038" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.441">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:37.441" starttime="20161111 15:01:37.440" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:37.443">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:37.443" starttime="20161111 15:01:37.442" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:37.443" starttime="20161111 15:01:37.441" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:37.443" starttime="20161111 15:01:37.439" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:37.444">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:37.444" starttime="20161111 15:01:36.628" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:37.444">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:37.444" starttime="20161111 15:01:36.626" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:37.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:37.445" starttime="20161111 15:01:37.444" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.448">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:37.448" starttime="20161111 15:01:37.447" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.449">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:37.449" starttime="20161111 15:01:37.449" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.451">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:01:37.451" starttime="20161111 15:01:37.450" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.452">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161111 15:01:37.452" starttime="20161111 15:01:37.451" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:37.452" starttime="20161111 15:01:37.452" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:37.453" starttime="20161111 15:01:37.452" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.454">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:37.454" starttime="20161111 15:01:37.453" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:37.455">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:37.455" starttime="20161111 15:01:37.455" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:37.455" starttime="20161111 15:01:37.454" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:37.455" starttime="20161111 15:01:37.453" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:37.456">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:37.456" starttime="20161111 15:01:37.456" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.457">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:37.457" starttime="20161111 15:01:37.456" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.457">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:37.457" starttime="20161111 15:01:37.457" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:37.458">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:37.458" starttime="20161111 15:01:37.458" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:38.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:38.969">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:38.969" starttime="20161111 15:01:37.459" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:38.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:38.970" starttime="20161111 15:01:38.969" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:38.970" starttime="20161111 15:01:37.455" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:42.136">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:42.137">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:42.137" starttime="20161111 15:01:38.970" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:42.139">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:42.139" starttime="20161111 15:01:42.138" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:42.140">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:42.140" starttime="20161111 15:01:42.140" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:42.141" starttime="20161111 15:01:42.139" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:42.141" starttime="20161111 15:01:42.137" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:42.141">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:42.141" starttime="20161111 15:01:37.451" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:42.141">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:42.141" starttime="20161111 15:01:37.450" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:42.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:42.142" starttime="20161111 15:01:42.142" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:42.143">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:42.143">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:42.143">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status endtime="20161111 15:01:42.143" starttime="20161111 15:01:42.143" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:42.144">${state} = 0</msg>
<status endtime="20161111 15:01:42.144" starttime="20161111 15:01:37.447" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:42.145">0 != 1</msg>
<status endtime="20161111 15:01:42.145" starttime="20161111 15:01:42.144" status="FAIL"></status>
</kw>
<status endtime="20161111 15:01:42.145" starttime="20161111 15:01:37.446" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.148">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:52.148" starttime="20161111 15:01:52.148" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.149">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:52.149" starttime="20161111 15:01:52.148" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.151">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:01:52.151" starttime="20161111 15:01:52.150" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.153">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161111 15:01:52.153" starttime="20161111 15:01:52.152" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.154">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:52.154" starttime="20161111 15:01:52.153" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:52.155" starttime="20161111 15:01:52.154" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.157">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:52.157" starttime="20161111 15:01:52.156" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:52.160">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:52.160" starttime="20161111 15:01:52.159" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:52.160" starttime="20161111 15:01:52.158" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:52.160" starttime="20161111 15:01:52.155" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:52.161">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:52.161" starttime="20161111 15:01:52.160" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.162">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:52.162" starttime="20161111 15:01:52.161" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.162">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:52.162" starttime="20161111 15:01:52.162" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:52.163">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:52.163" starttime="20161111 15:01:52.162" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:54.054">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:54.054" starttime="20161111 15:01:52.163" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:54.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:54.055" starttime="20161111 15:01:54.055" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.056" starttime="20161111 15:01:52.160" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.744">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:54.744">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:54.744" starttime="20161111 15:01:54.056" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.745">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:54.745" starttime="20161111 15:01:54.745" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:54.746">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:54.746" starttime="20161111 15:01:54.746" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.746" starttime="20161111 15:01:54.746" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.746" starttime="20161111 15:01:54.744" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:54.747">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:54.747" starttime="20161111 15:01:52.151" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:54.747">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:54.747" starttime="20161111 15:01:52.150" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:54.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:54.748" starttime="20161111 15:01:54.747" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.748">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:54.748">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:54.748">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status endtime="20161111 15:01:54.748" starttime="20161111 15:01:54.748" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:54.748">${state} = 1</msg>
<status endtime="20161111 15:01:54.748" starttime="20161111 15:01:52.147" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161111 15:01:54.749" starttime="20161111 15:01:54.749" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.749" starttime="20161111 15:01:52.146" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.749" starttime="20161111 15:01:37.445" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.749" starttime="20161111 15:01:36.624" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status endtime="20161111 15:01:54.752" starttime="20161111 15:01:54.749" status="PASS"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status endtime="20161111 15:01:54.752" starttime="20161111 15:01:54.752" status="PASS"></status>
</kw>
<kw name="Check Power On States" library="powerons">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.754">@{arglist} = [ ]</msg>
<status endtime="20161111 15:01:54.754" starttime="20161111 15:01:54.754" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.755">${args} = {u'data': []}</msg>
<status endtime="20161111 15:01:54.755" starttime="20161111 15:01:54.755" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.756">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161111 15:01:54.756" starttime="20161111 15:01:54.756" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.757">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161111 15:01:54.757" starttime="20161111 15:01:54.757" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:54.758" starttime="20161111 15:01:54.757" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:01:54.758" starttime="20161111 15:01:54.758" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.759">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:54.760" starttime="20161111 15:01:54.759" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:54.760">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:01:54.760" starttime="20161111 15:01:54.760" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.760" starttime="20161111 15:01:54.760" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:54.761" starttime="20161111 15:01:54.758" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:54.761">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:01:54.762" starttime="20161111 15:01:54.761" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.762">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:01:54.762" starttime="20161111 15:01:54.762" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.763">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:01:54.763" starttime="20161111 15:01:54.762" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:54.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:01:54.763" starttime="20161111 15:01:54.763" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:55.089">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:55.089">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:55.089" starttime="20161111 15:01:54.764" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:55.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:55.090" starttime="20161111 15:01:55.089" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:55.090" starttime="20161111 15:01:54.761" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:55.457">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:01:55.457">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:55.457" starttime="20161111 15:01:55.090" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:55.459">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:55.459" starttime="20161111 15:01:55.458" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:55.461">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:01:55.461" starttime="20161111 15:01:55.460" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:55.461" starttime="20161111 15:01:55.459" status="PASS"></status>
</kw>
<status endtime="20161111 15:01:55.461" starttime="20161111 15:01:55.458" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:55.461">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:55.461" starttime="20161111 15:01:54.756" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:55.462">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:01:55.462" starttime="20161111 15:01:54.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:01:55.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:01:55.463" starttime="20161111 15:01:55.462" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:01:55.463">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:01:55.464">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:01:55.464">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161111 15:01:55.464" starttime="20161111 15:01:55.463" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:01:55.464">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161111 15:01:55.464" starttime="20161111 15:01:54.754" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:01:55.465">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161111 15:01:55.465" starttime="20161111 15:01:55.465" status="FAIL"></status>
</kw>
<status endtime="20161111 15:01:55.466" starttime="20161111 15:01:54.753" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.469">@{arglist} = [ ]</msg>
<status endtime="20161111 15:02:05.469" starttime="20161111 15:02:05.469" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.470">${args} = {u'data': []}</msg>
<status endtime="20161111 15:02:05.471" starttime="20161111 15:02:05.470" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.472">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161111 15:02:05.472" starttime="20161111 15:02:05.472" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.474">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161111 15:02:05.474" starttime="20161111 15:02:05.474" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:05.475" starttime="20161111 15:02:05.475" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:05.476" starttime="20161111 15:02:05.476" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.479">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:05.479" starttime="20161111 15:02:05.477" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:05.480">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:05.481" starttime="20161111 15:02:05.480" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:05.481" starttime="20161111 15:02:05.479" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:05.481" starttime="20161111 15:02:05.476" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:05.482">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:05.482" starttime="20161111 15:02:05.481" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.483">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:05.483" starttime="20161111 15:02:05.482" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.483">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:05.483" starttime="20161111 15:02:05.483" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:05.484">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:05.484" starttime="20161111 15:02:05.483" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:06.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:06.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:06.079" starttime="20161111 15:02:05.484" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:06.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:06.080" starttime="20161111 15:02:06.079" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:06.080" starttime="20161111 15:02:05.481" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:06.656">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:06.656">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:06.656" starttime="20161111 15:02:06.080" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:06.658">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:06.658" starttime="20161111 15:02:06.657" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:06.660">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:06.660" starttime="20161111 15:02:06.659" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:06.660" starttime="20161111 15:02:06.658" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:06.660" starttime="20161111 15:02:06.657" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:06.660">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:06.660" starttime="20161111 15:02:05.472" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:06.661">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:06.661" starttime="20161111 15:02:05.471" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:06.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:06.662" starttime="20161111 15:02:06.661" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:06.662">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:06.662">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:06.663">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161111 15:02:06.663" starttime="20161111 15:02:06.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:06.663">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161111 15:02:06.663" starttime="20161111 15:02:05.468" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:06.664">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161111 15:02:06.664" starttime="20161111 15:02:06.663" status="FAIL"></status>
</kw>
<status endtime="20161111 15:02:06.664" starttime="20161111 15:02:05.467" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.667">@{arglist} = [ ]</msg>
<status endtime="20161111 15:02:16.667" starttime="20161111 15:02:16.667" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.668">${args} = {u'data': []}</msg>
<status endtime="20161111 15:02:16.668" starttime="20161111 15:02:16.667" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.674">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161111 15:02:16.674" starttime="20161111 15:02:16.673" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.677">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161111 15:02:16.677" starttime="20161111 15:02:16.676" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.678">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:16.678" starttime="20161111 15:02:16.677" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:16.679" starttime="20161111 15:02:16.678" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.681">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:16.681" starttime="20161111 15:02:16.680" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:16.682">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:16.682" starttime="20161111 15:02:16.682" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:16.682" starttime="20161111 15:02:16.682" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:16.683" starttime="20161111 15:02:16.680" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:16.683">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:16.684" starttime="20161111 15:02:16.683" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.684">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:16.684" starttime="20161111 15:02:16.684" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.685">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:16.685" starttime="20161111 15:02:16.684" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:16.685">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:16.685" starttime="20161111 15:02:16.685" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:17.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:17.235">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:17.235" starttime="20161111 15:02:16.686" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:17.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:17.236" starttime="20161111 15:02:17.236" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:17.236" starttime="20161111 15:02:16.683" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:18.074">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:18.074">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:18.074" starttime="20161111 15:02:17.237" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:18.076">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:18.076" starttime="20161111 15:02:18.075" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:18.077">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:18.078" starttime="20161111 15:02:18.077" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:18.078" starttime="20161111 15:02:18.076" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:18.078" starttime="20161111 15:02:18.075" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:18.078">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:18.078" starttime="20161111 15:02:16.674" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:18.079">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:18.079" starttime="20161111 15:02:16.668" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:18.090">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:18.090" starttime="20161111 15:02:18.090" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:18.091">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:18.091">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:18.091">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161111 15:02:18.091" starttime="20161111 15:02:18.090" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:18.091">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161111 15:02:18.091" starttime="20161111 15:02:16.666" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:18.092">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161111 15:02:18.092" starttime="20161111 15:02:18.092" status="FAIL"></status>
</kw>
<status endtime="20161111 15:02:18.092" starttime="20161111 15:02:16.665" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.095">@{arglist} = [ ]</msg>
<status endtime="20161111 15:02:28.095" starttime="20161111 15:02:28.094" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.096">${args} = {u'data': []}</msg>
<status endtime="20161111 15:02:28.096" starttime="20161111 15:02:28.095" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.097">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161111 15:02:28.098" starttime="20161111 15:02:28.097" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.099">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161111 15:02:28.099" starttime="20161111 15:02:28.099" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.100">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:28.100" starttime="20161111 15:02:28.100" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:28.101" starttime="20161111 15:02:28.101" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.103">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:28.103" starttime="20161111 15:02:28.102" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:28.104">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:28.105" starttime="20161111 15:02:28.104" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:28.105" starttime="20161111 15:02:28.103" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:28.105" starttime="20161111 15:02:28.101" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:28.106">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:28.107" starttime="20161111 15:02:28.106" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.108">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:28.109" starttime="20161111 15:02:28.108" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.119">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:28.120" starttime="20161111 15:02:28.119" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.120">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:28.120" starttime="20161111 15:02:28.120" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:28.687">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:28.688">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:28.688" starttime="20161111 15:02:28.120" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:28.688">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:28.709" starttime="20161111 15:02:28.688" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:28.710" starttime="20161111 15:02:28.105" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:29.119">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:29.119">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:29.119" starttime="20161111 15:02:28.710" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:29.120">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:29.121" starttime="20161111 15:02:29.120" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:29.121">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:29.121" starttime="20161111 15:02:29.121" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:29.122" starttime="20161111 15:02:29.121" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:29.122" starttime="20161111 15:02:29.120" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:29.122">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:29.122" starttime="20161111 15:02:28.098" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:29.122">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:29.122" starttime="20161111 15:02:28.096" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:29.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:29.123" starttime="20161111 15:02:29.122" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:29.123">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:29.123">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:29.123">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161111 15:02:29.123" starttime="20161111 15:02:29.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:29.124">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161111 15:02:29.124" starttime="20161111 15:02:28.094" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:29.124">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161111 15:02:29.124" starttime="20161111 15:02:29.124" status="FAIL"></status>
</kw>
<status endtime="20161111 15:02:29.124" starttime="20161111 15:02:28.093" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.126">@{arglist} = [ ]</msg>
<status endtime="20161111 15:02:39.126" starttime="20161111 15:02:39.126" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.127">${args} = {u'data': []}</msg>
<status endtime="20161111 15:02:39.127" starttime="20161111 15:02:39.126" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.128">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161111 15:02:39.128" starttime="20161111 15:02:39.127" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.129">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161111 15:02:39.129" starttime="20161111 15:02:39.128" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.130">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:39.130" starttime="20161111 15:02:39.129" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:39.131" starttime="20161111 15:02:39.130" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.133">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:39.133" starttime="20161111 15:02:39.132" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:39.134">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:39.134" starttime="20161111 15:02:39.134" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:39.134" starttime="20161111 15:02:39.133" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:39.135" starttime="20161111 15:02:39.131" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:39.136">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:39.136" starttime="20161111 15:02:39.135" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.137">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:39.137" starttime="20161111 15:02:39.137" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.138">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:39.138" starttime="20161111 15:02:39.138" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:39.139">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:39.139" starttime="20161111 15:02:39.138" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:40.126">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:40.126" starttime="20161111 15:02:39.139" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:40.127">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:40.127" starttime="20161111 15:02:40.127" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.127" starttime="20161111 15:02:39.135" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.981">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:40.981">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:40.981" starttime="20161111 15:02:40.127" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.983">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTED", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:40.983" starttime="20161111 15:02:40.982" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:40.983">Response code:200, Content:{
  "data": "HOST_BOOTED", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:40.983" starttime="20161111 15:02:40.983" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.984" starttime="20161111 15:02:40.983" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.984" starttime="20161111 15:02:40.982" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:40.984">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:40.984" starttime="20161111 15:02:39.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:40.984">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:40.984" starttime="20161111 15:02:39.127" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:40.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:40.985" starttime="20161111 15:02:40.984" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.985">To JSON using : content={
  "data": "HOST_BOOTED", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:40.985">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:40.985">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTED'}</msg>
<status endtime="20161111 15:02:40.985" starttime="20161111 15:02:40.985" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:40.986">${bmc_state} = HOST_BOOTED</msg>
<status endtime="20161111 15:02:40.986" starttime="20161111 15:02:39.125" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<status endtime="20161111 15:02:40.986" starttime="20161111 15:02:40.986" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status endtime="20161111 15:02:40.987" starttime="20161111 15:02:40.986" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.987" starttime="20161111 15:02:39.125" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.987" starttime="20161111 15:01:54.753" status="PASS"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.989">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20161111 15:02:40.989" starttime="20161111 15:02:40.988" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.990">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161111 15:02:40.990" starttime="20161111 15:02:40.990" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:40.991">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161111 15:02:40.991" starttime="20161111 15:02:40.991" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.991" starttime="20161111 15:02:40.990" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:40.991" starttime="20161111 15:02:40.989" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:40.992">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:40.992" starttime="20161111 15:02:40.992" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.993">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:40.993" starttime="20161111 15:02:40.993" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.994">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:40.994" starttime="20161111 15:02:40.993" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:40.994">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:40.994" starttime="20161111 15:02:40.994" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.467">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:41.467">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:41.467" starttime="20161111 15:02:40.994" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:41.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:41.468" starttime="20161111 15:02:41.468" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:41.468" starttime="20161111 15:02:40.991" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.601">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:02:41.602">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:41.602" starttime="20161111 15:02:41.469" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.604">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:41.604" starttime="20161111 15:02:41.603" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:41.605">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:41.605" starttime="20161111 15:02:41.605" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:41.605" starttime="20161111 15:02:41.604" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:41.606" starttime="20161111 15:02:41.602" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:41.606">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:41.606" starttime="20161111 15:02:40.988" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.607">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:41.607">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:41.607">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Starting OS'}</msg>
<status endtime="20161111 15:02:41.607" starttime="20161111 15:02:41.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:41.608">${state} = FW Progress, Starting OS</msg>
<status endtime="20161111 15:02:41.608" starttime="20161111 15:02:40.987" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:41.608">${boot_progress} = FW Progress, Starting OS</msg>
<status endtime="20161111 15:02:41.608" starttime="20161111 15:02:40.987" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status endtime="20161111 15:02:41.609" starttime="20161111 15:02:41.608" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status endtime="20161111 15:02:41.610" starttime="20161111 15:02:41.609" status="PASS"></status>
</kw>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.611">@{arglist} = [ ]</msg>
<status endtime="20161111 15:02:41.611" starttime="20161111 15:02:41.611" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.612">${args} = {u'data': []}</msg>
<status endtime="20161111 15:02:41.612" starttime="20161111 15:02:41.611" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.614">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161111 15:02:41.614" starttime="20161111 15:02:41.613" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.616">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161111 15:02:41.616" starttime="20161111 15:02:41.615" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.617">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:41.617" starttime="20161111 15:02:41.616" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:41.618" starttime="20161111 15:02:41.617" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.620">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:41.620" starttime="20161111 15:02:41.619" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:41.621">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:41.621" starttime="20161111 15:02:41.620" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:41.621" starttime="20161111 15:02:41.620" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:41.621" starttime="20161111 15:02:41.618" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:41.622">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:41.622" starttime="20161111 15:02:41.622" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:41.623" starttime="20161111 15:02:41.623" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.624">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:41.624" starttime="20161111 15:02:41.623" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:41.624">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:41.624" starttime="20161111 15:02:41.624" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:42.255">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:42.255">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:42.255" starttime="20161111 15:02:41.625" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:42.256">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:42.257" starttime="20161111 15:02:42.256" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:42.257" starttime="20161111 15:02:41.621" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:42.980">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:42.980">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:42.980" starttime="20161111 15:02:42.257" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:42.982">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:42.982" starttime="20161111 15:02:42.981" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:42.984">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:42.984" starttime="20161111 15:02:42.983" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:42.984" starttime="20161111 15:02:42.983" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:42.984" starttime="20161111 15:02:42.981" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:42.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:42.985" starttime="20161111 15:02:41.614" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:42.985">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:42.985" starttime="20161111 15:02:41.612" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:42.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:42.986" starttime="20161111 15:02:42.985" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:42.987">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:42.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:42.987">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status endtime="20161111 15:02:42.987" starttime="20161111 15:02:42.987" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:42.988">${power_state} = 1</msg>
<status endtime="20161111 15:02:42.988" starttime="20161111 15:02:41.610" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161111 15:02:42.989" starttime="20161111 15:02:42.988" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status endtime="20161111 15:02:42.990" starttime="20161111 15:02:42.989" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:42.990" starttime="20161111 15:01:54.753" status="PASS"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status endtime="20161111 15:02:43.104" starttime="20161111 15:02:42.990" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.104" starttime="20161111 15:01:34.325" status="PASS"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:02:43.108" starttime="20161111 15:02:43.105" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:43.109" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:02:43.109" starttime="20161111 15:02:43.108" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:43.109" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:02:43.109" starttime="20161111 15:02:43.109" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:43.110">${exist} = True</msg>
<status endtime="20161111 15:02:43.110" starttime="20161111 15:02:43.109" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:02:43.112" starttime="20161111 15:02:43.110" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:43.114">${cur_time} = 2016-11-11 15:02:43:113369</msg>
<status endtime="20161111 15:02:43.114" starttime="20161111 15:02:43.113" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:43.114">${cur_time} = 20161111150243113369</msg>
<status endtime="20161111 15:02:43.114" starttime="20161111 15:02:43.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:43.114">${cur_time} = 20161111150243113369</msg>
<status endtime="20161111 15:02:43.114" starttime="20161111 15:02:43.113" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:43.115" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:02:43.115" starttime="20161111 15:02:43.114" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.115" starttime="20161111 15:02:43.108" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.115" starttime="20161111 15:02:43.104" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:43.117">Dictionary does not contain key 'host'.</msg>
<status endtime="20161111 15:02:43.117" starttime="20161111 15:02:43.117" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:43.117">${has_host} = False</msg>
<status endtime="20161111 15:02:43.117" starttime="20161111 15:02:43.116" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161111 15:02:43.121" starttime="20161111 15:02:43.120" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.121" starttime="20161111 15:02:43.118" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:43.125">${port_num} = 22</msg>
<status endtime="20161111 15:02:43.125" starttime="20161111 15:02:43.125" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:43.126">${SSH_PORT} = 22</msg>
<status endtime="20161111 15:02:43.126" starttime="20161111 15:02:43.126" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:43.126">${https_num} = 443</msg>
<status endtime="20161111 15:02:43.126" starttime="20161111 15:02:43.126" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:43.127">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161111 15:02:43.127" starttime="20161111 15:02:43.127" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.127" starttime="20161111 15:02:43.125" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.127" starttime="20161111 15:02:43.121" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:43.128">Dictionary does not contain key 'port'.</msg>
<status endtime="20161111 15:02:43.128" starttime="20161111 15:02:43.128" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:43.128">${has_port} = False</msg>
<status endtime="20161111 15:02:43.128" starttime="20161111 15:02:43.128" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161111 15:02:43.134" starttime="20161111 15:02:43.134" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161111 15:02:43.135" starttime="20161111 15:02:43.135" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.135" starttime="20161111 15:02:43.133" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:43.135" starttime="20161111 15:02:43.129" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:43.136">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161111 15:02:46.774">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161111 15:02:46.775" starttime="20161111 15:02:43.136" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:46.775" starttime="20161111 15:02:43.116" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:46.776">Executing command 'ls /tmp/obmc-console.log-20161111150125646804_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161111 15:02:46.991">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161111 15:02:46.992">${pid} = 927</msg>
<msg level="INFO" timestamp="20161111 15:02:46.992">${stderr} = </msg>
<status endtime="20161111 15:02:46.992" starttime="20161111 15:02:46.776" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:46.993">Length is 0</msg>
<status endtime="20161111 15:02:46.993" starttime="20161111 15:02:46.992" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:46.994">Executing command 'ps ax | grep 927 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161111 15:02:47.363">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161111 15:02:47.363">${rc} = 0</msg>
<status endtime="20161111 15:02:47.363" starttime="20161111 15:02:46.993" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status endtime="20161111 15:02:47.369" starttime="20161111 15:02:47.364" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:47.370">Executing command 'kill -s KILL 927'.</msg>
<msg level="INFO" timestamp="20161111 15:02:47.540">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161111 15:02:47.540">${console} = </msg>
<msg level="INFO" timestamp="20161111 15:02:47.541">${stderr} = </msg>
<status endtime="20161111 15:02:47.541" starttime="20161111 15:02:47.369" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:47.541">Length is 0</msg>
<status endtime="20161111 15:02:47.542" starttime="20161111 15:02:47.541" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:47.542">Current Client PID:927</msg>
<status endtime="20161111 15:02:47.543" starttime="20161111 15:02:47.542" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:47.544">Executing command 'cat /tmp/obmc-console.log-20161111150125646804_927'.</msg>
<msg level="INFO" timestamp="20161111 15:02:48.096">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161111 15:02:48.097">${console} =   4.28471|ISTEP  6. 3
  4.73656|ISTEP  6. 4
  4.73715|ISTEP  6. 5
  9.93972|HWAS|PRESENT&gt; DIMM[03]=A0A0A0A0A0A0A0A0
  9.93972|HWAS|PRESENT&gt; Membuf[04]=CCCC000000000000
  9.93973|HWAS|PRESENT&gt; Pro...</msg>
<msg level="INFO" timestamp="20161111 15:02:48.097">${stderr} = </msg>
<status endtime="20161111 15:02:48.097" starttime="20161111 15:02:47.543" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:48.098">Length is 0</msg>
<status endtime="20161111 15:02:48.098" starttime="20161111 15:02:48.097" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:48.098">${sol_log} =   4.28471|ISTEP  6. 3
  4.73656|ISTEP  6. 4
  4.73715|ISTEP  6. 5
  9.93972|HWAS|PRESENT&gt; DIMM[03]=A0A0A0A0A0A0A0A0
  9.93972|HWAS|PRESENT&gt; Membuf[04]=CCCC000000000000
  9.93973|HWAS|PRESENT&gt; Pro...</msg>
<status endtime="20161111 15:02:48.098" starttime="20161111 15:02:43.116" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:48.099">  4.28471|ISTEP  6. 3
  4.73656|ISTEP  6. 4
  4.73715|ISTEP  6. 5
  9.93972|HWAS|PRESENT&gt; DIMM[03]=A0A0A0A0A0A0A0A0
  9.93972|HWAS|PRESENT&gt; Membuf[04]=CCCC000000000000
  9.93973|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 10.10193|ISTEP  6. 6
 10.21821|ISTEP  6. 7
 14.01302|ISTEP  6. 8
 14.13545|ISTEP  6. 9
 17.09103|ISTEP  6.10
 17.12029|ISTEP  6.11
 18.88539|ISTEP  6.12
 18.88708|ISTEP  6.13
 18.88765|ISTEP  7. 1
 19.03862|ISTEP  7. 2
 19.16874|ISTEP  7. 3
 19.19855|ISTEP  7. 4
 19.23772|ISTEP  7. 5
 19.48324|ISTEP  7. 6
 19.53008|ISTEP  7. 7
 19.73242|ISTEP  7. 8
 19.88894|ISTEP  7. 9
 19.88943|ISTEP  8. 1
 20.14239|ISTEP  8. 2
 20.96674|ISTEP  8. 3
 20.97672|ISTEP  8. 4
 21.23972|ISTEP  8. 5
 21.24033|ISTEP  8. 6
 22.10013|ISTEP  8. 7
 22.10126|ISTEP  8. 8
 22.16819|ISTEP  9. 1
 22.55977|ISTEP  9. 2
 23.10304|ISTEP 10. 1
 23.28530|ISTEP 10. 2
 24.32281|ISTEP 10. 3
 24.32408|ISTEP 10. 4
 24.32520|ISTEP 10. 5
 24.32620|ISTEP 10. 6
 24.32720|ISTEP 10. 7
 24.32820|ISTEP 10. 8
 24.32877|ISTEP 10. 9
 24.32939|ISTEP 10.10
 24.33034|ISTEP 10.11
 24.33096|ISTEP 10.12
 24.33167|ISTEP 10.13
 24.33235|ISTEP 10.14
 24.33324|ISTEP 11. 1
 24.44410|ISTEP 11. 2
 24.44483|ISTEP 11. 3
 24.53880|ISTEP 11. 4
 24.69316|ISTEP 11. 5
 24.78355|ISTEP 11. 6
 26.30283|ISTEP 11. 7
 26.30398|ISTEP 11. 8
 26.76955|ISTEP 11. 9
 26.77088|ISTEP 11.10
 26.85727|ISTEP 11.11
 26.85861|ISTEP 11.12
 26.85962|ISTEP 11.13
 26.86079|ISTEP 12. 1
 26.97128|ISTEP 12. 2
 27.04142|ISTEP 12. 3
 27.07236|ISTEP 12. 4
 27.44453|ISTEP 12. 5
 27.44521|ISTEP 13. 1
 27.55623|ISTEP 13. 2
 27.58861|ISTEP 13. 3
 27.59291|ISTEP 13. 4
 27.61419|ISTEP 13. 5
 27.61592|ISTEP 13. 6
 28.43550|ISTEP 13. 7
 28.67650|ISTEP 13. 8
 28.84746|ISTEP 13. 9
 30.53475|ISTEP 13.10
 30.56740|ISTEP 13.11
 30.67073|ISTEP 13.12
 30.67146|ISTEP 14. 1
 30.97227|ISTEP 14. 2
 30.98277|ISTEP 14. 3
 37.11076|ISTEP 14. 4
 37.16285|ISTEP 14. 5
 37.23756|ISTEP 14. 6
 37.25350|ISTEP 14. 7
 37.42505|ISTEP 14. 8
 37.42697|ISTEP 15. 1
 38.26844|ISTEP 15. 2
 38.28996|ISTEP 15. 3
 38.41296|ISTEP 16. 1
 39.56453|ISTEP 16. 2
 40.02892|ISTEP 16. 3
 40.04954|ISTEP 16. 4
 40.06861|ISTEP 18.13
 40.19884|ISTEP 18.14
 40.23463|ISTEP 20. 1
 40.87289|ISTEP 21. 1
 54.82936|htmgt|OCCs are now running in ACTIVE state</msg>
<status endtime="20161111 15:02:48.100" starttime="20161111 15:02:48.099" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:48.100" starttime="20161111 15:02:43.104" status="PASS"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status endtime="20161111 15:02:48.100" critical="yes" starttime="20161111 15:01:23.105" status="PASS"></status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status endtime="20161111 15:02:48.101" starttime="20161111 15:01:23.081" status="PASS"></status>
</suite>
<suite id="s1-s4" name="Test Eventlog" source="/tmp/root/5463/obmc-robot/tests/test_eventlog.robot">
<kw name="Open Connection And Log In" library="connection_client" type="setup">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:48.126">Dictionary does not contain key 'host'.</msg>
<status endtime="20161111 15:02:48.126" starttime="20161111 15:02:48.126" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:48.126">${has_host} = False</msg>
<status endtime="20161111 15:02:48.126" starttime="20161111 15:02:48.125" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161111 15:02:48.130" starttime="20161111 15:02:48.130" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:48.131" starttime="20161111 15:02:48.126" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:48.135">${port_num} = 22</msg>
<status endtime="20161111 15:02:48.135" starttime="20161111 15:02:48.135" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:48.136">${SSH_PORT} = 22</msg>
<status endtime="20161111 15:02:48.136" starttime="20161111 15:02:48.136" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:48.137">${https_num} = 443</msg>
<status endtime="20161111 15:02:48.137" starttime="20161111 15:02:48.136" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:48.138">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161111 15:02:48.138" starttime="20161111 15:02:48.137" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:48.138" starttime="20161111 15:02:48.135" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:48.138" starttime="20161111 15:02:48.131" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161111 15:02:48.139">Dictionary does not contain key 'port'.</msg>
<status endtime="20161111 15:02:48.139" starttime="20161111 15:02:48.139" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:48.139">${has_port} = False</msg>
<status endtime="20161111 15:02:48.139" starttime="20161111 15:02:48.138" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161111 15:02:48.145" starttime="20161111 15:02:48.144" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161111 15:02:48.145" starttime="20161111 15:02:48.145" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:48.146" starttime="20161111 15:02:48.144" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:48.146" starttime="20161111 15:02:48.140" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:48.146">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161111 15:02:52.135">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161111 15:02:52.136" starttime="20161111 15:02:48.146" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:52.136" starttime="20161111 15:02:48.125" status="PASS"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:52.139">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161111 15:02:52.140" starttime="20161111 15:02:52.139" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:52.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:52.140" starttime="20161111 15:02:52.140" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:52.141" starttime="20161111 15:02:52.141" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:52.143">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:52.143" starttime="20161111 15:02:52.142" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:52.144">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:52.145" starttime="20161111 15:02:52.144" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:52.145" starttime="20161111 15:02:52.143" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:52.145" starttime="20161111 15:02:52.141" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:52.146">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:52.147" starttime="20161111 15:02:52.146" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:52.148">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:52.148" starttime="20161111 15:02:52.147" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:52.149">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:52.149" starttime="20161111 15:02:52.148" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:52.150">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:52.150" starttime="20161111 15:02:52.149" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:53.107">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:53.107" starttime="20161111 15:02:52.150" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:53.108">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:53.108" starttime="20161111 15:02:53.108" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:53.108" starttime="20161111 15:02:52.145" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.697">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:53.697">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:53.697" starttime="20161111 15:02:53.109" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.700">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:53.700" starttime="20161111 15:02:53.699" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:53.701">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:53.701" starttime="20161111 15:02:53.701" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:53.701" starttime="20161111 15:02:53.700" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:53.702" starttime="20161111 15:02:53.698" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:53.702">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:53.702" starttime="20161111 15:02:52.138" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:53.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:53.703" starttime="20161111 15:02:53.702" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.705">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161111 15:02:53.705" starttime="20161111 15:02:53.704" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.707">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:02:53.707" starttime="20161111 15:02:53.706" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:53.709">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161111 15:02:53.709" starttime="20161111 15:02:53.708" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:53.709" starttime="20161111 15:02:53.708" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:53.709" starttime="20161111 15:02:53.705" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:53.710">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:53.710" starttime="20161111 15:02:53.710" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.711">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:53.711" starttime="20161111 15:02:53.711" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.711">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:53.711" starttime="20161111 15:02:53.711" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:53.712">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:53.712" starttime="20161111 15:02:53.712" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:54.835">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:54.835">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:54.835" starttime="20161111 15:02:53.712" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:54.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:54.836" starttime="20161111 15:02:54.835" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:54.836" starttime="20161111 15:02:53.709" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.264">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:02:55.265">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:55.265" starttime="20161111 15:02:54.837" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.267">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:55.267" starttime="20161111 15:02:55.266" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.268">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:55.269" starttime="20161111 15:02:55.268" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.269" starttime="20161111 15:02:55.267" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.269" starttime="20161111 15:02:55.265" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:55.269">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:55.269" starttime="20161111 15:02:53.703" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.270">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:55.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:55.270">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20161111 15:02:55.270" starttime="20161111 15:02:55.270" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.271">Length is 0</msg>
<status endtime="20161111 15:02:55.271" starttime="20161111 15:02:55.270" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:02:55.275" starttime="20161111 15:02:55.272" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.276" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:02:55.277" starttime="20161111 15:02:55.276" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.277" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:02:55.278" starttime="20161111 15:02:55.277" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:55.278">${exist} = True</msg>
<status endtime="20161111 15:02:55.278" starttime="20161111 15:02:55.277" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:02:55.281" starttime="20161111 15:02:55.278" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.282">${cur_time} = 2016-11-11 15:02:55:281615</msg>
<status endtime="20161111 15:02:55.282" starttime="20161111 15:02:55.281" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.282">${cur_time} = 20161111150255281615</msg>
<status endtime="20161111 15:02:55.283" starttime="20161111 15:02:55.282" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:55.283">${cur_time} = 20161111150255281615</msg>
<status endtime="20161111 15:02:55.283" starttime="20161111 15:02:55.281" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.284" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:02:55.284" starttime="20161111 15:02:55.283" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.284" starttime="20161111 15:02:55.276" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.284" starttime="20161111 15:02:55.271" status="PASS"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status endtime="20161111 15:02:55.284" critical="yes" starttime="20161111 15:02:52.136" status="PASS"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.286">${data} = {u'data': []}</msg>
<status endtime="20161111 15:02:55.286" starttime="20161111 15:02:55.285" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.287">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161111 15:02:55.287" starttime="20161111 15:02:55.286" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.287">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:55.287" starttime="20161111 15:02:55.287" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161111 15:02:55.288" starttime="20161111 15:02:55.288" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.290">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:55.290" starttime="20161111 15:02:55.288" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.290">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161111 15:02:55.290" starttime="20161111 15:02:55.290" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.291" starttime="20161111 15:02:55.290" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.291" starttime="20161111 15:02:55.288" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.291">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:55.292" starttime="20161111 15:02:55.291" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.292">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:55.292" starttime="20161111 15:02:55.292" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.293">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:55.293" starttime="20161111 15:02:55.293" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.293">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:55.293" starttime="20161111 15:02:55.293" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:55.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:55.794">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:55.794" starttime="20161111 15:02:55.294" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:55.795">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:55.795" starttime="20161111 15:02:55.794" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:55.795" starttime="20161111 15:02:55.291" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.761">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:56.761">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:56.761" starttime="20161111 15:02:55.795" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.763">${msg} = Response code:200, Content:{
  "data": 343, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:56.763" starttime="20161111 15:02:56.762" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:56.764">Response code:200, Content:{
  "data": 343, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:56.764" starttime="20161111 15:02:56.764" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:56.765" starttime="20161111 15:02:56.763" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:56.765" starttime="20161111 15:02:56.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:56.765">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:56.765" starttime="20161111 15:02:55.286" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:56.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:56.766" starttime="20161111 15:02:56.766" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.767">To JSON using : content={
  "data": 343, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:56.767">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:56.767">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 343}</msg>
<status endtime="20161111 15:02:56.767" starttime="20161111 15:02:56.767" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.768">${LOGID} = 343</msg>
<status endtime="20161111 15:02:56.768" starttime="20161111 15:02:56.768" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.769">${uri} = /org/openbmc/records/events/343</msg>
<status endtime="20161111 15:02:56.769" starttime="20161111 15:02:56.769" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:56.770" starttime="20161111 15:02:55.285" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:02:56.774" starttime="20161111 15:02:56.770" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:56.775" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:02:56.775" starttime="20161111 15:02:56.775" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:56.776" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:02:56.776" starttime="20161111 15:02:56.776" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:56.776">${exist} = True</msg>
<status endtime="20161111 15:02:56.776" starttime="20161111 15:02:56.775" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:02:56.780" starttime="20161111 15:02:56.777" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.781">${cur_time} = 2016-11-11 15:02:56:780584</msg>
<status endtime="20161111 15:02:56.781" starttime="20161111 15:02:56.780" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:56.781">${cur_time} = 20161111150256780584</msg>
<status endtime="20161111 15:02:56.781" starttime="20161111 15:02:56.781" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:56.781">${cur_time} = 20161111150256780584</msg>
<status endtime="20161111 15:02:56.781" starttime="20161111 15:02:56.780" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:56.782" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:02:56.782" starttime="20161111 15:02:56.782" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:56.782" starttime="20161111 15:02:56.774" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:56.782" starttime="20161111 15:02:56.770" status="PASS"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status endtime="20161111 15:02:56.782" critical="yes" starttime="20161111 15:02:55.284" status="PASS"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161111 15:02:57.018" starttime="20161111 15:02:56.783" status="PASS"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status endtime="20161111 15:02:57.019" starttime="20161111 15:02:48.104" status="PASS"></status>
</suite>
<suite id="s1-s5" name="Test Obmcrest" source="/tmp/root/5463/obmc-robot/tests/test_obmcrest.robot">
<test id="s1-s5-t1" name="Good connection for testing">
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.040">${base_uri} = /</msg>
<status endtime="20161111 15:02:57.040" starttime="20161111 15:02:57.040" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.042">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161111 15:02:57.042" starttime="20161111 15:02:57.041" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.042">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161111 15:02:57.043" starttime="20161111 15:02:57.042" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.043" starttime="20161111 15:02:57.042" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.043" starttime="20161111 15:02:57.041" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.044">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:57.044" starttime="20161111 15:02:57.043" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.044">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:57.045" starttime="20161111 15:02:57.044" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.045">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:57.045" starttime="20161111 15:02:57.045" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.046">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:57.046" starttime="20161111 15:02:57.045" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.867">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:57.867">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:57.867" starttime="20161111 15:02:57.046" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:57.868" starttime="20161111 15:02:57.867" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.869" starttime="20161111 15:02:57.043" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.925">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:02:57.926">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:57.926" starttime="20161111 15:02:57.869" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.927">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:57.927" starttime="20161111 15:02:57.927" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.929">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:57.929" starttime="20161111 15:02:57.928" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.929" starttime="20161111 15:02:57.928" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.929" starttime="20161111 15:02:57.926" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:57.929">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:57.930" starttime="20161111 15:02:57.040" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.930">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:57.930" starttime="20161111 15:02:57.930" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.931">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:57.931">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:57.931">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org']}</msg>
<status endtime="20161111 15:02:57.931" starttime="20161111 15:02:57.931" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:57.932">${content} = [u'/org']</msg>
<status endtime="20161111 15:02:57.932" starttime="20161111 15:02:57.039" status="PASS"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.933">${c} = /org</msg>
<status endtime="20161111 15:02:57.933" starttime="20161111 15:02:57.932" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status endtime="20161111 15:02:57.934" starttime="20161111 15:02:57.933" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:02:57.938" starttime="20161111 15:02:57.935" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.940" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:02:57.940" starttime="20161111 15:02:57.939" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.940" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:02:57.941" starttime="20161111 15:02:57.940" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:57.941">${exist} = True</msg>
<status endtime="20161111 15:02:57.941" starttime="20161111 15:02:57.940" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:02:57.943" starttime="20161111 15:02:57.941" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.944">${cur_time} = 2016-11-11 15:02:57:944043</msg>
<status endtime="20161111 15:02:57.944" starttime="20161111 15:02:57.944" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.945">${cur_time} = 20161111150257944043</msg>
<status endtime="20161111 15:02:57.945" starttime="20161111 15:02:57.944" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:57.945">${cur_time} = 20161111150257944043</msg>
<status endtime="20161111 15:02:57.945" starttime="20161111 15:02:57.944" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.946" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:02:57.946" starttime="20161111 15:02:57.945" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.946" starttime="20161111 15:02:57.939" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.946" starttime="20161111 15:02:57.934" status="PASS"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status endtime="20161111 15:02:57.946" critical="yes" starttime="20161111 15:02:57.039" status="PASS"></status>
</test>
<test id="s1-s5-t2" name="get directory listing /">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.948">${base_uri} = /</msg>
<status endtime="20161111 15:02:57.948" starttime="20161111 15:02:57.947" status="PASS"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.950">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161111 15:02:57.950" starttime="20161111 15:02:57.949" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.950">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status endtime="20161111 15:02:57.950" starttime="20161111 15:02:57.950" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.951" starttime="20161111 15:02:57.950" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:57.951" starttime="20161111 15:02:57.948" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:57.952">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161111 15:02:57.952" starttime="20161111 15:02:57.951" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.952">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161111 15:02:57.953" starttime="20161111 15:02:57.952" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.953">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161111 15:02:57.953" starttime="20161111 15:02:57.953" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:57.954">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161111 15:02:57.954" starttime="20161111 15:02:57.953" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:59.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161111 15:02:59.657">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:59.657" starttime="20161111 15:02:57.954" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:59.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:59.658" starttime="20161111 15:02:59.657" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:59.658" starttime="20161111 15:02:57.951" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:59.878">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161111 15:02:59.878">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:59.878" starttime="20161111 15:02:59.659" status="PASS"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:59.881">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:59.881" starttime="20161111 15:02:59.880" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:59.882">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161111 15:02:59.882" starttime="20161111 15:02:59.882" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:59.882" starttime="20161111 15:02:59.881" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:59.882" starttime="20161111 15:02:59.879" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:59.883">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161111 15:02:59.883" starttime="20161111 15:02:57.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:59.884">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161111 15:02:59.884" starttime="20161111 15:02:59.883" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:59.885">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161111 15:02:59.885">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161111 15:02:59.885">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org']}</msg>
<status endtime="20161111 15:02:59.885" starttime="20161111 15:02:59.884" status="PASS"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status endtime="20161111 15:02:59.886" starttime="20161111 15:02:59.885" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status endtime="20161111 15:02:59.886" starttime="20161111 15:02:59.886" status="PASS"></status>
</kw>
<kw name="Log FFDC" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status endtime="20161111 15:02:59.891" starttime="20161111 15:02:59.888" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:59.892" html="yes">Directory '&lt;a href="file:///tmp/root/5463/obmc-robot/logs"&gt;/tmp/root/5463/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161111 15:02:59.892" starttime="20161111 15:02:59.892" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:59.893" html="yes">File '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161111 15:02:59.893" starttime="20161111 15:02:59.893" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:59.893">${exist} = True</msg>
<status endtime="20161111 15:02:59.893" starttime="20161111 15:02:59.893" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161111 15:02:59.896" starttime="20161111 15:02:59.894" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:59.897">${cur_time} = 2016-11-11 15:02:59:896800</msg>
<status endtime="20161111 15:02:59.897" starttime="20161111 15:02:59.897" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161111 15:02:59.897">${cur_time} = 20161111150259896800</msg>
<status endtime="20161111 15:02:59.897" starttime="20161111 15:02:59.897" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161111 15:02:59.898">${cur_time} = 20161111150259896800</msg>
<status endtime="20161111 15:02:59.898" starttime="20161111 15:02:59.896" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161111 15:02:59.898" html="yes">Appended to file '&lt;a href="file:///tmp/root/5463/obmc-robot/logs/test_history.txt"&gt;/tmp/root/5463/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161111 15:02:59.898" starttime="20161111 15:02:59.898" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:59.899" starttime="20161111 15:02:59.891" status="PASS"></status>
</kw>
<status endtime="20161111 15:02:59.899" starttime="20161111 15:02:59.887" status="PASS"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status endtime="20161111 15:02:59.899" critical="yes" starttime="20161111 15:02:57.946" status="PASS"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status endtime="20161111 15:02:59.899" starttime="20161111 15:02:57.021" status="PASS"></status>
</suite>
<status endtime="20161111 15:02:59.903" starttime="20161111 15:01:10.718" status="PASS"></status>
</suite>
<statistics>
<total>
<stat pass="8" fail="0">Critical Tests</stat>
<stat pass="8" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">chassisboot</stat>
<stat pass="4" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">get_directory_listing</stat>
<stat pass="1" fail="0">Good_connection_for_testing</stat>
<stat pass="1" fail="0">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat pass="8" id="s1" name="Tests" fail="0">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="2" id="s1-s2" name="Test Association" fail="0">Tests.Test Association</stat>
<stat pass="1" id="s1-s3" name="Test Basic Poweron" fail="0">Tests.Test Basic Poweron</stat>
<stat pass="2" id="s1-s4" name="Test Eventlog" fail="0">Tests.Test Eventlog</stat>
<stat pass="2" id="s1-s5" name="Test Obmcrest" fail="0">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
