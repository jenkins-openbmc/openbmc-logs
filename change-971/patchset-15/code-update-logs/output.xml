<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161212 10:59:23.276" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code update BMC">
<kw name="Check If File Exist" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>\n PATH: ${filepath}</arg>
</arguments>
<msg timestamp="20161212 10:59:23.643" level="INFO">
PATH: /home/fspcibld/barreleye-20161209181530.all.tar</msg>
<status status="PASS" endtime="20161212 10:59:23.643" starttime="20161212 10:59:23.642"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>msg=${filepath} doesn't exist [ ERROR ]</arg>
</arguments>
<msg timestamp="20161212 10:59:23.643" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/barreleye-20161209181530.all.tar"&gt;/home/fspcibld/barreleye-20161209181530.all.tar&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161212 10:59:23.643" starttime="20161212 10:59:23.643"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${filepath}</arg>
</arguments>
<msg timestamp="20161212 10:59:23.644" level="INFO">${FILE_PATH} = /home/fspcibld/barreleye-20161209181530.all.tar</msg>
<status status="PASS" endtime="20161212 10:59:23.644" starttime="20161212 10:59:23.644"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:23.644" starttime="20161212 10:59:23.641"></status>
</kw>
<kw name="System Readiness Test" library="code_update_utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<assign>
<var>${l_status}</var>
</assign>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 10:59:23.646" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 10:59:23.646" starttime="20161212 10:59:23.646"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 10:59:23.650" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 10:59:26.655" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 10:59:26.655" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.963 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.769 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 10:59:26.656" starttime="20161212 10:59:23.646"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 10:59:26.659" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.963 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.769 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.776 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.908 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.769/0.854/0.963/0.083 ms</msg>
<status status="PASS" endtime="20161212 10:59:26.659" starttime="20161212 10:59:26.658"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:26.660" starttime="20161212 10:59:26.660"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:26.661" starttime="20161212 10:59:23.645"></status>
</kw>
<msg timestamp="20161212 10:59:26.661" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 10:59:26.661" starttime="20161212 10:59:23.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:26.665" starttime="20161212 10:59:26.662"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:26.667" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:26.668" starttime="20161212 10:59:26.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:26.669" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:26.669" starttime="20161212 10:59:26.668"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:26.670" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:26.670" starttime="20161212 10:59:26.669"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:26.670" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:26.670" starttime="20161212 10:59:26.670"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:27.010" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:27.010" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:27.010" starttime="20161212 10:59:26.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:27.011" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:27.011" starttime="20161212 10:59:27.011"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:27.011" starttime="20161212 10:59:26.666"></status>
</kw>
<msg timestamp="20161212 10:59:27.011" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161212 10:59:27.011" starttime="20161212 10:59:26.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:27.014" starttime="20161212 10:59:27.012"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 10:59:27.016" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 10:59:27.016" starttime="20161212 10:59:27.015"></status>
</kw>
<msg timestamp="20161212 10:59:27.016" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 10:59:27.016" starttime="20161212 10:59:27.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:27.019" starttime="20161212 10:59:27.018"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:27.019" starttime="20161212 10:59:27.016"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:27.022" starttime="20161212 10:59:27.019"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 10:59:27.022" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 10:59:27.023" starttime="20161212 10:59:27.022"></status>
</kw>
<msg timestamp="20161212 10:59:27.023" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 10:59:27.023" starttime="20161212 10:59:27.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:27.026" starttime="20161212 10:59:27.026"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:27.026" starttime="20161212 10:59:27.026"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:27.027" starttime="20161212 10:59:27.023"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 10:59:27.027" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 10:59:29.518" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161212 10:59:29.518" starttime="20161212 10:59:27.027"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:29.518" starttime="20161212 10:59:27.014"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 10:59:29.519" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161212 10:59:29.579" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 10:59:29.579" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161212 10:59:29.579" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 10:59:29.579" starttime="20161212 10:59:29.519"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 10:59:29.580" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 10:59:29.580" starttime="20161212 10:59:29.580"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:29.580" starttime="20161212 10:59:23.645"></status>
</kw>
<msg timestamp="20161212 10:59:29.581" level="INFO">${l_status} = True</msg>
<status status="PASS" endtime="20161212 10:59:29.581" starttime="20161212 10:59:23.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_status}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=System not in ideal state to use [ERROR]</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:29.585" starttime="20161212 10:59:29.581"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:29.585" starttime="20161212 10:59:23.644"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Validate BMC Version</arg>
<arg>before</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Validate BMC Version" library="code_update_utils">
<arguments>
<arg>before</arg>
</arguments>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 10:59:29.588" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 10:59:29.588" starttime="20161212 10:59:29.588"></status>
</kw>
<msg timestamp="20161212 10:59:29.588" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 10:59:29.588" starttime="20161212 10:59:29.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:29.592" starttime="20161212 10:59:29.592"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:29.592" starttime="20161212 10:59:29.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:29.595" starttime="20161212 10:59:29.592"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 10:59:29.596" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 10:59:29.596" starttime="20161212 10:59:29.596"></status>
</kw>
<msg timestamp="20161212 10:59:29.596" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 10:59:29.596" starttime="20161212 10:59:29.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:29.600" starttime="20161212 10:59:29.599"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:29.600" starttime="20161212 10:59:29.599"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:29.600" starttime="20161212 10:59:29.596"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 10:59:29.600" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 10:59:32.032" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161212 10:59:32.032" starttime="20161212 10:59:29.600"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.033" starttime="20161212 10:59:29.586"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 10:59:32.034" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161212 10:59:32.147" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 10:59:32.147" level="INFO">${version} = 20161209200615</msg>
<msg timestamp="20161212 10:59:32.147" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 10:59:32.147" starttime="20161212 10:59:32.033"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 10:59:32.148" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 10:59:32.148" starttime="20161212 10:59:32.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:32.153" starttime="20161212 10:59:32.153"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.154" starttime="20161212 10:59:32.148"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.154" starttime="20161212 10:59:29.586"></status>
</kw>
<msg timestamp="20161212 10:59:32.154" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20161212 10:59:32.154" starttime="20161212 10:59:29.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Pass Execution</arg>
<arg>Same Driver version installed</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:32.157" starttime="20161212 10:59:32.154"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161212 10:59:32.158" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161212 10:59:32.159" starttime="20161212 10:59:32.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161212 10:59:32.160" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 10:59:32.160" starttime="20161212 10:59:32.159"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:32.161" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161212 10:59:32.161" starttime="20161212 10:59:32.161"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:32.162" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161212 10:59:32.162" starttime="20161212 10:59:32.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:32.163" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:32.163" starttime="20161212 10:59:32.163"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:32.163" starttime="20161212 10:59:32.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:32.167" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:32.167" starttime="20161212 10:59:32.167"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:32.168" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:32.168" starttime="20161212 10:59:32.168"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.169" starttime="20161212 10:59:32.168"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.169" starttime="20161212 10:59:32.166"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.169" starttime="20161212 10:59:32.164"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:32.170" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:32.170" starttime="20161212 10:59:32.169"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:32.170" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:32.171" starttime="20161212 10:59:32.170"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:32.171" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:32.171" starttime="20161212 10:59:32.171"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:32.172" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:32.172" starttime="20161212 10:59:32.171"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:32.687" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:32.688" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:32.688" starttime="20161212 10:59:32.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:32.688" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:32.688" starttime="20161212 10:59:32.688"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:32.689" starttime="20161212 10:59:32.169"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 10:59:33.029" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:33.029" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:33.030" starttime="20161212 10:59:32.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:33.033" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:33.033" starttime="20161212 10:59:33.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:33.034" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:33.034" starttime="20161212 10:59:33.034"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.034" starttime="20161212 10:59:33.034"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.034" starttime="20161212 10:59:33.032"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.034" starttime="20161212 10:59:33.030"></status>
</kw>
<msg timestamp="20161212 10:59:33.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:33.036" starttime="20161212 10:59:32.161"></status>
</kw>
<msg timestamp="20161212 10:59:33.036" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:33.036" starttime="20161212 10:59:32.160"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:33.037" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:33.037" starttime="20161212 10:59:33.036"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161212 10:59:33.038" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161212 10:59:33.038" starttime="20161212 10:59:33.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161212 10:59:33.039" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 10:59:33.039" starttime="20161212 10:59:33.038"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:33.040" level="INFO">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161212 10:59:33.040" starttime="20161212 10:59:33.040"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:33.042" level="INFO">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161212 10:59:33.042" starttime="20161212 10:59:33.041"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:33.042" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:33.042" starttime="20161212 10:59:33.042"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:33.043" starttime="20161212 10:59:33.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:33.048" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:33.048" starttime="20161212 10:59:33.048"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:33.049" level="INFO">URI:https://9.3.23.30/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:33.049" starttime="20161212 10:59:33.049"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.049" starttime="20161212 10:59:33.049"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.050" starttime="20161212 10:59:33.047"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.050" starttime="20161212 10:59:33.043"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:33.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:33.051" starttime="20161212 10:59:33.050"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:33.051" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:33.051" starttime="20161212 10:59:33.051"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:33.052" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:33.052" starttime="20161212 10:59:33.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:33.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:33.053" starttime="20161212 10:59:33.052"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:33.808" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:33.808" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:33.808" starttime="20161212 10:59:33.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:33.809" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:33.809" starttime="20161212 10:59:33.809"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:33.810" starttime="20161212 10:59:33.050"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 10:59:35.074" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:35.074" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:35.074" starttime="20161212 10:59:33.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:35.081" level="INFO">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:35.081" starttime="20161212 10:59:35.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:35.083" level="INFO">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:35.083" starttime="20161212 10:59:35.082"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.083" starttime="20161212 10:59:35.082"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.083" starttime="20161212 10:59:35.080"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.084" starttime="20161212 10:59:35.075"></status>
</kw>
<msg timestamp="20161212 10:59:35.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:35.084" starttime="20161212 10:59:33.040"></status>
</kw>
<msg timestamp="20161212 10:59:35.084" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:35.084" starttime="20161212 10:59:33.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:35.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:35.085" starttime="20161212 10:59:35.085"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 10:59:35.085" level="INFO">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 10:59:35.085" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 10:59:35.085" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': 0}</msg>
<status status="PASS" endtime="20161212 10:59:35.086" starttime="20161212 10:59:35.085"></status>
</kw>
<msg timestamp="20161212 10:59:35.086" level="INFO">${state} = 0</msg>
<status status="PASS" endtime="20161212 10:59:35.086" starttime="20161212 10:59:33.038"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:35.086" starttime="20161212 10:59:35.086"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.086" starttime="20161212 10:59:33.037"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.086" starttime="20161212 10:59:33.037"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.087" starttime="20161212 10:59:32.157"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20161212 10:59:35.087" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161212 10:59:35.088" starttime="20161212 10:59:35.087"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:35.089" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20161212 10:59:35.089" starttime="20161212 10:59:35.088"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:35.090" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161212 10:59:35.090" starttime="20161212 10:59:35.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:35.090" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:35.090" starttime="20161212 10:59:35.090"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:35.091" starttime="20161212 10:59:35.090"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:35.092" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:35.092" starttime="20161212 10:59:35.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:35.093" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:35.093" starttime="20161212 10:59:35.092"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.093" starttime="20161212 10:59:35.092"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.093" starttime="20161212 10:59:35.091"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:35.094" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:35.094" starttime="20161212 10:59:35.093"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:35.095" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:35.095" starttime="20161212 10:59:35.094"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:35.095" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:35.095" starttime="20161212 10:59:35.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:35.096" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:35.096" starttime="20161212 10:59:35.095"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:35.599" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:35.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:35.599" starttime="20161212 10:59:35.096"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:35.600" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:35.601" starttime="20161212 10:59:35.600"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:35.601" starttime="20161212 10:59:35.093"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 10:59:36.044" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:36.045" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.045" starttime="20161212 10:59:35.601"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:36.046" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:36.046" starttime="20161212 10:59:36.046"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:36.048" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:36.048" starttime="20161212 10:59:36.048"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.048" starttime="20161212 10:59:36.047"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.048" starttime="20161212 10:59:36.045"></status>
</kw>
<msg timestamp="20161212 10:59:36.049" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.049" starttime="20161212 10:59:35.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:36.050" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.050" starttime="20161212 10:59:36.050"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161212 10:59:36.051" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 10:59:36.051" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 10:59:36.051" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161212 10:59:36.051" starttime="20161212 10:59:36.051"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.051" starttime="20161212 10:59:35.088"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:36.054" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20161212 10:59:36.054" starttime="20161212 10:59:36.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:36.061" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 10:59:36.061" starttime="20161212 10:59:36.060"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:36.062" level="INFO">URI:https://9.3.23.30/org/openbmc/settings/host0/attr/power_policy, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 10:59:36.062" starttime="20161212 10:59:36.062"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.062" starttime="20161212 10:59:36.061"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.063" starttime="20161212 10:59:36.059"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.063" starttime="20161212 10:59:36.055"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:36.075" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:36.076" starttime="20161212 10:59:36.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:36.076" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:36.076" starttime="20161212 10:59:36.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:36.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:36.077" starttime="20161212 10:59:36.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:36.077" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:36.077" starttime="20161212 10:59:36.077"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:36.819" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:36.820" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.820" starttime="20161212 10:59:36.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:36.821" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.821" starttime="20161212 10:59:36.820"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.821" starttime="20161212 10:59:36.063"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 10:59:36.923" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20161212 10:59:36.923" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.923" starttime="20161212 10:59:36.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:36.930" level="INFO">${msg} = Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:36.930" starttime="20161212 10:59:36.929"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:36.931" level="INFO">Response code:200, Content:{
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:36.931" starttime="20161212 10:59:36.931"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.931" starttime="20161212 10:59:36.930"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.932" starttime="20161212 10:59:36.928"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.932" starttime="20161212 10:59:36.924"></status>
</kw>
<msg timestamp="20161212 10:59:36.933" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:36.933" starttime="20161212 10:59:36.052"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 10:59:36.934" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 10:59:36.934" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 10:59:36.934" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20161212 10:59:36.934" starttime="20161212 10:59:36.933"></status>
</kw>
<msg timestamp="20161212 10:59:36.934" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20161212 10:59:36.934" starttime="20161212 10:59:36.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:36.935" starttime="20161212 10:59:36.934"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.935" starttime="20161212 10:59:35.087"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:36.936" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 10:59:36.936" starttime="20161212 10:59:36.935"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:36.937" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20161212 10:59:36.937" starttime="20161212 10:59:36.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:36.937" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:36.937" starttime="20161212 10:59:36.937"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:36.938" starttime="20161212 10:59:36.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:36.942" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:36.942" starttime="20161212 10:59:36.941"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:36.943" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/PrepareForUpdate, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 10:59:36.943" starttime="20161212 10:59:36.943"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.943" starttime="20161212 10:59:36.942"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.943" starttime="20161212 10:59:36.941"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:36.943" starttime="20161212 10:59:36.938"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:36.945" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:36.945" starttime="20161212 10:59:36.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:36.946" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:36.946" starttime="20161212 10:59:36.945"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:36.946" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:36.946" starttime="20161212 10:59:36.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:36.947" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:36.947" starttime="20161212 10:59:36.947"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:37.312" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:37.312" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:37.312" starttime="20161212 10:59:36.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:37.313" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:37.313" starttime="20161212 10:59:37.312"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.313" starttime="20161212 10:59:36.943"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 10:59:37.901" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:37.901" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:37.901" starttime="20161212 10:59:37.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:37.908" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:37.908" starttime="20161212 10:59:37.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:37.909" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:37.909" starttime="20161212 10:59:37.909"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.910" starttime="20161212 10:59:37.908"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.910" starttime="20161212 10:59:37.906"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.910" starttime="20161212 10:59:37.901"></status>
</kw>
<msg timestamp="20161212 10:59:37.910" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:37.911" starttime="20161212 10:59:36.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:37.912" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:37.912" starttime="20161212 10:59:37.911"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 10:59:37.916" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161212 10:59:37.916" starttime="20161212 10:59:37.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:37.921" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 10:59:37.921" starttime="20161212 10:59:37.920"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:37.922" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 10:59:37.923" starttime="20161212 10:59:37.922"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.923" starttime="20161212 10:59:37.922"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.923" starttime="20161212 10:59:37.920"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:37.923" starttime="20161212 10:59:37.916"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:37.924" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:37.925" starttime="20161212 10:59:37.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:37.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:37.925" starttime="20161212 10:59:37.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:37.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:37.926" starttime="20161212 10:59:37.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:37.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:37.926" starttime="20161212 10:59:37.926"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:38.376" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 10:59:38.376" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:38.376" starttime="20161212 10:59:37.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:38.377" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:38.378" starttime="20161212 10:59:38.377"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:38.378" starttime="20161212 10:59:37.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 10:59:38.498" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161212 10:59:38.499" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:38.499" starttime="20161212 10:59:38.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 10:59:38.505" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161212 10:59:38.505" starttime="20161212 10:59:38.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 10:59:38.507" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 10:59:38.507" starttime="20161212 10:59:38.507"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:38.507" starttime="20161212 10:59:38.506"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:38.508" starttime="20161212 10:59:38.504"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:38.508" starttime="20161212 10:59:38.499"></status>
</kw>
<msg timestamp="20161212 10:59:38.508" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 10:59:38.508" starttime="20161212 10:59:37.913"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 10:59:38.509" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 10:59:38.509" starttime="20161212 10:59:38.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 10:59:38.510" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Switch to update mode in progress", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 10:59:38.510" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 10:59:38.511" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'p...</msg>
<status status="PASS" endtime="20161212 10:59:38.511" starttime="20161212 10:59:38.510"></status>
</kw>
<msg timestamp="20161212 10:59:38.511" level="INFO">${data} = {u'status': u'Switch to update mode in progress', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application...</msg>
<status status="PASS" endtime="20161212 10:59:38.511" starttime="20161212 10:59:37.912"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>Switch to update mode in progress</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:38.512" starttime="20161212 10:59:38.511"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:38.512" starttime="20161212 10:59:36.935"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 10:59:38.515" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 10:59:38.515" starttime="20161212 10:59:38.515"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 10:59:38.520" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 10:59:41.527" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 10:59:41.528" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.963 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=1.59 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 10:59:41.528" starttime="20161212 10:59:38.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 10:59:41.532" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.963 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=1.59 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.842 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.860 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.842/1.064/1.592/0.309 ms</msg>
<status status="PASS" endtime="20161212 10:59:41.532" starttime="20161212 10:59:41.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:41.533" starttime="20161212 10:59:41.532"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:41.534" starttime="20161212 10:59:38.515"></status>
</kw>
<msg timestamp="20161212 10:59:41.534" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 10:59:41.534" starttime="20161212 10:59:38.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:41.542" starttime="20161212 10:59:41.535"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:41.545" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:41.546" starttime="20161212 10:59:41.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:41.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:41.548" starttime="20161212 10:59:41.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:41.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:41.549" starttime="20161212 10:59:41.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:41.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:41.550" starttime="20161212 10:59:41.549"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:46.325" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161212 10:59:46.325" starttime="20161212 10:59:41.551"></status>
</kw>
<status status="FAIL" endtime="20161212 10:59:46.326" starttime="20161212 10:59:41.543"></status>
</kw>
<msg timestamp="20161212 10:59:46.326" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 10:59:46.326" starttime="20161212 10:59:41.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 10:59:46.332" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 10:59:46.332" starttime="20161212 10:59:46.331"></status>
</kw>
<status status="FAIL" endtime="20161212 10:59:46.332" starttime="20161212 10:59:46.326"></status>
</kw>
<status status="FAIL" endtime="20161212 10:59:46.332" starttime="20161212 10:59:38.514"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 10:59:56.336" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 10:59:56.336" starttime="20161212 10:59:56.335"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 10:59:56.342" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 10:59:59.348" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 10:59:59.348" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.02 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.874 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 10:59:59.348" starttime="20161212 10:59:56.336"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 10:59:59.352" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.02 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.874 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.885 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.838 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.838/0.906/1.027/0.071 ms</msg>
<status status="PASS" endtime="20161212 10:59:59.352" starttime="20161212 10:59:59.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:59.353" starttime="20161212 10:59:59.352"></status>
</kw>
<status status="PASS" endtime="20161212 10:59:59.353" starttime="20161212 10:59:56.335"></status>
</kw>
<msg timestamp="20161212 10:59:59.354" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 10:59:59.354" starttime="20161212 10:59:56.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 10:59:59.360" starttime="20161212 10:59:59.354"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 10:59:59.362" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 10:59:59.364" starttime="20161212 10:59:59.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 10:59:59.365" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 10:59:59.365" starttime="20161212 10:59:59.364"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 10:59:59.365" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 10:59:59.365" starttime="20161212 10:59:59.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 10:59:59.366" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 10:59:59.366" starttime="20161212 10:59:59.365"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 10:59:59.973" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fffaf7a16d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 10:59:59.973" starttime="20161212 10:59:59.366"></status>
</kw>
<status status="FAIL" endtime="20161212 10:59:59.973" starttime="20161212 10:59:59.361"></status>
</kw>
<msg timestamp="20161212 10:59:59.974" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 10:59:59.974" starttime="20161212 10:59:59.360"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 10:59:59.977" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 10:59:59.977" starttime="20161212 10:59:59.977"></status>
</kw>
<status status="FAIL" endtime="20161212 10:59:59.977" starttime="20161212 10:59:59.974"></status>
</kw>
<status status="FAIL" endtime="20161212 10:59:59.977" starttime="20161212 10:59:56.333"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:00:09.981" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:00:09.981" starttime="20161212 11:00:09.980"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:00:09.991" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:00:23.016" level="INFO">${RC} = 1</msg>
<msg timestamp="20161212 11:00:23.017" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161212 11:00:23.017" starttime="20161212 11:00:09.981"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:00:23.023" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161212 11:00:23.023" starttime="20161212 11:00:23.020"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161212 11:00:23.024" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161212 11:00:23.024" starttime="20161212 11:00:23.023"></status>
</kw>
<status status="FAIL" endtime="20161212 11:00:23.025" starttime="20161212 11:00:09.979"></status>
</kw>
<msg timestamp="20161212 11:00:23.025" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161212 11:00:23.025" starttime="20161212 11:00:09.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161212 11:00:23.031" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161212 11:00:23.031" starttime="20161212 11:00:23.031"></status>
</kw>
<status status="FAIL" endtime="20161212 11:00:23.031" starttime="20161212 11:00:23.026"></status>
</kw>
<status status="FAIL" endtime="20161212 11:00:23.031" starttime="20161212 11:00:09.978"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:00:33.034" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:00:33.035" starttime="20161212 11:00:33.034"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:00:33.040" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:00:46.069" level="INFO">${RC} = 1</msg>
<msg timestamp="20161212 11:00:46.069" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161212 11:00:46.070" starttime="20161212 11:00:33.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:00:46.073" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3023ms
</msg>
<status status="PASS" endtime="20161212 11:00:46.074" starttime="20161212 11:00:46.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161212 11:00:46.075" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161212 11:00:46.075" starttime="20161212 11:00:46.074"></status>
</kw>
<status status="FAIL" endtime="20161212 11:00:46.076" starttime="20161212 11:00:33.033"></status>
</kw>
<msg timestamp="20161212 11:00:46.076" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161212 11:00:46.076" starttime="20161212 11:00:33.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161212 11:00:46.082" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161212 11:00:46.083" starttime="20161212 11:00:46.082"></status>
</kw>
<status status="FAIL" endtime="20161212 11:00:46.083" starttime="20161212 11:00:46.077"></status>
</kw>
<status status="FAIL" endtime="20161212 11:00:46.083" starttime="20161212 11:00:33.032"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:00:56.086" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:00:56.086" starttime="20161212 11:00:56.086"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:00:56.092" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:01:09.099" level="INFO">${RC} = 1</msg>
<msg timestamp="20161212 11:01:09.099" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20161212 11:01:09.099" starttime="20161212 11:00:56.087"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:01:09.103" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20161212 11:01:09.103" starttime="20161212 11:01:09.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161212 11:01:09.105" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161212 11:01:09.105" starttime="20161212 11:01:09.104"></status>
</kw>
<status status="FAIL" endtime="20161212 11:01:09.105" starttime="20161212 11:00:56.085"></status>
</kw>
<msg timestamp="20161212 11:01:09.106" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161212 11:01:09.106" starttime="20161212 11:00:56.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161212 11:01:09.112" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161212 11:01:09.112" starttime="20161212 11:01:09.111"></status>
</kw>
<status status="FAIL" endtime="20161212 11:01:09.112" starttime="20161212 11:01:09.107"></status>
</kw>
<status status="FAIL" endtime="20161212 11:01:09.112" starttime="20161212 11:00:56.083"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:01:19.115" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:01:19.115" starttime="20161212 11:01:19.114"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:01:19.121" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:01:22.124" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:01:22.124" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.65 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.834 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:01:22.124" starttime="20161212 11:01:19.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:01:22.128" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.65 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.834 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.806 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.798 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.798/1.272/2.650/0.795 ms</msg>
<status status="PASS" endtime="20161212 11:01:22.129" starttime="20161212 11:01:22.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:01:22.130" starttime="20161212 11:01:22.129"></status>
</kw>
<status status="PASS" endtime="20161212 11:01:22.130" starttime="20161212 11:01:19.114"></status>
</kw>
<msg timestamp="20161212 11:01:22.130" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:01:22.130" starttime="20161212 11:01:19.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:01:22.136" starttime="20161212 11:01:22.131"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:01:22.138" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:01:22.139" starttime="20161212 11:01:22.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:01:22.140" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:01:22.140" starttime="20161212 11:01:22.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:01:22.140" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:01:22.140" starttime="20161212 11:01:22.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:01:22.141" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:01:22.141" starttime="20161212 11:01:22.140"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:02:02.796" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161212 11:02:02.796" starttime="20161212 11:01:22.141"></status>
</kw>
<status status="FAIL" endtime="20161212 11:02:02.796" starttime="20161212 11:01:22.136"></status>
</kw>
<msg timestamp="20161212 11:02:02.797" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:02:02.797" starttime="20161212 11:01:22.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:02:02.803" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:02:02.803" starttime="20161212 11:02:02.803"></status>
</kw>
<status status="FAIL" endtime="20161212 11:02:02.804" starttime="20161212 11:02:02.797"></status>
</kw>
<status status="FAIL" endtime="20161212 11:02:02.804" starttime="20161212 11:01:19.113"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:02:12.808" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:02:12.808" starttime="20161212 11:02:12.807"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:02:12.815" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:02:15.820" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:02:15.820" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.04 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.830 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:02:15.820" starttime="20161212 11:02:12.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:02:15.824" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.04 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.830 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.814 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.838 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.814/0.882/1.048/0.100 ms</msg>
<status status="PASS" endtime="20161212 11:02:15.824" starttime="20161212 11:02:15.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:15.825" starttime="20161212 11:02:15.824"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:15.825" starttime="20161212 11:02:12.807"></status>
</kw>
<msg timestamp="20161212 11:02:15.826" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:02:15.826" starttime="20161212 11:02:12.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:15.832" starttime="20161212 11:02:15.826"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:02:15.834" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:02:15.836" starttime="20161212 11:02:15.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:02:15.837" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:02:15.837" starttime="20161212 11:02:15.836"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:02:15.837" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:02:15.837" starttime="20161212 11:02:15.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:02:15.838" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:02:15.838" starttime="20161212 11:02:15.838"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:02:16.181" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:02:16.182" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:02:16.182" starttime="20161212 11:02:15.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:02:16.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:02:16.182" starttime="20161212 11:02:16.182"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:16.183" starttime="20161212 11:02:15.833"></status>
</kw>
<msg timestamp="20161212 11:02:16.183" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161212 11:02:16.183" starttime="20161212 11:02:15.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:16.185" starttime="20161212 11:02:16.183"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 11:02:16.187" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 11:02:16.187" starttime="20161212 11:02:16.187"></status>
</kw>
<msg timestamp="20161212 11:02:16.187" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 11:02:16.187" starttime="20161212 11:02:16.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:16.193" starttime="20161212 11:02:16.192"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:16.193" starttime="20161212 11:02:16.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:16.198" starttime="20161212 11:02:16.193"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 11:02:16.199" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 11:02:16.199" starttime="20161212 11:02:16.198"></status>
</kw>
<msg timestamp="20161212 11:02:16.199" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 11:02:16.199" starttime="20161212 11:02:16.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:16.203" starttime="20161212 11:02:16.202"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:16.203" starttime="20161212 11:02:16.202"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:16.203" starttime="20161212 11:02:16.199"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 11:02:16.203" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 11:02:32.843" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161212 11:02:32.844" starttime="20161212 11:02:16.203"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.844" starttime="20161212 11:02:16.186"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:02:32.844" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161212 11:02:32.955" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:02:32.955" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161212 11:02:32.955" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:02:32.955" starttime="20161212 11:02:32.844"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:02:32.956" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:02:32.956" starttime="20161212 11:02:32.955"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.956" starttime="20161212 11:02:12.805"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.956" starttime="20161212 10:59:38.514"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.956" starttime="20161212 10:59:38.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20161212 11:02:32.957" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161212 11:02:32.957" starttime="20161212 11:02:32.957"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161212 11:02:32.961" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161212 11:02:32.961" starttime="20161212 11:02:32.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161212 11:02:32.961" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 11:02:32.961" starttime="20161212 11:02:32.961"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:02:32.963" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161212 11:02:32.964" starttime="20161212 11:02:32.963"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:02:32.965" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161212 11:02:32.965" starttime="20161212 11:02:32.965"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:02:32.966" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:02:32.966" starttime="20161212 11:02:32.966"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:32.967" starttime="20161212 11:02:32.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:02:32.971" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:02:32.971" starttime="20161212 11:02:32.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:02:32.972" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:02:32.972" starttime="20161212 11:02:32.972"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.972" starttime="20161212 11:02:32.971"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.972" starttime="20161212 11:02:32.970"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:32.972" starttime="20161212 11:02:32.967"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:02:32.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:02:32.974" starttime="20161212 11:02:32.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:02:32.974" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:02:32.974" starttime="20161212 11:02:32.974"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:02:32.975" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:02:32.975" starttime="20161212 11:02:32.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:02:32.975" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:02:32.975" starttime="20161212 11:02:32.975"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:02:33.318" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:02:33.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:02:33.318" starttime="20161212 11:02:32.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:02:33.320" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:02:33.320" starttime="20161212 11:02:33.319"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:33.320" starttime="20161212 11:02:32.972"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:02:37.316" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:02:37.316" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:02:37.316" starttime="20161212 11:02:33.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:02:37.323" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:02:37.323" starttime="20161212 11:02:37.322"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:02:37.325" level="INFO">Response code:200, Content:{
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:02:37.325" starttime="20161212 11:02:37.324"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:37.325" starttime="20161212 11:02:37.324"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:37.325" starttime="20161212 11:02:37.322"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:37.325" starttime="20161212 11:02:37.317"></status>
</kw>
<msg timestamp="20161212 11:02:37.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:02:37.326" starttime="20161212 11:02:32.964"></status>
</kw>
<msg timestamp="20161212 11:02:37.326" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:02:37.326" starttime="20161212 11:02:32.962"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:02:37.327" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:02:37.327" starttime="20161212 11:02:37.327"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 11:02:37.328" level="INFO">To JSON using : content={
  "data": "BMC_STARTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 11:02:37.328" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 11:02:37.328" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_STARTING'}</msg>
<status status="PASS" endtime="20161212 11:02:37.328" starttime="20161212 11:02:37.328"></status>
</kw>
<msg timestamp="20161212 11:02:37.328" level="INFO">${current} = BMC_STARTING</msg>
<status status="PASS" endtime="20161212 11:02:37.328" starttime="20161212 11:02:32.960"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<msg timestamp="20161212 11:02:37.329" level="FAIL">'[u'BMC_READY', u'HOST_POWERED_OFF']' does not contain 'BMC_STARTING'</msg>
<status status="FAIL" endtime="20161212 11:02:37.329" starttime="20161212 11:02:37.329"></status>
</kw>
<status status="FAIL" endtime="20161212 11:02:37.329" starttime="20161212 11:02:32.958"></status>
</kw>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>${states}</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161212 11:02:47.332" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161212 11:02:47.332" starttime="20161212 11:02:47.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161212 11:02:47.333" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 11:02:47.333" starttime="20161212 11:02:47.332"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:02:47.335" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161212 11:02:47.335" starttime="20161212 11:02:47.334"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:02:47.337" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161212 11:02:47.337" starttime="20161212 11:02:47.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:02:47.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:02:47.338" starttime="20161212 11:02:47.338"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:02:47.339" starttime="20161212 11:02:47.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:02:47.346" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:02:47.346" starttime="20161212 11:02:47.344"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:02:47.347" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:02:47.347" starttime="20161212 11:02:47.347"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:47.347" starttime="20161212 11:02:47.346"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:47.347" starttime="20161212 11:02:47.343"></status>
</kw>
<status status="PASS" endtime="20161212 11:02:47.347" starttime="20161212 11:02:47.339"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:02:47.348" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:02:47.349" starttime="20161212 11:02:47.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:02:47.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:02:47.350" starttime="20161212 11:02:47.349"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:02:47.350" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:02:47.350" starttime="20161212 11:02:47.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:02:47.351" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:02:47.351" starttime="20161212 11:02:47.350"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:03:06.960" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:03:06.961" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:03:06.961" starttime="20161212 11:02:47.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:03:06.962" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:03:06.962" starttime="20161212 11:03:06.961"></status>
</kw>
<status status="PASS" endtime="20161212 11:03:06.962" starttime="20161212 11:02:47.348"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:03:07.324" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:03:07.324" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:03:07.324" starttime="20161212 11:03:06.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:03:07.331" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:03:07.331" starttime="20161212 11:03:07.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:03:07.333" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:03:07.333" starttime="20161212 11:03:07.332"></status>
</kw>
<status status="PASS" endtime="20161212 11:03:07.333" starttime="20161212 11:03:07.331"></status>
</kw>
<status status="PASS" endtime="20161212 11:03:07.333" starttime="20161212 11:03:07.330"></status>
</kw>
<status status="PASS" endtime="20161212 11:03:07.333" starttime="20161212 11:03:07.325"></status>
</kw>
<msg timestamp="20161212 11:03:07.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:03:07.334" starttime="20161212 11:02:47.335"></status>
</kw>
<msg timestamp="20161212 11:03:07.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:03:07.334" starttime="20161212 11:02:47.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:03:07.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:03:07.335" starttime="20161212 11:03:07.335"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 11:03:07.336" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 11:03:07.336" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 11:03:07.336" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_READY'}</msg>
<status status="PASS" endtime="20161212 11:03:07.336" starttime="20161212 11:03:07.336"></status>
</kw>
<msg timestamp="20161212 11:03:07.337" level="INFO">${current} = BMC_READY</msg>
<status status="PASS" endtime="20161212 11:03:07.337" starttime="20161212 11:02:47.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:03:07.338" starttime="20161212 11:03:07.337"></status>
</kw>
<status status="PASS" endtime="20161212 11:03:07.338" starttime="20161212 11:02:47.330"></status>
</kw>
<status status="PASS" endtime="20161212 11:03:07.338" starttime="20161212 11:02:32.958"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20161212 11:04:07.339" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20161212 11:04:07.340" starttime="20161212 11:03:07.338"></status>
</kw>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20161212 11:04:07.343" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20161212 11:04:07.343" starttime="20161212 11:04:07.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20161212 11:04:07.344" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20161212 11:04:07.344" starttime="20161212 11:04:07.344"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:04:07.347" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161212 11:04:07.347" starttime="20161212 11:04:07.346"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:04:07.349" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20161212 11:04:07.349" starttime="20161212 11:04:07.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:07.350" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:07.350" starttime="20161212 11:04:07.349"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:07.350" starttime="20161212 11:04:07.350"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:07.351" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:04:07.351" starttime="20161212 11:04:07.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:07.352" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:04:07.352" starttime="20161212 11:04:07.352"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:07.353" starttime="20161212 11:04:07.352"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:07.353" starttime="20161212 11:04:07.350"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:04:07.354" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:04:07.354" starttime="20161212 11:04:07.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:07.355" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:07.355" starttime="20161212 11:04:07.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:04:07.356" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:04:07.356" starttime="20161212 11:04:07.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:07.357" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:04:07.357" starttime="20161212 11:04:07.356"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:04:07.717" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:07.717" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:07.717" starttime="20161212 11:04:07.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:07.718" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:07.718" starttime="20161212 11:04:07.717"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:07.718" starttime="20161212 11:04:07.353"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:04:08.036" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:08.036" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:08.036" starttime="20161212 11:04:07.718"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:08.037" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:08.037" starttime="20161212 11:04:08.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:08.038" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:08.038" starttime="20161212 11:04:08.038"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.039" starttime="20161212 11:04:08.037"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.039" starttime="20161212 11:04:08.036"></status>
</kw>
<msg timestamp="20161212 11:04:08.040" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:08.040" starttime="20161212 11:04:07.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:08.040" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:08.041" starttime="20161212 11:04:08.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20161212 11:04:08.041" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 11:04:08.041" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 11:04:08.041" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20161212 11:04:08.041" starttime="20161212 11:04:08.041"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.041" starttime="20161212 11:04:07.345"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:04:08.043" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161212 11:04:08.043" starttime="20161212 11:04:08.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:08.048" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 11:04:08.048" starttime="20161212 11:04:08.047"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:08.049" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 11:04:08.049" starttime="20161212 11:04:08.049"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.050" starttime="20161212 11:04:08.048"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.050" starttime="20161212 11:04:08.046"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.050" starttime="20161212 11:04:08.043"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:04:08.051" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:04:08.051" starttime="20161212 11:04:08.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:08.052" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:08.052" starttime="20161212 11:04:08.052"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:04:08.053" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:04:08.053" starttime="20161212 11:04:08.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:08.053" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:04:08.053" starttime="20161212 11:04:08.053"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:04:08.771" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:08.771" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:08.771" starttime="20161212 11:04:08.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:08.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:08.773" starttime="20161212 11:04:08.772"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:08.773" starttime="20161212 11:04:08.050"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:04:09.041" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161212 11:04:09.041" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:09.041" starttime="20161212 11:04:08.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:09.048" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "...</msg>
<status status="PASS" endtime="20161212 11:04:09.048" starttime="20161212 11:04:09.047"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:09.049" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:09.049" starttime="20161212 11:04:09.049"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:09.050" starttime="20161212 11:04:09.048"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:09.050" starttime="20161212 11:04:09.046"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:09.050" starttime="20161212 11:04:09.041"></status>
</kw>
<msg timestamp="20161212 11:04:09.050" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:09.050" starttime="20161212 11:04:08.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:09.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:09.052" starttime="20161212 11:04:09.051"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 11:04:09.053" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 11:04:09.053" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 11:04:09.053" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20161212 11:04:09.054" starttime="20161212 11:04:09.052"></status>
</kw>
<msg timestamp="20161212 11:04:09.054" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20161212 11:04:09.054" starttime="20161212 11:04:08.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:09.056" starttime="20161212 11:04:09.055"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:09.056" starttime="20161212 11:04:07.341"></status>
</kw>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<arguments>
<arg>${FILE_PATH}</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:09.067" starttime="20161212 11:04:09.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:10.304" starttime="20161212 11:04:09.070"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:10.304" starttime="20161212 11:04:09.067"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:10.305" starttime="20161212 11:04:09.058"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:38.384" starttime="20161212 11:04:10.305"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:38.385" starttime="20161212 11:04:09.056"></status>
</kw>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20161212 11:04:38.387" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20161212 11:04:38.387" starttime="20161212 11:04:38.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:38.388" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20161212 11:04:38.388" starttime="20161212 11:04:38.387"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:04:38.390" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20161212 11:04:38.390" starttime="20161212 11:04:38.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:38.392" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:38.393" starttime="20161212 11:04:38.391"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:38.394" starttime="20161212 11:04:38.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:38.402" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:04:38.402" starttime="20161212 11:04:38.401"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:38.403" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc/action/update, method:Post, args:{u'data': {u'data': [u'/tmp/flashimg']}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:04:38.403" starttime="20161212 11:04:38.403"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:38.404" starttime="20161212 11:04:38.402"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:38.404" starttime="20161212 11:04:38.400"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:38.404" starttime="20161212 11:04:38.394"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:04:38.406" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:04:38.406" starttime="20161212 11:04:38.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:38.407" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:38.407" starttime="20161212 11:04:38.407"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:04:38.408" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:04:38.408" starttime="20161212 11:04:38.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:38.409" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:04:38.409" starttime="20161212 11:04:38.408"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:04:39.031" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:39.031" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:39.031" starttime="20161212 11:04:38.409"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:39.032" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:39.032" starttime="20161212 11:04:39.032"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:39.032" starttime="20161212 11:04:38.404"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:04:44.134" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:44.134" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.134" starttime="20161212 11:04:39.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:44.140" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:44.141" starttime="20161212 11:04:44.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:44.142" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:44.142" starttime="20161212 11:04:44.142"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.143" starttime="20161212 11:04:44.141"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.143" starttime="20161212 11:04:44.139"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.143" starttime="20161212 11:04:44.134"></status>
</kw>
<msg timestamp="20161212 11:04:44.143" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.143" starttime="20161212 11:04:38.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:44.145" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.145" starttime="20161212 11:04:44.144"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:04:44.147" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20161212 11:04:44.147" starttime="20161212 11:04:44.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:44.152" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 11:04:44.152" starttime="20161212 11:04:44.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:44.153" level="INFO">URI:https://9.3.23.30/org/openbmc/control/flash/bmc, method:Get, args:{}</msg>
<status status="PASS" endtime="20161212 11:04:44.153" starttime="20161212 11:04:44.153"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.153" starttime="20161212 11:04:44.153"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.153" starttime="20161212 11:04:44.151"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.154" starttime="20161212 11:04:44.148"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:04:44.154" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:04:44.155" starttime="20161212 11:04:44.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:44.156" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:44.156" starttime="20161212 11:04:44.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:04:44.156" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:04:44.156" starttime="20161212 11:04:44.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:44.157" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:04:44.157" starttime="20161212 11:04:44.157"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:04:44.532" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:44.532" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.532" starttime="20161212 11:04:44.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:44.533" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.533" starttime="20161212 11:04:44.532"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.533" starttime="20161212 11:04:44.154"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:04:44.670" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None </msg>
<msg timestamp="20161212 11:04:44.670" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.670" starttime="20161212 11:04:44.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:44.674" level="INFO">${msg} = Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_default...</msg>
<status status="PASS" endtime="20161212 11:04:44.674" starttime="20161212 11:04:44.674"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:44.675" level="INFO">Response code:200, Content:{
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Image ready to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:44.675" starttime="20161212 11:04:44.675"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.675" starttime="20161212 11:04:44.674"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.675" starttime="20161212 11:04:44.673"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.675" starttime="20161212 11:04:44.671"></status>
</kw>
<msg timestamp="20161212 11:04:44.676" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.676" starttime="20161212 11:04:44.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:44.676" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:44.677" starttime="20161212 11:04:44.676"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 11:04:44.677" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Image ready to apply.", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 11:04:44.677" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 11:04:44.677" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Image ready to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'...</msg>
<status status="PASS" endtime="20161212 11:04:44.677" starttime="20161212 11:04:44.677"></status>
</kw>
<msg timestamp="20161212 11:04:44.677" level="INFO">${data} = {u'status': u'Image ready to apply.', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'/tmp/flashimg', u'preserve_network_settings': 1, u'restore_applicatio...</msg>
<status status="PASS" endtime="20161212 11:04:44.678" starttime="20161212 11:04:44.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:44.678" starttime="20161212 11:04:44.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:44.678" starttime="20161212 11:04:44.678"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.679" starttime="20161212 11:04:38.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Trigger Warm Reset</arg>
</arguments>
<kw name="Trigger Warm Reset" library="utils">
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>"Triggering warm reset"</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:44.680" starttime="20161212 11:04:44.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:44.682" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 11:04:44.682" starttime="20161212 11:04:44.680"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/bmc0/action/warmReset</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:04:44.683" level="INFO">${base_uri} = /org/openbmc/control/bmc0/action/warmReset</msg>
<status status="PASS" endtime="20161212 11:04:44.683" starttime="20161212 11:04:44.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:44.683" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:44.683" starttime="20161212 11:04:44.683"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:44.684" starttime="20161212 11:04:44.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:44.689" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/control/bmc0/action/warmReset, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:04:44.689" starttime="20161212 11:04:44.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:44.690" level="INFO">URI:https://9.3.23.30/org/openbmc/control/bmc0/action/warmReset, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:04:44.690" starttime="20161212 11:04:44.690"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.690" starttime="20161212 11:04:44.689"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.690" starttime="20161212 11:04:44.688"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:44.690" starttime="20161212 11:04:44.685"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:04:44.692" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:04:44.692" starttime="20161212 11:04:44.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:44.692" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:44.692" starttime="20161212 11:04:44.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:04:44.693" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:04:44.693" starttime="20161212 11:04:44.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:44.694" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:04:44.694" starttime="20161212 11:04:44.693"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:04:45.070" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:45.070" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:45.070" starttime="20161212 11:04:44.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:45.071" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:45.071" starttime="20161212 11:04:45.070"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.071" starttime="20161212 11:04:44.691"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:04:45.381" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/bmc0/action/warmReset, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:04:45.381" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:45.381" starttime="20161212 11:04:45.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:04:45.385" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:45.385" starttime="20161212 11:04:45.384"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:04:45.386" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:04:45.386" starttime="20161212 11:04:45.386"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.386" starttime="20161212 11:04:45.385"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.386" starttime="20161212 11:04:45.384"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.386" starttime="20161212 11:04:45.381"></status>
</kw>
<msg timestamp="20161212 11:04:45.386" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:04:45.386" starttime="20161212 11:04:44.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:04:45.387" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:04:45.387" starttime="20161212 11:04:45.387"></status>
</kw>
<kw name="Check If warmReset is Initiated" library="utils">
<doc>Ping would be still alive, so try SSH to connect</doc>
<assign>
<var>${session_active}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Open Connection And Log In</arg>
</arguments>
<assign>
<var>${alive}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 11:04:45.389" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 11:04:45.390" starttime="20161212 11:04:45.389"></status>
</kw>
<msg timestamp="20161212 11:04:45.390" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 11:04:45.390" starttime="20161212 11:04:45.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:45.395" starttime="20161212 11:04:45.395"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.395" starttime="20161212 11:04:45.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:45.400" starttime="20161212 11:04:45.395"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 11:04:45.401" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 11:04:45.401" starttime="20161212 11:04:45.400"></status>
</kw>
<msg timestamp="20161212 11:04:45.401" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 11:04:45.401" starttime="20161212 11:04:45.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:45.405" starttime="20161212 11:04:45.405"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.405" starttime="20161212 11:04:45.404"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:45.405" starttime="20161212 11:04:45.401"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 11:04:45.405" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 11:04:47.651" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161212 11:04:47.651" starttime="20161212 11:04:45.405"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:47.652" starttime="20161212 11:04:45.388"></status>
</kw>
<msg timestamp="20161212 11:04:47.652" level="INFO">${alive} = True</msg>
<status status="PASS" endtime="20161212 11:04:47.652" starttime="20161212 11:04:45.388"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${alive}' == '${False}'</arg>
<arg>${False}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:47.656" starttime="20161212 11:04:47.652"></status>
</kw>
<msg timestamp="20161212 11:04:47.657" level="INFO">${session_active} = True</msg>
<status status="PASS" endtime="20161212 11:04:47.657" starttime="20161212 11:04:45.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${session_active}' == '${True}'</arg>
<arg>Fail</arg>
<arg>msg=warm reset didn't occur</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=warm reset didn't occur</arg>
</arguments>
<msg timestamp="20161212 11:04:47.671" level="FAIL">warm reset didn't occur</msg>
<status status="FAIL" endtime="20161212 11:04:47.671" starttime="20161212 11:04:47.671"></status>
</kw>
<status status="FAIL" endtime="20161212 11:04:47.671" starttime="20161212 11:04:47.657"></status>
</kw>
<status status="FAIL" endtime="20161212 11:04:47.671" starttime="20161212 11:04:44.679"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:47.671" starttime="20161212 11:04:44.679"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>7s</arg>
</arguments>
<msg timestamp="20161212 11:04:54.672" level="INFO">Slept 7 seconds</msg>
<status status="PASS" endtime="20161212 11:04:54.672" starttime="20161212 11:04:47.672"></status>
</kw>
<kw name="Check If warmReset is Initiated" library="utils">
<doc>Ping would be still alive, so try SSH to connect</doc>
<assign>
<var>${session_active}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Open Connection And Log In</arg>
</arguments>
<assign>
<var>${alive}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 11:04:54.677" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 11:04:54.677" starttime="20161212 11:04:54.677"></status>
</kw>
<msg timestamp="20161212 11:04:54.677" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 11:04:54.677" starttime="20161212 11:04:54.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:54.683" starttime="20161212 11:04:54.682"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:54.683" starttime="20161212 11:04:54.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:54.688" starttime="20161212 11:04:54.684"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 11:04:54.690" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 11:04:54.690" starttime="20161212 11:04:54.689"></status>
</kw>
<msg timestamp="20161212 11:04:54.690" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 11:04:54.690" starttime="20161212 11:04:54.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:54.694" starttime="20161212 11:04:54.693"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:54.694" starttime="20161212 11:04:54.693"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:54.694" starttime="20161212 11:04:54.690"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 11:04:54.694" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 11:04:55.106" level="FAIL">SSHException: Error reading SSH protocol banner[Errno 104] Connection reset by peer</msg>
<status status="FAIL" endtime="20161212 11:04:55.106" starttime="20161212 11:04:54.694"></status>
</kw>
<status status="FAIL" endtime="20161212 11:04:55.106" starttime="20161212 11:04:54.675"></status>
</kw>
<msg timestamp="20161212 11:04:55.106" level="INFO">${alive} = False</msg>
<status status="PASS" endtime="20161212 11:04:55.106" starttime="20161212 11:04:54.674"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${alive}' == '${False}'</arg>
<arg>${False}</arg>
</arguments>
<msg timestamp="20161212 11:04:55.109" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20161212 11:04:55.109" starttime="20161212 11:04:55.106"></status>
</kw>
<msg timestamp="20161212 11:04:55.109" level="INFO">${session_active} = False</msg>
<status status="PASS" endtime="20161212 11:04:55.109" starttime="20161212 11:04:54.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${session_active}' == '${True}'</arg>
<arg>Trigger Warm Reset via Reboot</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:55.112" starttime="20161212 11:04:55.109"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>30 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:04:55.114" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:04:55.114" starttime="20161212 11:04:55.114"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:04:55.135" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:04:58.145" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:04:58.145" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.17 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.794 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:04:58.145" starttime="20161212 11:04:55.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:04:58.150" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.17 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.794 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.803 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.906 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.794/0.918/1.171/0.155 ms</msg>
<status status="PASS" endtime="20161212 11:04:58.150" starttime="20161212 11:04:58.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:58.151" starttime="20161212 11:04:58.150"></status>
</kw>
<status status="PASS" endtime="20161212 11:04:58.151" starttime="20161212 11:04:55.114"></status>
</kw>
<msg timestamp="20161212 11:04:58.151" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:04:58.151" starttime="20161212 11:04:55.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:04:58.154" starttime="20161212 11:04:58.152"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:04:58.156" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:04:58.158" starttime="20161212 11:04:58.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:04:58.159" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:04:58.159" starttime="20161212 11:04:58.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:04:58.159" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:04:58.159" starttime="20161212 11:04:58.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:04:58.160" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:04:58.160" starttime="20161212 11:04:58.159"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:05:00.857" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ProtocolError('Connection aborted.', error(104, 'Connection reset by peer')))</msg>
<status status="FAIL" endtime="20161212 11:05:00.857" starttime="20161212 11:04:58.160"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:00.857" starttime="20161212 11:04:58.155"></status>
</kw>
<msg timestamp="20161212 11:05:00.858" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:05:00.858" starttime="20161212 11:04:58.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:05:00.863" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:05:00.863" starttime="20161212 11:05:00.863"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:00.863" starttime="20161212 11:05:00.858"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:00.864" starttime="20161212 11:04:55.113"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:05:10.866" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:05:10.867" starttime="20161212 11:05:10.866"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:05:10.874" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:05:13.880" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:05:13.880" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.35 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.713 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:05:13.880" starttime="20161212 11:05:10.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:05:13.884" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.35 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.713 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.699 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.673 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.673/0.859/1.352/0.285 ms</msg>
<status status="PASS" endtime="20161212 11:05:13.884" starttime="20161212 11:05:13.883"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:13.885" starttime="20161212 11:05:13.885"></status>
</kw>
<status status="PASS" endtime="20161212 11:05:13.886" starttime="20161212 11:05:10.865"></status>
</kw>
<msg timestamp="20161212 11:05:13.886" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:05:13.886" starttime="20161212 11:05:10.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:13.891" starttime="20161212 11:05:13.887"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:05:13.893" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:05:13.894" starttime="20161212 11:05:13.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:05:13.895" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:05:13.895" starttime="20161212 11:05:13.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:05:13.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:05:13.895" starttime="20161212 11:05:13.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:05:13.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:05:13.896" starttime="20161212 11:05:13.896"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:05:14.504" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff87850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:05:14.504" starttime="20161212 11:05:13.896"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:14.504" starttime="20161212 11:05:13.892"></status>
</kw>
<msg timestamp="20161212 11:05:14.505" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:05:14.505" starttime="20161212 11:05:13.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:05:14.510" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:05:14.510" starttime="20161212 11:05:14.509"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:14.510" starttime="20161212 11:05:14.505"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:14.510" starttime="20161212 11:05:10.864"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:05:24.513" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:05:24.513" starttime="20161212 11:05:24.513"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:05:24.520" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:05:27.528" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:05:27.528" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.859 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.691 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:05:27.528" starttime="20161212 11:05:24.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:05:27.532" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.859 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.691 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.758 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.681 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.681/0.747/0.859/0.073 ms</msg>
<status status="PASS" endtime="20161212 11:05:27.532" starttime="20161212 11:05:27.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:27.532" starttime="20161212 11:05:27.532"></status>
</kw>
<status status="PASS" endtime="20161212 11:05:27.533" starttime="20161212 11:05:24.512"></status>
</kw>
<msg timestamp="20161212 11:05:27.533" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:05:27.533" starttime="20161212 11:05:24.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:27.537" starttime="20161212 11:05:27.534"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:05:27.539" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:05:27.540" starttime="20161212 11:05:27.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:05:27.541" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:05:27.541" starttime="20161212 11:05:27.540"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:05:27.541" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:05:27.541" starttime="20161212 11:05:27.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:05:27.542" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:05:27.542" starttime="20161212 11:05:27.541"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:05:28.148" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff8da90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:05:28.148" starttime="20161212 11:05:27.542"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:28.149" starttime="20161212 11:05:27.537"></status>
</kw>
<msg timestamp="20161212 11:05:28.149" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:05:28.149" starttime="20161212 11:05:27.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:05:28.153" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:05:28.153" starttime="20161212 11:05:28.153"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:28.153" starttime="20161212 11:05:28.149"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:28.154" starttime="20161212 11:05:24.511"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:05:38.156" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:05:38.156" starttime="20161212 11:05:38.156"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:05:38.163" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:05:41.175" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:05:41.175" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.28 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.709 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:05:41.176" starttime="20161212 11:05:38.157"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:05:41.180" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.28 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.709 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.738 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.714 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.709/0.861/1.286/0.247 ms</msg>
<status status="PASS" endtime="20161212 11:05:41.180" starttime="20161212 11:05:41.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:41.183" starttime="20161212 11:05:41.181"></status>
</kw>
<status status="PASS" endtime="20161212 11:05:41.183" starttime="20161212 11:05:38.155"></status>
</kw>
<msg timestamp="20161212 11:05:41.184" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:05:41.184" starttime="20161212 11:05:38.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:41.190" starttime="20161212 11:05:41.184"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:05:41.191" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:05:41.193" starttime="20161212 11:05:41.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:05:41.193" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:05:41.193" starttime="20161212 11:05:41.193"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:05:41.194" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:05:41.194" starttime="20161212 11:05:41.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:05:41.194" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:05:41.194" starttime="20161212 11:05:41.194"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:05:41.801" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff87d90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:05:41.801" starttime="20161212 11:05:41.194"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:41.801" starttime="20161212 11:05:41.190"></status>
</kw>
<msg timestamp="20161212 11:05:41.801" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:05:41.801" starttime="20161212 11:05:41.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:05:41.804" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:05:41.805" starttime="20161212 11:05:41.804"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:41.805" starttime="20161212 11:05:41.802"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:41.805" starttime="20161212 11:05:38.154"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:05:51.808" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:05:51.808" starttime="20161212 11:05:51.807"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:05:51.817" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:05:54.819" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:05:54.819" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.892 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.682 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:05:54.820" starttime="20161212 11:05:51.808"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:05:54.823" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.892 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.682 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.668 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.673 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.668/0.728/0.892/0.100 ms</msg>
<status status="PASS" endtime="20161212 11:05:54.823" starttime="20161212 11:05:54.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:54.824" starttime="20161212 11:05:54.824"></status>
</kw>
<status status="PASS" endtime="20161212 11:05:54.825" starttime="20161212 11:05:51.806"></status>
</kw>
<msg timestamp="20161212 11:05:54.825" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:05:54.825" starttime="20161212 11:05:51.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:05:54.829" starttime="20161212 11:05:54.825"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:05:54.831" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:05:54.832" starttime="20161212 11:05:54.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:05:54.833" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:05:54.833" starttime="20161212 11:05:54.832"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:05:54.833" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:05:54.833" starttime="20161212 11:05:54.833"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:05:54.834" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:05:54.834" starttime="20161212 11:05:54.833"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:05:55.441" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff87d90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:05:55.442" starttime="20161212 11:05:54.835"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:55.442" starttime="20161212 11:05:54.830"></status>
</kw>
<msg timestamp="20161212 11:05:55.442" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:05:55.442" starttime="20161212 11:05:54.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:05:55.447" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:05:55.448" starttime="20161212 11:05:55.447"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:55.448" starttime="20161212 11:05:55.443"></status>
</kw>
<status status="FAIL" endtime="20161212 11:05:55.448" starttime="20161212 11:05:51.805"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:06:05.451" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:06:05.451" starttime="20161212 11:06:05.451"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:06:05.458" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:06:08.464" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:06:08.464" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.849 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.741 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:06:08.464" starttime="20161212 11:06:05.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:06:08.468" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.849 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.741 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.722 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.698 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.698/0.752/0.849/0.063 ms</msg>
<status status="PASS" endtime="20161212 11:06:08.469" starttime="20161212 11:06:08.467"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:08.470" starttime="20161212 11:06:08.469"></status>
</kw>
<status status="PASS" endtime="20161212 11:06:08.470" starttime="20161212 11:06:05.450"></status>
</kw>
<msg timestamp="20161212 11:06:08.470" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:06:08.470" starttime="20161212 11:06:05.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:08.474" starttime="20161212 11:06:08.471"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:06:08.475" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:06:08.477" starttime="20161212 11:06:08.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:06:08.477" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:06:08.477" starttime="20161212 11:06:08.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:06:08.478" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:06:08.478" starttime="20161212 11:06:08.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:06:08.478" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:06:08.479" starttime="20161212 11:06:08.478"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:06:09.087" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffb4350&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:06:09.088" starttime="20161212 11:06:08.479"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:09.088" starttime="20161212 11:06:08.475"></status>
</kw>
<msg timestamp="20161212 11:06:09.088" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:06:09.088" starttime="20161212 11:06:08.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:06:09.091" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:06:09.091" starttime="20161212 11:06:09.091"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:09.091" starttime="20161212 11:06:09.088"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:09.091" starttime="20161212 11:06:05.449"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:06:19.095" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:06:19.095" starttime="20161212 11:06:19.094"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:06:19.101" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:06:22.106" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:06:22.107" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.12 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.698 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:06:22.107" starttime="20161212 11:06:19.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:06:22.109" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.12 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.698 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.703 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.672 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.672/0.799/1.124/0.188 ms</msg>
<status status="PASS" endtime="20161212 11:06:22.109" starttime="20161212 11:06:22.108"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:22.110" starttime="20161212 11:06:22.110"></status>
</kw>
<status status="PASS" endtime="20161212 11:06:22.110" starttime="20161212 11:06:19.093"></status>
</kw>
<msg timestamp="20161212 11:06:22.111" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:06:22.111" starttime="20161212 11:06:19.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:22.115" starttime="20161212 11:06:22.111"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:06:22.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:06:22.118" starttime="20161212 11:06:22.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:06:22.118" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:06:22.118" starttime="20161212 11:06:22.118"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:06:22.119" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:06:22.119" starttime="20161212 11:06:22.118"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:06:22.119" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:06:22.119" starttime="20161212 11:06:22.119"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:06:22.727" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff9f790&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:06:22.727" starttime="20161212 11:06:22.120"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:22.727" starttime="20161212 11:06:22.115"></status>
</kw>
<msg timestamp="20161212 11:06:22.728" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:06:22.728" starttime="20161212 11:06:22.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:06:22.733" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:06:22.733" starttime="20161212 11:06:22.733"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:22.733" starttime="20161212 11:06:22.728"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:22.733" starttime="20161212 11:06:19.092"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:06:32.736" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:06:32.736" starttime="20161212 11:06:32.736"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:06:32.743" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:06:35.747" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:06:35.747" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.841 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.703 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:06:35.748" starttime="20161212 11:06:32.737"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:06:35.752" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.841 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.703 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.674 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.663 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.663/0.720/0.841/0.073 ms</msg>
<status status="PASS" endtime="20161212 11:06:35.752" starttime="20161212 11:06:35.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:35.753" starttime="20161212 11:06:35.753"></status>
</kw>
<status status="PASS" endtime="20161212 11:06:35.754" starttime="20161212 11:06:32.735"></status>
</kw>
<msg timestamp="20161212 11:06:35.754" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:06:35.754" starttime="20161212 11:06:32.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:35.760" starttime="20161212 11:06:35.755"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:06:35.762" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:06:35.764" starttime="20161212 11:06:35.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:06:35.764" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:06:35.765" starttime="20161212 11:06:35.764"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:06:35.765" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:06:35.765" starttime="20161212 11:06:35.765"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:06:35.766" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:06:35.766" starttime="20161212 11:06:35.765"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:06:36.373" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff87410&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:06:36.373" starttime="20161212 11:06:35.766"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:36.373" starttime="20161212 11:06:35.761"></status>
</kw>
<msg timestamp="20161212 11:06:36.374" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:06:36.374" starttime="20161212 11:06:35.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:06:36.379" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:06:36.379" starttime="20161212 11:06:36.379"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:36.379" starttime="20161212 11:06:36.374"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:36.380" starttime="20161212 11:06:32.734"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:06:46.382" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:06:46.383" starttime="20161212 11:06:46.382"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:06:46.390" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:06:49.396" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:06:49.396" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.887 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.723 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:06:49.396" starttime="20161212 11:06:46.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:06:49.401" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.887 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.723 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.672 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.698 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.672/0.745/0.887/0.083 ms</msg>
<status status="PASS" endtime="20161212 11:06:49.401" starttime="20161212 11:06:49.400"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:49.402" starttime="20161212 11:06:49.401"></status>
</kw>
<status status="PASS" endtime="20161212 11:06:49.402" starttime="20161212 11:06:46.381"></status>
</kw>
<msg timestamp="20161212 11:06:49.403" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:06:49.403" starttime="20161212 11:06:46.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:06:49.408" starttime="20161212 11:06:49.404"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:06:49.411" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:06:49.413" starttime="20161212 11:06:49.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:06:49.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:06:49.414" starttime="20161212 11:06:49.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:06:49.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:06:49.415" starttime="20161212 11:06:49.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:06:49.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:06:49.416" starttime="20161212 11:06:49.415"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:06:50.024" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff48cd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:06:50.024" starttime="20161212 11:06:49.416"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:50.024" starttime="20161212 11:06:49.409"></status>
</kw>
<msg timestamp="20161212 11:06:50.025" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:06:50.025" starttime="20161212 11:06:49.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:06:50.030" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:06:50.030" starttime="20161212 11:06:50.030"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:50.030" starttime="20161212 11:06:50.025"></status>
</kw>
<status status="FAIL" endtime="20161212 11:06:50.030" starttime="20161212 11:06:46.380"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:07:00.037" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:07:00.037" starttime="20161212 11:07:00.036"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:07:00.045" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:07:03.048" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:07:03.048" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.856 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.779 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:07:03.048" starttime="20161212 11:07:00.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:07:03.053" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.856 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.779 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.754 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.769 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.754/0.789/0.856/0.048 ms</msg>
<status status="PASS" endtime="20161212 11:07:03.053" starttime="20161212 11:07:03.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:03.053" starttime="20161212 11:07:03.053"></status>
</kw>
<status status="PASS" endtime="20161212 11:07:03.054" starttime="20161212 11:07:00.032"></status>
</kw>
<msg timestamp="20161212 11:07:03.054" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:07:03.054" starttime="20161212 11:07:00.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:03.058" starttime="20161212 11:07:03.054"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:07:03.059" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:07:03.061" starttime="20161212 11:07:03.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:07:03.061" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:07:03.061" starttime="20161212 11:07:03.061"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:07:03.062" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:07:03.062" starttime="20161212 11:07:03.061"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:07:03.062" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:07:03.062" starttime="20161212 11:07:03.062"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:07:03.671" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff9fbd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:07:03.671" starttime="20161212 11:07:03.063"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:03.672" starttime="20161212 11:07:03.058"></status>
</kw>
<msg timestamp="20161212 11:07:03.672" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:07:03.672" starttime="20161212 11:07:03.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:07:03.678" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:07:03.678" starttime="20161212 11:07:03.677"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:03.678" starttime="20161212 11:07:03.672"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:03.678" starttime="20161212 11:07:00.031"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:07:13.681" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:07:13.681" starttime="20161212 11:07:13.681"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:07:13.692" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:07:16.695" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:07:16.695" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.765 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.691 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:07:16.696" starttime="20161212 11:07:13.682"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:07:16.700" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.765 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.691 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.818 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.669 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.669/0.735/0.818/0.067 ms</msg>
<status status="PASS" endtime="20161212 11:07:16.700" starttime="20161212 11:07:16.698"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:16.701" starttime="20161212 11:07:16.701"></status>
</kw>
<status status="PASS" endtime="20161212 11:07:16.701" starttime="20161212 11:07:13.680"></status>
</kw>
<msg timestamp="20161212 11:07:16.702" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:07:16.702" starttime="20161212 11:07:13.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:16.707" starttime="20161212 11:07:16.702"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:07:16.710" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:07:16.712" starttime="20161212 11:07:16.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:07:16.713" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:07:16.713" starttime="20161212 11:07:16.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:07:16.714" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:07:16.714" starttime="20161212 11:07:16.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:07:16.714" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:07:16.714" starttime="20161212 11:07:16.714"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:07:17.321" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffa8990&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:07:17.321" starttime="20161212 11:07:16.714"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:17.321" starttime="20161212 11:07:16.708"></status>
</kw>
<msg timestamp="20161212 11:07:17.322" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:07:17.322" starttime="20161212 11:07:16.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:07:17.327" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:07:17.327" starttime="20161212 11:07:17.327"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:17.327" starttime="20161212 11:07:17.322"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:17.328" starttime="20161212 11:07:13.678"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:07:27.331" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:07:27.331" starttime="20161212 11:07:27.330"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:07:27.338" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:07:30.348" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:07:30.350" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.09 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.751 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:07:30.350" starttime="20161212 11:07:27.331"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:07:30.359" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.09 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.751 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.758 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.711 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.711/0.829/1.098/0.158 ms</msg>
<status status="PASS" endtime="20161212 11:07:30.359" starttime="20161212 11:07:30.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:30.362" starttime="20161212 11:07:30.361"></status>
</kw>
<status status="PASS" endtime="20161212 11:07:30.362" starttime="20161212 11:07:27.330"></status>
</kw>
<msg timestamp="20161212 11:07:30.363" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:07:30.363" starttime="20161212 11:07:27.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:30.368" starttime="20161212 11:07:30.364"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:07:30.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:07:30.374" starttime="20161212 11:07:30.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:07:30.375" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:07:30.375" starttime="20161212 11:07:30.374"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:07:30.375" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:07:30.375" starttime="20161212 11:07:30.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:07:30.376" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:07:30.376" starttime="20161212 11:07:30.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:07:30.986" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9fff89d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:07:30.987" starttime="20161212 11:07:30.376"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:30.987" starttime="20161212 11:07:30.368"></status>
</kw>
<msg timestamp="20161212 11:07:30.987" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:07:30.987" starttime="20161212 11:07:30.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:07:30.990" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:07:30.990" starttime="20161212 11:07:30.990"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:30.990" starttime="20161212 11:07:30.987"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:30.990" starttime="20161212 11:07:27.328"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:07:40.993" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:07:40.994" starttime="20161212 11:07:40.993"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:07:41.009" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:07:44.004" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:07:44.004" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.934 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.722 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:07:44.004" starttime="20161212 11:07:40.994"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:07:44.008" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.934 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.722 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.755 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.716 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.716/0.781/0.934/0.095 ms</msg>
<status status="PASS" endtime="20161212 11:07:44.008" starttime="20161212 11:07:44.007"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:44.009" starttime="20161212 11:07:44.008"></status>
</kw>
<status status="PASS" endtime="20161212 11:07:44.009" starttime="20161212 11:07:40.992"></status>
</kw>
<msg timestamp="20161212 11:07:44.010" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:07:44.010" starttime="20161212 11:07:40.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:44.015" starttime="20161212 11:07:44.010"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:07:44.016" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:07:44.017" starttime="20161212 11:07:44.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:07:44.017" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:07:44.018" starttime="20161212 11:07:44.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:07:44.018" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:07:44.018" starttime="20161212 11:07:44.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:07:44.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:07:44.019" starttime="20161212 11:07:44.018"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:07:44.626" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fffaf844710&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:07:44.626" starttime="20161212 11:07:44.019"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:44.626" starttime="20161212 11:07:44.015"></status>
</kw>
<msg timestamp="20161212 11:07:44.626" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:07:44.626" starttime="20161212 11:07:44.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:07:44.632" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:07:44.632" starttime="20161212 11:07:44.631"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:44.632" starttime="20161212 11:07:44.627"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:44.632" starttime="20161212 11:07:40.991"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:07:54.635" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:07:54.635" starttime="20161212 11:07:54.635"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:07:54.648" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:07:57.648" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:07:57.648" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.995 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.764 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:07:57.648" starttime="20161212 11:07:54.636"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:07:57.652" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.995 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.764 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.800 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.728 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.728/0.821/0.995/0.109 ms</msg>
<status status="PASS" endtime="20161212 11:07:57.652" starttime="20161212 11:07:57.651"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:57.655" starttime="20161212 11:07:57.653"></status>
</kw>
<status status="PASS" endtime="20161212 11:07:57.655" starttime="20161212 11:07:54.634"></status>
</kw>
<msg timestamp="20161212 11:07:57.655" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:07:57.655" starttime="20161212 11:07:54.634"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:07:57.660" starttime="20161212 11:07:57.656"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:07:57.663" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:07:57.664" starttime="20161212 11:07:57.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:07:57.664" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:07:57.665" starttime="20161212 11:07:57.664"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:07:57.665" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:07:57.665" starttime="20161212 11:07:57.665"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:07:57.666" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:07:57.666" starttime="20161212 11:07:57.665"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:07:58.272" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffb4610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:07:58.273" starttime="20161212 11:07:57.666"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:58.273" starttime="20161212 11:07:57.661"></status>
</kw>
<msg timestamp="20161212 11:07:58.273" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:07:58.273" starttime="20161212 11:07:57.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:07:58.278" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:07:58.278" starttime="20161212 11:07:58.277"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:58.278" starttime="20161212 11:07:58.273"></status>
</kw>
<status status="FAIL" endtime="20161212 11:07:58.278" starttime="20161212 11:07:54.633"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:08:08.282" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:08:08.282" starttime="20161212 11:08:08.281"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:08:08.298" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:08:11.296" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:08:11.296" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.04 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=1.03 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl...</msg>
<status status="PASS" endtime="20161212 11:08:11.296" starttime="20161212 11:08:08.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:08:11.299" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.04 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=1.03 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.736 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.770 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.736/0.895/1.041/0.146 ms</msg>
<status status="PASS" endtime="20161212 11:08:11.299" starttime="20161212 11:08:11.298"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:11.300" starttime="20161212 11:08:11.300"></status>
</kw>
<status status="PASS" endtime="20161212 11:08:11.301" starttime="20161212 11:08:08.281"></status>
</kw>
<msg timestamp="20161212 11:08:11.301" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:08:11.301" starttime="20161212 11:08:08.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:11.306" starttime="20161212 11:08:11.302"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:08:11.307" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:08:11.308" starttime="20161212 11:08:11.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:08:11.309" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:08:11.309" starttime="20161212 11:08:11.308"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:08:11.309" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:08:11.309" starttime="20161212 11:08:11.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:08:11.310" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:08:11.310" starttime="20161212 11:08:11.309"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:08:11.917" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9fffb910&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:08:11.917" starttime="20161212 11:08:11.311"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:11.918" starttime="20161212 11:08:11.306"></status>
</kw>
<msg timestamp="20161212 11:08:11.918" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:08:11.918" starttime="20161212 11:08:11.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:08:11.921" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:08:11.921" starttime="20161212 11:08:11.921"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:11.921" starttime="20161212 11:08:11.918"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:11.921" starttime="20161212 11:08:08.279"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:08:21.924" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:08:21.924" starttime="20161212 11:08:21.923"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:08:21.938" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:08:24.935" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:08:24.936" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.19 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.729 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:08:24.936" starttime="20161212 11:08:21.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:08:24.939" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.19 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.729 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.760 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.756 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.729/0.859/1.193/0.195 ms</msg>
<status status="PASS" endtime="20161212 11:08:24.940" starttime="20161212 11:08:24.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:24.940" starttime="20161212 11:08:24.940"></status>
</kw>
<status status="PASS" endtime="20161212 11:08:24.941" starttime="20161212 11:08:21.923"></status>
</kw>
<msg timestamp="20161212 11:08:24.941" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:08:24.941" starttime="20161212 11:08:21.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:24.946" starttime="20161212 11:08:24.942"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:08:24.947" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:08:24.948" starttime="20161212 11:08:24.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:08:24.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:08:24.949" starttime="20161212 11:08:24.948"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:08:24.949" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:08:24.949" starttime="20161212 11:08:24.949"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:08:24.950" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:08:24.950" starttime="20161212 11:08:24.949"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:08:25.567" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fffaf7de290&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:08:25.567" starttime="20161212 11:08:24.950"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:25.568" starttime="20161212 11:08:24.946"></status>
</kw>
<msg timestamp="20161212 11:08:25.568" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:08:25.568" starttime="20161212 11:08:24.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:08:25.574" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:08:25.574" starttime="20161212 11:08:25.573"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:25.574" starttime="20161212 11:08:25.568"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:25.574" starttime="20161212 11:08:21.921"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:08:35.578" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:08:35.578" starttime="20161212 11:08:35.577"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:08:35.586" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:08:38.592" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:08:38.592" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.01 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.825 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:08:38.592" starttime="20161212 11:08:35.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:08:38.599" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.01 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.825 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.773 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.777 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.773/0.848/1.019/0.104 ms</msg>
<status status="PASS" endtime="20161212 11:08:38.599" starttime="20161212 11:08:38.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:38.600" starttime="20161212 11:08:38.599"></status>
</kw>
<status status="PASS" endtime="20161212 11:08:38.600" starttime="20161212 11:08:35.576"></status>
</kw>
<msg timestamp="20161212 11:08:38.601" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:08:38.601" starttime="20161212 11:08:35.576"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:38.606" starttime="20161212 11:08:38.601"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:08:38.608" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:08:38.610" starttime="20161212 11:08:38.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:08:38.611" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:08:38.611" starttime="20161212 11:08:38.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:08:38.612" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:08:38.612" starttime="20161212 11:08:38.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:08:38.613" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:08:38.613" starttime="20161212 11:08:38.612"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:08:39.222" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffbe350&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:08:39.223" starttime="20161212 11:08:38.613"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:39.223" starttime="20161212 11:08:38.607"></status>
</kw>
<msg timestamp="20161212 11:08:39.224" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:08:39.224" starttime="20161212 11:08:38.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:08:39.230" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:08:39.231" starttime="20161212 11:08:39.230"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:39.231" starttime="20161212 11:08:39.225"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:39.231" starttime="20161212 11:08:35.575"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:08:49.234" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:08:49.234" starttime="20161212 11:08:49.233"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:08:49.244" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:08:52.256" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:08:52.256" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.06 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.764 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:08:52.256" starttime="20161212 11:08:49.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:08:52.261" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.06 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.764 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.769 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.799 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.764/0.850/1.069/0.128 ms</msg>
<status status="PASS" endtime="20161212 11:08:52.261" starttime="20161212 11:08:52.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:52.262" starttime="20161212 11:08:52.261"></status>
</kw>
<status status="PASS" endtime="20161212 11:08:52.262" starttime="20161212 11:08:49.233"></status>
</kw>
<msg timestamp="20161212 11:08:52.263" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:08:52.263" starttime="20161212 11:08:49.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:08:52.267" starttime="20161212 11:08:52.263"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:08:52.269" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:08:52.270" starttime="20161212 11:08:52.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:08:52.270" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:08:52.270" starttime="20161212 11:08:52.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:08:52.271" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:08:52.271" starttime="20161212 11:08:52.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:08:52.272" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:08:52.272" starttime="20161212 11:08:52.272"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:08:52.879" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffbe190&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:08:52.879" starttime="20161212 11:08:52.272"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:52.879" starttime="20161212 11:08:52.268"></status>
</kw>
<msg timestamp="20161212 11:08:52.879" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:08:52.880" starttime="20161212 11:08:52.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:08:52.883" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:08:52.883" starttime="20161212 11:08:52.882"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:52.883" starttime="20161212 11:08:52.880"></status>
</kw>
<status status="FAIL" endtime="20161212 11:08:52.883" starttime="20161212 11:08:49.231"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:09:02.886" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:09:02.886" starttime="20161212 11:09:02.886"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:09:02.893" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:09:05.895" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:09:05.896" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.05 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.808 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:09:05.896" starttime="20161212 11:09:02.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:09:05.899" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.05 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.808 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.779 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.769 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.769/0.853/1.057/0.120 ms</msg>
<status status="PASS" endtime="20161212 11:09:05.900" starttime="20161212 11:09:05.898"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:05.901" starttime="20161212 11:09:05.900"></status>
</kw>
<status status="PASS" endtime="20161212 11:09:05.901" starttime="20161212 11:09:02.885"></status>
</kw>
<msg timestamp="20161212 11:09:05.901" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:09:05.901" starttime="20161212 11:09:02.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:05.906" starttime="20161212 11:09:05.902"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:09:05.908" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:09:05.909" starttime="20161212 11:09:05.907"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:09:05.909" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:09:05.909" starttime="20161212 11:09:05.909"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:09:05.910" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:09:05.910" starttime="20161212 11:09:05.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:09:05.910" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:09:05.910" starttime="20161212 11:09:05.910"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:09:06.518" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff67890&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:09:06.518" starttime="20161212 11:09:05.911"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:06.518" starttime="20161212 11:09:05.907"></status>
</kw>
<msg timestamp="20161212 11:09:06.518" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:09:06.518" starttime="20161212 11:09:05.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:09:06.524" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:09:06.524" starttime="20161212 11:09:06.524"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:06.525" starttime="20161212 11:09:06.519"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:06.525" starttime="20161212 11:09:02.883"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:09:16.529" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:09:16.529" starttime="20161212 11:09:16.528"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:09:16.535" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:09:19.539" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:09:19.539" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.953 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.837 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:09:19.540" starttime="20161212 11:09:16.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:09:19.544" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.953 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.837 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.775 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.790 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.775/0.838/0.953/0.078 ms</msg>
<status status="PASS" endtime="20161212 11:09:19.544" starttime="20161212 11:09:19.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:19.545" starttime="20161212 11:09:19.545"></status>
</kw>
<status status="PASS" endtime="20161212 11:09:19.546" starttime="20161212 11:09:16.527"></status>
</kw>
<msg timestamp="20161212 11:09:19.546" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:09:19.546" starttime="20161212 11:09:16.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:19.551" starttime="20161212 11:09:19.546"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:09:19.553" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:09:19.554" starttime="20161212 11:09:19.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:09:19.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:09:19.555" starttime="20161212 11:09:19.554"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:09:19.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:09:19.556" starttime="20161212 11:09:19.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:09:19.556" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:09:19.556" starttime="20161212 11:09:19.556"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:09:20.164" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fffac84c810&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:09:20.164" starttime="20161212 11:09:19.556"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:20.165" starttime="20161212 11:09:19.551"></status>
</kw>
<msg timestamp="20161212 11:09:20.165" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:09:20.165" starttime="20161212 11:09:19.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:09:20.170" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:09:20.170" starttime="20161212 11:09:20.170"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:20.170" starttime="20161212 11:09:20.165"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:20.171" starttime="20161212 11:09:16.525"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:09:30.174" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:09:30.174" starttime="20161212 11:09:30.173"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:09:30.180" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:09:33.189" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:09:33.189" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.22 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.809 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:09:33.190" starttime="20161212 11:09:30.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:09:33.193" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=1.22 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.809 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.818 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.889 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.809/0.934/1.220/0.168 ms</msg>
<status status="PASS" endtime="20161212 11:09:33.193" starttime="20161212 11:09:33.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:33.194" starttime="20161212 11:09:33.194"></status>
</kw>
<status status="PASS" endtime="20161212 11:09:33.195" starttime="20161212 11:09:30.173"></status>
</kw>
<msg timestamp="20161212 11:09:33.195" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:09:33.195" starttime="20161212 11:09:30.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:33.199" starttime="20161212 11:09:33.196"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:09:33.200" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:09:33.202" starttime="20161212 11:09:33.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:09:33.202" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:09:33.202" starttime="20161212 11:09:33.202"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:09:33.203" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:09:33.203" starttime="20161212 11:09:33.202"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:09:33.203" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:09:33.203" starttime="20161212 11:09:33.203"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:09:33.812" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffb4610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:09:33.813" starttime="20161212 11:09:33.203"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:33.814" starttime="20161212 11:09:33.199"></status>
</kw>
<msg timestamp="20161212 11:09:33.814" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:09:33.814" starttime="20161212 11:09:33.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:09:33.819" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:09:33.820" starttime="20161212 11:09:33.819"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:33.820" starttime="20161212 11:09:33.814"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:33.820" starttime="20161212 11:09:30.171"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:09:43.823" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:09:43.823" starttime="20161212 11:09:43.823"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:09:43.830" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:09:46.835" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:09:46.835" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.969 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.799 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:09:46.836" starttime="20161212 11:09:43.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:09:46.840" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.969 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.799 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.773 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.731 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.731/0.818/0.969/0.090 ms</msg>
<status status="PASS" endtime="20161212 11:09:46.840" starttime="20161212 11:09:46.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:46.841" starttime="20161212 11:09:46.840"></status>
</kw>
<status status="PASS" endtime="20161212 11:09:46.841" starttime="20161212 11:09:43.822"></status>
</kw>
<msg timestamp="20161212 11:09:46.842" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:09:46.842" starttime="20161212 11:09:43.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:09:46.847" starttime="20161212 11:09:46.842"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:09:46.848" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:09:46.850" starttime="20161212 11:09:46.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:09:46.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:09:46.850" starttime="20161212 11:09:46.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:09:46.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:09:46.851" starttime="20161212 11:09:46.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:09:46.851" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:09:46.851" starttime="20161212 11:09:46.851"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:09:47.459" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ff052d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:09:47.459" starttime="20161212 11:09:46.851"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:47.460" starttime="20161212 11:09:46.848"></status>
</kw>
<msg timestamp="20161212 11:09:47.460" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:09:47.460" starttime="20161212 11:09:46.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:09:47.466" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:09:47.466" starttime="20161212 11:09:47.465"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:47.466" starttime="20161212 11:09:47.460"></status>
</kw>
<status status="FAIL" endtime="20161212 11:09:47.466" starttime="20161212 11:09:43.820"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:09:57.470" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:09:57.470" starttime="20161212 11:09:57.470"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:09:57.476" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:10:10.505" level="INFO">${RC} = 1</msg>
<msg timestamp="20161212 11:10:10.505" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161212 11:10:10.505" starttime="20161212 11:09:57.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:10:10.509" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3024ms
</msg>
<status status="PASS" endtime="20161212 11:10:10.509" starttime="20161212 11:10:10.508"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161212 11:10:10.510" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161212 11:10:10.511" starttime="20161212 11:10:10.510"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:10.511" starttime="20161212 11:09:57.468"></status>
</kw>
<msg timestamp="20161212 11:10:10.511" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161212 11:10:10.511" starttime="20161212 11:09:57.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161212 11:10:10.517" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161212 11:10:10.517" starttime="20161212 11:10:10.517"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:10.517" starttime="20161212 11:10:10.512"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:10.517" starttime="20161212 11:09:57.467"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:10:20.522" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:10:20.522" starttime="20161212 11:10:20.522"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:10:20.543" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:10:33.541" level="INFO">${RC} = 1</msg>
<msg timestamp="20161212 11:10:33.542" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20161212 11:10:33.542" starttime="20161212 11:10:20.523"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:10:33.556" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 3000ms
</msg>
<status status="PASS" endtime="20161212 11:10:33.556" starttime="20161212 11:10:33.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161212 11:10:33.558" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161212 11:10:33.558" starttime="20161212 11:10:33.557"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:33.558" starttime="20161212 11:10:20.521"></status>
</kw>
<msg timestamp="20161212 11:10:33.559" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161212 11:10:33.559" starttime="20161212 11:10:20.520"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161212 11:10:33.565" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161212 11:10:33.565" starttime="20161212 11:10:33.565"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:33.565" starttime="20161212 11:10:33.559"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:33.565" starttime="20161212 11:10:20.518"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:10:43.569" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:10:43.569" starttime="20161212 11:10:43.568"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:10:43.587" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:10:56.583" level="INFO">${RC} = 1</msg>
<msg timestamp="20161212 11:10:56.583" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20161212 11:10:56.583" starttime="20161212 11:10:43.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:10:56.587" level="INFO">RC: 1
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 0 received, 100% packet loss, time 2999ms
</msg>
<status status="PASS" endtime="20161212 11:10:56.587" starttime="20161212 11:10:56.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<msg timestamp="20161212 11:10:56.588" level="FAIL">1 != 0</msg>
<status status="FAIL" endtime="20161212 11:10:56.588" starttime="20161212 11:10:56.587"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:56.588" starttime="20161212 11:10:43.568"></status>
</kw>
<msg timestamp="20161212 11:10:56.589" level="INFO">${l_ping} = False</msg>
<status status="PASS" endtime="20161212 11:10:56.589" starttime="20161212 11:10:43.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=Ping Failed</arg>
</arguments>
<msg timestamp="20161212 11:10:56.594" level="FAIL">Ping Failed</msg>
<status status="FAIL" endtime="20161212 11:10:56.594" starttime="20161212 11:10:56.593"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:56.594" starttime="20161212 11:10:56.589"></status>
</kw>
<status status="FAIL" endtime="20161212 11:10:56.594" starttime="20161212 11:10:43.566"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:11:06.597" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:11:06.597" starttime="20161212 11:11:06.597"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:11:06.618" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:11:09.616" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:11:09.616" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.74 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.955 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:11:09.616" starttime="20161212 11:11:06.598"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:11:09.619" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.74 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.955 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.879 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.917 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.879/1.373/2.744/0.792 ms</msg>
<status status="PASS" endtime="20161212 11:11:09.619" starttime="20161212 11:11:09.618"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:11:09.620" starttime="20161212 11:11:09.620"></status>
</kw>
<status status="PASS" endtime="20161212 11:11:09.620" starttime="20161212 11:11:06.596"></status>
</kw>
<msg timestamp="20161212 11:11:09.621" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:11:09.621" starttime="20161212 11:11:06.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:11:09.625" starttime="20161212 11:11:09.621"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:11:09.627" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:11:09.628" starttime="20161212 11:11:09.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:11:09.629" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:11:09.629" starttime="20161212 11:11:09.628"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:11:09.629" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:11:09.629" starttime="20161212 11:11:09.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:11:09.630" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:11:09.630" starttime="20161212 11:11:09.629"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:11:50.286" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.23.30', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20161212 11:11:50.287" starttime="20161212 11:11:09.630"></status>
</kw>
<status status="FAIL" endtime="20161212 11:11:50.287" starttime="20161212 11:11:09.626"></status>
</kw>
<msg timestamp="20161212 11:11:50.287" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:11:50.287" starttime="20161212 11:11:09.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:11:50.293" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:11:50.293" starttime="20161212 11:11:50.293"></status>
</kw>
<status status="FAIL" endtime="20161212 11:11:50.293" starttime="20161212 11:11:50.288"></status>
</kw>
<status status="FAIL" endtime="20161212 11:11:50.293" starttime="20161212 11:11:06.595"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:12:00.297" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:12:00.298" starttime="20161212 11:12:00.297"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:12:00.305" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:12:03.312" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:12:03.313" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.20 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.866 ms
64 bytes from 9.3.23.30: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20161212 11:12:03.313" starttime="20161212 11:12:00.298"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:12:03.317" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=2.20 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.866 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.914 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.957 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.866/1.236/2.209/0.563 ms</msg>
<status status="PASS" endtime="20161212 11:12:03.317" starttime="20161212 11:12:03.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:03.318" starttime="20161212 11:12:03.317"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:03.318" starttime="20161212 11:12:00.295"></status>
</kw>
<msg timestamp="20161212 11:12:03.319" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:12:03.319" starttime="20161212 11:12:00.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:03.322" starttime="20161212 11:12:03.319"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:12:03.324" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:12:03.325" starttime="20161212 11:12:03.323"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:12:03.326" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:12:03.326" starttime="20161212 11:12:03.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:12:03.326" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:12:03.326" starttime="20161212 11:12:03.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:12:03.327" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:12:03.327" starttime="20161212 11:12:03.326"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:12:30.969" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff9ffb4cd0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status status="FAIL" endtime="20161212 11:12:30.970" starttime="20161212 11:12:03.327"></status>
</kw>
<status status="FAIL" endtime="20161212 11:12:30.970" starttime="20161212 11:12:03.323"></status>
</kw>
<msg timestamp="20161212 11:12:30.970" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20161212 11:12:30.970" starttime="20161212 11:12:03.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20161212 11:12:30.975" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20161212 11:12:30.975" starttime="20161212 11:12:30.975"></status>
</kw>
<status status="FAIL" endtime="20161212 11:12:30.975" starttime="20161212 11:12:30.971"></status>
</kw>
<status status="FAIL" endtime="20161212 11:12:30.975" starttime="20161212 11:12:00.294"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20161212 11:12:40.978" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20161212 11:12:40.979" starttime="20161212 11:12:40.978"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20161212 11:12:40.985" level="INFO">Running command 'ping -c 4 9.3.23.30 2&gt;&amp;1'.</msg>
<msg timestamp="20161212 11:12:43.992" level="INFO">${RC} = 0</msg>
<msg timestamp="20161212 11:12:43.992" level="INFO">${output} = PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.921 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.858 ms
64 bytes from 9.3.23.30: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20161212 11:12:43.992" starttime="20161212 11:12:40.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20161212 11:12:43.996" level="INFO">RC: 0
Output:
PING 9.3.23.30 (9.3.23.30) 56(84) bytes of data.
64 bytes from 9.3.23.30: icmp_seq=1 ttl=62 time=0.921 ms
64 bytes from 9.3.23.30: icmp_seq=2 ttl=62 time=0.858 ms
64 bytes from 9.3.23.30: icmp_seq=3 ttl=62 time=0.707 ms
64 bytes from 9.3.23.30: icmp_seq=4 ttl=62 time=0.728 ms

--- 9.3.23.30 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.707/0.803/0.921/0.093 ms</msg>
<status status="PASS" endtime="20161212 11:12:43.996" starttime="20161212 11:12:43.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:43.997" starttime="20161212 11:12:43.996"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:43.997" starttime="20161212 11:12:40.977"></status>
</kw>
<msg timestamp="20161212 11:12:43.997" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20161212 11:12:43.998" starttime="20161212 11:12:40.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:44.002" starttime="20161212 11:12:43.998"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:12:44.003" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:12:44.004" starttime="20161212 11:12:44.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:12:44.005" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:12:44.005" starttime="20161212 11:12:44.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:12:44.005" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:12:44.005" starttime="20161212 11:12:44.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:12:44.006" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:12:44.006" starttime="20161212 11:12:44.006"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:12:44.354" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:12:44.354" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:12:44.354" starttime="20161212 11:12:44.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:12:44.354" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:12:44.355" starttime="20161212 11:12:44.354"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:44.355" starttime="20161212 11:12:44.002"></status>
</kw>
<msg timestamp="20161212 11:12:44.355" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20161212 11:12:44.355" starttime="20161212 11:12:44.002"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:44.357" starttime="20161212 11:12:44.355"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 11:12:44.362" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 11:12:44.362" starttime="20161212 11:12:44.361"></status>
</kw>
<msg timestamp="20161212 11:12:44.362" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 11:12:44.362" starttime="20161212 11:12:44.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:44.367" starttime="20161212 11:12:44.367"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:44.367" starttime="20161212 11:12:44.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:44.371" starttime="20161212 11:12:44.368"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 11:12:44.372" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 11:12:44.372" starttime="20161212 11:12:44.372"></status>
</kw>
<msg timestamp="20161212 11:12:44.372" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 11:12:44.372" starttime="20161212 11:12:44.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:12:44.376" starttime="20161212 11:12:44.375"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:44.376" starttime="20161212 11:12:44.375"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:44.376" starttime="20161212 11:12:44.372"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 11:12:44.377" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 11:12:49.062" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161212 11:12:49.063" starttime="20161212 11:12:44.376"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:49.063" starttime="20161212 11:12:44.358"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:12:49.064" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20161212 11:12:49.132" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:12:49.132" level="INFO">${system} = barreleye</msg>
<msg timestamp="20161212 11:12:49.132" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:12:49.132" starttime="20161212 11:12:49.063"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:12:49.133" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:12:49.133" starttime="20161212 11:12:49.133"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:49.133" starttime="20161212 11:12:40.976"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:49.134" starttime="20161212 11:04:55.112"></status>
</kw>
<status status="PASS" endtime="20161212 11:12:49.134" starttime="20161212 11:04:55.112"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1 min</arg>
</arguments>
<msg timestamp="20161212 11:13:49.136" level="INFO">Slept 1 minute</msg>
<status status="PASS" endtime="20161212 11:13:49.137" starttime="20161212 11:12:49.135"></status>
</kw>
<kw name="Validate BMC Version" library="code_update_utils">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20161212 11:13:49.144" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161212 11:13:49.144" starttime="20161212 11:13:49.143"></status>
</kw>
<msg timestamp="20161212 11:13:49.144" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20161212 11:13:49.144" starttime="20161212 11:13:49.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:49.152" starttime="20161212 11:13:49.151"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:49.152" starttime="20161212 11:13:49.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:49.156" starttime="20161212 11:13:49.152"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20161212 11:13:49.157" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161212 11:13:49.157" starttime="20161212 11:13:49.157"></status>
</kw>
<msg timestamp="20161212 11:13:49.157" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20161212 11:13:49.157" starttime="20161212 11:13:49.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:49.162" starttime="20161212 11:13:49.162"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:49.162" starttime="20161212 11:13:49.161"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:49.162" starttime="20161212 11:13:49.157"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20161212 11:13:49.163" level="INFO">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg timestamp="20161212 11:13:51.518" level="INFO">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161212 11:13:51.518" starttime="20161212 11:13:49.163"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.518" starttime="20161212 11:13:49.141"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat /etc/version</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${version}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:51.519" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20161212 11:13:51.588" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:51.588" level="INFO">${version} = 20161209181530</msg>
<msg timestamp="20161212 11:13:51.588" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:51.588" starttime="20161212 11:13:51.519"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:51.589" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:51.589" starttime="20161212 11:13:51.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${args}' == 'before'</arg>
<arg>Should not Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Same version already installed</arg>
<arg>ELSE</arg>
<arg>Should Contain</arg>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${FILE_PATH}</arg>
<arg>${version}</arg>
<arg>msg=Code update Failed</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:51.594" starttime="20161212 11:13:51.594"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.595" starttime="20161212 11:13:51.589"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.595" starttime="20161212 11:13:49.139"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>BMC_READY</arg>
</arguments>
<kw name="Verify BMC State" library="utils">
<doc>Get the BMC state and verify if the current</doc>
<arguments>
<arg>BMC_READY</arg>
</arguments>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${current}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20161212 11:13:51.598" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161212 11:13:51.598" starttime="20161212 11:13:51.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20161212 11:13:51.599" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161212 11:13:51.599" starttime="20161212 11:13:51.598"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:13:51.601" level="INFO">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161212 11:13:51.601" starttime="20161212 11:13:51.600"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20161212 11:13:51.602" level="INFO">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161212 11:13:51.602" starttime="20161212 11:13:51.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:13:51.602" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:13:51.603" starttime="20161212 11:13:51.602"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:51.603" starttime="20161212 11:13:51.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:13:51.607" level="INFO">${msg} = URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:13:51.607" starttime="20161212 11:13:51.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:13:51.608" level="INFO">URI:https://9.3.23.30/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161212 11:13:51.608" starttime="20161212 11:13:51.608"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.608" starttime="20161212 11:13:51.607"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.608" starttime="20161212 11:13:51.606"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.608" starttime="20161212 11:13:51.603"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20161212 11:13:51.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.23.30, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161212 11:13:51.610" starttime="20161212 11:13:51.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20161212 11:13:51.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161212 11:13:51.610" starttime="20161212 11:13:51.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20161212 11:13:51.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161212 11:13:51.611" starttime="20161212 11:13:51.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20161212 11:13:51.612" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161212 11:13:51.612" starttime="20161212 11:13:51.611"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20161212 11:13:51.939" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:13:51.939" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:13:51.939" starttime="20161212 11:13:51.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:13:51.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:13:51.940" starttime="20161212 11:13:51.940"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:51.940" starttime="20161212 11:13:51.609"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20161212 11:13:52.235" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20161212 11:13:52.235" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:13:52.235" starttime="20161212 11:13:51.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20161212 11:13:52.242" level="INFO">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:13:52.242" starttime="20161212 11:13:52.241"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20161212 11:13:52.243" level="INFO">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161212 11:13:52.244" starttime="20161212 11:13:52.243"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.244" starttime="20161212 11:13:52.242"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.244" starttime="20161212 11:13:52.240"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.244" starttime="20161212 11:13:52.236"></status>
</kw>
<msg timestamp="20161212 11:13:52.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:13:52.245" starttime="20161212 11:13:51.601"></status>
</kw>
<msg timestamp="20161212 11:13:52.245" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161212 11:13:52.245" starttime="20161212 11:13:51.599"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20161212 11:13:52.246" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161212 11:13:52.246" starttime="20161212 11:13:52.245"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20161212 11:13:52.247" level="INFO">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20161212 11:13:52.247" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20161212 11:13:52.247" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'BMC_READY'}</msg>
<status status="PASS" endtime="20161212 11:13:52.247" starttime="20161212 11:13:52.246"></status>
</kw>
<msg timestamp="20161212 11:13:52.247" level="INFO">${current} = BMC_READY</msg>
<status status="PASS" endtime="20161212 11:13:52.248" starttime="20161212 11:13:51.597"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${expected}</arg>
<arg>${current}</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:52.248" starttime="20161212 11:13:52.248"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.248" starttime="20161212 11:13:51.596"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.249" starttime="20161212 11:13:51.595"></status>
</kw>
<doc>BMC code update process initiation</doc>
<status status="PASS" endtime="20161212 11:13:52.249" critical="yes" starttime="20161212 10:59:23.640"></status>
</test>
<test id="s1-t2" name="Test BMC CPU Mem Performance at Ready State">
<kw name="Check BMC CPU Performance" library="utils">
<doc>Minimal 10% of proc should be free in 3 sample</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:52.252" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161212 11:13:52.632" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:52.633" level="INFO">${bmc_cpu_usage_output} = 18%</msg>
<msg timestamp="20161212 11:13:52.633" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:52.633" starttime="20161212 11:13:52.252"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:52.633" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:52.633" starttime="20161212 11:13:52.633"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:52.634" level="INFO">${bmc_cpu_percentage} = 18</msg>
<status status="PASS" endtime="20161212 11:13:52.634" starttime="20161212 11:13:52.633"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:52.636" starttime="20161212 11:13:52.634"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.636" starttime="20161212 11:13:52.252"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.636" starttime="20161212 11:13:52.252"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:52.637" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161212 11:13:52.990" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:52.990" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161212 11:13:52.990" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:52.990" starttime="20161212 11:13:52.637"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:52.990" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:52.990" starttime="20161212 11:13:52.990"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:52.991" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161212 11:13:52.991" starttime="20161212 11:13:52.990"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:52.993" starttime="20161212 11:13:52.991"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.993" starttime="20161212 11:13:52.637"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:52.994" starttime="20161212 11:13:52.636"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC CPU Performance Check" library="utils">
<doc>Minimal 10% of proc should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_cpu_usage_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_cpu_usage_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:52.994" level="INFO">Executing command 'top -n 1 | grep CPU: | cut -c 7-9'.</msg>
<msg timestamp="20161212 11:13:53.465" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:53.465" level="INFO">${bmc_cpu_usage_output} =  0%</msg>
<msg timestamp="20161212 11:13:53.465" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:53.465" starttime="20161212 11:13:52.994"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:53.466" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:53.466" starttime="20161212 11:13:53.466"></status>
</kw>
<kw name="Fetch From Left" library="String">
<doc>Returns contents of the ``string`` before the first occurrence of ``marker``.</doc>
<arguments>
<arg>${bmc_cpu_usage_output}</arg>
<arg>%</arg>
</arguments>
<assign>
<var>${bmc_cpu_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:53.467" level="INFO">${bmc_cpu_percentage} =  0</msg>
<status status="PASS" endtime="20161212 11:13:53.467" starttime="20161212 11:13:53.467"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_cpu_percentage} &lt; 90</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:53.472" starttime="20161212 11:13:53.467"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:53.472" starttime="20161212 11:13:52.994"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:53.472" starttime="20161212 11:13:52.994"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:53.472" starttime="20161212 11:13:52.251"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:53.472" starttime="20161212 11:13:52.251"></status>
</kw>
<kw name="Check BMC Mem Performance" library="utils">
<doc>Minimal 10% of memory should be free</doc>
<kw type="for" name="${var} IN RANGE [ 1 | 4 ]">
<kw type="foritem" name="${var} = 1">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:53.475" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161212 11:13:53.677" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:53.677" level="INFO">${bmc_mem_free_output} = 370964</msg>
<msg timestamp="20161212 11:13:53.677" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:53.677" starttime="20161212 11:13:53.474"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:53.678" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:53.678" starttime="20161212 11:13:53.677"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:53.679" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161212 11:13:53.878" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:53.879" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161212 11:13:53.879" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:53.879" starttime="20161212 11:13:53.678"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:53.879" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:53.880" starttime="20161212 11:13:53.879"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:53.885" level="INFO">${bmc_mem_percentage} = 37096400</msg>
<status status="PASS" endtime="20161212 11:13:53.885" starttime="20161212 11:13:53.880"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:53.890" level="INFO">${bmc_mem_percentage} = 74</msg>
<status status="PASS" endtime="20161212 11:13:53.890" starttime="20161212 11:13:53.885"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:53.893" starttime="20161212 11:13:53.890"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:53.893" starttime="20161212 11:13:53.474"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:53.893" starttime="20161212 11:13:53.474"></status>
</kw>
<kw type="foritem" name="${var} = 2">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:53.894" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161212 11:13:54.077" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:54.077" level="INFO">${bmc_mem_free_output} = 370964</msg>
<msg timestamp="20161212 11:13:54.077" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:54.077" starttime="20161212 11:13:53.894"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:54.077" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:54.077" starttime="20161212 11:13:54.077"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:54.078" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161212 11:13:54.303" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:54.303" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161212 11:13:54.304" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:54.304" starttime="20161212 11:13:54.078"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:54.304" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:54.304" starttime="20161212 11:13:54.304"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:54.309" level="INFO">${bmc_mem_percentage} = 37096400</msg>
<status status="PASS" endtime="20161212 11:13:54.309" starttime="20161212 11:13:54.305"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:54.314" level="INFO">${bmc_mem_percentage} = 74</msg>
<status status="PASS" endtime="20161212 11:13:54.314" starttime="20161212 11:13:54.309"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:54.318" starttime="20161212 11:13:54.314"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.318" starttime="20161212 11:13:53.893"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.318" starttime="20161212 11:13:53.893"></status>
</kw>
<kw type="foritem" name="${var} = 3">
<kw name="BMC Mem Performance Check" library="utils">
<doc>Minimal 10% of memory should be free in this instance</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_free_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_free_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:54.320" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f4'.</msg>
<msg timestamp="20161212 11:13:54.487" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:54.488" level="INFO">${bmc_mem_free_output} = 370964</msg>
<msg timestamp="20161212 11:13:54.488" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:54.488" starttime="20161212 11:13:54.319"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:54.488" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:54.489" starttime="20161212 11:13:54.488"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${bmc_mem_total_cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_mem_total_output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20161212 11:13:54.489" level="INFO">Executing command 'free | tr -s ' ' | sed '/^Mem/!d' | cut -d" " -f2'.</msg>
<msg timestamp="20161212 11:13:54.646" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20161212 11:13:54.646" level="INFO">${bmc_mem_total_output} = 499020</msg>
<msg timestamp="20161212 11:13:54.646" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20161212 11:13:54.647" starttime="20161212 11:13:54.489"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20161212 11:13:54.647" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20161212 11:13:54.647" starttime="20161212 11:13:54.647"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_free_output}*100</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:54.652" level="INFO">${bmc_mem_percentage} = 37096400</msg>
<status status="PASS" endtime="20161212 11:13:54.652" starttime="20161212 11:13:54.648"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${bmc_mem_percentage}/${bmc_mem_total_output}</arg>
</arguments>
<assign>
<var>${bmc_mem_percentage}</var>
</assign>
<msg timestamp="20161212 11:13:54.657" level="INFO">${bmc_mem_percentage} = 74</msg>
<status status="PASS" endtime="20161212 11:13:54.657" starttime="20161212 11:13:54.652"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${bmc_mem_percentage} &gt; 10</arg>
</arguments>
<status status="PASS" endtime="20161212 11:13:54.661" starttime="20161212 11:13:54.657"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.661" starttime="20161212 11:13:54.319"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.661" starttime="20161212 11:13:54.318"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.661" starttime="20161212 11:13:53.473"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.661" starttime="20161212 11:13:53.473"></status>
</kw>
<status status="PASS" endtime="20161212 11:13:54.662" critical="yes" starttime="20161212 11:13:52.250"></status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update</doc>
<status status="PASS" endtime="20161212 11:13:54.662" starttime="20161212 10:59:23.278"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="2">Critical Tests</stat>
<stat fail="0" pass="2">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" id="s1" name="Update Bmc" pass="2">Update Bmc</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
