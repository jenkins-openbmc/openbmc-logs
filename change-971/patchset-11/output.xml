<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161110 23:34:06.357">
<suite id="s1" source="/tmp/root/31302/obmc-robot/tests" name="Tests">
<suite id="s1-s1" source="/tmp/root/31302/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/root/31302/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>https://${OPENBMC_HOST}/</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:06.768">Creating Session using : alias=openbmc, url=https://9.3.23.30/, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:06.769" starttime="20161110 23:34:06.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:06.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:06.770" starttime="20161110 23:34:06.769"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:06.770">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:06.770" starttime="20161110 23:34:06.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:06.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:06.771" starttime="20161110 23:34:06.770"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.126">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:07.127">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:07.127" starttime="20161110 23:34:06.771"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/list</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.696">Get Request using : alias=openbmc, uri=/list, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:07.697">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:07.697" starttime="20161110 23:34:07.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:07.698" starttime="20161110 23:34:07.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.699">To JSON using : content={
  "data": [
    "/org/openbmc/control", 
    "/org/openbmc/sensors/host/powercap", 
    "/org/openbmc/UserManager/Group", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28", 
    "/org/openbmc/control/power0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25", 
    "/org/openbmc/settings/host0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event", 
    "/org/openbmc/inventory/system/systemevent", 
    "/org/openbmc/sensors/host/cpu0/OccStatus", 
    "/org/openbmc/sensors/host/cpu1/OccStatus", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1", 
    "/org/openbmc/records/events/284", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
    "/org/openbmc/control/checkstop0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7", 
    "/org/openbmc/sensors/tach/fan0L", 
    "/org/openbmc/inventory/system/chassis/sas_expander", 
    "/org/openbmc/sensors/tach/fan0H", 
    "/org/openbmc/watchdog", 
    "/org/openbmc/inventory/system/misc", 
    "/org/openbmc/UserManager/Users", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10", 
    "/org/openbmc/records/events", 
    "/org/openbmc/sensors/tach/fan1H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29", 
    "/org/openbmc/sensors/tach/fan1L", 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4", 
    "/org/openbmc/sensors/speed/fan1", 
    "/org/openbmc/sensors/speed/fan0", 
    "/org/openbmc/sensors/speed/fan3", 
    "/org/openbmc/sensors/speed/fan2", 
    "/org/openbmc/sensors/speed/fan5", 
    "/org/openbmc/sensors/speed/fan4", 
    "/org/openbmc/managers/Download", 
    "/org/openbmc/sensors/HSCA/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14", 
    "/org/openbmc/control/flash/bmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11", 
    "/org/openbmc/managers/System", 
    "/org/openbmc/control/led/identify", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9", 
    "/org/openbmc/control/bmc0", 
    "/org/openbmc/control/flash/bios", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3", 
    "/org/openbmc/control/fans", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2", 
    "/org/openbmc/watchdog/host0", 
    "/org/openbmc/inventory/system/chassis", 
    "/org/openbmc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1", 
    "/org/openbmc/HostServices", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5", 
    "/org/openbmc/buttons", 
    "/org/openbmc/control/host0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM0", 
    "/org/openbmc/sensors/voltage/P1V1_MEM1", 
    "/org/openbmc/sensors/voltage/P0V97_CPU0", 
    "/org/openbmc/sensors/voltage/P0V97_CPU1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12", 
    "/org/openbmc/inventory", 
    "/org/openbmc/sensors/tach/fan4H", 
    "/org/openbmc/sensors/tach/fan4L", 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock", 
    "/org/openbmc/control/led/heartbeat", 
    "/org/openbmc/control/flash", 
    "/org/openbmc/sensors/HSCB/Iout", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1", 
    "/org/openbmc/buttons/reset0", 
    "/org/openbmc/HostIpmi/1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2", 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1", 
    "/org/openbmc/control/led", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0", 
    "/org/openbmc/sensors/host/BootCount", 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4", 
    "/org/openbmc/sensors/tach/fan5L", 
    "/org/openbmc/sensors/host/BootProgress", 
    "/org/openbmc/sensors/tach/fan5H", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2", 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3", 
    "/org/openbmc/control/chassis0", 
    "/org/openbmc/inventory/system/chassis/hdd_backplane", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7", 
    "/org/openbmc/buttons/power0", 
    "/org/openbmc/UserManager/Groups", 
    "/org/openbmc/sensors/HSCA/Iout", 
    "/org/openbmc/inventory/system", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8", 
    "/org/openbmc/inventory/system/bios", 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser", 
    "/org/openbmc/sensors/host/OperatingSystemStatus", 
    "/org/openbmc/records/events/284/fru", 
    "/org/openbmc/sensors/tach/fan2L", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2", 
    "/org/openbmc/control/led/beep", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0", 
    "/org/openbmc/sensors/tach/fan2H", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4", 
    "/org/openbmc/inventory/system/chassis/fan4", 
    "/org/openbmc/inventory/system/chassis/fan5", 
    "/org/openbmc/inventory/system/chassis/fan2", 
    "/org/openbmc/inventory/system/chassis/fan3", 
    "/org/openbmc/inventory/system/chassis/fan0", 
    "/org/openbmc/inventory/system/chassis/fan1", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15", 
    "/org/openbmc/sensors/temperature/rtc", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11", 
    "/org/openbmc/NetworkManager/Interface", 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10", 
    "/org/openbmc/inventory/system/chassis/motherboard/apss", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19", 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18", 
    "/org/openbmc/inventory/system/chassis/io_board", 
    "/org/openbmc/UserManager/User", 
    "/org/openbmc/sensors", 
    "/org/openbmc/sensors/temperature/ambient", 
    "/org/openbmc/sensors/HSCB/Vout", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6", 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0", 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1", 
    "/org/openbmc/inventory/system/chassis/motherboard", 
    "/org/openbmc/sensors/tach/fan3L", 
    "/org/openbmc/sensors/tach/fan3H"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:07.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:07.700">${jsondata} = {u'data': [u'/org/openbmc/control', u'/org/openbmc/sensors/host/powercap', u'/org/openbmc/UserManager/Group', u'/org/openbmc/inventory/system/chassis/io_board/pcie_slot2', u'/org/openbmc/inventory/sys...</msg>
<status status="PASS" endtime="20161110 23:34:07.700" starttime="20161110 23:34:07.698"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${jsondata}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.701">Length is 3</msg>
<status status="PASS" endtime="20161110 23:34:07.701" starttime="20161110 23:34:07.700"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:07.706" starttime="20161110 23:34:07.702"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.707" html="yes">Created directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:34:07.707" starttime="20161110 23:34:07.707"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:07.708">File '/tmp/root/31302/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20161110 23:34:07.708" starttime="20161110 23:34:07.708"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:07.708">${exist} = False</msg>
<status status="PASS" endtime="20161110 23:34:07.709" starttime="20161110 23:34:07.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.712" html="yes">Created file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:34:07.712" starttime="20161110 23:34:07.711"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.712" starttime="20161110 23:34:07.709"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.712">${cur_time} = 2016-11-10 23:34:07:712300</msg>
<status status="PASS" endtime="20161110 23:34:07.712" starttime="20161110 23:34:07.712"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.713">${cur_time} = 20161110233407712300</msg>
<status status="PASS" endtime="20161110 23:34:07.713" starttime="20161110 23:34:07.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:07.713">${cur_time} = 20161110233407712300</msg>
<status status="PASS" endtime="20161110 23:34:07.713" starttime="20161110 23:34:07.712"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.714" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:34:07.714" starttime="20161110 23:34:07.713"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.714" starttime="20161110 23:34:07.707"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.714" starttime="20161110 23:34:07.702"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:34:07.714" starttime="20161110 23:34:06.767"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161110 23:34:07.715">Delete All Sessions</msg>
<status status="PASS" endtime="20161110 23:34:07.715" starttime="20161110 23:34:07.715"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20161110 23:34:07.715" starttime="20161110 23:34:06.384"></status>
</suite>
<status status="PASS" endtime="20161110 23:34:07.717" starttime="20161110 23:34:06.382"></status>
</suite>
<suite id="s1-s2" source="/tmp/root/31302/obmc-robot/tests/test_association.robot" name="Test Association">
<kw type="setup" name="Suite Initialization Setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:07.738">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:34:07.738" starttime="20161110 23:34:07.738"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:07.738">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:34:07.738" starttime="20161110 23:34:07.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:07.742" starttime="20161110 23:34:07.741"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.742" starttime="20161110 23:34:07.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.745">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:34:07.745" starttime="20161110 23:34:07.745"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.746">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:34:07.746" starttime="20161110 23:34:07.745"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:07.746">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:34:07.746" starttime="20161110 23:34:07.746"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.747">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:34:07.747" starttime="20161110 23:34:07.746"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.747" starttime="20161110 23:34:07.745"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.747" starttime="20161110 23:34:07.742"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:07.748">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:34:07.748" starttime="20161110 23:34:07.748"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:07.748">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:34:07.748" starttime="20161110 23:34:07.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:07.752" starttime="20161110 23:34:07.751"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:07.753" starttime="20161110 23:34:07.752"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.753" starttime="20161110 23:34:07.751"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:07.753" starttime="20161110 23:34:07.748"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:07.753">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:34:12.138">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:34:12.139" starttime="20161110 23:34:07.753"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.140" starttime="20161110 23:34:07.737"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.143">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" endtime="20161110 23:34:12.143" starttime="20161110 23:34:12.142"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:12.144" starttime="20161110 23:34:12.143"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:12.145" starttime="20161110 23:34:12.144"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.147">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:12.147" starttime="20161110 23:34:12.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.148">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:12.148" starttime="20161110 23:34:12.147"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.148" starttime="20161110 23:34:12.147"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.148" starttime="20161110 23:34:12.145"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.149">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:12.149" starttime="20161110 23:34:12.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:12.150" starttime="20161110 23:34:12.150"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.151">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:12.151" starttime="20161110 23:34:12.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.151">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:12.151" starttime="20161110 23:34:12.151"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:12.489">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:12.489" starttime="20161110 23:34:12.151"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:12.489" starttime="20161110 23:34:12.489"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.489" starttime="20161110 23:34:12.148"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.747">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:12.747">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:12.747" starttime="20161110 23:34:12.490"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.748">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:12.749" starttime="20161110 23:34:12.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.749">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:12.749" starttime="20161110 23:34:12.749"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.749" starttime="20161110 23:34:12.749"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.750" starttime="20161110 23:34:12.748"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:12.750">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:12.750" starttime="20161110 23:34:12.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:12.750" starttime="20161110 23:34:12.750"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.751">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20161110 23:34:12.751" starttime="20161110 23:34:12.751"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.752">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:12.753" starttime="20161110 23:34:12.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.753">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:12.753" starttime="20161110 23:34:12.753"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.753" starttime="20161110 23:34:12.753"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:12.754" starttime="20161110 23:34:12.751"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:12.754">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:12.755" starttime="20161110 23:34:12.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:12.755" starttime="20161110 23:34:12.755"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.756">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:12.756" starttime="20161110 23:34:12.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:12.757">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:12.757" starttime="20161110 23:34:12.756"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:14.743">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:14.743" starttime="20161110 23:34:12.757"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:14.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:14.744" starttime="20161110 23:34:14.744"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.745" starttime="20161110 23:34:12.754"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.807">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:14.807">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:14.807" starttime="20161110 23:34:14.745"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.809">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:14.809" starttime="20161110 23:34:14.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:14.810">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:14.810" starttime="20161110 23:34:14.810"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.810" starttime="20161110 23:34:14.809"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.810" starttime="20161110 23:34:14.807"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:14.811">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:14.811" starttime="20161110 23:34:12.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.811">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:14.812">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:14.812">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:14.812" starttime="20161110 23:34:14.811"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:14.812">Length is 0</msg>
<status status="PASS" endtime="20161110 23:34:14.812" starttime="20161110 23:34:14.812"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.813" starttime="20161110 23:34:12.141"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.813" starttime="20161110 23:34:12.140"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.813" starttime="20161110 23:34:07.737"></status>
</kw>
<test id="s1-s2-t1" name="Create error log on single FRU">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.816">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" endtime="20161110 23:34:14.816" starttime="20161110 23:34:14.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:14.817" starttime="20161110 23:34:14.817"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:14.818" starttime="20161110 23:34:14.817"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.820">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:14.820" starttime="20161110 23:34:14.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:14.822">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:14.822" starttime="20161110 23:34:14.821"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.822" starttime="20161110 23:34:14.820"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:14.822" starttime="20161110 23:34:14.818"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:14.823">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:14.824" starttime="20161110 23:34:14.823"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.825">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:14.825" starttime="20161110 23:34:14.824"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.825">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:14.826" starttime="20161110 23:34:14.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:14.826">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:14.826" starttime="20161110 23:34:14.826"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.160">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:15.161">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.161" starttime="20161110 23:34:14.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.162">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.162" starttime="20161110 23:34:15.161"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.162" starttime="20161110 23:34:14.822"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.385">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:15.385">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.385" starttime="20161110 23:34:15.162"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.386">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:15.386" starttime="20161110 23:34:15.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.387">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:15.388" starttime="20161110 23:34:15.387"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.388" starttime="20161110 23:34:15.387"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.388" starttime="20161110 23:34:15.385"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:15.388">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.388" starttime="20161110 23:34:14.815"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.389" starttime="20161110 23:34:15.388"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.390">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20161110 23:34:15.390" starttime="20161110 23:34:15.390"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.392">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:15.392" starttime="20161110 23:34:15.391"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.393">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:15.393" starttime="20161110 23:34:15.393"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.393" starttime="20161110 23:34:15.392"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.394" starttime="20161110 23:34:15.390"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.395">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:15.395" starttime="20161110 23:34:15.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.396">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:15.396" starttime="20161110 23:34:15.396"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.396">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:15.397" starttime="20161110 23:34:15.396"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.397">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:15.397" starttime="20161110 23:34:15.397"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.721">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:15.721">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.721" starttime="20161110 23:34:15.397"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.722">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.722" starttime="20161110 23:34:15.722"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.722" starttime="20161110 23:34:15.394"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.779">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:15.780">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.780" starttime="20161110 23:34:15.722"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.781">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:15.781" starttime="20161110 23:34:15.780"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.782">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:15.782" starttime="20161110 23:34:15.782"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.782" starttime="20161110 23:34:15.781"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.782" starttime="20161110 23:34:15.780"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:15.782">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:15.783" starttime="20161110 23:34:15.389"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.783">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:15.783">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:15.783">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:15.783" starttime="20161110 23:34:15.783"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:15.784">Length is 0</msg>
<status status="PASS" endtime="20161110 23:34:15.784" starttime="20161110 23:34:15.784"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.784" starttime="20161110 23:34:14.814"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:15.784" starttime="20161110 23:34:14.814"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:15.785">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161110 23:34:18.207">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:34:18.207">${elog} = q 285</msg>
<msg level="INFO" timestamp="20161110 23:34:18.207">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:34:18.207" starttime="20161110 23:34:15.785"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.209">Length is 0</msg>
<status status="PASS" endtime="20161110 23:34:18.209" starttime="20161110 23:34:18.208"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.212">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20161110 23:34:18.212" starttime="20161110 23:34:18.211"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.214">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:18.215" starttime="20161110 23:34:18.213"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.216">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:18.216" starttime="20161110 23:34:18.216"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.217" starttime="20161110 23:34:18.215"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.217" starttime="20161110 23:34:18.212"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.217">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:18.218" starttime="20161110 23:34:18.217"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.218">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:18.218" starttime="20161110 23:34:18.218"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.219">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:18.219" starttime="20161110 23:34:18.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.219">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:18.219" starttime="20161110 23:34:18.219"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.552">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:18.552">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.552" starttime="20161110 23:34:18.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.553">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.553" starttime="20161110 23:34:18.552"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.553" starttime="20161110 23:34:18.217"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.625">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:18.625">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.625" starttime="20161110 23:34:18.553"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.626">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/285"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:18.626" starttime="20161110 23:34:18.626"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.627">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/285"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:18.627" starttime="20161110 23:34:18.627"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.627" starttime="20161110 23:34:18.626"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.627" starttime="20161110 23:34:18.625"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:18.628">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.628" starttime="20161110 23:34:18.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.628">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.628" starttime="20161110 23:34:18.628"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.629">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/285"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:18.629">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:18.629">${jsondata} = {u'data': [u'/org/openbmc/records/events/285'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:18.629" starttime="20161110 23:34:18.628"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:18.629">${log_list} = [u'/org/openbmc/records/events/285']</msg>
<status status="PASS" endtime="20161110 23:34:18.629" starttime="20161110 23:34:18.209"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:18.630" starttime="20161110 23:34:18.629"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.630">${association_uri} = /org/openbmc/records/events/285/fru</msg>
<status status="PASS" endtime="20161110 23:34:18.630" starttime="20161110 23:34:18.630"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.632">${base_uri} = /org/openbmc/records/events/285/fru/attr/endpoints</msg>
<status status="PASS" endtime="20161110 23:34:18.632" starttime="20161110 23:34:18.631"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.633">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/285/fru/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:18.633" starttime="20161110 23:34:18.632"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.634">URI:https://9.3.23.30:443/org/openbmc/records/events/285/fru/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:18.634" starttime="20161110 23:34:18.633"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.634" starttime="20161110 23:34:18.633"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.634" starttime="20161110 23:34:18.632"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.635">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:18.635" starttime="20161110 23:34:18.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.636">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:18.636" starttime="20161110 23:34:18.635"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.636">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:18.636" starttime="20161110 23:34:18.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.637">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:18.637" starttime="20161110 23:34:18.636"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:18.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:18.968">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.968" starttime="20161110 23:34:18.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:18.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:18.969" starttime="20161110 23:34:18.968"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:18.969" starttime="20161110 23:34:18.634"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.073">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/285/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:19.073">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:19.073" starttime="20161110 23:34:18.969"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.075">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:19.075" starttime="20161110 23:34:19.074"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:19.077">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:19.077" starttime="20161110 23:34:19.076"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:19.077" starttime="20161110 23:34:19.075"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:19.077" starttime="20161110 23:34:19.073"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:19.077">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:19.077" starttime="20161110 23:34:18.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.078">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:19.078">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:19.078">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:19.078" starttime="20161110 23:34:19.077"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:19.078">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status status="PASS" endtime="20161110 23:34:19.078" starttime="20161110 23:34:18.630"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:19.079" starttime="20161110 23:34:19.078"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.080">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status status="PASS" endtime="20161110 23:34:19.080" starttime="20161110 23:34:19.080"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.082">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:19.082" starttime="20161110 23:34:19.081"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:19.083">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:19.083" starttime="20161110 23:34:19.082"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:19.083" starttime="20161110 23:34:19.082"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:19.083" starttime="20161110 23:34:19.081"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:19.084">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:19.084" starttime="20161110 23:34:19.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.085">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:19.085" starttime="20161110 23:34:19.085"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.086">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:19.086" starttime="20161110 23:34:19.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:19.086">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:19.086" starttime="20161110 23:34:19.086"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.012">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:21.012">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.012" starttime="20161110 23:34:19.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.013" starttime="20161110 23:34:21.013"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.014" starttime="20161110 23:34:19.083"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.097">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:21.098">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.098" starttime="20161110 23:34:21.014"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.100">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/285"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:21.100" starttime="20161110 23:34:21.099"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.101">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/285"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:21.101" starttime="20161110 23:34:21.101"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.101" starttime="20161110 23:34:21.100"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.101" starttime="20161110 23:34:21.098"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:21.102">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.102" starttime="20161110 23:34:19.079"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.103">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/285"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:21.103">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:21.103">${content} = {u'data': [u'/org/openbmc/records/events/285'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:21.103" starttime="20161110 23:34:21.102"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:21.103">${dimm1_event} = [u'/org/openbmc/records/events/285']</msg>
<status status="PASS" endtime="20161110 23:34:21.103" starttime="20161110 23:34:19.079"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:21.104" starttime="20161110 23:34:21.104"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:21.110" starttime="20161110 23:34:21.105"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.111" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:34:21.111" starttime="20161110 23:34:21.111"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.113" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:34:21.113" starttime="20161110 23:34:21.112"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:21.113">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:34:21.113" starttime="20161110 23:34:21.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:21.117" starttime="20161110 23:34:21.113"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.118">${cur_time} = 2016-11-10 23:34:21:117758</msg>
<status status="PASS" endtime="20161110 23:34:21.118" starttime="20161110 23:34:21.118"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.119">${cur_time} = 20161110233421117758</msg>
<status status="PASS" endtime="20161110 23:34:21.119" starttime="20161110 23:34:21.118"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:21.119">${cur_time} = 20161110233421117758</msg>
<status status="PASS" endtime="20161110 23:34:21.119" starttime="20161110 23:34:21.117"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.120" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:34:21.120" starttime="20161110 23:34:21.119"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.120" starttime="20161110 23:34:21.110"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.120" starttime="20161110 23:34:21.105"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:34:21.120" starttime="20161110 23:34:14.813"></status>
</test>
<test id="s1-s2-t2" name="Delete error log">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.122">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:21.122" starttime="20161110 23:34:21.121"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.122">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" endtime="20161110 23:34:21.122" starttime="20161110 23:34:21.122"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.123">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:21.123" starttime="20161110 23:34:21.123"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:21.123" starttime="20161110 23:34:21.123"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.125">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:21.125" starttime="20161110 23:34:21.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.125">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:21.126" starttime="20161110 23:34:21.125"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.126" starttime="20161110 23:34:21.125"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.126" starttime="20161110 23:34:21.124"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.127">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:21.127" starttime="20161110 23:34:21.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:21.127" starttime="20161110 23:34:21.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.128">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:21.128" starttime="20161110 23:34:21.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:21.128" starttime="20161110 23:34:21.128"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:21.456">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.456" starttime="20161110 23:34:21.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.457">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.457" starttime="20161110 23:34:21.456"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.457" starttime="20161110 23:34:21.126"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.846">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:21.846">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.846" starttime="20161110 23:34:21.457"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.847">${msg} = Response code:200, Content:{
  "data": 286, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:21.847" starttime="20161110 23:34:21.847"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.848">Response code:200, Content:{
  "data": 286, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:21.848" starttime="20161110 23:34:21.848"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.848" starttime="20161110 23:34:21.848"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.848" starttime="20161110 23:34:21.846"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:21.849">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.849" starttime="20161110 23:34:21.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.849">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:21.849" starttime="20161110 23:34:21.849"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.850">To JSON using : content={
  "data": 286, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:21.850">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:21.850">${json} = {u'data': 286, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:21.850" starttime="20161110 23:34:21.849"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.850">${LOGID} = 286</msg>
<status status="PASS" endtime="20161110 23:34:21.850" starttime="20161110 23:34:21.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.851">${uri} = /org/openbmc/records/events/286</msg>
<status status="PASS" endtime="20161110 23:34:21.851" starttime="20161110 23:34:21.851"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:21.851">${log_uri1} = /org/openbmc/records/events/286</msg>
<status status="PASS" endtime="20161110 23:34:21.851" starttime="20161110 23:34:21.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.851">${association_uri1} = /org/openbmc/records/events/286/fru</msg>
<status status="PASS" endtime="20161110 23:34:21.852" starttime="20161110 23:34:21.851"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.852">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:21.852" starttime="20161110 23:34:21.852"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.853">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" endtime="20161110 23:34:21.853" starttime="20161110 23:34:21.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:21.854" starttime="20161110 23:34:21.853"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:21.854" starttime="20161110 23:34:21.854"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.855">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:21.855" starttime="20161110 23:34:21.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.856">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:21.856" starttime="20161110 23:34:21.856"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.856" starttime="20161110 23:34:21.856"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:21.857" starttime="20161110 23:34:21.854"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:21.857">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:21.858" starttime="20161110 23:34:21.857"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:21.858" starttime="20161110 23:34:21.858"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.859">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:21.859" starttime="20161110 23:34:21.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:21.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:21.860" starttime="20161110 23:34:21.859"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.187">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:22.187">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.187" starttime="20161110 23:34:21.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:22.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.188" starttime="20161110 23:34:22.188"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:22.189" starttime="20161110 23:34:21.857"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.597">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:22.598">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.598" starttime="20161110 23:34:22.189"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.600">${msg} = Response code:200, Content:{
  "data": 287, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:22.600" starttime="20161110 23:34:22.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:22.601">Response code:200, Content:{
  "data": 287, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:22.601" starttime="20161110 23:34:22.601"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:22.601" starttime="20161110 23:34:22.600"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:22.601" starttime="20161110 23:34:22.598"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:22.602">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.602" starttime="20161110 23:34:21.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:22.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.603" starttime="20161110 23:34:22.602"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.604">To JSON using : content={
  "data": 287, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:22.604">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:22.604">${json} = {u'data': 287, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:22.604" starttime="20161110 23:34:22.603"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.605">${LOGID} = 287</msg>
<status status="PASS" endtime="20161110 23:34:22.605" starttime="20161110 23:34:22.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.606">${uri} = /org/openbmc/records/events/287</msg>
<status status="PASS" endtime="20161110 23:34:22.606" starttime="20161110 23:34:22.605"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:22.606">${log_uri2} = /org/openbmc/records/events/287</msg>
<status status="PASS" endtime="20161110 23:34:22.607" starttime="20161110 23:34:21.852"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.607">${del_uri} = /org/openbmc/records/events/286/action/delete</msg>
<status status="PASS" endtime="20161110 23:34:22.607" starttime="20161110 23:34:22.607"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.609">${base_uri} = /org/openbmc/records/events/286/action/delete</msg>
<status status="PASS" endtime="20161110 23:34:22.609" starttime="20161110 23:34:22.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.610">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:22.610" starttime="20161110 23:34:22.610"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:22.611" starttime="20161110 23:34:22.610"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.613">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/286/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:22.613" starttime="20161110 23:34:22.612"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:22.615">URI:https://9.3.23.30:443/org/openbmc/records/events/286/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:22.615" starttime="20161110 23:34:22.615"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:22.615" starttime="20161110 23:34:22.613"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:22.616" starttime="20161110 23:34:22.611"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:22.617">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:22.617" starttime="20161110 23:34:22.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:22.618" starttime="20161110 23:34:22.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.618">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:22.618" starttime="20161110 23:34:22.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:22.619" starttime="20161110 23:34:22.618"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:22.950">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:22.950">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.950" starttime="20161110 23:34:22.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:22.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:22.951" starttime="20161110 23:34:22.950"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:22.951" starttime="20161110 23:34:22.616"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.660">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/286/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:24.661">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:24.661" starttime="20161110 23:34:22.951"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.663">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:24.663" starttime="20161110 23:34:24.662"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:24.664">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:24.664" starttime="20161110 23:34:24.664"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:24.664" starttime="20161110 23:34:24.663"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:24.665" starttime="20161110 23:34:24.661"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:24.665">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:24.665" starttime="20161110 23:34:22.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:24.666">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:24.666" starttime="20161110 23:34:24.665"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.668">${base_uri} = /org/openbmc/records/events/286/fru</msg>
<status status="PASS" endtime="20161110 23:34:24.668" starttime="20161110 23:34:24.667"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.671">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/286/fru, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:24.672" starttime="20161110 23:34:24.669"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:24.673">URI:https://9.3.23.30:443/org/openbmc/records/events/286/fru, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:24.673" starttime="20161110 23:34:24.672"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:24.673" starttime="20161110 23:34:24.672"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:24.673" starttime="20161110 23:34:24.668"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:24.674">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:24.675" starttime="20161110 23:34:24.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.676">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:24.676" starttime="20161110 23:34:24.675"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.677">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:24.677" starttime="20161110 23:34:24.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:24.677">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:24.677" starttime="20161110 23:34:24.677"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.008">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:25.008">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.008" starttime="20161110 23:34:24.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.009">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.009" starttime="20161110 23:34:25.009"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.009" starttime="20161110 23:34:24.673"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.139">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/286/fru, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:25.139">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.139" starttime="20161110 23:34:25.009"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.141">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/286/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status status="PASS" endtime="20161110 23:34:25.141" starttime="20161110 23:34:25.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.142">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/286/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status status="PASS" endtime="20161110 23:34:25.142" starttime="20161110 23:34:25.142"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.142" starttime="20161110 23:34:25.141"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.143" starttime="20161110 23:34:25.139"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:25.143">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.143" starttime="20161110 23:34:24.666"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.144">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/286/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:25.144">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:25.144">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/286/fru'}, u'status': u'error', u'message': u'404 Not Found'}</msg>
<status status="PASS" endtime="20161110 23:34:25.144" starttime="20161110 23:34:25.143"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:25.145" starttime="20161110 23:34:25.145"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.148">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status status="PASS" endtime="20161110 23:34:25.148" starttime="20161110 23:34:25.147"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.150">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:25.150" starttime="20161110 23:34:25.149"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.152">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:25.152" starttime="20161110 23:34:25.151"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.152" starttime="20161110 23:34:25.151"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.152" starttime="20161110 23:34:25.148"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.154">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:25.154" starttime="20161110 23:34:25.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.155">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:25.155" starttime="20161110 23:34:25.155"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.156">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:25.156" starttime="20161110 23:34:25.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.157">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:25.157" starttime="20161110 23:34:25.157"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.484">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:25.485">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.485" starttime="20161110 23:34:25.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.485">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.485" starttime="20161110 23:34:25.485"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.486" starttime="20161110 23:34:25.152"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.592">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:25.593">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.593" starttime="20161110 23:34:25.486"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.594">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/287"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:25.594" starttime="20161110 23:34:25.593"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.594">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/287"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:25.595" starttime="20161110 23:34:25.594"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.595" starttime="20161110 23:34:25.594"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.595" starttime="20161110 23:34:25.593"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:25.595">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:25.595" starttime="20161110 23:34:25.146"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.596">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/287"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:25.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:25.596">${content} = {u'data': [u'/org/openbmc/records/events/287'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:25.596" starttime="20161110 23:34:25.595"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:25.596">${dimm3_event} = [u'/org/openbmc/records/events/287']</msg>
<status status="PASS" endtime="20161110 23:34:25.596" starttime="20161110 23:34:25.145"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:25.596" starttime="20161110 23:34:25.596"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.598">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status status="PASS" endtime="20161110 23:34:25.598" starttime="20161110 23:34:25.598"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.600">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:25.600" starttime="20161110 23:34:25.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.600">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:25.600" starttime="20161110 23:34:25.600"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.601" starttime="20161110 23:34:25.600"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:25.601" starttime="20161110 23:34:25.598"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:25.601">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:25.602" starttime="20161110 23:34:25.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.602">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:25.602" starttime="20161110 23:34:25.602"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.603">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:25.603" starttime="20161110 23:34:25.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:25.603">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:25.603" starttime="20161110 23:34:25.603"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.557">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:27.558">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:27.558" starttime="20161110 23:34:25.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:27.558" starttime="20161110 23:34:27.558"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.558" starttime="20161110 23:34:25.601"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.636">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:27.636">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:27.636" starttime="20161110 23:34:27.559"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.637">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/287"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:27.637" starttime="20161110 23:34:27.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.638">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/287"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:27.639" starttime="20161110 23:34:27.638"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.639" starttime="20161110 23:34:27.638"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.639" starttime="20161110 23:34:27.637"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:27.639">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:27.639" starttime="20161110 23:34:25.597"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.639">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/287"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:27.640">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:27.640">${content} = {u'data': [u'/org/openbmc/records/events/287'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:27.640" starttime="20161110 23:34:27.639"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:27.640">${dimm2_event} = [u'/org/openbmc/records/events/287']</msg>
<status status="PASS" endtime="20161110 23:34:27.640" starttime="20161110 23:34:25.597"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:27.640" starttime="20161110 23:34:27.640"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:27.644" starttime="20161110 23:34:27.641"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.644" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:34:27.644" starttime="20161110 23:34:27.644"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.645" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:34:27.645" starttime="20161110 23:34:27.645"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:27.645">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:34:27.645" starttime="20161110 23:34:27.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:27.648" starttime="20161110 23:34:27.646"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.649">${cur_time} = 2016-11-10 23:34:27:648900</msg>
<status status="PASS" endtime="20161110 23:34:27.649" starttime="20161110 23:34:27.649"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.650">${cur_time} = 20161110233427648900</msg>
<status status="PASS" endtime="20161110 23:34:27.650" starttime="20161110 23:34:27.649"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:27.650">${cur_time} = 20161110233427648900</msg>
<status status="PASS" endtime="20161110 23:34:27.650" starttime="20161110 23:34:27.648"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.651" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:34:27.651" starttime="20161110 23:34:27.650"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.651" starttime="20161110 23:34:27.644"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.651" starttime="20161110 23:34:27.641"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:34:27.651" starttime="20161110 23:34:21.120"></status>
</test>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20161110 23:34:27.660" starttime="20161110 23:34:27.652"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status status="PASS" endtime="20161110 23:34:27.660" starttime="20161110 23:34:07.718"></status>
</suite>
<suite id="s1-s3" source="/tmp/root/31302/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s3-t1" name="power on test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:27.689">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:34:27.689" starttime="20161110 23:34:27.688"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:27.689">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:34:27.689" starttime="20161110 23:34:27.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:27.692" starttime="20161110 23:34:27.692"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.692" starttime="20161110 23:34:27.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.696">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:34:27.696" starttime="20161110 23:34:27.695"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.696">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:34:27.696" starttime="20161110 23:34:27.696"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:27.697">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:34:27.697" starttime="20161110 23:34:27.697"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.698">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:34:27.698" starttime="20161110 23:34:27.697"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.698" starttime="20161110 23:34:27.695"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.698" starttime="20161110 23:34:27.692"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:27.699">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:34:27.699" starttime="20161110 23:34:27.699"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:27.699">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:34:27.699" starttime="20161110 23:34:27.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:27.703" starttime="20161110 23:34:27.703"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:27.704" starttime="20161110 23:34:27.703"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.704" starttime="20161110 23:34:27.702"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:27.704" starttime="20161110 23:34:27.700"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:27.704">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:34:31.991">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:34:31.991" starttime="20161110 23:34:27.704"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:31.992" starttime="20161110 23:34:27.688"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:31.993">${cur_time} = 20161110233431992407</msg>
<status status="PASS" endtime="20161110 23:34:31.993" starttime="20161110 23:34:31.992"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:31.993">${cur_time} = 20161110233431992407</msg>
<status status="PASS" endtime="20161110 23:34:31.993" starttime="20161110 23:34:31.992"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:31.996">${LOG_TIME} = 20161110233431992407</msg>
<status status="PASS" endtime="20161110 23:34:31.996" starttime="20161110 23:34:31.993"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:31.996">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161110233431992407_$$'.</msg>
<status status="PASS" endtime="20161110 23:34:32.004" starttime="20161110 23:34:31.996"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:32.004" starttime="20161110 23:34:27.687"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:32.006">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:34:32.006" starttime="20161110 23:34:32.005"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:32.006">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:34:32.006" starttime="20161110 23:34:32.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:32.009" starttime="20161110 23:34:32.009"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:32.009" starttime="20161110 23:34:32.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:32.013">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:34:32.013" starttime="20161110 23:34:32.012"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:32.013">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:34:32.013" starttime="20161110 23:34:32.013"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:32.014">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:34:32.014" starttime="20161110 23:34:32.013"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:32.014">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:34:32.015" starttime="20161110 23:34:32.014"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:32.015" starttime="20161110 23:34:32.012"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:32.015" starttime="20161110 23:34:32.009"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:32.016">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:34:32.016" starttime="20161110 23:34:32.016"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:32.016">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:34:32.016" starttime="20161110 23:34:32.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:32.020" starttime="20161110 23:34:32.020"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:32.020" starttime="20161110 23:34:32.020"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:32.020" starttime="20161110 23:34:32.019"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:32.021" starttime="20161110 23:34:32.016"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:32.021">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:34:34.539">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:34:34.540" starttime="20161110 23:34:32.021"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:34.540" starttime="20161110 23:34:32.004"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.541">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:34.542" starttime="20161110 23:34:34.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.543">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:34.543" starttime="20161110 23:34:34.542"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.544">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161110 23:34:34.545" starttime="20161110 23:34:34.544"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.547">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status status="PASS" endtime="20161110 23:34:34.547" starttime="20161110 23:34:34.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.548">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:34.548" starttime="20161110 23:34:34.547"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:34.548" starttime="20161110 23:34:34.548"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.551">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:34.551" starttime="20161110 23:34:34.550"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:34.552">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:34.552" starttime="20161110 23:34:34.551"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:34.552" starttime="20161110 23:34:34.551"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:34.552" starttime="20161110 23:34:34.549"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:34.554">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:34.554" starttime="20161110 23:34:34.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.555">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:34.555" starttime="20161110 23:34:34.555"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.556">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:34.556" starttime="20161110 23:34:34.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.557">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:34.557" starttime="20161110 23:34:34.556"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:34.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:34.884">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:34.885" starttime="20161110 23:34:34.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:34.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:34.885" starttime="20161110 23:34:34.885"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:34.886" starttime="20161110 23:34:34.553"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.447">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:35.448">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:35.448" starttime="20161110 23:34:34.886"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.449">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:35.449" starttime="20161110 23:34:35.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:35.450">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:35.450" starttime="20161110 23:34:35.450"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:35.450" starttime="20161110 23:34:35.449"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:35.450" starttime="20161110 23:34:35.448"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:35.450">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:35.450" starttime="20161110 23:34:34.545"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:35.451">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:35.451" starttime="20161110 23:34:34.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:35.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:35.451" starttime="20161110 23:34:35.451"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.454">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:35.454" starttime="20161110 23:34:35.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.454">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:35.454" starttime="20161110 23:34:35.454"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.456">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161110 23:34:35.456" starttime="20161110 23:34:35.455"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.457">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161110 23:34:35.457" starttime="20161110 23:34:35.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.458">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:35.458" starttime="20161110 23:34:35.457"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:35.459" starttime="20161110 23:34:35.458"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.460">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:35.460" starttime="20161110 23:34:35.460"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:35.461">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:35.461" starttime="20161110 23:34:35.461"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:35.461" starttime="20161110 23:34:35.460"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:35.462" starttime="20161110 23:34:35.459"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:35.462">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:35.463" starttime="20161110 23:34:35.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.464">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:35.464" starttime="20161110 23:34:35.464"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.465">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:35.465" starttime="20161110 23:34:35.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.467">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:35.467" starttime="20161110 23:34:35.465"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:35.802">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:35.802">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:35.802" starttime="20161110 23:34:35.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:35.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:35.803" starttime="20161110 23:34:35.802"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:35.803" starttime="20161110 23:34:35.462"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.106">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:36.106">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.106" starttime="20161110 23:34:35.803"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.108">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:36.108" starttime="20161110 23:34:36.107"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.109">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:36.110" starttime="20161110 23:34:36.109"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.110" starttime="20161110 23:34:36.108"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.110" starttime="20161110 23:34:36.107"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:36.110">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.110" starttime="20161110 23:34:35.456"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:36.111">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.111" starttime="20161110 23:34:35.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.112" starttime="20161110 23:34:36.111"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.112">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:36.112">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:36.113">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:36.113" starttime="20161110 23:34:36.112"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:36.113">${state} = 0</msg>
<status status="PASS" endtime="20161110 23:34:36.113" starttime="20161110 23:34:35.452"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:36.114" starttime="20161110 23:34:36.113"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.114" starttime="20161110 23:34:35.452"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.114" starttime="20161110 23:34:35.452"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.114" starttime="20161110 23:34:34.540"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.116">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:36.116" starttime="20161110 23:34:36.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.117">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:36.117" starttime="20161110 23:34:36.117"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.118">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161110 23:34:36.118" starttime="20161110 23:34:36.118"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.119">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161110 23:34:36.119" starttime="20161110 23:34:36.119"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.120">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:36.120" starttime="20161110 23:34:36.119"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:36.120" starttime="20161110 23:34:36.120"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.123">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:36.123" starttime="20161110 23:34:36.122"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.123">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:36.123" starttime="20161110 23:34:36.123"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.124" starttime="20161110 23:34:36.123"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.124" starttime="20161110 23:34:36.120"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.124">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:36.125" starttime="20161110 23:34:36.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:36.125" starttime="20161110 23:34:36.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.126">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:36.126" starttime="20161110 23:34:36.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:36.126" starttime="20161110 23:34:36.126"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.455">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:36.455">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.455" starttime="20161110 23:34:36.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.456">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.456" starttime="20161110 23:34:36.456"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.456" starttime="20161110 23:34:36.124"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.778">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:36.778">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.779" starttime="20161110 23:34:36.456"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.780">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:36.780" starttime="20161110 23:34:36.779"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.781">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:36.781" starttime="20161110 23:34:36.780"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.781" starttime="20161110 23:34:36.780"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.781" starttime="20161110 23:34:36.779"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:36.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.781" starttime="20161110 23:34:36.118"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:36.781">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.781" starttime="20161110 23:34:36.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:36.782" starttime="20161110 23:34:36.781"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.782">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:36.782">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:36.782">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:36.782" starttime="20161110 23:34:36.782"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:36.783">${power_state} = 0</msg>
<status status="PASS" endtime="20161110 23:34:36.783" starttime="20161110 23:34:36.115"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:36.783" starttime="20161110 23:34:36.783"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:36.784" starttime="20161110 23:34:36.783"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/sensors/host/BootProgress</arg>
<arg>value</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.786">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20161110 23:34:36.786" starttime="20161110 23:34:36.785"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.787">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:36.787" starttime="20161110 23:34:36.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.788">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:34:36.788" starttime="20161110 23:34:36.787"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.788" starttime="20161110 23:34:36.787"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:36.788" starttime="20161110 23:34:36.786"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:36.789">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:36.789" starttime="20161110 23:34:36.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:36.790" starttime="20161110 23:34:36.789"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.790">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:36.790" starttime="20161110 23:34:36.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:36.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:36.791" starttime="20161110 23:34:36.790"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.569">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:39.570">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:39.570" starttime="20161110 23:34:36.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:39.570">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:39.570" starttime="20161110 23:34:39.570"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:39.570" starttime="20161110 23:34:36.788"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.648">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:34:39.648">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:39.648" starttime="20161110 23:34:39.571"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.649">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:39.649" starttime="20161110 23:34:39.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:39.650">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:39.650" starttime="20161110 23:34:39.650"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:39.650" starttime="20161110 23:34:39.649"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:39.650" starttime="20161110 23:34:39.648"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:39.650">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:39.650" starttime="20161110 23:34:36.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.651">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:39.651">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:39.651">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:39.651" starttime="20161110 23:34:39.651"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:39.651">${state} = Off</msg>
<status status="PASS" endtime="20161110 23:34:39.651" starttime="20161110 23:34:36.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:39.652">${boot_progress} = Off</msg>
<status status="PASS" endtime="20161110 23:34:39.652" starttime="20161110 23:34:36.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:39.652" starttime="20161110 23:34:39.652"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:39.653" starttime="20161110 23:34:39.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.653">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20161110 23:34:39.653" starttime="20161110 23:34:39.653"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.654">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:39.654" starttime="20161110 23:34:39.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.654">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:39.654" starttime="20161110 23:34:39.654"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.655">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:34:39.655" starttime="20161110 23:34:39.655"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.656">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:34:39.656" starttime="20161110 23:34:39.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.657">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:39.657" starttime="20161110 23:34:39.657"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:39.658" starttime="20161110 23:34:39.657"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.659">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:39.659" starttime="20161110 23:34:39.658"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:39.660">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:39.660" starttime="20161110 23:34:39.659"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:39.660" starttime="20161110 23:34:39.659"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:39.660" starttime="20161110 23:34:39.658"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:39.661">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:39.661" starttime="20161110 23:34:39.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.662">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:39.662" starttime="20161110 23:34:39.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.662">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:39.662" starttime="20161110 23:34:39.662"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.663">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:39.663" starttime="20161110 23:34:39.662"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:39.990">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:39.990">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:39.990" starttime="20161110 23:34:39.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:39.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:39.991" starttime="20161110 23:34:39.990"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:39.991" starttime="20161110 23:34:39.660"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.264">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:40.264">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:40.264" starttime="20161110 23:34:39.991"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.266">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:40.266" starttime="20161110 23:34:40.265"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:40.268">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:40.268" starttime="20161110 23:34:40.268"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.269" starttime="20161110 23:34:40.266"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.269" starttime="20161110 23:34:40.265"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:40.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:40.269" starttime="20161110 23:34:39.655"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:40.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:40.269" starttime="20161110 23:34:39.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:40.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:40.270" starttime="20161110 23:34:40.270"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.271">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:40.271">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:40.271">${content} = {u'data': u'BMC_READY', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:40.271" starttime="20161110 23:34:40.270"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:40.272">${bmc_state} = BMC_READY</msg>
<status status="PASS" endtime="20161110 23:34:40.272" starttime="20161110 23:34:39.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:40.272" starttime="20161110 23:34:40.272"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:40.273" starttime="20161110 23:34:40.272"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.273" starttime="20161110 23:34:36.115"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status status="PASS" endtime="20161110 23:34:40.305" starttime="20161110 23:34:40.273"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.305" starttime="20161110 23:34:32.004"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.306">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status status="PASS" endtime="20161110 23:34:40.307" starttime="20161110 23:34:40.306"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:40.309">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:34:40.309" starttime="20161110 23:34:40.308"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:40.309">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:34:40.309" starttime="20161110 23:34:40.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:40.314" starttime="20161110 23:34:40.313"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.314" starttime="20161110 23:34:40.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.318">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:34:40.318" starttime="20161110 23:34:40.318"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.319">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:34:40.319" starttime="20161110 23:34:40.318"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:40.319">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:34:40.319" starttime="20161110 23:34:40.319"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:40.320">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:34:40.320" starttime="20161110 23:34:40.320"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.320" starttime="20161110 23:34:40.318"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.321" starttime="20161110 23:34:40.314"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:40.321">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:34:40.321" starttime="20161110 23:34:40.321"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:40.322">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:34:40.322" starttime="20161110 23:34:40.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:40.325" starttime="20161110 23:34:40.325"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:40.327" starttime="20161110 23:34:40.326"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.327" starttime="20161110 23:34:40.325"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:40.327" starttime="20161110 23:34:40.322"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:40.327">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:34:46.438">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:34:46.439" starttime="20161110 23:34:40.327"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:46.439" starttime="20161110 23:34:40.307"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.440">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:46.440" starttime="20161110 23:34:46.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.441">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:46.442" starttime="20161110 23:34:46.441"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.443">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161110 23:34:46.443" starttime="20161110 23:34:46.443"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.445">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status status="PASS" endtime="20161110 23:34:46.445" starttime="20161110 23:34:46.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.446">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:46.446" starttime="20161110 23:34:46.446"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:46.447" starttime="20161110 23:34:46.447"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.449">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:46.449" starttime="20161110 23:34:46.448"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:46.450">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:46.450" starttime="20161110 23:34:46.449"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:46.450" starttime="20161110 23:34:46.449"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:46.450" starttime="20161110 23:34:46.447"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:46.451">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:46.451" starttime="20161110 23:34:46.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:46.452" starttime="20161110 23:34:46.451"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.452">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:46.452" starttime="20161110 23:34:46.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.453">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:46.453" starttime="20161110 23:34:46.453"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:46.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:46.783">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:46.783" starttime="20161110 23:34:46.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:46.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:46.785" starttime="20161110 23:34:46.784"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:46.785" starttime="20161110 23:34:46.450"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.036">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:47.037">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.037" starttime="20161110 23:34:46.785"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.038">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:47.038" starttime="20161110 23:34:47.038"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.040">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:47.040" starttime="20161110 23:34:47.039"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.040" starttime="20161110 23:34:47.039"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.040" starttime="20161110 23:34:47.037"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:47.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.041" starttime="20161110 23:34:46.444"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:47.041">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.041" starttime="20161110 23:34:46.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.042" starttime="20161110 23:34:47.041"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.046">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:47.046" starttime="20161110 23:34:47.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.047">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:47.047" starttime="20161110 23:34:47.046"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.048">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161110 23:34:47.048" starttime="20161110 23:34:47.047"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.049">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161110 23:34:47.049" starttime="20161110 23:34:47.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:47.049" starttime="20161110 23:34:47.049"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:47.050" starttime="20161110 23:34:47.050"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.051">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:47.051" starttime="20161110 23:34:47.051"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.052">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:47.052" starttime="20161110 23:34:47.052"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.052" starttime="20161110 23:34:47.051"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.052" starttime="20161110 23:34:47.050"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.053">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:47.053" starttime="20161110 23:34:47.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.054">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:47.054" starttime="20161110 23:34:47.054"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.054">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:47.055" starttime="20161110 23:34:47.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.055">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:47.055" starttime="20161110 23:34:47.055"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.411">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:47.411">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.411" starttime="20161110 23:34:47.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.412">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.412" starttime="20161110 23:34:47.411"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.412" starttime="20161110 23:34:47.052"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.712">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:47.712">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.712" starttime="20161110 23:34:47.412"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.714">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:47.714" starttime="20161110 23:34:47.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.714">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:47.715" starttime="20161110 23:34:47.714"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.715" starttime="20161110 23:34:47.714"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:47.715" starttime="20161110 23:34:47.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:47.715">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.715" starttime="20161110 23:34:47.048"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:47.715">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.715" starttime="20161110 23:34:47.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:47.716">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:47.716" starttime="20161110 23:34:47.715"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:47.716">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:47.716">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:47.716">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:47.716" starttime="20161110 23:34:47.716"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:47.717">${state} = 0</msg>
<status status="PASS" endtime="20161110 23:34:47.717" starttime="20161110 23:34:47.044"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:34:47.717">0 != 1</msg>
<status status="FAIL" endtime="20161110 23:34:47.717" starttime="20161110 23:34:47.717"></status>
</kw>
<status status="FAIL" endtime="20161110 23:34:47.717" starttime="20161110 23:34:47.043"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.720">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:57.720" starttime="20161110 23:34:57.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.721">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:57.721" starttime="20161110 23:34:57.721"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.723">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status status="PASS" endtime="20161110 23:34:57.723" starttime="20161110 23:34:57.723"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.725">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status status="PASS" endtime="20161110 23:34:57.725" starttime="20161110 23:34:57.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:57.726" starttime="20161110 23:34:57.725"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:57.727" starttime="20161110 23:34:57.726"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.730">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:57.730" starttime="20161110 23:34:57.729"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:57.733">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:57.733" starttime="20161110 23:34:57.732"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:57.733" starttime="20161110 23:34:57.731"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:57.733" starttime="20161110 23:34:57.727"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:57.735">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:57.735" starttime="20161110 23:34:57.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:57.736" starttime="20161110 23:34:57.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.737">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:57.737" starttime="20161110 23:34:57.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:57.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:57.738" starttime="20161110 23:34:57.737"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:58.078">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.078" starttime="20161110 23:34:57.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:58.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.080" starttime="20161110 23:34:58.079"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.080" starttime="20161110 23:34:57.734"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.353">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:58.353">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.353" starttime="20161110 23:34:58.080"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.355">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:58.355" starttime="20161110 23:34:58.354"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:58.356">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:34:58.356" starttime="20161110 23:34:58.356"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.357" starttime="20161110 23:34:58.355"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.357" starttime="20161110 23:34:58.353"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:58.357">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.357" starttime="20161110 23:34:57.723"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:58.358">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.358" starttime="20161110 23:34:57.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:58.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.359" starttime="20161110 23:34:58.358"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.360">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:34:58.360">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:34:58.360">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:34:58.360" starttime="20161110 23:34:58.359"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:34:58.360">${state} = 1</msg>
<status status="PASS" endtime="20161110 23:34:58.360" starttime="20161110 23:34:57.719"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:58.361" starttime="20161110 23:34:58.361"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.361" starttime="20161110 23:34:57.718"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.362" starttime="20161110 23:34:47.042"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.362" starttime="20161110 23:34:46.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:58.368" starttime="20161110 23:34:58.362"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:58.368" starttime="20161110 23:34:58.368"></status>
</kw>
<kw name="Check Power On States" library="powerons">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.370">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:34:58.370" starttime="20161110 23:34:58.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.371">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:34:58.371" starttime="20161110 23:34:58.370"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.372">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:34:58.372" starttime="20161110 23:34:58.371"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.373">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:34:58.373" starttime="20161110 23:34:58.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.373">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:58.373" starttime="20161110 23:34:58.373"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:34:58.374" starttime="20161110 23:34:58.374"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.375">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:58.375" starttime="20161110 23:34:58.374"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:58.376">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:34:58.376" starttime="20161110 23:34:58.376"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.376" starttime="20161110 23:34:58.375"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.376" starttime="20161110 23:34:58.374"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:58.377">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:34:58.378" starttime="20161110 23:34:58.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.378">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:34:58.378" starttime="20161110 23:34:58.378"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.379">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:34:58.379" starttime="20161110 23:34:58.378"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.379">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:34:58.379" starttime="20161110 23:34:58.379"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:34:58.720">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:34:58.720">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.720" starttime="20161110 23:34:58.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:34:58.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:34:58.721" starttime="20161110 23:34:58.720"></status>
</kw>
<status status="PASS" endtime="20161110 23:34:58.721" starttime="20161110 23:34:58.376"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:02.686">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:02.686">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:02.686" starttime="20161110 23:34:58.721"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:02.688">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:02.689" starttime="20161110 23:35:02.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:02.690">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:02.690" starttime="20161110 23:35:02.690"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:02.690" starttime="20161110 23:35:02.689"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:02.690" starttime="20161110 23:35:02.687"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:02.691">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:02.691" starttime="20161110 23:34:58.372"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:02.691">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:02.691" starttime="20161110 23:34:58.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:02.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:02.692" starttime="20161110 23:35:02.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:02.693">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:35:02.693">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:35:02.693">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:35:02.693" starttime="20161110 23:35:02.692"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:02.694">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:35:02.694" starttime="20161110 23:34:58.369"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:35:02.695">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:35:02.695" starttime="20161110 23:35:02.694"></status>
</kw>
<status status="FAIL" endtime="20161110 23:35:02.695" starttime="20161110 23:34:58.369"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.698">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:35:12.698" starttime="20161110 23:35:12.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.699">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:35:12.699" starttime="20161110 23:35:12.698"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.701">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:35:12.701" starttime="20161110 23:35:12.700"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.703">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:35:12.703" starttime="20161110 23:35:12.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:12.703" starttime="20161110 23:35:12.703"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:35:12.704" starttime="20161110 23:35:12.704"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.707">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:12.707" starttime="20161110 23:35:12.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:12.708">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:12.708" starttime="20161110 23:35:12.708"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:12.708" starttime="20161110 23:35:12.707"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:12.709" starttime="20161110 23:35:12.704"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:12.709">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:35:12.710" starttime="20161110 23:35:12.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.710">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:12.710" starttime="20161110 23:35:12.710"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.711">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:35:12.711" starttime="20161110 23:35:12.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:12.711">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:35:12.711" starttime="20161110 23:35:12.711"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:16.589">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:16.590">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:16.590" starttime="20161110 23:35:12.712"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:16.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:16.591" starttime="20161110 23:35:16.590"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:16.591" starttime="20161110 23:35:12.709"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:16.867">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:16.867">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:16.867" starttime="20161110 23:35:16.591"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:16.869">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:16.869" starttime="20161110 23:35:16.868"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:16.870">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:16.870" starttime="20161110 23:35:16.870"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:16.870" starttime="20161110 23:35:16.869"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:16.870" starttime="20161110 23:35:16.867"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:16.871">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:16.871" starttime="20161110 23:35:12.701"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:16.871">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:16.871" starttime="20161110 23:35:12.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:16.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:16.872" starttime="20161110 23:35:16.871"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:16.873">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:35:16.873">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:35:16.873">${content} = {u'data': u'HOST_BOOTING', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:35:16.873" starttime="20161110 23:35:16.872"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:16.873">${bmc_state} = HOST_BOOTING</msg>
<status status="PASS" endtime="20161110 23:35:16.873" starttime="20161110 23:35:12.697"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:35:16.874">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:35:16.874" starttime="20161110 23:35:16.874"></status>
</kw>
<status status="FAIL" endtime="20161110 23:35:16.874" starttime="20161110 23:35:12.696"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.877">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:35:26.878" starttime="20161110 23:35:26.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.879">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:35:26.879" starttime="20161110 23:35:26.878"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.884">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:35:26.884" starttime="20161110 23:35:26.883"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.886">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:35:26.887" starttime="20161110 23:35:26.886"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.888">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:26.888" starttime="20161110 23:35:26.887"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:35:26.888" starttime="20161110 23:35:26.888"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.890">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:26.890" starttime="20161110 23:35:26.889"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:26.891">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:26.891" starttime="20161110 23:35:26.891"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:26.892" starttime="20161110 23:35:26.891"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:26.892" starttime="20161110 23:35:26.889"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:26.892">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:35:26.893" starttime="20161110 23:35:26.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.893">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:26.893" starttime="20161110 23:35:26.893"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.894">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:35:26.894" starttime="20161110 23:35:26.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:26.894">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:35:26.894" starttime="20161110 23:35:26.894"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:29.555">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:29.555">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:29.556" starttime="20161110 23:35:26.895"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:29.556">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:29.557" starttime="20161110 23:35:29.556"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:29.557" starttime="20161110 23:35:26.892"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:29.844">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:29.844">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:29.844" starttime="20161110 23:35:29.557"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:29.846">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:29.846" starttime="20161110 23:35:29.845"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:29.847">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:29.848" starttime="20161110 23:35:29.847"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:29.848" starttime="20161110 23:35:29.846"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:29.848" starttime="20161110 23:35:29.844"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:29.848">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:29.848" starttime="20161110 23:35:26.884"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:29.849">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:29.849" starttime="20161110 23:35:26.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:29.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:29.850" starttime="20161110 23:35:29.849"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:29.851">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:35:29.851">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:35:29.851">${content} = {u'data': u'HOST_BOOTING', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:35:29.851" starttime="20161110 23:35:29.850"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:29.851">${bmc_state} = HOST_BOOTING</msg>
<status status="PASS" endtime="20161110 23:35:29.852" starttime="20161110 23:35:26.876"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:35:29.853">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:35:29.853" starttime="20161110 23:35:29.852"></status>
</kw>
<status status="FAIL" endtime="20161110 23:35:29.853" starttime="20161110 23:35:26.875"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.856">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:35:39.856" starttime="20161110 23:35:39.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.857">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:35:39.857" starttime="20161110 23:35:39.857"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.859">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:35:39.859" starttime="20161110 23:35:39.858"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.861">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:35:39.861" starttime="20161110 23:35:39.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.862">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:39.862" starttime="20161110 23:35:39.861"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:35:39.863" starttime="20161110 23:35:39.862"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.865">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:39.866" starttime="20161110 23:35:39.864"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:39.867">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:39.867" starttime="20161110 23:35:39.867"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:39.868" starttime="20161110 23:35:39.866"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:39.868" starttime="20161110 23:35:39.863"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:39.869">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:35:39.869" starttime="20161110 23:35:39.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:39.870" starttime="20161110 23:35:39.870"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.870">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:35:39.870" starttime="20161110 23:35:39.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:39.871">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:35:39.871" starttime="20161110 23:35:39.871"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:40.204">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:40.204">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:40.204" starttime="20161110 23:35:39.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:40.205">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:40.206" starttime="20161110 23:35:40.205"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:40.206" starttime="20161110 23:35:39.868"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:40.512">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:35:40.512">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:40.512" starttime="20161110 23:35:40.206"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:40.515">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:40.515" starttime="20161110 23:35:40.514"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:40.517">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:35:40.518" starttime="20161110 23:35:40.517"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:40.518" starttime="20161110 23:35:40.516"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:40.518" starttime="20161110 23:35:40.513"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:40.518">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:40.519" starttime="20161110 23:35:39.859"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:40.519">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:35:40.519" starttime="20161110 23:35:39.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:40.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:35:40.520" starttime="20161110 23:35:40.519"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:40.521">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:35:40.521">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:35:40.521">${content} = {u'data': u'HOST_BOOTING', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:35:40.521" starttime="20161110 23:35:40.520"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:35:40.521">${bmc_state} = HOST_BOOTING</msg>
<status status="PASS" endtime="20161110 23:35:40.521" starttime="20161110 23:35:39.855"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:35:40.522">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:35:40.522" starttime="20161110 23:35:40.522"></status>
</kw>
<status status="FAIL" endtime="20161110 23:35:40.522" starttime="20161110 23:35:39.854"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.526">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:35:50.526" starttime="20161110 23:35:50.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.527">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:35:50.527" starttime="20161110 23:35:50.526"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.528">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:35:50.529" starttime="20161110 23:35:50.528"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.530">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:35:50.530" starttime="20161110 23:35:50.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.531">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:50.531" starttime="20161110 23:35:50.530"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:35:50.532" starttime="20161110 23:35:50.531"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.533">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:50.533" starttime="20161110 23:35:50.533"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:50.535">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:35:50.535" starttime="20161110 23:35:50.534"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:50.535" starttime="20161110 23:35:50.534"></status>
</kw>
<status status="PASS" endtime="20161110 23:35:50.535" starttime="20161110 23:35:50.532"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:35:50.536">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:35:50.537" starttime="20161110 23:35:50.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.537">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:35:50.537" starttime="20161110 23:35:50.537"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.539">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:35:50.539" starttime="20161110 23:35:50.538"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:35:50.539">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:35:50.539" starttime="20161110 23:35:50.539"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:02.884">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:02.884">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:02.884" starttime="20161110 23:35:50.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:02.885">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:02.885" starttime="20161110 23:36:02.884"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:02.885" starttime="20161110 23:35:50.535"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:03.167">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:03.167">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:03.167" starttime="20161110 23:36:02.886"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:03.169">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:03.169" starttime="20161110 23:36:03.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:03.170">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:03.171" starttime="20161110 23:36:03.170"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:03.171" starttime="20161110 23:36:03.169"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:03.171" starttime="20161110 23:36:03.167"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:03.171">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:03.171" starttime="20161110 23:35:50.529"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:03.172">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:03.172" starttime="20161110 23:35:50.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:03.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:03.173" starttime="20161110 23:36:03.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:03.173">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:36:03.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:36:03.174">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:36:03.174" starttime="20161110 23:36:03.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:03.174">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:36:03.174" starttime="20161110 23:35:50.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:36:03.175">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:36:03.176" starttime="20161110 23:36:03.174"></status>
</kw>
<status status="FAIL" endtime="20161110 23:36:03.176" starttime="20161110 23:35:50.523"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.179">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:36:13.179" starttime="20161110 23:36:13.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.180">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:36:13.180" starttime="20161110 23:36:13.179"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.181">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:36:13.182" starttime="20161110 23:36:13.181"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.183">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:36:13.184" starttime="20161110 23:36:13.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:13.184" starttime="20161110 23:36:13.184"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:36:13.185" starttime="20161110 23:36:13.185"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.188">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:13.188" starttime="20161110 23:36:13.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:13.189">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:13.189" starttime="20161110 23:36:13.189"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:13.189" starttime="20161110 23:36:13.188"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:13.189" starttime="20161110 23:36:13.186"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:13.190">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:36:13.190" starttime="20161110 23:36:13.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.191">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:13.191" starttime="20161110 23:36:13.191"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.192">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:36:13.192" starttime="20161110 23:36:13.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:13.192">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:36:13.192" starttime="20161110 23:36:13.192"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:15.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:15.445">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:15.445" starttime="20161110 23:36:13.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:15.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:15.447" starttime="20161110 23:36:15.446"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:15.447" starttime="20161110 23:36:13.189"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:15.721">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:15.721">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:15.721" starttime="20161110 23:36:15.448"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:15.723">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:15.723" starttime="20161110 23:36:15.722"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:15.724">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:15.724" starttime="20161110 23:36:15.724"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:15.724" starttime="20161110 23:36:15.723"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:15.725" starttime="20161110 23:36:15.721"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:15.725">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:15.725" starttime="20161110 23:36:13.182"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:15.725">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:15.725" starttime="20161110 23:36:13.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:15.726">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:15.726" starttime="20161110 23:36:15.726"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:15.727">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:36:15.727">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:36:15.727">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:36:15.727" starttime="20161110 23:36:15.726"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:15.728">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:36:15.728" starttime="20161110 23:36:13.177"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:36:15.729">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:36:15.729" starttime="20161110 23:36:15.728"></status>
</kw>
<status status="FAIL" endtime="20161110 23:36:15.729" starttime="20161110 23:36:13.177"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.731">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:36:25.732" starttime="20161110 23:36:25.731"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.733">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:36:25.733" starttime="20161110 23:36:25.732"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.734">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:36:25.734" starttime="20161110 23:36:25.734"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.737">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:36:25.737" starttime="20161110 23:36:25.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.738">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:25.738" starttime="20161110 23:36:25.737"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:36:25.739" starttime="20161110 23:36:25.738"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.741">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:25.741" starttime="20161110 23:36:25.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:25.743">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:25.743" starttime="20161110 23:36:25.743"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:25.743" starttime="20161110 23:36:25.741"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:25.744" starttime="20161110 23:36:25.739"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:25.745">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:36:25.746" starttime="20161110 23:36:25.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:25.747" starttime="20161110 23:36:25.746"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.748">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:36:25.748" starttime="20161110 23:36:25.747"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:25.749">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:36:25.749" starttime="20161110 23:36:25.748"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:26.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:26.076">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:26.076" starttime="20161110 23:36:25.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:26.076">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:26.076" starttime="20161110 23:36:26.076"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:26.076" starttime="20161110 23:36:25.744"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:26.359">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:26.359">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:26.359" starttime="20161110 23:36:26.077"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:26.361">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:26.361" starttime="20161110 23:36:26.360"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:26.362">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:26.362" starttime="20161110 23:36:26.362"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:26.363" starttime="20161110 23:36:26.361"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:26.363" starttime="20161110 23:36:26.359"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:26.363">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:26.363" starttime="20161110 23:36:25.735"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:26.363">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:26.364" starttime="20161110 23:36:25.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:26.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:26.365" starttime="20161110 23:36:26.364"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:26.365">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:36:26.365">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:36:26.366">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:36:26.366" starttime="20161110 23:36:26.365"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:26.366">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:36:26.366" starttime="20161110 23:36:25.730"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:36:26.367">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:36:26.367" starttime="20161110 23:36:26.366"></status>
</kw>
<status status="FAIL" endtime="20161110 23:36:26.367" starttime="20161110 23:36:25.729"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.370">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:36:36.370" starttime="20161110 23:36:36.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.371">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:36:36.371" starttime="20161110 23:36:36.371"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.374">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:36:36.374" starttime="20161110 23:36:36.373"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.376">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:36:36.376" starttime="20161110 23:36:36.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.376">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:36.376" starttime="20161110 23:36:36.376"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:36:36.377" starttime="20161110 23:36:36.377"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.379">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:36.379" starttime="20161110 23:36:36.378"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:36.380">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:36.380" starttime="20161110 23:36:36.380"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:36.380" starttime="20161110 23:36:36.379"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:36.380" starttime="20161110 23:36:36.377"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:36.381">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:36:36.382" starttime="20161110 23:36:36.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.382">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:36.382" starttime="20161110 23:36:36.382"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.383">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:36:36.383" starttime="20161110 23:36:36.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.383">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:36:36.383" starttime="20161110 23:36:36.383"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:36.718">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:36.718">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:36.718" starttime="20161110 23:36:36.383"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:36.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:36.719" starttime="20161110 23:36:36.718"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:36.719" starttime="20161110 23:36:36.381"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:38.987">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:38.987">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:38.987" starttime="20161110 23:36:36.719"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:38.989">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:38.989" starttime="20161110 23:36:38.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:38.990">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:38.990" starttime="20161110 23:36:38.990"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:38.990" starttime="20161110 23:36:38.989"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:38.991" starttime="20161110 23:36:38.987"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:38.991">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:38.991" starttime="20161110 23:36:36.374"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:38.991">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:38.991" starttime="20161110 23:36:36.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:38.992">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:38.992" starttime="20161110 23:36:38.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:38.992">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:36:38.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:36:38.993">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:36:38.993" starttime="20161110 23:36:38.992"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:38.993">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:36:38.993" starttime="20161110 23:36:36.369"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:36:38.993">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:36:38.994" starttime="20161110 23:36:38.993"></status>
</kw>
<status status="FAIL" endtime="20161110 23:36:38.994" starttime="20161110 23:36:36.368"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:48.998">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:36:48.998" starttime="20161110 23:36:48.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:48.999">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:36:48.999" starttime="20161110 23:36:48.998"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.000">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:36:49.000" starttime="20161110 23:36:49.000"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.002">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:36:49.002" starttime="20161110 23:36:49.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.003">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:49.003" starttime="20161110 23:36:49.003"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:36:49.004" starttime="20161110 23:36:49.003"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.007">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:49.007" starttime="20161110 23:36:49.005"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:49.008">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:49.008" starttime="20161110 23:36:49.008"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:49.008" starttime="20161110 23:36:49.007"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:49.009" starttime="20161110 23:36:49.004"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:49.010">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:36:49.010" starttime="20161110 23:36:49.009"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.011">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:49.011" starttime="20161110 23:36:49.011"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.012">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:36:49.012" starttime="20161110 23:36:49.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.012">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:36:49.012" starttime="20161110 23:36:49.012"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.346">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:49.347">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:49.347" starttime="20161110 23:36:49.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:49.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:49.348" starttime="20161110 23:36:49.347"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:49.348" starttime="20161110 23:36:49.009"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.659">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:36:49.659">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:49.659" starttime="20161110 23:36:49.349"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.661">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:49.661" starttime="20161110 23:36:49.660"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:49.663">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:36:49.663" starttime="20161110 23:36:49.662"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:49.663" starttime="20161110 23:36:49.662"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:49.663" starttime="20161110 23:36:49.660"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:49.664">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:49.664" starttime="20161110 23:36:49.001"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:49.664">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:36:49.664" starttime="20161110 23:36:48.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:49.665">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:36:49.665" starttime="20161110 23:36:49.664"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:49.666">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:36:49.666">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:36:49.666">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:36:49.666" starttime="20161110 23:36:49.665"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:36:49.667">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:36:49.667" starttime="20161110 23:36:48.997"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:36:49.668">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:36:49.668" starttime="20161110 23:36:49.667"></status>
</kw>
<status status="FAIL" endtime="20161110 23:36:49.668" starttime="20161110 23:36:48.994"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.671">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:36:59.671" starttime="20161110 23:36:59.671"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.672">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:36:59.672" starttime="20161110 23:36:59.672"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.675">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:36:59.675" starttime="20161110 23:36:59.674"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.678">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:36:59.678" starttime="20161110 23:36:59.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:59.679" starttime="20161110 23:36:59.678"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:36:59.680" starttime="20161110 23:36:59.679"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.682">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:59.682" starttime="20161110 23:36:59.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:59.683">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:36:59.683" starttime="20161110 23:36:59.683"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:59.684" starttime="20161110 23:36:59.682"></status>
</kw>
<status status="PASS" endtime="20161110 23:36:59.684" starttime="20161110 23:36:59.680"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:36:59.684">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:36:59.685" starttime="20161110 23:36:59.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.685">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:36:59.685" starttime="20161110 23:36:59.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.686">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:36:59.686" starttime="20161110 23:36:59.686"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:36:59.687">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:36:59.687" starttime="20161110 23:36:59.686"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:00.014">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:00.014">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:00.014" starttime="20161110 23:36:59.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:00.014">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:00.015" starttime="20161110 23:37:00.014"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:00.015" starttime="20161110 23:36:59.684"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:00.328">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:00.328">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:00.329" starttime="20161110 23:37:00.015"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:00.331">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:00.331" starttime="20161110 23:37:00.330"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:00.332">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:00.332" starttime="20161110 23:37:00.331"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:00.332" starttime="20161110 23:37:00.331"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:00.332" starttime="20161110 23:37:00.329"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:00.332">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:00.333" starttime="20161110 23:36:59.675"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:00.333">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:00.333" starttime="20161110 23:36:59.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:00.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:00.334" starttime="20161110 23:37:00.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:00.334">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:37:00.334">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:37:00.335">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:37:00.335" starttime="20161110 23:37:00.334"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:00.335">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:37:00.335" starttime="20161110 23:36:59.670"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:37:00.336">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:37:00.336" starttime="20161110 23:37:00.335"></status>
</kw>
<status status="FAIL" endtime="20161110 23:37:00.337" starttime="20161110 23:36:59.669"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.340">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:37:10.340" starttime="20161110 23:37:10.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.341">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:37:10.341" starttime="20161110 23:37:10.340"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.343">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:37:10.343" starttime="20161110 23:37:10.342"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.345">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:37:10.345" starttime="20161110 23:37:10.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:10.346" starttime="20161110 23:37:10.345"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:37:10.346" starttime="20161110 23:37:10.346"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.349">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:10.349" starttime="20161110 23:37:10.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:10.350">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:10.350" starttime="20161110 23:37:10.350"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:10.351" starttime="20161110 23:37:10.349"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:10.351" starttime="20161110 23:37:10.347"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:10.351">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:37:10.352" starttime="20161110 23:37:10.351"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.352">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:10.352" starttime="20161110 23:37:10.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.353">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:37:10.353" starttime="20161110 23:37:10.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.353">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:37:10.353" starttime="20161110 23:37:10.353"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.690">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:10.690">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:10.690" starttime="20161110 23:37:10.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:10.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:10.691" starttime="20161110 23:37:10.691"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:10.691" starttime="20161110 23:37:10.351"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.973">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:10.973">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:10.973" starttime="20161110 23:37:10.692"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.975">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:10.975" starttime="20161110 23:37:10.974"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:10.976">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:10.976" starttime="20161110 23:37:10.975"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:10.976" starttime="20161110 23:37:10.975"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:10.976" starttime="20161110 23:37:10.974"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:10.976">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:10.976" starttime="20161110 23:37:10.343"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:10.976">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:10.976" starttime="20161110 23:37:10.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:10.977">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:10.977" starttime="20161110 23:37:10.977"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:10.978">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:37:10.978">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:37:10.978">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:37:10.978" starttime="20161110 23:37:10.977"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:10.978">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:37:10.978" starttime="20161110 23:37:10.338"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:37:10.979">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:37:10.979" starttime="20161110 23:37:10.978"></status>
</kw>
<status status="FAIL" endtime="20161110 23:37:10.979" starttime="20161110 23:37:10.337"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.982">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:37:20.982" starttime="20161110 23:37:20.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.983">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:37:20.983" starttime="20161110 23:37:20.982"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.984">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:37:20.984" starttime="20161110 23:37:20.984"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.986">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:37:20.986" starttime="20161110 23:37:20.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:20.987" starttime="20161110 23:37:20.987"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:37:20.988" starttime="20161110 23:37:20.988"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.990">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:20.990" starttime="20161110 23:37:20.990"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:20.992">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:20.992" starttime="20161110 23:37:20.991"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:20.992" starttime="20161110 23:37:20.991"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:20.992" starttime="20161110 23:37:20.988"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:20.993">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:37:20.993" starttime="20161110 23:37:20.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:20.994" starttime="20161110 23:37:20.993"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.994">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:37:20.994" starttime="20161110 23:37:20.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:20.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:37:20.995" starttime="20161110 23:37:20.994"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:21.327">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:21.327">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:21.327" starttime="20161110 23:37:20.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:21.328">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:21.328" starttime="20161110 23:37:21.327"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:21.328" starttime="20161110 23:37:20.992"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:21.615">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:21.615">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:21.616" starttime="20161110 23:37:21.329"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:21.617">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:21.618" starttime="20161110 23:37:21.617"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:21.619">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:21.620" starttime="20161110 23:37:21.619"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:21.620" starttime="20161110 23:37:21.618"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:21.620" starttime="20161110 23:37:21.616"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:21.620">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:21.620" starttime="20161110 23:37:20.985"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:21.621">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:21.621" starttime="20161110 23:37:20.983"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:21.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:21.622" starttime="20161110 23:37:21.621"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:21.623">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:37:21.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:37:21.623">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:37:21.623" starttime="20161110 23:37:21.622"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:21.623">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:37:21.623" starttime="20161110 23:37:20.980"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:37:21.624">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:37:21.624" starttime="20161110 23:37:21.624"></status>
</kw>
<status status="FAIL" endtime="20161110 23:37:21.625" starttime="20161110 23:37:20.980"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.628">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:37:31.628" starttime="20161110 23:37:31.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.629">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:37:31.629" starttime="20161110 23:37:31.628"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.631">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:37:31.631" starttime="20161110 23:37:31.631"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.633">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:37:31.633" starttime="20161110 23:37:31.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.634">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:31.634" starttime="20161110 23:37:31.634"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:37:31.635" starttime="20161110 23:37:31.635"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.639">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:31.639" starttime="20161110 23:37:31.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:31.640">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:31.640" starttime="20161110 23:37:31.640"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:31.640" starttime="20161110 23:37:31.639"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:31.641" starttime="20161110 23:37:31.636"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:31.641">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:37:31.642" starttime="20161110 23:37:31.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.642">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:31.642" starttime="20161110 23:37:31.642"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.643">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:37:31.643" starttime="20161110 23:37:31.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.643">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:37:31.643" starttime="20161110 23:37:31.643"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:31.969">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:31.970">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:31.970" starttime="20161110 23:37:31.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:31.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:31.970" starttime="20161110 23:37:31.970"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:31.971" starttime="20161110 23:37:31.641"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:34.461">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:34.462">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:34.462" starttime="20161110 23:37:31.971"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:34.464">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:34.464" starttime="20161110 23:37:34.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:34.465">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:34.465" starttime="20161110 23:37:34.465"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:34.466" starttime="20161110 23:37:34.464"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:34.466" starttime="20161110 23:37:34.462"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:34.466">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:34.466" starttime="20161110 23:37:31.632"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:34.466">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:34.467" starttime="20161110 23:37:31.629"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:34.467">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:34.468" starttime="20161110 23:37:34.467"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:34.469">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:37:34.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:37:34.469">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:37:34.469" starttime="20161110 23:37:34.468"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:34.469">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:37:34.469" starttime="20161110 23:37:31.627"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:37:34.470">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:37:34.470" starttime="20161110 23:37:34.470"></status>
</kw>
<status status="FAIL" endtime="20161110 23:37:34.471" starttime="20161110 23:37:31.625"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.473">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:37:44.473" starttime="20161110 23:37:44.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.474">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:37:44.474" starttime="20161110 23:37:44.473"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.476">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:37:44.476" starttime="20161110 23:37:44.475"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.478">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:37:44.478" starttime="20161110 23:37:44.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.479">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:44.479" starttime="20161110 23:37:44.478"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:37:44.480" starttime="20161110 23:37:44.479"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.482">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:44.482" starttime="20161110 23:37:44.481"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:44.484">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:44.484" starttime="20161110 23:37:44.483"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:44.484" starttime="20161110 23:37:44.482"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:44.484" starttime="20161110 23:37:44.480"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:44.486">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:37:44.487" starttime="20161110 23:37:44.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:44.488" starttime="20161110 23:37:44.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.489">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:37:44.489" starttime="20161110 23:37:44.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.490">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:37:44.490" starttime="20161110 23:37:44.489"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:44.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:44.817">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:44.818" starttime="20161110 23:37:44.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:44.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:44.818" starttime="20161110 23:37:44.818"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:44.818" starttime="20161110 23:37:44.484"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:47.264">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:47.264">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:47.264" starttime="20161110 23:37:44.819"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:47.266">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:47.267" starttime="20161110 23:37:47.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:47.268">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:37:47.268" starttime="20161110 23:37:47.267"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:47.268" starttime="20161110 23:37:47.267"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:47.268" starttime="20161110 23:37:47.264"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:47.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:47.269" starttime="20161110 23:37:44.476"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:47.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:47.269" starttime="20161110 23:37:44.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:47.271">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:47.271" starttime="20161110 23:37:47.270"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:47.271">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:37:47.271">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:37:47.271">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:37:47.271" starttime="20161110 23:37:47.271"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:37:47.272">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:37:47.272" starttime="20161110 23:37:44.472"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:37:47.272">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:37:47.273" starttime="20161110 23:37:47.272"></status>
</kw>
<status status="FAIL" endtime="20161110 23:37:47.273" starttime="20161110 23:37:44.471"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.275">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:37:57.275" starttime="20161110 23:37:57.275"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.276">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:37:57.276" starttime="20161110 23:37:57.275"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.278">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:37:57.278" starttime="20161110 23:37:57.277"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.280">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:37:57.280" starttime="20161110 23:37:57.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.282">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:57.282" starttime="20161110 23:37:57.281"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:37:57.283" starttime="20161110 23:37:57.282"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.286">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:57.286" starttime="20161110 23:37:57.285"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:57.288">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:37:57.288" starttime="20161110 23:37:57.287"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:57.288" starttime="20161110 23:37:57.287"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:57.288" starttime="20161110 23:37:57.283"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:57.290">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:37:57.290" starttime="20161110 23:37:57.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.291">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:37:57.291" starttime="20161110 23:37:57.291"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.291">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:37:57.291" starttime="20161110 23:37:57.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.292">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:37:57.292" starttime="20161110 23:37:57.292"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:37:57.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:37:57.622">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:37:57.622" starttime="20161110 23:37:57.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:37:57.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:37:57.623" starttime="20161110 23:37:57.622"></status>
</kw>
<status status="PASS" endtime="20161110 23:37:57.623" starttime="20161110 23:37:57.288"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:00.092">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:00.092">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:00.092" starttime="20161110 23:37:57.623"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:00.094">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:00.094" starttime="20161110 23:38:00.093"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:00.096">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:00.096" starttime="20161110 23:38:00.096"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:00.096" starttime="20161110 23:38:00.094"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:00.096" starttime="20161110 23:38:00.092"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:00.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:00.097" starttime="20161110 23:37:57.278"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:00.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:00.097" starttime="20161110 23:37:57.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:00.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:00.099" starttime="20161110 23:38:00.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:00.099">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:38:00.099">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:38:00.100">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:38:00.100" starttime="20161110 23:38:00.099"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:00.100">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:38:00.100" starttime="20161110 23:37:57.274"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:38:00.101">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:38:00.101" starttime="20161110 23:38:00.101"></status>
</kw>
<status status="FAIL" endtime="20161110 23:38:00.102" starttime="20161110 23:37:57.273"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.103">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:38:10.103" starttime="20161110 23:38:10.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.104">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:38:10.104" starttime="20161110 23:38:10.103"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.105">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:38:10.105" starttime="20161110 23:38:10.105"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.107">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:38:10.107" starttime="20161110 23:38:10.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:10.108" starttime="20161110 23:38:10.107"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:38:10.108" starttime="20161110 23:38:10.108"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.110">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:10.110" starttime="20161110 23:38:10.109"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:10.112">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:10.112" starttime="20161110 23:38:10.111"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:10.112" starttime="20161110 23:38:10.110"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:10.112" starttime="20161110 23:38:10.108"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:10.113">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:38:10.114" starttime="20161110 23:38:10.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:10.114" starttime="20161110 23:38:10.114"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.115">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:38:10.115" starttime="20161110 23:38:10.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.116">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:38:10.116" starttime="20161110 23:38:10.116"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:10.446">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:10.446" starttime="20161110 23:38:10.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:10.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:10.447" starttime="20161110 23:38:10.446"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:10.447" starttime="20161110 23:38:10.112"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.729">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:10.729">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:10.729" starttime="20161110 23:38:10.448"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.731">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:10.731" starttime="20161110 23:38:10.730"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:10.732">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:10.732" starttime="20161110 23:38:10.732"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:10.733" starttime="20161110 23:38:10.731"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:10.733" starttime="20161110 23:38:10.729"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:10.733">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:10.733" starttime="20161110 23:38:10.105"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:10.733">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:10.733" starttime="20161110 23:38:10.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:10.735">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:10.735" starttime="20161110 23:38:10.734"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:10.736">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:38:10.736">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:38:10.736">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:38:10.736" starttime="20161110 23:38:10.735"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:10.737">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:38:10.737" starttime="20161110 23:38:10.103"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:38:10.737">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:38:10.738" starttime="20161110 23:38:10.737"></status>
</kw>
<status status="FAIL" endtime="20161110 23:38:10.738" starttime="20161110 23:38:10.102"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.740">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:38:20.741" starttime="20161110 23:38:20.740"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.742">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:38:20.742" starttime="20161110 23:38:20.741"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.743">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:38:20.743" starttime="20161110 23:38:20.743"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.746">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:38:20.746" starttime="20161110 23:38:20.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.747">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:20.747" starttime="20161110 23:38:20.746"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:38:20.748" starttime="20161110 23:38:20.747"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.752">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:20.752" starttime="20161110 23:38:20.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:20.753">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:20.753" starttime="20161110 23:38:20.752"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:20.753" starttime="20161110 23:38:20.752"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:20.753" starttime="20161110 23:38:20.748"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:20.754">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:38:20.754" starttime="20161110 23:38:20.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.755">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:20.755" starttime="20161110 23:38:20.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.755">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:38:20.755" starttime="20161110 23:38:20.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:20.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:38:20.756" starttime="20161110 23:38:20.756"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:21.094">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:21.094">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:21.094" starttime="20161110 23:38:20.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:21.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:21.096" starttime="20161110 23:38:21.095"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:21.096" starttime="20161110 23:38:20.753"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:21.374">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:21.374">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:21.375" starttime="20161110 23:38:21.096"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:21.377">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:21.377" starttime="20161110 23:38:21.376"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:21.378">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:21.379" starttime="20161110 23:38:21.378"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:21.379" starttime="20161110 23:38:21.377"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:21.379" starttime="20161110 23:38:21.375"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:21.379">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:21.379" starttime="20161110 23:38:20.744"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:21.380">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:21.380" starttime="20161110 23:38:20.742"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:21.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:21.381" starttime="20161110 23:38:21.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:21.381">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:38:21.381">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:38:21.382">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:38:21.382" starttime="20161110 23:38:21.381"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:21.382">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:38:21.382" starttime="20161110 23:38:20.739"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:38:21.382">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:38:21.383" starttime="20161110 23:38:21.382"></status>
</kw>
<status status="FAIL" endtime="20161110 23:38:21.383" starttime="20161110 23:38:20.738"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.386">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:38:31.386" starttime="20161110 23:38:31.385"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.387">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:38:31.387" starttime="20161110 23:38:31.386"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.390">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:38:31.390" starttime="20161110 23:38:31.389"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.392">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:38:31.392" starttime="20161110 23:38:31.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.393">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:31.393" starttime="20161110 23:38:31.392"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:38:31.394" starttime="20161110 23:38:31.393"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.396">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:31.396" starttime="20161110 23:38:31.395"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:31.397">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:31.397" starttime="20161110 23:38:31.397"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:31.397" starttime="20161110 23:38:31.396"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:31.397" starttime="20161110 23:38:31.394"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:31.398">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:38:31.399" starttime="20161110 23:38:31.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.399">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:31.399" starttime="20161110 23:38:31.399"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.400">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:38:31.400" starttime="20161110 23:38:31.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.400">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:38:31.400" starttime="20161110 23:38:31.400"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:31.729">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:31.730">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:31.730" starttime="20161110 23:38:31.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:31.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:31.731" starttime="20161110 23:38:31.730"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:31.731" starttime="20161110 23:38:31.397"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:32.017">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:32.017">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:32.017" starttime="20161110 23:38:31.731"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:32.018">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:32.018" starttime="20161110 23:38:32.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:32.019">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:32.019" starttime="20161110 23:38:32.019"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:32.019" starttime="20161110 23:38:32.019"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:32.019" starttime="20161110 23:38:32.017"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:32.020">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:32.020" starttime="20161110 23:38:31.390"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:32.020">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:32.020" starttime="20161110 23:38:31.388"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:32.020">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:32.021" starttime="20161110 23:38:32.020"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:32.021">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:38:32.021">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:38:32.021">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:38:32.021" starttime="20161110 23:38:32.021"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:32.022">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:38:32.022" starttime="20161110 23:38:31.384"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:38:32.022">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:38:32.022" starttime="20161110 23:38:32.022"></status>
</kw>
<status status="FAIL" endtime="20161110 23:38:32.022" starttime="20161110 23:38:31.383"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.025">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:38:42.025" starttime="20161110 23:38:42.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.026">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:38:42.026" starttime="20161110 23:38:42.025"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.027">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:38:42.028" starttime="20161110 23:38:42.027"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.030">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:38:42.030" starttime="20161110 23:38:42.029"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:42.030" starttime="20161110 23:38:42.030"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:38:42.032" starttime="20161110 23:38:42.031"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.034">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:42.034" starttime="20161110 23:38:42.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:42.036">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:42.036" starttime="20161110 23:38:42.035"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:42.036" starttime="20161110 23:38:42.034"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:42.036" starttime="20161110 23:38:42.032"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:42.038">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:38:42.038" starttime="20161110 23:38:42.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.039">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:42.039" starttime="20161110 23:38:42.039"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.040">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:38:42.040" starttime="20161110 23:38:42.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.041">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:38:42.041" starttime="20161110 23:38:42.040"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:42.374">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:42.374">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:42.374" starttime="20161110 23:38:42.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:42.376">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:42.376" starttime="20161110 23:38:42.375"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:42.376" starttime="20161110 23:38:42.037"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:45.178">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:45.178">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:45.178" starttime="20161110 23:38:42.376"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:45.180">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:45.181" starttime="20161110 23:38:45.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:45.182">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:45.182" starttime="20161110 23:38:45.182"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:45.182" starttime="20161110 23:38:45.181"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:45.183" starttime="20161110 23:38:45.179"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:45.183">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:45.183" starttime="20161110 23:38:42.028"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:45.183">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:45.183" starttime="20161110 23:38:42.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:45.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:45.185" starttime="20161110 23:38:45.184"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:45.185">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:38:45.185">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:38:45.186">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:38:45.186" starttime="20161110 23:38:45.185"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:45.186">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:38:45.186" starttime="20161110 23:38:42.024"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:38:45.187">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:38:45.188" starttime="20161110 23:38:45.186"></status>
</kw>
<status status="FAIL" endtime="20161110 23:38:45.188" starttime="20161110 23:38:42.023"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.190">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:38:55.190" starttime="20161110 23:38:55.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.191">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:38:55.191" starttime="20161110 23:38:55.190"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.193">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:38:55.193" starttime="20161110 23:38:55.193"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.195">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:38:55.195" starttime="20161110 23:38:55.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:55.195" starttime="20161110 23:38:55.195"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:38:55.196" starttime="20161110 23:38:55.195"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.197">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:55.197" starttime="20161110 23:38:55.196"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:55.198">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:38:55.198" starttime="20161110 23:38:55.197"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:55.198" starttime="20161110 23:38:55.197"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:55.198" starttime="20161110 23:38:55.196"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:55.199">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:38:55.199" starttime="20161110 23:38:55.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:38:55.200" starttime="20161110 23:38:55.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.200">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:38:55.200" starttime="20161110 23:38:55.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.201">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:38:55.201" starttime="20161110 23:38:55.200"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.549">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:55.550">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:55.550" starttime="20161110 23:38:55.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:55.551">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:55.551" starttime="20161110 23:38:55.550"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:55.551" starttime="20161110 23:38:55.198"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.833">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:38:55.833">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:55.833" starttime="20161110 23:38:55.552"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.835">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:55.835" starttime="20161110 23:38:55.834"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:55.837">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:38:55.837" starttime="20161110 23:38:55.836"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:55.837" starttime="20161110 23:38:55.836"></status>
</kw>
<status status="PASS" endtime="20161110 23:38:55.837" starttime="20161110 23:38:55.834"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:55.838">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:55.838" starttime="20161110 23:38:55.194"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:55.838">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:38:55.838" starttime="20161110 23:38:55.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:38:55.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:38:55.840" starttime="20161110 23:38:55.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:38:55.841">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:38:55.841">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:38:55.842">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:38:55.842" starttime="20161110 23:38:55.840"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:38:55.842">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:38:55.842" starttime="20161110 23:38:55.190"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:38:55.844">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:38:55.844" starttime="20161110 23:38:55.843"></status>
</kw>
<status status="FAIL" endtime="20161110 23:38:55.844" starttime="20161110 23:38:55.189"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.847">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:39:05.847" starttime="20161110 23:39:05.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.848">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:39:05.848" starttime="20161110 23:39:05.847"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.850">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:39:05.850" starttime="20161110 23:39:05.849"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.852">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:39:05.852" starttime="20161110 23:39:05.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:05.853" starttime="20161110 23:39:05.852"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:39:05.854" starttime="20161110 23:39:05.853"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.856">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:05.856" starttime="20161110 23:39:05.855"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:05.858">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:05.858" starttime="20161110 23:39:05.857"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:05.858" starttime="20161110 23:39:05.856"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:05.859" starttime="20161110 23:39:05.854"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:05.860">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:39:05.861" starttime="20161110 23:39:05.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.862">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:05.862" starttime="20161110 23:39:05.862"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.863">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:39:05.863" starttime="20161110 23:39:05.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:05.863">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:39:05.863" starttime="20161110 23:39:05.863"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:06.194">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:06.194">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:06.194" starttime="20161110 23:39:05.864"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:06.195">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:06.196" starttime="20161110 23:39:06.195"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:06.196" starttime="20161110 23:39:05.859"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:06.485">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:06.485">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:06.485" starttime="20161110 23:39:06.196"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:06.487">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:06.487" starttime="20161110 23:39:06.486"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:06.489">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:06.489" starttime="20161110 23:39:06.488"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:06.489" starttime="20161110 23:39:06.488"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:06.489" starttime="20161110 23:39:06.486"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:06.490">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:06.490" starttime="20161110 23:39:05.850"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:06.490">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:06.490" starttime="20161110 23:39:05.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:06.491">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:06.491" starttime="20161110 23:39:06.490"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:06.492">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:39:06.492">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:39:06.492">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:39:06.492" starttime="20161110 23:39:06.491"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:06.493">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:39:06.493" starttime="20161110 23:39:05.845"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:39:06.493">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:39:06.494" starttime="20161110 23:39:06.493"></status>
</kw>
<status status="FAIL" endtime="20161110 23:39:06.494" starttime="20161110 23:39:05.845"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.496">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:39:16.496" starttime="20161110 23:39:16.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.497">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:39:16.497" starttime="20161110 23:39:16.497"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.499">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:39:16.499" starttime="20161110 23:39:16.499"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.501">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:39:16.501" starttime="20161110 23:39:16.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.502">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:16.502" starttime="20161110 23:39:16.502"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:39:16.503" starttime="20161110 23:39:16.503"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.506">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:16.506" starttime="20161110 23:39:16.505"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:16.508">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:16.508" starttime="20161110 23:39:16.507"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:16.508" starttime="20161110 23:39:16.507"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:16.508" starttime="20161110 23:39:16.504"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:16.510">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:39:16.510" starttime="20161110 23:39:16.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.511">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:16.511" starttime="20161110 23:39:16.511"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.512">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:39:16.512" starttime="20161110 23:39:16.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:16.513">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:39:16.513" starttime="20161110 23:39:16.513"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:19.850">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:19.850">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:19.850" starttime="20161110 23:39:16.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:19.850">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:19.850" starttime="20161110 23:39:19.850"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:19.851" starttime="20161110 23:39:16.509"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:20.133">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:20.134">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:20.134" starttime="20161110 23:39:19.851"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:20.135">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:20.135" starttime="20161110 23:39:20.135"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:20.137">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:20.137" starttime="20161110 23:39:20.136"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:20.137" starttime="20161110 23:39:20.136"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:20.137" starttime="20161110 23:39:20.134"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:20.138">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:20.138" starttime="20161110 23:39:16.499"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:20.138">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:20.138" starttime="20161110 23:39:16.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:20.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:20.139" starttime="20161110 23:39:20.138"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:20.140">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:39:20.140">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:39:20.140">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:39:20.140" starttime="20161110 23:39:20.140"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:20.141">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:39:20.141" starttime="20161110 23:39:16.495"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:39:20.141">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:39:20.142" starttime="20161110 23:39:20.141"></status>
</kw>
<status status="FAIL" endtime="20161110 23:39:20.142" starttime="20161110 23:39:16.494"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.144">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:39:30.144" starttime="20161110 23:39:30.144"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.145">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:39:30.145" starttime="20161110 23:39:30.145"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.147">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:39:30.147" starttime="20161110 23:39:30.147"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.149">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:39:30.149" starttime="20161110 23:39:30.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:30.150" starttime="20161110 23:39:30.150"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:39:30.151" starttime="20161110 23:39:30.151"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.153">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:30.154" starttime="20161110 23:39:30.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:30.155">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:30.156" starttime="20161110 23:39:30.155"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:30.156" starttime="20161110 23:39:30.154"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:30.156" starttime="20161110 23:39:30.151"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:30.158">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:39:30.158" starttime="20161110 23:39:30.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.159">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:30.159" starttime="20161110 23:39:30.158"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.160">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:39:30.160" starttime="20161110 23:39:30.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:39:30.161" starttime="20161110 23:39:30.160"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:30.488">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:30.488" starttime="20161110 23:39:30.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:30.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:30.489" starttime="20161110 23:39:30.488"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:30.489" starttime="20161110 23:39:30.156"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.773">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:30.773">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:30.773" starttime="20161110 23:39:30.489"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.775">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:30.775" starttime="20161110 23:39:30.774"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:30.775">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:30.776" starttime="20161110 23:39:30.775"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:30.776" starttime="20161110 23:39:30.775"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:30.776" starttime="20161110 23:39:30.774"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:30.776">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:30.776" starttime="20161110 23:39:30.147"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:30.776">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:30.776" starttime="20161110 23:39:30.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:30.777">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:30.777" starttime="20161110 23:39:30.776"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:30.777">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:39:30.777">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:39:30.777">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:39:30.777" starttime="20161110 23:39:30.777"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:30.778">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:39:30.778" starttime="20161110 23:39:30.143"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:39:30.778">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:39:30.778" starttime="20161110 23:39:30.778"></status>
</kw>
<status status="FAIL" endtime="20161110 23:39:30.778" starttime="20161110 23:39:30.142"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.781">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:39:40.781" starttime="20161110 23:39:40.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.782">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:39:40.782" starttime="20161110 23:39:40.781"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.784">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:39:40.784" starttime="20161110 23:39:40.783"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.786">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:39:40.786" starttime="20161110 23:39:40.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:40.787" starttime="20161110 23:39:40.786"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:39:40.788" starttime="20161110 23:39:40.787"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.791">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:40.791" starttime="20161110 23:39:40.789"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:40.792">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:40.792" starttime="20161110 23:39:40.792"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:40.793" starttime="20161110 23:39:40.791"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:40.793" starttime="20161110 23:39:40.788"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:40.793">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:39:40.794" starttime="20161110 23:39:40.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:40.794" starttime="20161110 23:39:40.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.795">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:39:40.795" starttime="20161110 23:39:40.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:40.795">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:39:40.795" starttime="20161110 23:39:40.795"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:44.067">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:44.067">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:44.067" starttime="20161110 23:39:40.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:44.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:44.069" starttime="20161110 23:39:44.068"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:44.069" starttime="20161110 23:39:40.793"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:44.343">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:44.343">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:44.343" starttime="20161110 23:39:44.070"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:44.345">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:44.345" starttime="20161110 23:39:44.344"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:44.346">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:44.347" starttime="20161110 23:39:44.346"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:44.347" starttime="20161110 23:39:44.345"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:44.347" starttime="20161110 23:39:44.344"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:44.347">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:44.347" starttime="20161110 23:39:40.784"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:44.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:44.348" starttime="20161110 23:39:40.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:44.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:44.349" starttime="20161110 23:39:44.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:44.350">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:39:44.350">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:39:44.350">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:39:44.350" starttime="20161110 23:39:44.349"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:44.350">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:39:44.350" starttime="20161110 23:39:40.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:39:44.351">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:39:44.351" starttime="20161110 23:39:44.351"></status>
</kw>
<status status="FAIL" endtime="20161110 23:39:44.352" starttime="20161110 23:39:40.779"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.354">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:39:54.355" starttime="20161110 23:39:54.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.356">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:39:54.356" starttime="20161110 23:39:54.355"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.358">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:39:54.358" starttime="20161110 23:39:54.357"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.360">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:39:54.360" starttime="20161110 23:39:54.359"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.361">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:54.361" starttime="20161110 23:39:54.360"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:39:54.362" starttime="20161110 23:39:54.361"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.364">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:54.364" starttime="20161110 23:39:54.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:54.365">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:39:54.365" starttime="20161110 23:39:54.365"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:54.366" starttime="20161110 23:39:54.364"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:54.366" starttime="20161110 23:39:54.362"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:54.368">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:39:54.369" starttime="20161110 23:39:54.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.370">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:39:54.370" starttime="20161110 23:39:54.369"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.371">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:39:54.371" starttime="20161110 23:39:54.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.372">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:39:54.372" starttime="20161110 23:39:54.371"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.698">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:54.698">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:54.698" starttime="20161110 23:39:54.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:54.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:54.699" starttime="20161110 23:39:54.698"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:54.699" starttime="20161110 23:39:54.366"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.985">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:39:54.985">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:54.985" starttime="20161110 23:39:54.699"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.986">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:54.986" starttime="20161110 23:39:54.986"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:54.987">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:39:54.987" starttime="20161110 23:39:54.987"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:54.987" starttime="20161110 23:39:54.987"></status>
</kw>
<status status="PASS" endtime="20161110 23:39:54.988" starttime="20161110 23:39:54.985"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:54.988">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:54.988" starttime="20161110 23:39:54.358"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:54.988">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:39:54.988" starttime="20161110 23:39:54.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:39:54.988">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:39:54.989" starttime="20161110 23:39:54.988"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:39:54.989">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:39:54.989">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:39:54.989">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:39:54.989" starttime="20161110 23:39:54.989"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:39:54.989">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:39:54.989" starttime="20161110 23:39:54.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:39:54.990">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:39:54.990" starttime="20161110 23:39:54.990"></status>
</kw>
<status status="FAIL" endtime="20161110 23:39:54.990" starttime="20161110 23:39:54.352"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:04.993">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:40:04.993" starttime="20161110 23:40:04.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:04.993">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:40:04.994" starttime="20161110 23:40:04.993"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:04.995">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:40:04.995" starttime="20161110 23:40:04.995"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:04.997">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:40:04.997" starttime="20161110 23:40:04.996"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:04.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:04.998" starttime="20161110 23:40:04.997"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:40:04.998" starttime="20161110 23:40:04.998"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:05.001">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:05.001" starttime="20161110 23:40:05.000"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:05.002">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:05.003" starttime="20161110 23:40:05.002"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:05.003" starttime="20161110 23:40:05.001"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:05.003" starttime="20161110 23:40:04.999"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:05.004">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:40:05.004" starttime="20161110 23:40:05.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:05.004">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:05.005" starttime="20161110 23:40:05.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:05.005">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:40:05.005" starttime="20161110 23:40:05.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:05.006">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:40:05.006" starttime="20161110 23:40:05.005"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:08.329">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:08.329">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:08.329" starttime="20161110 23:40:05.006"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:08.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:08.331" starttime="20161110 23:40:08.330"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:08.331" starttime="20161110 23:40:05.003"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:08.606">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:08.606">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:08.606" starttime="20161110 23:40:08.331"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:08.608">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:08.608" starttime="20161110 23:40:08.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:08.609">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:08.609" starttime="20161110 23:40:08.609"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:08.610" starttime="20161110 23:40:08.608"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:08.610" starttime="20161110 23:40:08.606"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:08.610">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:08.610" starttime="20161110 23:40:04.995"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:08.610">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:08.610" starttime="20161110 23:40:04.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:08.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:08.611" starttime="20161110 23:40:08.611"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:08.612">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:40:08.612">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:40:08.612">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:40:08.612" starttime="20161110 23:40:08.612"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:08.613">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:40:08.613" starttime="20161110 23:40:04.992"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:40:08.614">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:40:08.614" starttime="20161110 23:40:08.613"></status>
</kw>
<status status="FAIL" endtime="20161110 23:40:08.614" starttime="20161110 23:40:04.991"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.616">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:40:18.616" starttime="20161110 23:40:18.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.617">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:40:18.617" starttime="20161110 23:40:18.617"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.620">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:40:18.620" starttime="20161110 23:40:18.619"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.622">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:40:18.622" starttime="20161110 23:40:18.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:18.623" starttime="20161110 23:40:18.622"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:40:18.624" starttime="20161110 23:40:18.623"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.627">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:18.627" starttime="20161110 23:40:18.625"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:18.628">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:18.628" starttime="20161110 23:40:18.628"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:18.629" starttime="20161110 23:40:18.627"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:18.629" starttime="20161110 23:40:18.624"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:18.630">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:40:18.631" starttime="20161110 23:40:18.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.632">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:18.632" starttime="20161110 23:40:18.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.632">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:40:18.633" starttime="20161110 23:40:18.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.633">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:40:18.633" starttime="20161110 23:40:18.633"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:18.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:18.958">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:18.958" starttime="20161110 23:40:18.633"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:18.959">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:18.959" starttime="20161110 23:40:18.958"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:18.959" starttime="20161110 23:40:18.629"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:19.238">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:19.238">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:19.238" starttime="20161110 23:40:18.959"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:19.240">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:19.240" starttime="20161110 23:40:19.239"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:19.241">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:19.241" starttime="20161110 23:40:19.241"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:19.242" starttime="20161110 23:40:19.240"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:19.242" starttime="20161110 23:40:19.238"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:19.242">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:19.242" starttime="20161110 23:40:18.620"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:19.243">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:19.243" starttime="20161110 23:40:18.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:19.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:19.244" starttime="20161110 23:40:19.243"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:19.244">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:40:19.244">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:40:19.245">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:40:19.245" starttime="20161110 23:40:19.244"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:19.245">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:40:19.245" starttime="20161110 23:40:18.615"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:40:19.246">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:40:19.246" starttime="20161110 23:40:19.245"></status>
</kw>
<status status="FAIL" endtime="20161110 23:40:19.246" starttime="20161110 23:40:18.614"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.249">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:40:29.249" starttime="20161110 23:40:29.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.250">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:40:29.250" starttime="20161110 23:40:29.249"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.251">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:40:29.251" starttime="20161110 23:40:29.251"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.253">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:40:29.254" starttime="20161110 23:40:29.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.254">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:29.254" starttime="20161110 23:40:29.254"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:40:29.255" starttime="20161110 23:40:29.255"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.257">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:29.257" starttime="20161110 23:40:29.256"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:29.259">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:29.259" starttime="20161110 23:40:29.258"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:29.259" starttime="20161110 23:40:29.258"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:29.259" starttime="20161110 23:40:29.255"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:29.261">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:40:29.263" starttime="20161110 23:40:29.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.264">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:29.264" starttime="20161110 23:40:29.263"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.264">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:40:29.264" starttime="20161110 23:40:29.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.265">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:40:29.265" starttime="20161110 23:40:29.265"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:29.598">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:29.598">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:29.598" starttime="20161110 23:40:29.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:29.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:29.599" starttime="20161110 23:40:29.598"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:29.599" starttime="20161110 23:40:29.260"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:32.917">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:32.917">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:32.917" starttime="20161110 23:40:29.599"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:32.919">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:32.919" starttime="20161110 23:40:32.918"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:32.921">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:32.921" starttime="20161110 23:40:32.920"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:32.921" starttime="20161110 23:40:32.920"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:32.921" starttime="20161110 23:40:32.918"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:32.921">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:32.922" starttime="20161110 23:40:29.252"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:32.922">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:32.922" starttime="20161110 23:40:29.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:32.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:32.923" starttime="20161110 23:40:32.922"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:32.924">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:40:32.924">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:40:32.924">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:40:32.924" starttime="20161110 23:40:32.923"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:32.925">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:40:32.925" starttime="20161110 23:40:29.248"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:40:32.925">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:40:32.926" starttime="20161110 23:40:32.925"></status>
</kw>
<status status="FAIL" endtime="20161110 23:40:32.926" starttime="20161110 23:40:29.247"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.928">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:40:42.928" starttime="20161110 23:40:42.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.929">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:40:42.929" starttime="20161110 23:40:42.929"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.931">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:40:42.931" starttime="20161110 23:40:42.930"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.933">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:40:42.933" starttime="20161110 23:40:42.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.934">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:42.934" starttime="20161110 23:40:42.934"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:40:42.959" starttime="20161110 23:40:42.935"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.961">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:42.961" starttime="20161110 23:40:42.960"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:42.962">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:42.962" starttime="20161110 23:40:42.962"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:42.962" starttime="20161110 23:40:42.962"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:42.963" starttime="20161110 23:40:42.959"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:42.963">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:40:42.964" starttime="20161110 23:40:42.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.964">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:42.964" starttime="20161110 23:40:42.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.965">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:40:42.965" starttime="20161110 23:40:42.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:42.965">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:40:42.965" starttime="20161110 23:40:42.965"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:43.353">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:43.354">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:43.354" starttime="20161110 23:40:42.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:43.355">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:43.355" starttime="20161110 23:40:43.354"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:43.355" starttime="20161110 23:40:42.963"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:43.634">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:43.634">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:43.635" starttime="20161110 23:40:43.355"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:43.636">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:43.636" starttime="20161110 23:40:43.636"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:43.638">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:43.638" starttime="20161110 23:40:43.637"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:43.638" starttime="20161110 23:40:43.637"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:43.638" starttime="20161110 23:40:43.635"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:43.639">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:43.639" starttime="20161110 23:40:42.931"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:43.639">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:43.639" starttime="20161110 23:40:42.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:43.640">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:43.640" starttime="20161110 23:40:43.639"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:43.641">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:40:43.641">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:40:43.641">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:40:43.641" starttime="20161110 23:40:43.640"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:43.641">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:40:43.642" starttime="20161110 23:40:42.927"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:40:43.642">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:40:43.643" starttime="20161110 23:40:43.642"></status>
</kw>
<status status="FAIL" endtime="20161110 23:40:43.643" starttime="20161110 23:40:42.926"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.645">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:40:53.645" starttime="20161110 23:40:53.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.646">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:40:53.646" starttime="20161110 23:40:53.645"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.648">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:40:53.648" starttime="20161110 23:40:53.647"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.650">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:40:53.650" starttime="20161110 23:40:53.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:53.651" starttime="20161110 23:40:53.650"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:40:53.651" starttime="20161110 23:40:53.651"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.654">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:53.654" starttime="20161110 23:40:53.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:53.655">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:40:53.656" starttime="20161110 23:40:53.655"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:53.656" starttime="20161110 23:40:53.654"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:53.656" starttime="20161110 23:40:53.652"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:53.658">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:40:53.659" starttime="20161110 23:40:53.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:40:53.659" starttime="20161110 23:40:53.659"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.660">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:40:53.660" starttime="20161110 23:40:53.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:40:53.661" starttime="20161110 23:40:53.661"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:53.990">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:53.991">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:53.991" starttime="20161110 23:40:53.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:53.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:53.991" starttime="20161110 23:40:53.991"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:53.992" starttime="20161110 23:40:53.656"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:54.282">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:40:54.282">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:54.282" starttime="20161110 23:40:53.992"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:54.284">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:54.284" starttime="20161110 23:40:54.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:54.285">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:40:54.285" starttime="20161110 23:40:54.285"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:54.286" starttime="20161110 23:40:54.284"></status>
</kw>
<status status="PASS" endtime="20161110 23:40:54.286" starttime="20161110 23:40:54.282"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:54.286">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:54.286" starttime="20161110 23:40:53.648"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:54.286">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:40:54.287" starttime="20161110 23:40:53.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:40:54.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:40:54.288" starttime="20161110 23:40:54.287"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:40:54.288">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:40:54.289">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:40:54.289">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:40:54.289" starttime="20161110 23:40:54.288"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:40:54.289">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:40:54.289" starttime="20161110 23:40:53.644"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:40:54.290">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:40:54.290" starttime="20161110 23:40:54.290"></status>
</kw>
<status status="FAIL" endtime="20161110 23:40:54.290" starttime="20161110 23:40:53.643"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.293">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:41:04.293" starttime="20161110 23:41:04.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.295">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:41:04.295" starttime="20161110 23:41:04.294"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.297">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:41:04.297" starttime="20161110 23:41:04.296"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.300">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:41:04.301" starttime="20161110 23:41:04.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.302">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:04.302" starttime="20161110 23:41:04.301"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:41:04.303" starttime="20161110 23:41:04.302"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.304">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:04.305" starttime="20161110 23:41:04.304"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:04.306">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:04.306" starttime="20161110 23:41:04.305"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:04.306" starttime="20161110 23:41:04.305"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:04.306" starttime="20161110 23:41:04.303"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:04.307">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:41:04.307" starttime="20161110 23:41:04.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.308">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:04.308" starttime="20161110 23:41:04.307"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.308">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:41:04.308" starttime="20161110 23:41:04.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.309">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:41:04.309" starttime="20161110 23:41:04.308"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:04.640">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:04.641" starttime="20161110 23:41:04.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:04.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:04.641" starttime="20161110 23:41:04.641"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:04.641" starttime="20161110 23:41:04.306"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.922">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:04.922">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:04.922" starttime="20161110 23:41:04.642"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.923">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:04.923" starttime="20161110 23:41:04.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:04.924">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:04.924" starttime="20161110 23:41:04.924"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:04.925" starttime="20161110 23:41:04.923"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:04.925" starttime="20161110 23:41:04.922"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:04.925">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:04.925" starttime="20161110 23:41:04.298"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:04.925">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:04.925" starttime="20161110 23:41:04.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:04.926">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:04.926" starttime="20161110 23:41:04.925"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:04.926">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:41:04.926">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:41:04.926">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:41:04.926" starttime="20161110 23:41:04.926"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:04.927">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:41:04.927" starttime="20161110 23:41:04.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:41:04.927">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:41:04.927" starttime="20161110 23:41:04.927"></status>
</kw>
<status status="FAIL" endtime="20161110 23:41:04.927" starttime="20161110 23:41:04.291"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.930">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:41:14.930" starttime="20161110 23:41:14.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.931">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:41:14.931" starttime="20161110 23:41:14.931"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.933">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:41:14.933" starttime="20161110 23:41:14.932"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.935">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:41:14.935" starttime="20161110 23:41:14.934"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:14.936" starttime="20161110 23:41:14.935"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:41:14.937" starttime="20161110 23:41:14.936"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.939">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:14.939" starttime="20161110 23:41:14.938"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:14.940">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:14.940" starttime="20161110 23:41:14.940"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:14.941" starttime="20161110 23:41:14.939"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:14.941" starttime="20161110 23:41:14.937"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:14.942">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:41:14.943" starttime="20161110 23:41:14.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.943">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:14.943" starttime="20161110 23:41:14.943"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.944">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:41:14.944" starttime="20161110 23:41:14.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:14.944">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:41:14.944" starttime="20161110 23:41:14.944"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:15.274">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:15.275">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:15.275" starttime="20161110 23:41:14.945"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:15.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:15.275" starttime="20161110 23:41:15.275"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:15.275" starttime="20161110 23:41:14.941"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:15.563">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:15.563">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:15.563" starttime="20161110 23:41:15.276"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:15.565">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:15.565" starttime="20161110 23:41:15.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:15.565">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:15.565" starttime="20161110 23:41:15.565"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:15.566" starttime="20161110 23:41:15.565"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:15.566" starttime="20161110 23:41:15.564"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:15.566">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:15.566" starttime="20161110 23:41:14.933"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:15.566">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:15.566" starttime="20161110 23:41:14.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:15.567">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:15.567" starttime="20161110 23:41:15.566"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:15.567">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:41:15.567">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:41:15.567">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:41:15.567" starttime="20161110 23:41:15.567"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:15.568">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:41:15.568" starttime="20161110 23:41:14.929"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:41:15.568">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:41:15.568" starttime="20161110 23:41:15.568"></status>
</kw>
<status status="FAIL" endtime="20161110 23:41:15.568" starttime="20161110 23:41:14.928"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.571">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:41:25.571" starttime="20161110 23:41:25.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.572">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:41:25.572" starttime="20161110 23:41:25.571"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.574">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:41:25.574" starttime="20161110 23:41:25.573"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.576">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:41:25.576" starttime="20161110 23:41:25.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.577">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:25.577" starttime="20161110 23:41:25.576"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:41:25.577" starttime="20161110 23:41:25.577"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.580">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:25.580" starttime="20161110 23:41:25.579"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:25.582">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:25.582" starttime="20161110 23:41:25.581"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:25.582" starttime="20161110 23:41:25.581"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:25.582" starttime="20161110 23:41:25.578"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:25.583">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:41:25.583" starttime="20161110 23:41:25.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.584">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:25.584" starttime="20161110 23:41:25.584"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.584">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:41:25.585" starttime="20161110 23:41:25.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.585">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:41:25.585" starttime="20161110 23:41:25.585"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:25.911">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:25.912">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:25.912" starttime="20161110 23:41:25.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:25.913">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:25.913" starttime="20161110 23:41:25.912"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:25.913" starttime="20161110 23:41:25.582"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:29.612">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:29.612">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:29.612" starttime="20161110 23:41:25.913"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:29.615">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:29.615" starttime="20161110 23:41:29.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:29.616">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:29.616" starttime="20161110 23:41:29.616"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:29.616" starttime="20161110 23:41:29.615"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:29.617" starttime="20161110 23:41:29.613"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:29.617">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:29.617" starttime="20161110 23:41:25.574"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:29.617">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:29.617" starttime="20161110 23:41:25.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:29.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:29.618" starttime="20161110 23:41:29.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:29.619">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:41:29.619">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:41:29.619">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:41:29.620" starttime="20161110 23:41:29.619"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:29.620">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:41:29.620" starttime="20161110 23:41:25.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:41:29.621">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:41:29.621" starttime="20161110 23:41:29.620"></status>
</kw>
<status status="FAIL" endtime="20161110 23:41:29.621" starttime="20161110 23:41:25.569"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.625">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:41:39.625" starttime="20161110 23:41:39.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.626">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:41:39.626" starttime="20161110 23:41:39.625"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.628">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:41:39.628" starttime="20161110 23:41:39.628"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.630">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:41:39.630" starttime="20161110 23:41:39.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:39.631" starttime="20161110 23:41:39.631"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:41:39.632" starttime="20161110 23:41:39.632"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.634">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:39.634" starttime="20161110 23:41:39.633"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:39.634">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:39.635" starttime="20161110 23:41:39.634"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:39.635" starttime="20161110 23:41:39.634"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:39.635" starttime="20161110 23:41:39.632"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:39.636">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:41:39.636" starttime="20161110 23:41:39.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.636">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:39.636" starttime="20161110 23:41:39.636"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.637">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:41:39.637" starttime="20161110 23:41:39.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.637">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:41:39.638" starttime="20161110 23:41:39.637"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:39.966">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:39.967">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:39.967" starttime="20161110 23:41:39.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:39.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:39.967" starttime="20161110 23:41:39.967"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:39.968" starttime="20161110 23:41:39.635"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:40.281">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:40.281">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:40.281" starttime="20161110 23:41:39.968"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:40.283">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:40.284" starttime="20161110 23:41:40.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:40.285">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:40.286" starttime="20161110 23:41:40.285"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:40.286" starttime="20161110 23:41:40.284"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:40.286" starttime="20161110 23:41:40.282"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:40.286">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:40.286" starttime="20161110 23:41:39.629"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:40.286">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:40.287" starttime="20161110 23:41:39.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:40.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:40.288" starttime="20161110 23:41:40.287"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:40.288">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:41:40.288">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:41:40.289">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:41:40.289" starttime="20161110 23:41:40.288"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:40.289">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:41:40.289" starttime="20161110 23:41:39.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:41:40.290">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:41:40.290" starttime="20161110 23:41:40.289"></status>
</kw>
<status status="FAIL" endtime="20161110 23:41:40.290" starttime="20161110 23:41:39.622"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.293">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:41:50.293" starttime="20161110 23:41:50.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.294">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:41:50.294" starttime="20161110 23:41:50.293"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.296">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:41:50.296" starttime="20161110 23:41:50.295"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.298">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:41:50.298" starttime="20161110 23:41:50.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.298">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:50.298" starttime="20161110 23:41:50.298"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:41:50.299" starttime="20161110 23:41:50.299"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.303">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:50.303" starttime="20161110 23:41:50.301"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:50.304">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:41:50.304" starttime="20161110 23:41:50.304"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:50.304" starttime="20161110 23:41:50.303"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:50.304" starttime="20161110 23:41:50.300"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:50.305">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:41:50.305" starttime="20161110 23:41:50.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.306">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:41:50.306" starttime="20161110 23:41:50.306"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.306">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:41:50.306" starttime="20161110 23:41:50.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.307">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:41:50.307" starttime="20161110 23:41:50.307"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.674">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:50.674">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:50.674" starttime="20161110 23:41:50.307"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:50.675">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:50.675" starttime="20161110 23:41:50.674"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:50.675" starttime="20161110 23:41:50.304"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.983">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:41:50.983">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:50.983" starttime="20161110 23:41:50.675"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.984">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:50.984" starttime="20161110 23:41:50.984"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:50.985">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:41:50.985" starttime="20161110 23:41:50.985"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:50.985" starttime="20161110 23:41:50.984"></status>
</kw>
<status status="PASS" endtime="20161110 23:41:50.985" starttime="20161110 23:41:50.983"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:50.985">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:50.985" starttime="20161110 23:41:50.296"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:50.986">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:41:50.986" starttime="20161110 23:41:50.294"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:41:50.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:41:50.986" starttime="20161110 23:41:50.986"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:41:50.987">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:41:50.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:41:50.987">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:41:50.987" starttime="20161110 23:41:50.987"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:41:50.987">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:41:50.987" starttime="20161110 23:41:50.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:41:50.988">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:41:50.988" starttime="20161110 23:41:50.987"></status>
</kw>
<status status="FAIL" endtime="20161110 23:41:50.988" starttime="20161110 23:41:50.291"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:00.990">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:42:00.991" starttime="20161110 23:42:00.990"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:00.992">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:42:00.992" starttime="20161110 23:42:00.991"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:00.994">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:42:00.994" starttime="20161110 23:42:00.993"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:00.996">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:42:00.996" starttime="20161110 23:42:00.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:00.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:00.997" starttime="20161110 23:42:00.996"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:42:00.998" starttime="20161110 23:42:00.997"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.000">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:01.000" starttime="20161110 23:42:00.999"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:01.002">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:01.002" starttime="20161110 23:42:01.001"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:01.002" starttime="20161110 23:42:01.000"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:01.002" starttime="20161110 23:42:00.998"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:01.003">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:42:01.003" starttime="20161110 23:42:01.003"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.004">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:01.004" starttime="20161110 23:42:01.004"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.004">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:42:01.005" starttime="20161110 23:42:01.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.005">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:42:01.005" starttime="20161110 23:42:01.005"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.330">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:01.331">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:01.331" starttime="20161110 23:42:01.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:01.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:01.331" starttime="20161110 23:42:01.331"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:01.332" starttime="20161110 23:42:01.002"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.695">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:01.696">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:01.696" starttime="20161110 23:42:01.332"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.697">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:01.697" starttime="20161110 23:42:01.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:01.698">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:01.698" starttime="20161110 23:42:01.698"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:01.698" starttime="20161110 23:42:01.697"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:01.698" starttime="20161110 23:42:01.696"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:01.699">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:01.699" starttime="20161110 23:42:00.994"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:01.699">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:01.699" starttime="20161110 23:42:00.992"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:01.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:01.700" starttime="20161110 23:42:01.699"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:01.700">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:42:01.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:42:01.700">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:42:01.700" starttime="20161110 23:42:01.700"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:01.700">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:42:01.700" starttime="20161110 23:42:00.989"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:42:01.701">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:42:01.701" starttime="20161110 23:42:01.701"></status>
</kw>
<status status="FAIL" endtime="20161110 23:42:01.701" starttime="20161110 23:42:00.989"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.703">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:42:11.704" starttime="20161110 23:42:11.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.704">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:42:11.705" starttime="20161110 23:42:11.704"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.706">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:42:11.706" starttime="20161110 23:42:11.706"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.708">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:42:11.708" starttime="20161110 23:42:11.708"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.709">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:11.709" starttime="20161110 23:42:11.709"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:42:11.710" starttime="20161110 23:42:11.709"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.712">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:11.713" starttime="20161110 23:42:11.711"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:11.713">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:11.714" starttime="20161110 23:42:11.713"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:11.714" starttime="20161110 23:42:11.713"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:11.714" starttime="20161110 23:42:11.710"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:11.715">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:42:11.716" starttime="20161110 23:42:11.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.717">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:11.717" starttime="20161110 23:42:11.717"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.717">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:42:11.717" starttime="20161110 23:42:11.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:11.718">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:42:11.718" starttime="20161110 23:42:11.718"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:12.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:12.059">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:12.059" starttime="20161110 23:42:11.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:12.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:12.060" starttime="20161110 23:42:12.059"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:12.060" starttime="20161110 23:42:11.714"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:12.366">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:12.366">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:12.366" starttime="20161110 23:42:12.060"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:12.368">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:12.368" starttime="20161110 23:42:12.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:12.370">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:12.370" starttime="20161110 23:42:12.369"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:12.370" starttime="20161110 23:42:12.369"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:12.370" starttime="20161110 23:42:12.367"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:12.371">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:12.371" starttime="20161110 23:42:11.706"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:12.371">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:12.371" starttime="20161110 23:42:11.705"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:12.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:12.372" starttime="20161110 23:42:12.371"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:12.373">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:42:12.373">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:42:12.373">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:42:12.373" starttime="20161110 23:42:12.372"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:12.374">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:42:12.374" starttime="20161110 23:42:11.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:42:12.374">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:42:12.375" starttime="20161110 23:42:12.374"></status>
</kw>
<status status="FAIL" endtime="20161110 23:42:12.375" starttime="20161110 23:42:11.702"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.377">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:42:22.377" starttime="20161110 23:42:22.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.378">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:42:22.378" starttime="20161110 23:42:22.378"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.380">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:42:22.380" starttime="20161110 23:42:22.380"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.382">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:42:22.382" starttime="20161110 23:42:22.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.383">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:22.383" starttime="20161110 23:42:22.383"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:42:22.385" starttime="20161110 23:42:22.384"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.387">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:22.387" starttime="20161110 23:42:22.386"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:22.388">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:22.388" starttime="20161110 23:42:22.388"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:22.389" starttime="20161110 23:42:22.387"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:22.389" starttime="20161110 23:42:22.385"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:22.390">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:42:22.391" starttime="20161110 23:42:22.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.392">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:22.392" starttime="20161110 23:42:22.391"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.393">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:42:22.393" starttime="20161110 23:42:22.392"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.393">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:42:22.393" starttime="20161110 23:42:22.393"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:22.726">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:22.727">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:22.727" starttime="20161110 23:42:22.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:22.727">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:22.727" starttime="20161110 23:42:22.727"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:22.728" starttime="20161110 23:42:22.389"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:23.032">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:23.032">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:23.032" starttime="20161110 23:42:22.728"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:23.033">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:23.033" starttime="20161110 23:42:23.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:23.034">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:23.034" starttime="20161110 23:42:23.034"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:23.034" starttime="20161110 23:42:23.033"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:23.034" starttime="20161110 23:42:23.032"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:23.035">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:23.035" starttime="20161110 23:42:22.380"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:23.035">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:23.035" starttime="20161110 23:42:22.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:23.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:23.035" starttime="20161110 23:42:23.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:23.036">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:42:23.036">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:42:23.036">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:42:23.036" starttime="20161110 23:42:23.036"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:23.036">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:42:23.036" starttime="20161110 23:42:22.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:42:23.037">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:42:23.037" starttime="20161110 23:42:23.036"></status>
</kw>
<status status="FAIL" endtime="20161110 23:42:23.037" starttime="20161110 23:42:22.375"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.040">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:42:33.040" starttime="20161110 23:42:33.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.041">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:42:33.041" starttime="20161110 23:42:33.040"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.042">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:42:33.043" starttime="20161110 23:42:33.042"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.045">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:42:33.045" starttime="20161110 23:42:33.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:33.046" starttime="20161110 23:42:33.045"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:42:33.046" starttime="20161110 23:42:33.046"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.049">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:33.049" starttime="20161110 23:42:33.048"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:33.050">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:33.050" starttime="20161110 23:42:33.050"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:33.051" starttime="20161110 23:42:33.049"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:33.051" starttime="20161110 23:42:33.047"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:33.052">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:42:33.053" starttime="20161110 23:42:33.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:33.053" starttime="20161110 23:42:33.053"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.054">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:42:33.054" starttime="20161110 23:42:33.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.054">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:42:33.054" starttime="20161110 23:42:33.054"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.394">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:33.394">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:33.394" starttime="20161110 23:42:33.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:33.395">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:33.395" starttime="20161110 23:42:33.394"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:33.395" starttime="20161110 23:42:33.051"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.713">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:33.713">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:33.713" starttime="20161110 23:42:33.396"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.715">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:33.715" starttime="20161110 23:42:33.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:33.716">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:33.716" starttime="20161110 23:42:33.716"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:33.717" starttime="20161110 23:42:33.715"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:33.717" starttime="20161110 23:42:33.713"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:33.717">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:33.717" starttime="20161110 23:42:33.043"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:33.717">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:33.717" starttime="20161110 23:42:33.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:33.718">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:33.718" starttime="20161110 23:42:33.718"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:33.719">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:42:33.719">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:42:33.720">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:42:33.720" starttime="20161110 23:42:33.719"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:33.720">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:42:33.720" starttime="20161110 23:42:33.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:42:33.721">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:42:33.721" starttime="20161110 23:42:33.721"></status>
</kw>
<status status="FAIL" endtime="20161110 23:42:33.722" starttime="20161110 23:42:33.038"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.724">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:42:43.724" starttime="20161110 23:42:43.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.725">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:42:43.725" starttime="20161110 23:42:43.725"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.727">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:42:43.727" starttime="20161110 23:42:43.727"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.729">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:42:43.729" starttime="20161110 23:42:43.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.731">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:43.731" starttime="20161110 23:42:43.730"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:42:43.731" starttime="20161110 23:42:43.731"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.734">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:43.734" starttime="20161110 23:42:43.733"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:43.735">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:43.735" starttime="20161110 23:42:43.734"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:43.735" starttime="20161110 23:42:43.734"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:43.735" starttime="20161110 23:42:43.732"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:43.736">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:42:43.736" starttime="20161110 23:42:43.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.737">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:43.737" starttime="20161110 23:42:43.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.737">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:42:43.737" starttime="20161110 23:42:43.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:43.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:42:43.738" starttime="20161110 23:42:43.737"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:46.920">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:46.921">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:46.921" starttime="20161110 23:42:43.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:46.922">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:46.922" starttime="20161110 23:42:46.921"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:46.922" starttime="20161110 23:42:43.735"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:47.197">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:47.197">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:47.197" starttime="20161110 23:42:46.925"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:47.199">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:47.199" starttime="20161110 23:42:47.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:47.201">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:42:47.201" starttime="20161110 23:42:47.200"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:47.201" starttime="20161110 23:42:47.199"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:47.201" starttime="20161110 23:42:47.198"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:47.201">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:47.202" starttime="20161110 23:42:43.727"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:47.202">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:47.202" starttime="20161110 23:42:43.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:47.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:47.203" starttime="20161110 23:42:47.202"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:47.204">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:42:47.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:42:47.204">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:42:47.204" starttime="20161110 23:42:47.203"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:42:47.205">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:42:47.205" starttime="20161110 23:42:43.723"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:42:47.205">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:42:47.206" starttime="20161110 23:42:47.205"></status>
</kw>
<status status="FAIL" endtime="20161110 23:42:47.206" starttime="20161110 23:42:43.722"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.208">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:42:57.209" starttime="20161110 23:42:57.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.210">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:42:57.210" starttime="20161110 23:42:57.209"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.212">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:42:57.212" starttime="20161110 23:42:57.211"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.214">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:42:57.214" starttime="20161110 23:42:57.213"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:57.215" starttime="20161110 23:42:57.214"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:42:57.215" starttime="20161110 23:42:57.215"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.218">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:57.218" starttime="20161110 23:42:57.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:57.219">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:42:57.219" starttime="20161110 23:42:57.219"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:57.220" starttime="20161110 23:42:57.218"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:57.220" starttime="20161110 23:42:57.216"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:57.221">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:42:57.222" starttime="20161110 23:42:57.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.223">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:42:57.223" starttime="20161110 23:42:57.222"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.223">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:42:57.223" starttime="20161110 23:42:57.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.224">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:42:57.224" starttime="20161110 23:42:57.224"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:42:57.556">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:42:57.556">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:42:57.556" starttime="20161110 23:42:57.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:42:57.557">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:42:57.557" starttime="20161110 23:42:57.557"></status>
</kw>
<status status="PASS" endtime="20161110 23:42:57.557" starttime="20161110 23:42:57.220"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:01.167">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:01.167">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:01.167" starttime="20161110 23:42:57.558"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:01.169">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:01.169" starttime="20161110 23:43:01.168"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:01.171">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:01.171" starttime="20161110 23:43:01.170"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:01.171" starttime="20161110 23:43:01.170"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:01.171" starttime="20161110 23:43:01.168"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:01.171">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:01.172" starttime="20161110 23:42:57.212"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:01.172">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:01.172" starttime="20161110 23:42:57.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:01.173">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:01.173" starttime="20161110 23:43:01.172"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:01.174">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:43:01.174">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:43:01.174">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:43:01.174" starttime="20161110 23:43:01.173"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:01.175">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:43:01.175" starttime="20161110 23:42:57.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:43:01.176">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:43:01.176" starttime="20161110 23:43:01.175"></status>
</kw>
<status status="FAIL" endtime="20161110 23:43:01.176" starttime="20161110 23:42:57.206"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.179">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:43:11.179" starttime="20161110 23:43:11.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.180">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:43:11.180" starttime="20161110 23:43:11.179"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.182">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:43:11.182" starttime="20161110 23:43:11.181"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.184">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:43:11.184" starttime="20161110 23:43:11.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:11.184" starttime="20161110 23:43:11.184"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:43:11.185" starttime="20161110 23:43:11.185"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.187">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:11.187" starttime="20161110 23:43:11.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:11.188">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:11.188" starttime="20161110 23:43:11.188"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:11.189" starttime="20161110 23:43:11.187"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:11.189" starttime="20161110 23:43:11.185"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:11.190">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:43:11.191" starttime="20161110 23:43:11.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:11.192" starttime="20161110 23:43:11.191"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.193">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:43:11.193" starttime="20161110 23:43:11.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:43:11.193" starttime="20161110 23:43:11.193"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:11.521">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:11.522">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:11.522" starttime="20161110 23:43:11.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:11.522">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:11.522" starttime="20161110 23:43:11.522"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:11.523" starttime="20161110 23:43:11.189"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:14.615">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:14.616">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:14.616" starttime="20161110 23:43:11.523"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:14.618">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:14.618" starttime="20161110 23:43:14.617"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:14.619">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:14.619" starttime="20161110 23:43:14.619"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:14.620" starttime="20161110 23:43:14.618"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:14.620" starttime="20161110 23:43:14.616"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:14.620">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:14.620" starttime="20161110 23:43:11.182"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:14.621">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:14.621" starttime="20161110 23:43:11.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:14.622">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:14.623" starttime="20161110 23:43:14.622"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:14.624">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:43:14.624">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:43:14.624">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:43:14.624" starttime="20161110 23:43:14.623"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:14.625">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:43:14.625" starttime="20161110 23:43:11.178"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:43:14.626">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:43:14.626" starttime="20161110 23:43:14.625"></status>
</kw>
<status status="FAIL" endtime="20161110 23:43:14.627" starttime="20161110 23:43:11.177"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.629">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:43:24.629" starttime="20161110 23:43:24.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.630">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:43:24.630" starttime="20161110 23:43:24.630"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.632">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:43:24.632" starttime="20161110 23:43:24.631"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.634">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:43:24.634" starttime="20161110 23:43:24.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.635">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:24.636" starttime="20161110 23:43:24.634"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:43:24.636" starttime="20161110 23:43:24.636"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.639">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:24.639" starttime="20161110 23:43:24.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:24.641">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:24.641" starttime="20161110 23:43:24.640"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:24.641" starttime="20161110 23:43:24.639"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:24.641" starttime="20161110 23:43:24.637"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:24.643">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:43:24.643" starttime="20161110 23:43:24.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.644">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:24.644" starttime="20161110 23:43:24.643"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.644">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:43:24.644" starttime="20161110 23:43:24.644"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.645">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:43:24.645" starttime="20161110 23:43:24.645"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:24.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:24.979">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:24.979" starttime="20161110 23:43:24.645"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:24.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:24.983" starttime="20161110 23:43:24.980"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:24.983" starttime="20161110 23:43:24.641"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:25.265">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:25.265">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:25.265" starttime="20161110 23:43:24.983"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:25.266">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:25.266" starttime="20161110 23:43:25.266"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:25.268">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:25.268" starttime="20161110 23:43:25.267"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:25.268" starttime="20161110 23:43:25.266"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:25.268" starttime="20161110 23:43:25.265"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:25.268">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:25.268" starttime="20161110 23:43:24.632"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:25.269">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:25.269" starttime="20161110 23:43:24.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:25.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:25.270" starttime="20161110 23:43:25.269"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:25.270">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:43:25.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:43:25.270">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:43:25.270" starttime="20161110 23:43:25.270"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:25.271">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:43:25.271" starttime="20161110 23:43:24.628"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:43:25.272">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:43:25.272" starttime="20161110 23:43:25.271"></status>
</kw>
<status status="FAIL" endtime="20161110 23:43:25.272" starttime="20161110 23:43:24.627"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.274">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:43:35.274" starttime="20161110 23:43:35.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.275">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:43:35.275" starttime="20161110 23:43:35.275"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.277">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:43:35.277" starttime="20161110 23:43:35.277"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.279">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:43:35.279" starttime="20161110 23:43:35.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:35.280" starttime="20161110 23:43:35.279"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:43:35.281" starttime="20161110 23:43:35.280"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.283">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:35.283" starttime="20161110 23:43:35.282"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:35.284">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:35.284" starttime="20161110 23:43:35.284"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:35.285" starttime="20161110 23:43:35.283"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:35.285" starttime="20161110 23:43:35.281"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:35.286">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:43:35.287" starttime="20161110 23:43:35.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:35.288" starttime="20161110 23:43:35.287"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.289">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:43:35.289" starttime="20161110 23:43:35.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.290">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:43:35.290" starttime="20161110 23:43:35.289"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.622">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:35.622">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:35.623" starttime="20161110 23:43:35.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:35.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:35.624" starttime="20161110 23:43:35.623"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:35.624" starttime="20161110 23:43:35.285"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.904">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:35.904">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:35.904" starttime="20161110 23:43:35.625"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.906">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:35.906" starttime="20161110 23:43:35.905"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:35.907">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:35.907" starttime="20161110 23:43:35.907"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:35.907" starttime="20161110 23:43:35.906"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:35.907" starttime="20161110 23:43:35.904"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:35.908">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:35.908" starttime="20161110 23:43:35.277"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:35.908">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:35.908" starttime="20161110 23:43:35.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:35.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:35.909" starttime="20161110 23:43:35.908"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:35.910">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:43:35.910">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:43:35.910">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:43:35.910" starttime="20161110 23:43:35.909"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:35.911">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:43:35.911" starttime="20161110 23:43:35.273"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:43:35.911">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:43:35.912" starttime="20161110 23:43:35.911"></status>
</kw>
<status status="FAIL" endtime="20161110 23:43:35.912" starttime="20161110 23:43:35.272"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.914">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:43:45.915" starttime="20161110 23:43:45.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.916">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:43:45.916" starttime="20161110 23:43:45.915"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.917">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:43:45.918" starttime="20161110 23:43:45.917"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.920">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:43:45.920" starttime="20161110 23:43:45.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.921">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:45.921" starttime="20161110 23:43:45.920"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:43:45.922" starttime="20161110 23:43:45.921"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.924">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:45.924" starttime="20161110 23:43:45.923"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:45.925">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:45.925" starttime="20161110 23:43:45.925"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:45.925" starttime="20161110 23:43:45.924"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:45.925" starttime="20161110 23:43:45.922"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:45.926">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:43:45.926" starttime="20161110 23:43:45.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:45.927" starttime="20161110 23:43:45.927"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.928">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:43:45.928" starttime="20161110 23:43:45.927"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:45.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:43:45.928" starttime="20161110 23:43:45.928"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:46.258">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:46.258">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:46.258" starttime="20161110 23:43:45.928"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:46.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:46.260" starttime="20161110 23:43:46.259"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:46.260" starttime="20161110 23:43:45.925"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:46.571">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:46.571">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:46.571" starttime="20161110 23:43:46.260"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:46.574">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:46.574" starttime="20161110 23:43:46.572"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:46.575">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:46.576" starttime="20161110 23:43:46.575"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:46.576" starttime="20161110 23:43:46.574"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:46.576" starttime="20161110 23:43:46.571"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:46.576">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:46.576" starttime="20161110 23:43:45.918"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:46.577">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:46.577" starttime="20161110 23:43:45.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:46.578">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:46.578" starttime="20161110 23:43:46.577"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:46.579">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:43:46.579">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:43:46.579">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:43:46.579" starttime="20161110 23:43:46.578"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:46.579">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:43:46.579" starttime="20161110 23:43:45.913"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:43:46.580">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:43:46.580" starttime="20161110 23:43:46.580"></status>
</kw>
<status status="FAIL" endtime="20161110 23:43:46.581" starttime="20161110 23:43:45.912"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.586">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:43:56.586" starttime="20161110 23:43:56.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.587">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:43:56.587" starttime="20161110 23:43:56.587"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.589">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:43:56.589" starttime="20161110 23:43:56.589"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.592">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:43:56.592" starttime="20161110 23:43:56.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.593">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:56.593" starttime="20161110 23:43:56.593"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:43:56.594" starttime="20161110 23:43:56.594"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.596">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:56.596" starttime="20161110 23:43:56.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:56.597">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:43:56.597" starttime="20161110 23:43:56.597"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:56.597" starttime="20161110 23:43:56.596"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:56.598" starttime="20161110 23:43:56.594"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:56.598">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:43:56.599" starttime="20161110 23:43:56.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.599">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:43:56.599" starttime="20161110 23:43:56.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.600">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:43:56.600" starttime="20161110 23:43:56.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.600">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:43:56.600" starttime="20161110 23:43:56.600"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:56.932">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:56.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:56.932" starttime="20161110 23:43:56.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:56.933">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:56.934" starttime="20161110 23:43:56.933"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:56.934" starttime="20161110 23:43:56.598"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:57.214">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:43:57.214">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:57.214" starttime="20161110 23:43:56.934"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:57.216">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:57.216" starttime="20161110 23:43:57.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:57.218">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:43:57.219" starttime="20161110 23:43:57.217"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:57.219" starttime="20161110 23:43:57.216"></status>
</kw>
<status status="PASS" endtime="20161110 23:43:57.219" starttime="20161110 23:43:57.214"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:57.219">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:57.219" starttime="20161110 23:43:56.589"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:57.220">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:43:57.220" starttime="20161110 23:43:56.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:43:57.221">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:43:57.221" starttime="20161110 23:43:57.220"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:43:57.222">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:43:57.222">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:43:57.222">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:43:57.222" starttime="20161110 23:43:57.221"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:43:57.222">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:43:57.222" starttime="20161110 23:43:56.583"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:43:57.223">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:43:57.223" starttime="20161110 23:43:57.223"></status>
</kw>
<status status="FAIL" endtime="20161110 23:43:57.224" starttime="20161110 23:43:56.582"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.226">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:44:07.226" starttime="20161110 23:44:07.226"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.227">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:44:07.227" starttime="20161110 23:44:07.226"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.229">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:44:07.229" starttime="20161110 23:44:07.228"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.231">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:44:07.231" starttime="20161110 23:44:07.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.232">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:07.232" starttime="20161110 23:44:07.231"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:44:07.233" starttime="20161110 23:44:07.232"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.235">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:07.235" starttime="20161110 23:44:07.234"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:07.237">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:07.237" starttime="20161110 23:44:07.236"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:07.237" starttime="20161110 23:44:07.236"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:07.237" starttime="20161110 23:44:07.233"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:07.239">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:44:07.240" starttime="20161110 23:44:07.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:07.241" starttime="20161110 23:44:07.240"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.241">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:44:07.241" starttime="20161110 23:44:07.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.242">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:44:07.242" starttime="20161110 23:44:07.242"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.568">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:07.569">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:07.569" starttime="20161110 23:44:07.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:07.569">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:07.569" starttime="20161110 23:44:07.569"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:07.569" starttime="20161110 23:44:07.237"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.858">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:07.858">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:07.858" starttime="20161110 23:44:07.570"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.859">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:07.859" starttime="20161110 23:44:07.858"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:07.860">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:07.860" starttime="20161110 23:44:07.859"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:07.860" starttime="20161110 23:44:07.859"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:07.860" starttime="20161110 23:44:07.858"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:07.860">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:07.860" starttime="20161110 23:44:07.229"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:07.860">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:07.860" starttime="20161110 23:44:07.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:07.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:07.861" starttime="20161110 23:44:07.860"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:07.861">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:44:07.861">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:44:07.861">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:44:07.861" starttime="20161110 23:44:07.861"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:07.862">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:44:07.862" starttime="20161110 23:44:07.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:44:07.862">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:44:07.862" starttime="20161110 23:44:07.862"></status>
</kw>
<status status="FAIL" endtime="20161110 23:44:07.863" starttime="20161110 23:44:07.224"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.865">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:44:17.865" starttime="20161110 23:44:17.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.866">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:44:17.866" starttime="20161110 23:44:17.865"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.868">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:44:17.868" starttime="20161110 23:44:17.867"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.870">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:44:17.870" starttime="20161110 23:44:17.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.871">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:17.871" starttime="20161110 23:44:17.871"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:44:17.872" starttime="20161110 23:44:17.871"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.874">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:17.874" starttime="20161110 23:44:17.873"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:17.875">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:17.875" starttime="20161110 23:44:17.875"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:17.875" starttime="20161110 23:44:17.874"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:17.875" starttime="20161110 23:44:17.872"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:17.876">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:44:17.876" starttime="20161110 23:44:17.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.877">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:17.877" starttime="20161110 23:44:17.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.877">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:44:17.877" starttime="20161110 23:44:17.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:17.878">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:44:17.878" starttime="20161110 23:44:17.878"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:21.775">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:21.775">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:21.775" starttime="20161110 23:44:17.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:21.776">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:21.776" starttime="20161110 23:44:21.776"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:21.776" starttime="20161110 23:44:17.875"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:22.056">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:22.056">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:22.056" starttime="20161110 23:44:21.777"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:22.058">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:22.058" starttime="20161110 23:44:22.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:22.059">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:22.059" starttime="20161110 23:44:22.058"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:22.059" starttime="20161110 23:44:22.058"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:22.059" starttime="20161110 23:44:22.057"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:22.059">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:22.059" starttime="20161110 23:44:17.868"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:22.059">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:22.059" starttime="20161110 23:44:17.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:22.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:22.060" starttime="20161110 23:44:22.060"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:22.060">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:44:22.060">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:44:22.061">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:44:22.061" starttime="20161110 23:44:22.060"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:22.061">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:44:22.061" starttime="20161110 23:44:17.864"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:44:22.061">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:44:22.061" starttime="20161110 23:44:22.061"></status>
</kw>
<status status="FAIL" endtime="20161110 23:44:22.062" starttime="20161110 23:44:17.863"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.064">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:44:32.064" starttime="20161110 23:44:32.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.065">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:44:32.065" starttime="20161110 23:44:32.065"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.067">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:44:32.067" starttime="20161110 23:44:32.066"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.069">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:44:32.069" starttime="20161110 23:44:32.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:32.069" starttime="20161110 23:44:32.069"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:44:32.070" starttime="20161110 23:44:32.070"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.072">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:32.073" starttime="20161110 23:44:32.071"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:32.074">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:32.074" starttime="20161110 23:44:32.074"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:32.074" starttime="20161110 23:44:32.073"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:32.074" starttime="20161110 23:44:32.070"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:32.075">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:44:32.075" starttime="20161110 23:44:32.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.076">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:32.076" starttime="20161110 23:44:32.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.076">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:44:32.076" starttime="20161110 23:44:32.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.077">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:44:32.077" starttime="20161110 23:44:32.077"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.406">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:32.407">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:32.407" starttime="20161110 23:44:32.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:32.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:32.407" starttime="20161110 23:44:32.407"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:32.408" starttime="20161110 23:44:32.074"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.689">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:32.689">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:32.689" starttime="20161110 23:44:32.408"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.690">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:32.690" starttime="20161110 23:44:32.689"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:32.691">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:32.691" starttime="20161110 23:44:32.691"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:32.691" starttime="20161110 23:44:32.690"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:32.691" starttime="20161110 23:44:32.689"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:32.691">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:32.691" starttime="20161110 23:44:32.067"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:32.692">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:32.692" starttime="20161110 23:44:32.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:32.692">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:32.692" starttime="20161110 23:44:32.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:32.693">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:44:32.693">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:44:32.693">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:44:32.693" starttime="20161110 23:44:32.692"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:32.693">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:44:32.693" starttime="20161110 23:44:32.063"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:44:32.694">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:44:32.694" starttime="20161110 23:44:32.693"></status>
</kw>
<status status="FAIL" endtime="20161110 23:44:32.694" starttime="20161110 23:44:32.062"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.697">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:44:42.697" starttime="20161110 23:44:42.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.698">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:44:42.698" starttime="20161110 23:44:42.697"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.700">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:44:42.700" starttime="20161110 23:44:42.699"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.702">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:44:42.702" starttime="20161110 23:44:42.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.702">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:42.702" starttime="20161110 23:44:42.702"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:44:42.703" starttime="20161110 23:44:42.703"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.707">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:42.707" starttime="20161110 23:44:42.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:42.708">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:42.708" starttime="20161110 23:44:42.708"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:42.708" starttime="20161110 23:44:42.707"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:42.709" starttime="20161110 23:44:42.704"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:42.710">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:44:42.711" starttime="20161110 23:44:42.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.713">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:42.713" starttime="20161110 23:44:42.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.714">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:44:42.714" starttime="20161110 23:44:42.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:42.714">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:44:42.714" starttime="20161110 23:44:42.714"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:43.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:43.049">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:43.049" starttime="20161110 23:44:42.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:43.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:43.050" starttime="20161110 23:44:43.050"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:43.050" starttime="20161110 23:44:42.709"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:43.332">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:43.332">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:43.332" starttime="20161110 23:44:43.051"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:43.334">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:43.334" starttime="20161110 23:44:43.333"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:43.336">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:43.336" starttime="20161110 23:44:43.335"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:43.336" starttime="20161110 23:44:43.334"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:43.336" starttime="20161110 23:44:43.332"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:43.337">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:43.337" starttime="20161110 23:44:42.700"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:43.337">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:43.337" starttime="20161110 23:44:42.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:43.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:43.338" starttime="20161110 23:44:43.338"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:43.339">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:44:43.339">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:44:43.339">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:44:43.339" starttime="20161110 23:44:43.339"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:43.340">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:44:43.340" starttime="20161110 23:44:42.696"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:44:43.341">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:44:43.341" starttime="20161110 23:44:43.340"></status>
</kw>
<status status="FAIL" endtime="20161110 23:44:43.341" starttime="20161110 23:44:42.695"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.344">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:44:53.345" starttime="20161110 23:44:53.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.346">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:44:53.346" starttime="20161110 23:44:53.345"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.347">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:44:53.347" starttime="20161110 23:44:53.347"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.349">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:44:53.349" starttime="20161110 23:44:53.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:53.350" starttime="20161110 23:44:53.350"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:44:53.352" starttime="20161110 23:44:53.351"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.355">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:53.355" starttime="20161110 23:44:53.353"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:53.356">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:44:53.356" starttime="20161110 23:44:53.355"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:53.356" starttime="20161110 23:44:53.355"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:53.356" starttime="20161110 23:44:53.352"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:53.357">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:44:53.357" starttime="20161110 23:44:53.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.358">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:44:53.358" starttime="20161110 23:44:53.357"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.358">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:44:53.358" starttime="20161110 23:44:53.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.359">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:44:53.359" starttime="20161110 23:44:53.358"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:53.688">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:53.688">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:53.688" starttime="20161110 23:44:53.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:53.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:53.689" starttime="20161110 23:44:53.688"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:53.689" starttime="20161110 23:44:53.356"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:57.035">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:44:57.035">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:57.035" starttime="20161110 23:44:53.689"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:57.037">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:57.038" starttime="20161110 23:44:57.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:57.039">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:44:57.039" starttime="20161110 23:44:57.039"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:57.039" starttime="20161110 23:44:57.038"></status>
</kw>
<status status="PASS" endtime="20161110 23:44:57.039" starttime="20161110 23:44:57.036"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:57.040">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:57.040" starttime="20161110 23:44:53.348"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:57.040">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:44:57.040" starttime="20161110 23:44:53.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:44:57.041">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:44:57.041" starttime="20161110 23:44:57.041"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:44:57.042">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:44:57.042">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:44:57.043">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:44:57.043" starttime="20161110 23:44:57.042"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:44:57.043">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:44:57.043" starttime="20161110 23:44:53.342"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:44:57.044">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:44:57.044" starttime="20161110 23:44:57.044"></status>
</kw>
<status status="FAIL" endtime="20161110 23:44:57.045" starttime="20161110 23:44:53.342"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.047">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:45:07.047" starttime="20161110 23:45:07.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.048">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:45:07.048" starttime="20161110 23:45:07.048"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.050">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:45:07.050" starttime="20161110 23:45:07.049"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.052">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:45:07.052" starttime="20161110 23:45:07.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:07.053" starttime="20161110 23:45:07.052"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:45:07.054" starttime="20161110 23:45:07.053"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.055">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:07.055" starttime="20161110 23:45:07.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:07.056">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:07.057" starttime="20161110 23:45:07.056"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:07.057" starttime="20161110 23:45:07.056"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:07.057" starttime="20161110 23:45:07.054"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:07.058">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:45:07.058" starttime="20161110 23:45:07.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.059">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:07.059" starttime="20161110 23:45:07.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.059">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:45:07.059" starttime="20161110 23:45:07.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.060">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:45:07.060" starttime="20161110 23:45:07.060"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.390">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:07.390">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:07.390" starttime="20161110 23:45:07.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:07.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:07.391" starttime="20161110 23:45:07.390"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:07.391" starttime="20161110 23:45:07.057"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.683">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:07.683">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:07.683" starttime="20161110 23:45:07.391"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.685">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:07.685" starttime="20161110 23:45:07.684"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:07.687">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:07.687" starttime="20161110 23:45:07.686"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:07.687" starttime="20161110 23:45:07.685"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:07.687" starttime="20161110 23:45:07.684"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:07.687">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:07.687" starttime="20161110 23:45:07.050"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:07.688">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:07.688" starttime="20161110 23:45:07.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:07.689">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:07.689" starttime="20161110 23:45:07.688"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:07.689">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:45:07.689">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:45:07.690">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:45:07.690" starttime="20161110 23:45:07.689"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:07.690">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:45:07.690" starttime="20161110 23:45:07.046"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:45:07.691">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:45:07.691" starttime="20161110 23:45:07.690"></status>
</kw>
<status status="FAIL" endtime="20161110 23:45:07.691" starttime="20161110 23:45:07.045"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.694">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:45:17.694" starttime="20161110 23:45:17.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.695">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:45:17.695" starttime="20161110 23:45:17.694"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.697">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:45:17.697" starttime="20161110 23:45:17.697"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.699">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:45:17.699" starttime="20161110 23:45:17.699"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.700">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:17.700" starttime="20161110 23:45:17.700"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:45:17.701" starttime="20161110 23:45:17.701"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.704">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:17.704" starttime="20161110 23:45:17.703"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:17.705">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:17.705" starttime="20161110 23:45:17.705"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:17.705" starttime="20161110 23:45:17.704"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:17.705" starttime="20161110 23:45:17.701"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:17.706">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:45:17.707" starttime="20161110 23:45:17.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.707">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:17.707" starttime="20161110 23:45:17.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.708">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:45:17.708" starttime="20161110 23:45:17.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:17.708">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:45:17.708" starttime="20161110 23:45:17.708"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:18.042">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:18.042">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:18.042" starttime="20161110 23:45:17.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:18.042">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:18.043" starttime="20161110 23:45:18.042"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:18.043" starttime="20161110 23:45:17.706"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:22.016">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:22.017">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:22.017" starttime="20161110 23:45:18.043"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:22.019">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:22.019" starttime="20161110 23:45:22.018"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:22.020">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:22.021" starttime="20161110 23:45:22.020"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:22.021" starttime="20161110 23:45:22.019"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:22.021" starttime="20161110 23:45:22.017"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:22.021">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:22.021" starttime="20161110 23:45:17.697"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:22.022">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:22.022" starttime="20161110 23:45:17.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:22.022">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:22.023" starttime="20161110 23:45:22.022"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:22.023">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:45:22.023">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:45:22.024">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:45:22.024" starttime="20161110 23:45:22.023"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:22.024">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:45:22.024" starttime="20161110 23:45:17.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:45:22.025">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:45:22.025" starttime="20161110 23:45:22.025"></status>
</kw>
<status status="FAIL" endtime="20161110 23:45:22.026" starttime="20161110 23:45:17.692"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.028">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:45:32.028" starttime="20161110 23:45:32.027"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.029">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:45:32.029" starttime="20161110 23:45:32.029"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.031">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:45:32.031" starttime="20161110 23:45:32.030"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.033">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:45:32.033" starttime="20161110 23:45:32.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:32.034" starttime="20161110 23:45:32.033"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:45:32.035" starttime="20161110 23:45:32.034"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.038">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:32.038" starttime="20161110 23:45:32.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:32.040">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:32.040" starttime="20161110 23:45:32.040"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:32.040" starttime="20161110 23:45:32.039"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:32.041" starttime="20161110 23:45:32.035"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:32.042">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:45:32.045" starttime="20161110 23:45:32.042"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.046">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:32.046" starttime="20161110 23:45:32.045"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.046">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:45:32.046" starttime="20161110 23:45:32.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.047">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:45:32.047" starttime="20161110 23:45:32.046"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.376">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:32.377">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:32.377" starttime="20161110 23:45:32.047"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:32.378">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:32.378" starttime="20161110 23:45:32.377"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:32.378" starttime="20161110 23:45:32.041"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.666">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:32.666">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:32.666" starttime="20161110 23:45:32.378"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.668">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:32.668" starttime="20161110 23:45:32.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:32.669">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:32.669" starttime="20161110 23:45:32.669"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:32.670" starttime="20161110 23:45:32.668"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:32.670" starttime="20161110 23:45:32.666"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:32.670">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:32.670" starttime="20161110 23:45:32.031"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:32.670">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:32.670" starttime="20161110 23:45:32.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:32.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:32.671" starttime="20161110 23:45:32.671"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:32.672">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:45:32.672">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:45:32.672">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:45:32.673" starttime="20161110 23:45:32.672"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:32.673">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:45:32.673" starttime="20161110 23:45:32.027"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:45:32.674">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:45:32.674" starttime="20161110 23:45:32.673"></status>
</kw>
<status status="FAIL" endtime="20161110 23:45:32.674" starttime="20161110 23:45:32.026"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.677">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:45:42.677" starttime="20161110 23:45:42.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.678">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:45:42.678" starttime="20161110 23:45:42.677"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.680">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:45:42.680" starttime="20161110 23:45:42.679"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.682">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:45:42.682" starttime="20161110 23:45:42.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:42.682" starttime="20161110 23:45:42.682"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:45:42.684" starttime="20161110 23:45:42.683"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.686">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:42.686" starttime="20161110 23:45:42.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:42.687">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:42.687" starttime="20161110 23:45:42.686"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:42.687" starttime="20161110 23:45:42.686"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:42.687" starttime="20161110 23:45:42.684"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:42.688">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:45:42.688" starttime="20161110 23:45:42.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.689">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:42.689" starttime="20161110 23:45:42.688"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.689">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:45:42.689" starttime="20161110 23:45:42.689"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:42.690">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:45:42.690" starttime="20161110 23:45:42.689"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:46.681">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:46.681">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:46.681" starttime="20161110 23:45:42.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:46.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:46.682" starttime="20161110 23:45:46.682"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:46.683" starttime="20161110 23:45:42.687"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:46.958">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:46.958">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:46.958" starttime="20161110 23:45:46.683"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:46.960">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:46.960" starttime="20161110 23:45:46.959"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:46.962">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:46.962" starttime="20161110 23:45:46.961"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:46.962" starttime="20161110 23:45:46.960"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:46.962" starttime="20161110 23:45:46.958"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:46.963">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:46.963" starttime="20161110 23:45:42.680"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:46.963">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:46.963" starttime="20161110 23:45:42.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:46.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:46.964" starttime="20161110 23:45:46.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:46.965">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:45:46.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:45:46.965">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:45:46.965" starttime="20161110 23:45:46.965"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:46.966">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:45:46.966" starttime="20161110 23:45:42.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:45:46.967">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:45:46.968" starttime="20161110 23:45:46.966"></status>
</kw>
<status status="FAIL" endtime="20161110 23:45:46.968" starttime="20161110 23:45:42.675"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.970">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:45:56.970" starttime="20161110 23:45:56.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.971">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:45:56.971" starttime="20161110 23:45:56.971"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.973">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:45:56.973" starttime="20161110 23:45:56.973"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.975">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:45:56.975" starttime="20161110 23:45:56.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:56.976" starttime="20161110 23:45:56.975"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:45:56.977" starttime="20161110 23:45:56.976"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.980">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:56.980" starttime="20161110 23:45:56.978"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:56.982">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:45:56.982" starttime="20161110 23:45:56.981"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:56.982" starttime="20161110 23:45:56.980"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:56.982" starttime="20161110 23:45:56.977"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:56.984">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:45:56.984" starttime="20161110 23:45:56.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.985">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:45:56.985" starttime="20161110 23:45:56.984"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.985">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:45:56.985" starttime="20161110 23:45:56.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:56.986">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:45:56.986" starttime="20161110 23:45:56.986"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:57.315">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:57.315">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:57.315" starttime="20161110 23:45:56.986"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:57.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:57.316" starttime="20161110 23:45:57.315"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:57.317" starttime="20161110 23:45:56.983"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:57.606">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:45:57.606">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:57.606" starttime="20161110 23:45:57.317"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:57.608">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:57.608" starttime="20161110 23:45:57.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:57.610">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:45:57.610" starttime="20161110 23:45:57.609"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:57.610" starttime="20161110 23:45:57.609"></status>
</kw>
<status status="PASS" endtime="20161110 23:45:57.610" starttime="20161110 23:45:57.607"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:57.610">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:57.610" starttime="20161110 23:45:56.973"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:57.611">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:45:57.611" starttime="20161110 23:45:56.972"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:45:57.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:45:57.612" starttime="20161110 23:45:57.611"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:45:57.613">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:45:57.613">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:45:57.613">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:45:57.613" starttime="20161110 23:45:57.612"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:45:57.613">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:45:57.614" starttime="20161110 23:45:56.969"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:45:57.615">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:45:57.615" starttime="20161110 23:45:57.614"></status>
</kw>
<status status="FAIL" endtime="20161110 23:45:57.615" starttime="20161110 23:45:56.969"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.618">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:46:07.618" starttime="20161110 23:46:07.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.619">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:46:07.619" starttime="20161110 23:46:07.618"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.621">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:46:07.621" starttime="20161110 23:46:07.620"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.623">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:46:07.623" starttime="20161110 23:46:07.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:07.624" starttime="20161110 23:46:07.623"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:46:07.625" starttime="20161110 23:46:07.624"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.627">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:07.627" starttime="20161110 23:46:07.626"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:07.630">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:07.631" starttime="20161110 23:46:07.630"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:07.631" starttime="20161110 23:46:07.629"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:07.631" starttime="20161110 23:46:07.625"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:07.632">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:46:07.633" starttime="20161110 23:46:07.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.634">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:07.634" starttime="20161110 23:46:07.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.635">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:46:07.635" starttime="20161110 23:46:07.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.635">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:46:07.635" starttime="20161110 23:46:07.635"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:07.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:07.964">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:07.964" starttime="20161110 23:46:07.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:07.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:07.965" starttime="20161110 23:46:07.964"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:07.965" starttime="20161110 23:46:07.631"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:11.949">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:11.949">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:11.949" starttime="20161110 23:46:07.965"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:11.951">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:11.951" starttime="20161110 23:46:11.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:11.952">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:11.953" starttime="20161110 23:46:11.952"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:11.953" starttime="20161110 23:46:11.951"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:11.953" starttime="20161110 23:46:11.949"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:11.953">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:11.953" starttime="20161110 23:46:07.621"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:11.954">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:11.954" starttime="20161110 23:46:07.619"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:11.955">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:11.955" starttime="20161110 23:46:11.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:11.956">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:46:11.956">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:46:11.956">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:46:11.956" starttime="20161110 23:46:11.955"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:11.956">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:46:11.956" starttime="20161110 23:46:07.617"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:46:11.957">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:46:11.958" starttime="20161110 23:46:11.957"></status>
</kw>
<status status="FAIL" endtime="20161110 23:46:11.958" starttime="20161110 23:46:07.616"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.959">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:46:21.960" starttime="20161110 23:46:21.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.960">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:46:21.961" starttime="20161110 23:46:21.960"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.961">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:46:21.962" starttime="20161110 23:46:21.961"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.963">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:46:21.963" starttime="20161110 23:46:21.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.963">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:21.963" starttime="20161110 23:46:21.963"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:46:21.964" starttime="20161110 23:46:21.963"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.965">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:21.965" starttime="20161110 23:46:21.964"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:21.966">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:21.966" starttime="20161110 23:46:21.966"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:21.966" starttime="20161110 23:46:21.965"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:21.966" starttime="20161110 23:46:21.964"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:21.967">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:46:21.967" starttime="20161110 23:46:21.967"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.968">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:21.968" starttime="20161110 23:46:21.967"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.968">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:46:21.968" starttime="20161110 23:46:21.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:21.969">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:46:21.969" starttime="20161110 23:46:21.969"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:22.294">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:22.295">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:22.295" starttime="20161110 23:46:21.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:22.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:22.296" starttime="20161110 23:46:22.295"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:22.296" starttime="20161110 23:46:21.966"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:22.577">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:22.577">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:22.577" starttime="20161110 23:46:22.296"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:22.579">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:22.579" starttime="20161110 23:46:22.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:22.580">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:22.581" starttime="20161110 23:46:22.580"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:22.581" starttime="20161110 23:46:22.579"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:22.581" starttime="20161110 23:46:22.578"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:22.581">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:22.581" starttime="20161110 23:46:21.962"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:22.582">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:22.582" starttime="20161110 23:46:21.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:22.583">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:22.583" starttime="20161110 23:46:22.582"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:22.584">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:46:22.584">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:46:22.584">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:46:22.584" starttime="20161110 23:46:22.583"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:22.584">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:46:22.585" starttime="20161110 23:46:21.959"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:46:22.585">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:46:22.585" starttime="20161110 23:46:22.585"></status>
</kw>
<status status="FAIL" endtime="20161110 23:46:22.586" starttime="20161110 23:46:21.958"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.588">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:46:32.588" starttime="20161110 23:46:32.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.589">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:46:32.589" starttime="20161110 23:46:32.588"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.591">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:46:32.591" starttime="20161110 23:46:32.590"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.593">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:46:32.593" starttime="20161110 23:46:32.593"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.594">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:32.594" starttime="20161110 23:46:32.594"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:46:32.595" starttime="20161110 23:46:32.595"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.598">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:32.598" starttime="20161110 23:46:32.596"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:32.599">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:32.599" starttime="20161110 23:46:32.599"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:32.600" starttime="20161110 23:46:32.598"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:32.600" starttime="20161110 23:46:32.595"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:32.601">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:46:32.603" starttime="20161110 23:46:32.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.603">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:32.604" starttime="20161110 23:46:32.603"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.605">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:46:32.605" starttime="20161110 23:46:32.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:46:32.605" starttime="20161110 23:46:32.605"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:32.939">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:32.939">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:32.939" starttime="20161110 23:46:32.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:32.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:32.940" starttime="20161110 23:46:32.939"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:32.940" starttime="20161110 23:46:32.600"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:33.225">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:33.226">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:33.226" starttime="20161110 23:46:32.940"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:33.228">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:33.228" starttime="20161110 23:46:33.227"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:33.229">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:33.229" starttime="20161110 23:46:33.229"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:33.229" starttime="20161110 23:46:33.228"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:33.229" starttime="20161110 23:46:33.226"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:33.230">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:33.230" starttime="20161110 23:46:32.591"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:33.230">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:33.230" starttime="20161110 23:46:32.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:33.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:33.231" starttime="20161110 23:46:33.231"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:33.232">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:46:33.232">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:46:33.232">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:46:33.233" starttime="20161110 23:46:33.232"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:33.233">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:46:33.233" starttime="20161110 23:46:32.587"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:46:33.234">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:46:33.235" starttime="20161110 23:46:33.234"></status>
</kw>
<status status="FAIL" endtime="20161110 23:46:33.235" starttime="20161110 23:46:32.586"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.239">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:46:43.239" starttime="20161110 23:46:43.238"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.240">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:46:43.240" starttime="20161110 23:46:43.239"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.243">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:46:43.243" starttime="20161110 23:46:43.242"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.246">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:46:43.246" starttime="20161110 23:46:43.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.247">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:43.247" starttime="20161110 23:46:43.246"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:46:43.248" starttime="20161110 23:46:43.248"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.251">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:43.251" starttime="20161110 23:46:43.250"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:43.253">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:43.254" starttime="20161110 23:46:43.253"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:43.254" starttime="20161110 23:46:43.252"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:43.254" starttime="20161110 23:46:43.249"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:43.255">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:46:43.256" starttime="20161110 23:46:43.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:43.256" starttime="20161110 23:46:43.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.257">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:46:43.257" starttime="20161110 23:46:43.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:46:43.257" starttime="20161110 23:46:43.257"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:43.598">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:43.598" starttime="20161110 23:46:43.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:43.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:43.599" starttime="20161110 23:46:43.598"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:43.599" starttime="20161110 23:46:43.254"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.912">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:43.912">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:43.912" starttime="20161110 23:46:43.600"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.914">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:43.914" starttime="20161110 23:46:43.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:43.916">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:43.916" starttime="20161110 23:46:43.916"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:43.916" starttime="20161110 23:46:43.914"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:43.917" starttime="20161110 23:46:43.912"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:43.917">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:43.917" starttime="20161110 23:46:43.243"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:43.917">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:43.917" starttime="20161110 23:46:43.241"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:43.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:43.918" starttime="20161110 23:46:43.918"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:43.919">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:46:43.919">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:46:43.919">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:46:43.919" starttime="20161110 23:46:43.919"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:43.920">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:46:43.920" starttime="20161110 23:46:43.237"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:46:43.921">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:46:43.921" starttime="20161110 23:46:43.920"></status>
</kw>
<status status="FAIL" endtime="20161110 23:46:43.921" starttime="20161110 23:46:43.236"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.923">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:46:53.923" starttime="20161110 23:46:53.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.924">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:46:53.924" starttime="20161110 23:46:53.924"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.926">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:46:53.926" starttime="20161110 23:46:53.926"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.928">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:46:53.928" starttime="20161110 23:46:53.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.929">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:53.929" starttime="20161110 23:46:53.929"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:46:53.930" starttime="20161110 23:46:53.929"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.932">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:53.932" starttime="20161110 23:46:53.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:53.934">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:46:53.934" starttime="20161110 23:46:53.934"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:53.934" starttime="20161110 23:46:53.933"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:53.934" starttime="20161110 23:46:53.930"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:53.936">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:46:53.936" starttime="20161110 23:46:53.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.936">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:46:53.936" starttime="20161110 23:46:53.936"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.937">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:46:53.937" starttime="20161110 23:46:53.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:53.937">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:46:53.937" starttime="20161110 23:46:53.937"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:54.263">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:54.264">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:54.264" starttime="20161110 23:46:53.938"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:54.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:54.264" starttime="20161110 23:46:54.264"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:54.264" starttime="20161110 23:46:53.935"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:54.556">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:46:54.556">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:54.556" starttime="20161110 23:46:54.265"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:54.558">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:54.558" starttime="20161110 23:46:54.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:54.560">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:46:54.560" starttime="20161110 23:46:54.559"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:54.560" starttime="20161110 23:46:54.558"></status>
</kw>
<status status="PASS" endtime="20161110 23:46:54.560" starttime="20161110 23:46:54.557"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:54.561">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:54.561" starttime="20161110 23:46:53.927"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:54.561">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:46:54.561" starttime="20161110 23:46:53.925"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:46:54.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:46:54.562" starttime="20161110 23:46:54.561"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:46:54.563">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:46:54.563">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:46:54.563">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:46:54.563" starttime="20161110 23:46:54.562"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:46:54.563">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:46:54.563" starttime="20161110 23:46:53.922"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:46:54.564">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:46:54.564" starttime="20161110 23:46:54.564"></status>
</kw>
<status status="FAIL" endtime="20161110 23:46:54.565" starttime="20161110 23:46:53.922"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.567">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:47:04.567" starttime="20161110 23:47:04.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.568">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:47:04.568" starttime="20161110 23:47:04.568"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.570">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:47:04.570" starttime="20161110 23:47:04.570"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.572">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:47:04.572" starttime="20161110 23:47:04.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:04.573" starttime="20161110 23:47:04.573"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:47:04.574" starttime="20161110 23:47:04.574"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.578">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:04.578" starttime="20161110 23:47:04.576"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:04.580">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:04.580" starttime="20161110 23:47:04.580"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:04.580" starttime="20161110 23:47:04.578"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:04.581" starttime="20161110 23:47:04.575"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:04.582">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:47:04.583" starttime="20161110 23:47:04.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.584">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:04.584" starttime="20161110 23:47:04.583"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.585">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:47:04.585" starttime="20161110 23:47:04.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.586">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:47:04.586" starttime="20161110 23:47:04.585"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:04.924">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:04.924">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:04.924" starttime="20161110 23:47:04.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:04.925">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:04.925" starttime="20161110 23:47:04.925"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:04.925" starttime="20161110 23:47:04.581"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:05.206">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:05.206">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:05.206" starttime="20161110 23:47:04.925"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:05.208">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:05.208" starttime="20161110 23:47:05.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:05.209">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:05.209" starttime="20161110 23:47:05.209"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:05.209" starttime="20161110 23:47:05.208"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:05.210" starttime="20161110 23:47:05.206"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:05.210">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:05.210" starttime="20161110 23:47:04.570"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:05.210">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:05.210" starttime="20161110 23:47:04.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:05.211">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:05.211" starttime="20161110 23:47:05.211"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:05.212">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:47:05.212">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:47:05.212">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:47:05.212" starttime="20161110 23:47:05.212"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:05.213">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:47:05.213" starttime="20161110 23:47:04.566"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:47:05.214">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:47:05.214" starttime="20161110 23:47:05.213"></status>
</kw>
<status status="FAIL" endtime="20161110 23:47:05.214" starttime="20161110 23:47:04.565"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.219">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:47:15.219" starttime="20161110 23:47:15.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.220">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:47:15.220" starttime="20161110 23:47:15.219"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.222">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:47:15.222" starttime="20161110 23:47:15.221"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.224">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:47:15.224" starttime="20161110 23:47:15.223"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:15.225" starttime="20161110 23:47:15.224"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:47:15.225" starttime="20161110 23:47:15.225"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.227">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:15.227" starttime="20161110 23:47:15.226"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:15.228">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:15.228" starttime="20161110 23:47:15.228"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:15.228" starttime="20161110 23:47:15.227"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:15.228" starttime="20161110 23:47:15.226"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:15.229">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:47:15.229" starttime="20161110 23:47:15.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:15.230" starttime="20161110 23:47:15.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.230">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:47:15.230" starttime="20161110 23:47:15.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:47:15.231" starttime="20161110 23:47:15.231"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:15.560">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:15.560">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:15.560" starttime="20161110 23:47:15.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:15.561">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:15.561" starttime="20161110 23:47:15.560"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:15.561" starttime="20161110 23:47:15.228"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:19.161">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:19.162">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:19.162" starttime="20161110 23:47:15.561"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:19.164">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:19.164" starttime="20161110 23:47:19.163"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:19.166">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:19.166" starttime="20161110 23:47:19.165"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:19.166" starttime="20161110 23:47:19.164"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:19.166" starttime="20161110 23:47:19.162"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:19.166">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:19.166" starttime="20161110 23:47:15.222"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:19.167">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:19.167" starttime="20161110 23:47:15.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:19.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:19.168" starttime="20161110 23:47:19.167"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:19.169">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:47:19.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:47:19.169">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:47:19.169" starttime="20161110 23:47:19.168"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:19.169">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:47:19.169" starttime="20161110 23:47:15.215"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:47:19.170">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:47:19.171" starttime="20161110 23:47:19.170"></status>
</kw>
<status status="FAIL" endtime="20161110 23:47:19.171" starttime="20161110 23:47:15.215"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.173">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:47:29.173" starttime="20161110 23:47:29.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.174">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:47:29.174" starttime="20161110 23:47:29.174"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.176">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:47:29.176" starttime="20161110 23:47:29.176"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.178">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:47:29.178" starttime="20161110 23:47:29.178"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.179">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:29.179" starttime="20161110 23:47:29.179"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:47:29.180" starttime="20161110 23:47:29.179"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.182">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:29.182" starttime="20161110 23:47:29.181"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:29.184">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:29.184" starttime="20161110 23:47:29.183"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:29.184" starttime="20161110 23:47:29.183"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:29.184" starttime="20161110 23:47:29.180"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:29.186">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:47:29.186" starttime="20161110 23:47:29.186"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.187">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:29.187" starttime="20161110 23:47:29.187"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.188">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:47:29.188" starttime="20161110 23:47:29.187"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.188">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:47:29.188" starttime="20161110 23:47:29.188"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.543">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:29.543">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:29.543" starttime="20161110 23:47:29.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:29.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:29.544" starttime="20161110 23:47:29.543"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:29.544" starttime="20161110 23:47:29.185"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.859">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:29.859">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:29.859" starttime="20161110 23:47:29.544"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.860">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:29.860" starttime="20161110 23:47:29.860"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:29.861">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:29.861" starttime="20161110 23:47:29.861"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:29.861" starttime="20161110 23:47:29.860"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:29.861" starttime="20161110 23:47:29.859"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:29.862">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:29.862" starttime="20161110 23:47:29.176"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:29.862">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:29.862" starttime="20161110 23:47:29.175"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:29.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:29.862" starttime="20161110 23:47:29.862"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:29.863">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:47:29.863">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:47:29.863">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:47:29.863" starttime="20161110 23:47:29.863"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:29.863">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:47:29.863" starttime="20161110 23:47:29.172"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:47:29.864">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:47:29.864" starttime="20161110 23:47:29.863"></status>
</kw>
<status status="FAIL" endtime="20161110 23:47:29.864" starttime="20161110 23:47:29.171"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.866">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:47:39.867" starttime="20161110 23:47:39.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.868">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:47:39.868" starttime="20161110 23:47:39.867"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.869">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:47:39.870" starttime="20161110 23:47:39.869"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.873">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:47:39.873" starttime="20161110 23:47:39.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.873">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:39.873" starttime="20161110 23:47:39.873"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:47:39.874" starttime="20161110 23:47:39.874"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.876">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:39.876" starttime="20161110 23:47:39.875"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:39.877">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:39.877" starttime="20161110 23:47:39.877"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:39.877" starttime="20161110 23:47:39.876"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:39.877" starttime="20161110 23:47:39.875"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:39.878">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:47:39.879" starttime="20161110 23:47:39.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.879">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:39.879" starttime="20161110 23:47:39.879"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.880">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:47:39.880" starttime="20161110 23:47:39.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:39.880">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:47:39.880" starttime="20161110 23:47:39.880"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:40.216">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:40.216">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:40.216" starttime="20161110 23:47:39.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:40.217">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:40.217" starttime="20161110 23:47:40.216"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:40.217" starttime="20161110 23:47:39.878"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:40.500">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:40.500">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:40.500" starttime="20161110 23:47:40.217"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:40.503">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:40.503" starttime="20161110 23:47:40.501"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:40.504">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:40.504" starttime="20161110 23:47:40.504"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:40.504" starttime="20161110 23:47:40.503"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:40.504" starttime="20161110 23:47:40.501"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:40.505">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:40.505" starttime="20161110 23:47:39.870"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:40.505">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:40.505" starttime="20161110 23:47:39.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:40.506">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:40.506" starttime="20161110 23:47:40.506"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:40.507">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:47:40.507">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:47:40.507">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:47:40.507" starttime="20161110 23:47:40.507"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:40.508">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:47:40.508" starttime="20161110 23:47:39.865"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:47:40.509">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:47:40.509" starttime="20161110 23:47:40.508"></status>
</kw>
<status status="FAIL" endtime="20161110 23:47:40.509" starttime="20161110 23:47:39.865"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.512">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:47:50.512" starttime="20161110 23:47:50.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.513">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:47:50.513" starttime="20161110 23:47:50.512"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.514">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:47:50.514" starttime="20161110 23:47:50.514"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.516">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:47:50.516" starttime="20161110 23:47:50.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:50.517" starttime="20161110 23:47:50.517"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:47:50.518" starttime="20161110 23:47:50.518"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.520">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:50.521" starttime="20161110 23:47:50.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:50.522">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:47:50.522" starttime="20161110 23:47:50.522"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:50.522" starttime="20161110 23:47:50.521"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:50.522" starttime="20161110 23:47:50.518"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:50.524">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:47:50.524" starttime="20161110 23:47:50.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.525">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:47:50.525" starttime="20161110 23:47:50.525"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.526">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:47:50.526" starttime="20161110 23:47:50.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.527">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:47:50.527" starttime="20161110 23:47:50.526"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:50.858">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:50.859">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:50.859" starttime="20161110 23:47:50.527"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:50.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:50.859" starttime="20161110 23:47:50.859"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:50.860" starttime="20161110 23:47:50.523"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:51.144">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:47:51.144">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:51.144" starttime="20161110 23:47:50.860"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:51.146">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:51.146" starttime="20161110 23:47:51.145"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:51.147">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:47:51.148" starttime="20161110 23:47:51.147"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:51.148" starttime="20161110 23:47:51.146"></status>
</kw>
<status status="PASS" endtime="20161110 23:47:51.148" starttime="20161110 23:47:51.144"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:51.148">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:51.148" starttime="20161110 23:47:50.515"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:51.149">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:47:51.149" starttime="20161110 23:47:50.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:47:51.149">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:47:51.150" starttime="20161110 23:47:51.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:47:51.150">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:47:51.150">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:47:51.151">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:47:51.151" starttime="20161110 23:47:51.150"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:47:51.151">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:47:51.151" starttime="20161110 23:47:50.510"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:47:51.152">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:47:51.152" starttime="20161110 23:47:51.152"></status>
</kw>
<status status="FAIL" endtime="20161110 23:47:51.152" starttime="20161110 23:47:50.510"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.155">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:48:01.155" starttime="20161110 23:48:01.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.156">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:48:01.156" starttime="20161110 23:48:01.155"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.157">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:48:01.157" starttime="20161110 23:48:01.157"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.159">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:48:01.159" starttime="20161110 23:48:01.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:01.160" starttime="20161110 23:48:01.160"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:48:01.161" starttime="20161110 23:48:01.161"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.164">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:01.164" starttime="20161110 23:48:01.162"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:01.165">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:01.165" starttime="20161110 23:48:01.165"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:01.165" starttime="20161110 23:48:01.164"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:01.166" starttime="20161110 23:48:01.161"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:01.166">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:48:01.167" starttime="20161110 23:48:01.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.167">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:01.167" starttime="20161110 23:48:01.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.168">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:48:01.168" starttime="20161110 23:48:01.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:48:01.168" starttime="20161110 23:48:01.168"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.494">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:01.494">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:01.494" starttime="20161110 23:48:01.169"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:01.495">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:01.495" starttime="20161110 23:48:01.494"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:01.495" starttime="20161110 23:48:01.166"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.784">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:01.784">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:01.784" starttime="20161110 23:48:01.496"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.786">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:01.786" starttime="20161110 23:48:01.785"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:01.786">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:01.786" starttime="20161110 23:48:01.786"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:01.787" starttime="20161110 23:48:01.786"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:01.787" starttime="20161110 23:48:01.785"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:01.787">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:01.787" starttime="20161110 23:48:01.158"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:01.787">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:01.787" starttime="20161110 23:48:01.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:01.788">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:01.788" starttime="20161110 23:48:01.787"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:01.788">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:48:01.788">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:48:01.789">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:48:01.789" starttime="20161110 23:48:01.788"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:01.789">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:48:01.789" starttime="20161110 23:48:01.154"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:48:01.789">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:48:01.789" starttime="20161110 23:48:01.789"></status>
</kw>
<status status="FAIL" endtime="20161110 23:48:01.790" starttime="20161110 23:48:01.153"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.793">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:48:11.793" starttime="20161110 23:48:11.792"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.794">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:48:11.794" starttime="20161110 23:48:11.793"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.795">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:48:11.795" starttime="20161110 23:48:11.795"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.797">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:48:11.797" starttime="20161110 23:48:11.797"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.798">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:11.798" starttime="20161110 23:48:11.798"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:48:11.799" starttime="20161110 23:48:11.799"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.801">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:11.801" starttime="20161110 23:48:11.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:11.803">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:11.803" starttime="20161110 23:48:11.803"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:11.803" starttime="20161110 23:48:11.802"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:11.803" starttime="20161110 23:48:11.799"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:11.805">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:48:11.805" starttime="20161110 23:48:11.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:11.806" starttime="20161110 23:48:11.806"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.807">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:48:11.807" starttime="20161110 23:48:11.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:11.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:48:11.807" starttime="20161110 23:48:11.807"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:15.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:15.870">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:15.870" starttime="20161110 23:48:11.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:15.872">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:15.872" starttime="20161110 23:48:15.871"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:15.872" starttime="20161110 23:48:11.804"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:16.316">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:16.317">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:16.317" starttime="20161110 23:48:15.873"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:16.336">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:16.336" starttime="20161110 23:48:16.336"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:16.337">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:16.338" starttime="20161110 23:48:16.337"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:16.338" starttime="20161110 23:48:16.337"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:16.338" starttime="20161110 23:48:16.317"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:16.338">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:16.338" starttime="20161110 23:48:11.796"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:16.338">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:16.338" starttime="20161110 23:48:11.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:16.339">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:16.339" starttime="20161110 23:48:16.338"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:16.339">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:48:16.339">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:48:16.339">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:48:16.339" starttime="20161110 23:48:16.339"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:16.340">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:48:16.340" starttime="20161110 23:48:11.791"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:48:16.340">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:48:16.340" starttime="20161110 23:48:16.340"></status>
</kw>
<status status="FAIL" endtime="20161110 23:48:16.340" starttime="20161110 23:48:11.790"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.343">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:48:26.343" starttime="20161110 23:48:26.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.344">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:48:26.344" starttime="20161110 23:48:26.343"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.346">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:48:26.346" starttime="20161110 23:48:26.345"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.348">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:48:26.348" starttime="20161110 23:48:26.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.349">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:26.349" starttime="20161110 23:48:26.348"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:48:26.350" starttime="20161110 23:48:26.349"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.352">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:26.353" starttime="20161110 23:48:26.351"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:26.354">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:26.355" starttime="20161110 23:48:26.354"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:26.355" starttime="20161110 23:48:26.353"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:26.355" starttime="20161110 23:48:26.350"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:26.356">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:48:26.357" starttime="20161110 23:48:26.356"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.357">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:26.357" starttime="20161110 23:48:26.357"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.358">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:48:26.358" starttime="20161110 23:48:26.357"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.358">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:48:26.358" starttime="20161110 23:48:26.358"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.686">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:26.686">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:26.686" starttime="20161110 23:48:26.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:26.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:26.687" starttime="20161110 23:48:26.687"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:26.687" starttime="20161110 23:48:26.355"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.972">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:26.972">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:26.972" starttime="20161110 23:48:26.687"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.973">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:26.973" starttime="20161110 23:48:26.973"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:26.974">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:26.974" starttime="20161110 23:48:26.974"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:26.974" starttime="20161110 23:48:26.973"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:26.974" starttime="20161110 23:48:26.972"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:26.974">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:26.975" starttime="20161110 23:48:26.346"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:26.975">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:26.975" starttime="20161110 23:48:26.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:26.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:26.975" starttime="20161110 23:48:26.975"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:26.976">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:48:26.976">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:48:26.976">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:48:26.976" starttime="20161110 23:48:26.975"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:26.976">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:48:26.976" starttime="20161110 23:48:26.342"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:48:26.977">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:48:26.977" starttime="20161110 23:48:26.976"></status>
</kw>
<status status="FAIL" endtime="20161110 23:48:26.977" starttime="20161110 23:48:26.341"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.980">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:48:36.980" starttime="20161110 23:48:36.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.981">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:48:36.981" starttime="20161110 23:48:36.980"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.983">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:48:36.983" starttime="20161110 23:48:36.982"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.985">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:48:36.985" starttime="20161110 23:48:36.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.986">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:36.986" starttime="20161110 23:48:36.985"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:48:36.987" starttime="20161110 23:48:36.986"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.989">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:36.989" starttime="20161110 23:48:36.988"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:36.991">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:36.991" starttime="20161110 23:48:36.990"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:36.991" starttime="20161110 23:48:36.990"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:36.991" starttime="20161110 23:48:36.987"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:36.993">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:48:36.993" starttime="20161110 23:48:36.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.994">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:36.994" starttime="20161110 23:48:36.994"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.996">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:48:36.996" starttime="20161110 23:48:36.995"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:36.996">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:48:36.996" starttime="20161110 23:48:36.996"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:37.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:37.333">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:37.333" starttime="20161110 23:48:36.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:37.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:37.334" starttime="20161110 23:48:37.334"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:37.335" starttime="20161110 23:48:36.991"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:37.618">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:37.618">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:37.618" starttime="20161110 23:48:37.335"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:37.620">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:37.620" starttime="20161110 23:48:37.619"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:37.621">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:37.621" starttime="20161110 23:48:37.621"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:37.622" starttime="20161110 23:48:37.620"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:37.622" starttime="20161110 23:48:37.619"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:37.622">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:37.622" starttime="20161110 23:48:36.983"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:37.622">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:37.622" starttime="20161110 23:48:36.981"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:37.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:37.623" starttime="20161110 23:48:37.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:37.624">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:48:37.624">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:48:37.624">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:48:37.624" starttime="20161110 23:48:37.624"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:37.625">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:48:37.625" starttime="20161110 23:48:36.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:48:37.626">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:48:37.626" starttime="20161110 23:48:37.625"></status>
</kw>
<status status="FAIL" endtime="20161110 23:48:37.626" starttime="20161110 23:48:36.978"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.628">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:48:47.628" starttime="20161110 23:48:47.628"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.629">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:48:47.630" starttime="20161110 23:48:47.629"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.631">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:48:47.631" starttime="20161110 23:48:47.631"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.633">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:48:47.634" starttime="20161110 23:48:47.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.634">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:47.634" starttime="20161110 23:48:47.634"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:48:47.635" starttime="20161110 23:48:47.635"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.638">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:47.638" starttime="20161110 23:48:47.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:47.639">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:47.640" starttime="20161110 23:48:47.639"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:47.640" starttime="20161110 23:48:47.638"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:47.640" starttime="20161110 23:48:47.635"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:47.641">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:48:47.644" starttime="20161110 23:48:47.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.645">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:47.645" starttime="20161110 23:48:47.645"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.646">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:48:47.646" starttime="20161110 23:48:47.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.647">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:48:47.647" starttime="20161110 23:48:47.646"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:47.979">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:47.979">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:47.979" starttime="20161110 23:48:47.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:47.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:47.980" starttime="20161110 23:48:47.980"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:47.980" starttime="20161110 23:48:47.640"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:48.267">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:48.267">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:48.267" starttime="20161110 23:48:47.980"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:48.268">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:48.269" starttime="20161110 23:48:48.268"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:48.269">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:48.269" starttime="20161110 23:48:48.269"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:48.269" starttime="20161110 23:48:48.269"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:48.270" starttime="20161110 23:48:48.268"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:48.270">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:48.270" starttime="20161110 23:48:47.631"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:48.270">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:48.270" starttime="20161110 23:48:47.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:48.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:48.271" starttime="20161110 23:48:48.270"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:48.271">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:48:48.271">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:48:48.271">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:48:48.271" starttime="20161110 23:48:48.271"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:48.271">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:48:48.271" starttime="20161110 23:48:47.627"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:48:48.272">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:48:48.272" starttime="20161110 23:48:48.272"></status>
</kw>
<status status="FAIL" endtime="20161110 23:48:48.272" starttime="20161110 23:48:47.627"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.275">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:48:58.275" starttime="20161110 23:48:58.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.276">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:48:58.276" starttime="20161110 23:48:58.275"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.278">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:48:58.278" starttime="20161110 23:48:58.277"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.279">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:48:58.280" starttime="20161110 23:48:58.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:58.280" starttime="20161110 23:48:58.280"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:48:58.282" starttime="20161110 23:48:58.281"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.284">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:58.284" starttime="20161110 23:48:58.283"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:58.285">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:48:58.285" starttime="20161110 23:48:58.285"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:58.286" starttime="20161110 23:48:58.284"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:58.286" starttime="20161110 23:48:58.282"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:58.287">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:48:58.287" starttime="20161110 23:48:58.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:48:58.288" starttime="20161110 23:48:58.287"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.289">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:48:58.289" starttime="20161110 23:48:58.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.289">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:48:58.289" starttime="20161110 23:48:58.289"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.616">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:58.617">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:58.617" starttime="20161110 23:48:58.289"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:58.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:58.617" starttime="20161110 23:48:58.617"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:58.618" starttime="20161110 23:48:58.286"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.907">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:48:58.907">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:58.907" starttime="20161110 23:48:58.618"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.908">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:58.909" starttime="20161110 23:48:58.908"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:58.909">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:48:58.909" starttime="20161110 23:48:58.909"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:58.910" starttime="20161110 23:48:58.909"></status>
</kw>
<status status="PASS" endtime="20161110 23:48:58.910" starttime="20161110 23:48:58.907"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:58.910">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:58.910" starttime="20161110 23:48:58.278"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:58.910">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:48:58.910" starttime="20161110 23:48:58.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:48:58.911">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:48:58.911" starttime="20161110 23:48:58.910"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:48:58.911">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:48:58.911">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:48:58.911">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:48:58.911" starttime="20161110 23:48:58.911"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:48:58.912">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:48:58.912" starttime="20161110 23:48:58.273"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:48:58.912">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:48:58.912" starttime="20161110 23:48:58.912"></status>
</kw>
<status status="FAIL" endtime="20161110 23:48:58.913" starttime="20161110 23:48:58.273"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.915">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:49:08.915" starttime="20161110 23:49:08.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.916">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:49:08.917" starttime="20161110 23:49:08.916"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.919">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:49:08.919" starttime="20161110 23:49:08.918"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.922">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:49:08.922" starttime="20161110 23:49:08.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.923">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:08.923" starttime="20161110 23:49:08.922"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:08.924" starttime="20161110 23:49:08.924"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.927">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:08.927" starttime="20161110 23:49:08.926"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:08.928">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:08.928" starttime="20161110 23:49:08.928"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:08.928" starttime="20161110 23:49:08.927"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:08.928" starttime="20161110 23:49:08.925"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:08.929">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:49:08.930" starttime="20161110 23:49:08.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.930">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:08.930" starttime="20161110 23:49:08.930"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.931">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:49:08.931" starttime="20161110 23:49:08.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:08.931">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:49:08.931" starttime="20161110 23:49:08.931"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:09.259">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:09.259">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:09.259" starttime="20161110 23:49:08.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:09.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:09.260" starttime="20161110 23:49:09.259"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:09.260" starttime="20161110 23:49:08.928"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:09.545">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:09.545">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:09.545" starttime="20161110 23:49:09.260"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:09.547">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:09.547" starttime="20161110 23:49:09.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:09.548">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:09.548" starttime="20161110 23:49:09.548"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:09.548" starttime="20161110 23:49:09.547"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:09.549" starttime="20161110 23:49:09.546"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:09.549">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:09.549" starttime="20161110 23:49:08.919"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:09.549">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:09.549" starttime="20161110 23:49:08.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:09.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:09.550" starttime="20161110 23:49:09.550"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:09.551">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:49:09.551">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:49:09.551">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:49:09.551" starttime="20161110 23:49:09.551"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:09.552">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:49:09.552" starttime="20161110 23:49:08.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:09.553">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:49:09.553" starttime="20161110 23:49:09.552"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:09.553" starttime="20161110 23:49:08.913"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.556">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:49:19.556" starttime="20161110 23:49:19.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.557">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:49:19.557" starttime="20161110 23:49:19.556"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.559">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:49:19.559" starttime="20161110 23:49:19.559"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.561">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:49:19.561" starttime="20161110 23:49:19.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.562">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:19.562" starttime="20161110 23:49:19.561"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:19.563" starttime="20161110 23:49:19.562"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.565">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:19.565" starttime="20161110 23:49:19.564"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:19.567">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:19.567" starttime="20161110 23:49:19.567"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:19.567" starttime="20161110 23:49:19.565"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:19.567" starttime="20161110 23:49:19.563"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:19.568">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:49:19.568" starttime="20161110 23:49:19.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.569">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:19.569" starttime="20161110 23:49:19.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.569">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:49:19.569" starttime="20161110 23:49:19.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:49:19.570" starttime="20161110 23:49:19.570"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:19.901">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:19.901">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:19.902" starttime="20161110 23:49:19.570"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:19.903">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:19.903" starttime="20161110 23:49:19.902"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:19.903" starttime="20161110 23:49:19.567"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:20.190">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:20.191">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:20.191" starttime="20161110 23:49:19.904"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:20.193">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:20.193" starttime="20161110 23:49:20.192"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:20.194">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:20.194" starttime="20161110 23:49:20.194"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:20.194" starttime="20161110 23:49:20.193"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:20.195" starttime="20161110 23:49:20.191"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:20.195">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:20.195" starttime="20161110 23:49:19.559"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:20.195">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:20.195" starttime="20161110 23:49:19.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:20.196">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:20.197" starttime="20161110 23:49:20.196"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:20.197">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:49:20.197">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:49:20.197">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:49:20.197" starttime="20161110 23:49:20.197"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:20.198">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:49:20.198" starttime="20161110 23:49:19.555"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:20.198">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:49:20.198" starttime="20161110 23:49:20.198"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:20.199" starttime="20161110 23:49:19.554"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.201">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:49:30.201" starttime="20161110 23:49:30.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.203">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:49:30.203" starttime="20161110 23:49:30.201"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.204">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:49:30.205" starttime="20161110 23:49:30.204"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.207">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:49:30.207" starttime="20161110 23:49:30.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.207">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:30.207" starttime="20161110 23:49:30.207"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:30.208" starttime="20161110 23:49:30.208"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.211">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:30.211" starttime="20161110 23:49:30.209"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:30.212">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:30.212" starttime="20161110 23:49:30.212"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:30.213" starttime="20161110 23:49:30.211"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:30.213" starttime="20161110 23:49:30.209"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:30.214">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:49:30.215" starttime="20161110 23:49:30.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.216">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:30.216" starttime="20161110 23:49:30.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.217">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:49:30.217" starttime="20161110 23:49:30.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.217">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:49:30.217" starttime="20161110 23:49:30.217"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:30.549">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:30.549">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:30.549" starttime="20161110 23:49:30.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:30.550">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:30.550" starttime="20161110 23:49:30.549"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:30.550" starttime="20161110 23:49:30.213"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:34.324">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:34.325">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:34.325" starttime="20161110 23:49:30.550"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:34.327">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:34.327" starttime="20161110 23:49:34.326"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:34.328">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:34.329" starttime="20161110 23:49:34.328"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:34.329" starttime="20161110 23:49:34.327"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:34.329" starttime="20161110 23:49:34.325"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:34.329">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:34.329" starttime="20161110 23:49:30.205"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:34.330">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:34.330" starttime="20161110 23:49:30.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:34.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:34.331" starttime="20161110 23:49:34.330"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:34.332">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:49:34.332">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:49:34.332">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:49:34.332" starttime="20161110 23:49:34.332"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:34.333">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:49:34.333" starttime="20161110 23:49:30.200"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:34.334">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:49:34.334" starttime="20161110 23:49:34.333"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:34.335" starttime="20161110 23:49:30.199"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.338">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:49:44.338" starttime="20161110 23:49:44.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.339">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:49:44.339" starttime="20161110 23:49:44.338"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.340">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:49:44.340" starttime="20161110 23:49:44.340"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.342">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:49:44.342" starttime="20161110 23:49:44.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:44.343" starttime="20161110 23:49:44.343"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:44.344" starttime="20161110 23:49:44.344"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.347">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:44.347" starttime="20161110 23:49:44.345"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:44.348">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:44.348" starttime="20161110 23:49:44.348"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:44.348" starttime="20161110 23:49:44.347"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:44.348" starttime="20161110 23:49:44.344"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:44.349">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:49:44.350" starttime="20161110 23:49:44.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:44.350" starttime="20161110 23:49:44.350"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.351">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:49:44.351" starttime="20161110 23:49:44.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:49:44.351" starttime="20161110 23:49:44.351"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:44.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:44.678">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:44.678" starttime="20161110 23:49:44.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:44.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:44.678" starttime="20161110 23:49:44.678"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:44.679" starttime="20161110 23:49:44.348"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:48.862">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:48.862">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:48.862" starttime="20161110 23:49:44.679"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:48.864">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:48.864" starttime="20161110 23:49:48.863"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:48.866">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:48.866" starttime="20161110 23:49:48.865"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:48.866" starttime="20161110 23:49:48.865"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:48.866" starttime="20161110 23:49:48.862"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:48.867">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:48.867" starttime="20161110 23:49:44.341"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:48.867">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:48.867" starttime="20161110 23:49:44.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:48.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:48.868" starttime="20161110 23:49:48.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:48.869">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:49:48.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:49:48.869">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:49:48.869" starttime="20161110 23:49:48.869"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:48.870">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:49:48.870" starttime="20161110 23:49:44.336"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:48.871">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:49:48.871" starttime="20161110 23:49:48.870"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:48.871" starttime="20161110 23:49:44.335"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.874">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20161110 23:49:58.874" starttime="20161110 23:49:58.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.875">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:49:58.875" starttime="20161110 23:49:58.874"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>/org/openbmc/managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.877">${base_uri} = /org/openbmc/managers/System/</msg>
<status status="PASS" endtime="20161110 23:49:58.877" starttime="20161110 23:49:58.876"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.879">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status status="PASS" endtime="20161110 23:49:58.879" starttime="20161110 23:49:58.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.881">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:58.881" starttime="20161110 23:49:58.880"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:58.882" starttime="20161110 23:49:58.881"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.884">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:58.884" starttime="20161110 23:49:58.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:58.885">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:49:58.886" starttime="20161110 23:49:58.885"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:58.886" starttime="20161110 23:49:58.884"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:58.886" starttime="20161110 23:49:58.882"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:58.888">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:49:58.888" starttime="20161110 23:49:58.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.888">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:49:58.889" starttime="20161110 23:49:58.888"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.889">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:49:58.889" starttime="20161110 23:49:58.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:58.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:49:58.890" starttime="20161110 23:49:58.889"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.231">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:59.232">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:59.232" starttime="20161110 23:49:58.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:59.233" starttime="20161110 23:49:59.232"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.233" starttime="20161110 23:49:58.887"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.535">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:49:59.536">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:59.536" starttime="20161110 23:49:59.234"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.538">${msg} = Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:59.538" starttime="20161110 23:49:59.537"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.539">Response code:200, Content:{
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:49:59.540" starttime="20161110 23:49:59.539"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.540" starttime="20161110 23:49:59.538"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.540" starttime="20161110 23:49:59.536"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.540">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:59.540" starttime="20161110 23:49:58.877"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.541">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:49:59.541" starttime="20161110 23:49:58.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:49:59.542" starttime="20161110 23:49:59.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.543">To JSON using : content={
  "data": "HOST_POWERED_ON", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:49:59.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:49:59.543">${content} = {u'data': u'HOST_POWERED_ON', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:49:59.543" starttime="20161110 23:49:59.542"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.543">${bmc_state} = HOST_POWERED_ON</msg>
<status status="PASS" endtime="20161110 23:49:59.543" starttime="20161110 23:49:58.873"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:59.544">'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:49:59.545" starttime="20161110 23:49:59.544"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:59.545" starttime="20161110 23:49:58.872"></status>
</kw>
<msg level="FAIL" timestamp="20161110 23:49:59.545">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</msg>
<status status="FAIL" endtime="20161110 23:49:59.545" starttime="20161110 23:34:58.369"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:59.545" starttime="20161110 23:34:58.368"></status>
</kw>
<status status="FAIL" endtime="20161110 23:49:59.546" starttime="20161110 23:34:40.305"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<kw name="Log FFDC If Test Case Failed" library="openbmc_ffdc">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.551">${cur_time} = 2016-11-10 23:49:59:550967</msg>
<status status="PASS" endtime="20161110 23:49:59.551" starttime="20161110 23:49:59.551"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.552">${cur_time} = 20161110234959550967</msg>
<status status="PASS" endtime="20161110 23:49:59.552" starttime="20161110 23:49:59.552"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.552">${cur_time} = 20161110234959550967</msg>
<status status="PASS" endtime="20161110 23:49:59.552" starttime="20161110 23:49:59.550"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.555">${FFDC_TIME} = 20161110234959550967</msg>
<status status="PASS" endtime="20161110 23:49:59.555" starttime="20161110 23:49:59.552"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:59.555" starttime="20161110 23:49:59.555"></status>
</kw>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.556">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20161110 23:49:59.556" starttime="20161110 23:49:59.556"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.557">${suite_name} = 20161110234959550967_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20161110 23:49:59.557" starttime="20161110 23:49:59.556"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.557">${test_name} = powerontest</msg>
<status status="PASS" endtime="20161110 23:49:59.557" starttime="20161110 23:49:59.557"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.558">${test_name} = 20161110234959550967_powerontest</msg>
<status status="PASS" endtime="20161110 23:49:59.558" starttime="20161110 23:49:59.557"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.558">${suitename} = 20161110234959550967_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161110 23:49:59.558">${testname} = 20161110234959550967_powerontest</msg>
<status status="PASS" endtime="20161110 23:49:59.558" starttime="20161110 23:49:59.556"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.561">${FFDC_DIR_PATH} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest</msg>
<status status="PASS" endtime="20161110 23:49:59.561" starttime="20161110 23:49:59.558"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.562">${prefix} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_</msg>
<status status="PASS" endtime="20161110 23:49:59.562" starttime="20161110 23:49:59.561"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.565">${LOG_PREFIX} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_</msg>
<status status="PASS" endtime="20161110 23:49:59.565" starttime="20161110 23:49:59.562"></status>
</kw>
<kw name="Create FFDC Directory" library="openbmc_ffdc_utils">
<doc>Creates directory and report file</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.571" html="yes">Created directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.571" starttime="20161110 23:49:59.565"></status>
</kw>
<kw name="Create FFDC Report File" library="openbmc_ffdc_utils">
<doc>Create a generic file name for ffdc</doc>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.574">${FFDC_FILE_PATH} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt</msg>
<status status="PASS" endtime="20161110 23:49:59.574" starttime="20161110 23:49:59.571"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.575" html="yes">Created file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.575" starttime="20161110 23:49:59.574"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.576" starttime="20161110 23:49:59.571"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.576" starttime="20161110 23:49:59.565"></status>
</kw>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.578" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.578" starttime="20161110 23:49:59.577"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.578" starttime="20161110 23:49:59.576"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.579" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.579" starttime="20161110 23:49:59.579"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.579" starttime="20161110 23:49:59.578"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.580" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.580" starttime="20161110 23:49:59.580"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.580" starttime="20161110 23:49:59.579"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.581" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.581" starttime="20161110 23:49:59.581"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.581" starttime="20161110 23:49:59.580"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.583" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.583" starttime="20161110 23:49:59.582"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.583" starttime="20161110 23:49:59.582"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.585" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.585" starttime="20161110 23:49:59.584"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.585" starttime="20161110 23:49:59.584"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.586" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.586" starttime="20161110 23:49:59.586"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.586" starttime="20161110 23:49:59.585"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.588" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.588" starttime="20161110 23:49:59.588"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.588" starttime="20161110 23:49:59.586"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.590" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.590" starttime="20161110 23:49:59.589"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.590" starttime="20161110 23:49:59.588"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.591" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.591" starttime="20161110 23:49:59.591"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.591" starttime="20161110 23:49:59.590"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.592" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.592" starttime="20161110 23:49:59.592"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.592" starttime="20161110 23:49:59.591"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.593" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.593" starttime="20161110 23:49:59.593"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.594" starttime="20161110 23:49:59.593"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.594" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.595" starttime="20161110 23:49:59.594"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.595" starttime="20161110 23:49:59.594"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.596" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.596" starttime="20161110 23:49:59.595"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.596" starttime="20161110 23:49:59.595"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.596" starttime="20161110 23:49:59.590"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.597" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.597" starttime="20161110 23:49:59.597"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.597" starttime="20161110 23:49:59.596"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.598">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20161110 23:49:59.598" starttime="20161110 23:49:59.598"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.599" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.599" starttime="20161110 23:49:59.599"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.599" starttime="20161110 23:49:59.598"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.600" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.600" starttime="20161110 23:49:59.600"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.600" starttime="20161110 23:49:59.599"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.600" starttime="20161110 23:49:59.598"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.602" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.602" starttime="20161110 23:49:59.601"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.602" starttime="20161110 23:49:59.601"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.603" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.603" starttime="20161110 23:49:59.602"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.603" starttime="20161110 23:49:59.602"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.603" starttime="20161110 23:49:59.600"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.605" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.605" starttime="20161110 23:49:59.605"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.606" starttime="20161110 23:49:59.603"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.606" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.606" starttime="20161110 23:49:59.606"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.607" starttime="20161110 23:49:59.606"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.607" starttime="20161110 23:49:59.603"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.607" starttime="20161110 23:49:59.598"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.608" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:49:59.608" starttime="20161110 23:49:59.607"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.608" starttime="20161110 23:49:59.607"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.608" starttime="20161110 23:49:59.576"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.609">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20161110 23:49:59.609" starttime="20161110 23:49:59.609"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.610">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') ]</msg>
<status status="PASS" endtime="20161110 23:49:59.610" starttime="20161110 23:49:59.610"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:59.613">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:49:59.613" starttime="20161110 23:49:59.612"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.613">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:49:59.613" starttime="20161110 23:49:59.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:59.617" starttime="20161110 23:49:59.617"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.617" starttime="20161110 23:49:59.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.623">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:49:59.623" starttime="20161110 23:49:59.622"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.623">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:49:59.623" starttime="20161110 23:49:59.623"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:49:59.624">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:49:59.624" starttime="20161110 23:49:59.624"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.626">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:49:59.626" starttime="20161110 23:49:59.624"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.626" starttime="20161110 23:49:59.622"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.626" starttime="20161110 23:49:59.618"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:49:59.627">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:49:59.627" starttime="20161110 23:49:59.627"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:49:59.627">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:49:59.627" starttime="20161110 23:49:59.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:59.633" starttime="20161110 23:49:59.632"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:49:59.634" starttime="20161110 23:49:59.633"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.634" starttime="20161110 23:49:59.632"></status>
</kw>
<status status="PASS" endtime="20161110 23:49:59.634" starttime="20161110 23:49:59.628"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:49:59.635">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:50:05.433">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:50:05.434" starttime="20161110 23:49:59.635"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:05.434" starttime="20161110 23:49:59.612"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:05.435">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20161110 23:50:05.435" starttime="20161110 23:50:05.435"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:05.438">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') ]</msg>
<status status="PASS" endtime="20161110 23:50:05.438" starttime="20161110 23:50:05.437"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:05.439">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_meminfo</msg>
<status status="PASS" endtime="20161110 23:50:05.439" starttime="20161110 23:50:05.438"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:05.446" starttime="20161110 23:50:05.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:05.447">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161110 23:50:05.516">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:05.516">${stdout} = MemTotal:         499020 kB
MemFree:          336140 kB
MemAvailable:     374776 kB
Buffers:           10464 kB
Cached:            66948 kB
SwapCached:            0 kB
Active:           110160 kB
Inac...</msg>
<msg level="INFO" timestamp="20161110 23:50:05.516">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:05.516" starttime="20161110 23:50:05.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:05.521" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_meminfo"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_meminfo&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:05.521" starttime="20161110 23:50:05.520"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:05.521" starttime="20161110 23:50:05.519"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:05.521" starttime="20161110 23:50:05.516"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:05.521" starttime="20161110 23:50:05.439"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:05.521" starttime="20161110 23:50:05.438"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:05.522">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_journalctl</msg>
<status status="PASS" endtime="20161110 23:50:05.522" starttime="20161110 23:50:05.521"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:05.525" starttime="20161110 23:50:05.523"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:05.526">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161110 23:50:10.642">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:10.644">${stdout} = -- Logs begin at Thu 2016-10-20 19:57:23 UTC, end at Thu 2016-10-20 20:17:24 UTC. --
Oct 20 19:57:23 barreleye systemd-journald[444]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161110 23:50:10.644">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:10.644" starttime="20161110 23:50:05.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:10.651" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_journalctl"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_journalctl&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:10.651" starttime="20161110 23:50:10.649"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.652" starttime="20161110 23:50:10.648"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.652" starttime="20161110 23:50:10.645"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.652" starttime="20161110 23:50:05.522"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.652" starttime="20161110 23:50:05.521"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:10.653">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_procinfo</msg>
<status status="PASS" endtime="20161110 23:50:10.653" starttime="20161110 23:50:10.652"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:10.657" starttime="20161110 23:50:10.654"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:10.658">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161110 23:50:10.954">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:10.955">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161110 23:50:10.955">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:10.955" starttime="20161110 23:50:10.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:10.959" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_procinfo"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_procinfo&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:10.960" starttime="20161110 23:50:10.959"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.960" starttime="20161110 23:50:10.958"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.960" starttime="20161110 23:50:10.955"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.960" starttime="20161110 23:50:10.653"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:10.960" starttime="20161110 23:50:10.652"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:10.961">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_dmesg</msg>
<status status="PASS" endtime="20161110 23:50:10.961" starttime="20161110 23:50:10.960"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:10.964" starttime="20161110 23:50:10.961"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:10.964">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161110 23:50:11.340">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:11.341">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-c5682cbc3542add705e35152329436067bb1f94a (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Tue Nov 1 05:44:54 UTC 2016
CPU: ARM926EJ-S [41069265] re...</msg>
<msg level="INFO" timestamp="20161110 23:50:11.341">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:11.341" starttime="20161110 23:50:10.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:11.352" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_dmesg"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_dmesg&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:11.352" starttime="20161110 23:50:11.350"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:11.352" starttime="20161110 23:50:11.349"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:11.353" starttime="20161110 23:50:11.341"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:11.353" starttime="20161110 23:50:10.961"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:11.353" starttime="20161110 23:50:10.960"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:11.354">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_proc_list</msg>
<status status="PASS" endtime="20161110 23:50:11.354" starttime="20161110 23:50:11.353"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:11.359" starttime="20161110 23:50:11.355"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:11.359">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161110 23:50:16.683">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:16.683">${stdout} = Mem: 162980K used, 336040K free, 33424K shrd, 10464K buff, 66956K cached
CPU: 100% usr   0% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 5.86 5.22 3.86 7/111 1039
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20161110 23:50:16.683">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:16.683" starttime="20161110 23:50:11.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:16.690" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_proc_list"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_proc_list&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:16.689"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:16.688"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:16.684"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:11.354"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:11.353"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:05.438"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:05.436"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:05.436"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:50:05.435"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:49:59.611"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:49:59.611"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.691" starttime="20161110 23:49:59.610"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.692" starttime="20161110 23:49:59.610"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:16.694">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:50:16.694" starttime="20161110 23:50:16.694"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:16.694">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:50:16.694" starttime="20161110 23:50:16.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:16.698" starttime="20161110 23:50:16.698"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.698" starttime="20161110 23:50:16.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:16.701">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:50:16.701" starttime="20161110 23:50:16.701"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:16.702">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:50:16.702" starttime="20161110 23:50:16.702"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:16.702">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:50:16.703" starttime="20161110 23:50:16.702"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:16.703">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:50:16.703" starttime="20161110 23:50:16.703"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.703" starttime="20161110 23:50:16.701"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.703" starttime="20161110 23:50:16.698"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:16.704">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:50:16.704" starttime="20161110 23:50:16.704"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:16.704">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:50:16.704" starttime="20161110 23:50:16.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:16.708" starttime="20161110 23:50:16.708"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:16.709" starttime="20161110 23:50:16.708"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.709" starttime="20161110 23:50:16.708"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:16.709" starttime="20161110 23:50:16.705"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:16.709">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.027">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:50:23.027" starttime="20161110 23:50:16.709"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.028" starttime="20161110 23:50:16.693"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.028">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20161110 23:50:23.029" starttime="20161110 23:50:23.028"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.030">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" endtime="20161110 23:50:23.031" starttime="20161110 23:50:23.030"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.036">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20161110 23:50:23.036" starttime="20161110 23:50:23.031"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.042" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.042" starttime="20161110 23:50:23.042"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.042" starttime="20161110 23:50:23.041"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.043" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.043" starttime="20161110 23:50:23.043"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.044" starttime="20161110 23:50:23.042"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.045" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.045" starttime="20161110 23:50:23.044"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.045" starttime="20161110 23:50:23.044"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.046" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.046" starttime="20161110 23:50:23.045"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.046" starttime="20161110 23:50:23.045"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.046" starttime="20161110 23:50:23.041"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.046" starttime="20161110 23:50:23.038"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.047">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.115">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.115">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M     32.6...</msg>
<msg level="INFO" timestamp="20161110 23:50:23.115">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:23.116" starttime="20161110 23:50:23.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.123" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.123" starttime="20161110 23:50:23.122"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.123" starttime="20161110 23:50:23.121"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.123" starttime="20161110 23:50:23.116"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.124" starttime="20161110 23:50:23.037"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.124" starttime="20161110 23:50:23.036"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.132" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.132" starttime="20161110 23:50:23.132"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.132" starttime="20161110 23:50:23.131"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.133" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.133" starttime="20161110 23:50:23.133"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.133" starttime="20161110 23:50:23.132"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.134" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.134" starttime="20161110 23:50:23.134"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.135" starttime="20161110 23:50:23.134"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.136" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.136" starttime="20161110 23:50:23.135"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.136" starttime="20161110 23:50:23.135"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.136" starttime="20161110 23:50:23.130"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.136" starttime="20161110 23:50:23.126"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.137">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.402">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.402">${stdout} = Linux barreleye 4.7.10-c5682cbc3542add705e35152329436067bb1f94a #1 Tue Nov 1 05:44:54 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161110 23:50:23.402">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:23.402" starttime="20161110 23:50:23.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.406" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.406" starttime="20161110 23:50:23.406"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.406" starttime="20161110 23:50:23.405"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.406" starttime="20161110 23:50:23.402"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.406" starttime="20161110 23:50:23.124"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.406" starttime="20161110 23:50:23.124"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.412" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.412" starttime="20161110 23:50:23.411"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.412" starttime="20161110 23:50:23.410"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.413" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.413" starttime="20161110 23:50:23.412"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.413" starttime="20161110 23:50:23.412"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.414" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.414" starttime="20161110 23:50:23.414"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.414" starttime="20161110 23:50:23.413"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.415" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.415" starttime="20161110 23:50:23.415"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.415" starttime="20161110 23:50:23.414"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.415" starttime="20161110 23:50:23.410"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.415" starttime="20161110 23:50:23.407"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.416">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.744">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:23.745">${stdout} =  20:17:43 up 20 min,  load average: 5.79, 5.21, 3.87</msg>
<msg level="INFO" timestamp="20161110 23:50:23.745">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:23.745" starttime="20161110 23:50:23.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.749" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.748"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.748"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.745"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.407"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.406"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.036"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.029"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.749" starttime="20161110 23:50:23.029"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.750">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20161110 23:50:23.750" starttime="20161110 23:50:23.750"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.751">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20161110 23:50:23.751" starttime="20161110 23:50:23.751"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.756" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.756" starttime="20161110 23:50:23.756"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.757" starttime="20161110 23:50:23.756"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.758" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.758" starttime="20161110 23:50:23.757"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.758" starttime="20161110 23:50:23.757"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.759" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.759" starttime="20161110 23:50:23.759"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.759" starttime="20161110 23:50:23.758"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:23.760" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:23.760" starttime="20161110 23:50:23.760"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.761" starttime="20161110 23:50:23.760"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.761" starttime="20161110 23:50:23.755"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:23.761" starttime="20161110 23:50:23.752"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:23.761">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161110 23:50:27.548">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:27.548">${stdout} = 20161110231154</msg>
<msg level="INFO" timestamp="20161110 23:50:27.548">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:27.548" starttime="20161110 23:50:23.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.556" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.556" starttime="20161110 23:50:27.555"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.556" starttime="20161110 23:50:27.554"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.556" starttime="20161110 23:50:27.549"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.557" starttime="20161110 23:50:23.751"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.557" starttime="20161110 23:50:23.751"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.564" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.564" starttime="20161110 23:50:27.563"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.564" starttime="20161110 23:50:27.563"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.566" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.566" starttime="20161110 23:50:27.565"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.566" starttime="20161110 23:50:27.564"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.567" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.567" starttime="20161110 23:50:27.567"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.567" starttime="20161110 23:50:27.566"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.568" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.569" starttime="20161110 23:50:27.568"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.569" starttime="20161110 23:50:27.568"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.569" starttime="20161110 23:50:27.562"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.569" starttime="20161110 23:50:27.558"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:27.569">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161110 23:50:27.898">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:27.898">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-213"
VERSION_ID="v1.99.0-213-g5118027-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161110 23:50:27.898">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:27.898" starttime="20161110 23:50:27.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.904" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:27.903"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:27.902"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:27.898"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:27.557"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:27.557"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:23.751"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:23.750"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.904" starttime="20161110 23:50:23.750"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:27.905">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20161110 23:50:27.905" starttime="20161110 23:50:27.905"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.906">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20161110 23:50:27.906" starttime="20161110 23:50:27.906"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.911" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.911" starttime="20161110 23:50:27.911"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.911" starttime="20161110 23:50:27.910"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.913" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.913" starttime="20161110 23:50:27.912"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.913" starttime="20161110 23:50:27.912"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.914" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.914" starttime="20161110 23:50:27.913"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.914" starttime="20161110 23:50:27.913"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:27.915" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:27.915" starttime="20161110 23:50:27.915"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.915" starttime="20161110 23:50:27.914"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.915" starttime="20161110 23:50:27.910"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:27.915" starttime="20161110 23:50:27.907"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:27.916">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161110 23:50:29.823">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:29.824">${stdout} =  = HOST_POWERED_ON</msg>
<msg level="INFO" timestamp="20161110 23:50:29.824">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:29.824" starttime="20161110 23:50:27.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:29.833" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:29.833" starttime="20161110 23:50:29.833"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:29.831"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:29.824"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:27.906"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:27.906"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:27.906"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:27.905"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:27.904"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.834" starttime="20161110 23:50:23.029"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.835" starttime="20161110 23:50:16.693"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.835" starttime="20161110 23:50:16.692"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.835" starttime="20161110 23:50:16.692"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.835" starttime="20161110 23:50:16.692"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:29.839">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:50:29.839" starttime="20161110 23:50:29.838"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:29.839">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:50:29.839" starttime="20161110 23:50:29.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:29.842" starttime="20161110 23:50:29.842"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.842" starttime="20161110 23:50:29.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:29.848">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:50:29.848" starttime="20161110 23:50:29.847"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:29.848">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:50:29.848" starttime="20161110 23:50:29.848"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:29.849">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:50:29.849" starttime="20161110 23:50:29.848"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:29.849">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:50:29.849" starttime="20161110 23:50:29.849"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.850" starttime="20161110 23:50:29.847"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.850" starttime="20161110 23:50:29.843"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:29.851">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:50:29.852" starttime="20161110 23:50:29.850"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:29.852">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:50:29.852" starttime="20161110 23:50:29.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:29.856" starttime="20161110 23:50:29.856"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:29.857" starttime="20161110 23:50:29.856"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.857" starttime="20161110 23:50:29.855"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:29.857" starttime="20161110 23:50:29.852"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:29.857">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:50:36.948">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:50:36.948" starttime="20161110 23:50:29.857"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:36.949" starttime="20161110 23:50:29.837"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.950">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20161110 23:50:36.950" starttime="20161110 23:50:36.949"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.952">@{cmd_list} = [ ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_record_log', '/org/openbmc/records/events/enumerate') | ('BMC_led', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/org/open...</msg>
<status status="PASS" endtime="20161110 23:50:36.952" starttime="20161110 23:50:36.951"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.953">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_sensor_list</msg>
<status status="PASS" endtime="20161110 23:50:36.953" starttime="20161110 23:50:36.953"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.955">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20161110 23:50:36.955" starttime="20161110 23:50:36.955"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.958">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:36.958" starttime="20161110 23:50:36.956"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:36.959">URI:https://9.3.23.30:443/org/openbmc/sensors/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:36.960" starttime="20161110 23:50:36.959"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:36.960" starttime="20161110 23:50:36.958"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:36.960" starttime="20161110 23:50:36.955"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:36.962">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:50:36.963" starttime="20161110 23:50:36.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.964">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:50:36.964" starttime="20161110 23:50:36.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.965">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:50:36.965" starttime="20161110 23:50:36.964"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:36.966">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:50:36.966" starttime="20161110 23:50:36.965"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:37.295">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:50:37.295">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:37.295" starttime="20161110 23:50:36.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:37.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:37.296" starttime="20161110 23:50:37.295"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:37.296" starttime="20161110 23:50:36.960"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.296">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:50:43.297">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.297" starttime="20161110 23:50:37.297"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.300">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "er...</msg>
<status status="PASS" endtime="20161110 23:50:43.300" starttime="20161110 23:50:43.298"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.301">Response code:200, Content:{
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12572, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12624, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20454, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 29000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1032, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1306, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:50:43.302" starttime="20161110 23:50:43.301"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.303" starttime="20161110 23:50:43.300"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.303" starttime="20161110 23:50:43.297"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:43.303">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.303" starttime="20161110 23:50:36.954"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.305" starttime="20161110 23:50:43.304"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:43.305">${status} = True</msg>
<status status="PASS" endtime="20161110 23:50:43.305" starttime="20161110 23:50:43.304"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:43.309" starttime="20161110 23:50:43.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.313">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/HSCA/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12572, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCA/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon4/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Iout": {
      "adjust": 0.25, 
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/curr1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "A", 
      "value": 12624, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/HSCB/Vout": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon5/in2_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "V", 
      "value": 12021, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/speed/fan0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm1", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm2", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/speed/fan5": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/pwm3", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 255, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan0L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 20454, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan1L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan2L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan3L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan4L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19852, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5H": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 22881, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/tach/fan5L": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/fan1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 19565, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/ambient": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon1/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 26500, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/temperature/rtc": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon0/temp1_input", 
      "offset": 0, 
      "scale": -3, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "C", 
      "value": 29000, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V97_CPU1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in10_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 952, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in2_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in3_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in4_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 956, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P0V9_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in5_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 958, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in6_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in7_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1022, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in8_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1024, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V09_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in9_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1026, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM0": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1034, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V1_MEM1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in11_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1032, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1294, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1296, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU0_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon2/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF1": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in12_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1298, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF2": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in13_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1308, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF3": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in14_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1306, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }, 
    "/org/openbmc/sensors/voltage/P1V35_CPU1_BUF4": {
      "critical_lower": 0, 
      "critical_upper": 0, 
      "emergency_enabled": 0, 
      "error": 0, 
      "filename": "/sys/class/hwmon/hwmon3/in1_input", 
      "offset": 0, 
      "scale": 1, 
      "threshold_state": "NORMAL", 
      "thresholds_enabled": 0, 
      "units": "", 
      "value": 1154, 
      "warning_lower": 0, 
      "warning_upper": 0, 
      "worst_threshold_state": "NORMAL"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:50:43.313">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 23:50:43.314">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/HSCA/Iout": {
            "adjust": 0.25,
            "critical_lower": 0,
            "critical_upper": 0,
            "emergency_enabled": 0,
          ...</msg>
<status status="PASS" endtime="20161110 23:50:43.314" starttime="20161110 23:50:43.309"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.316" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_sensor_list"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_sensor_list&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:43.316" starttime="20161110 23:50:43.315"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.316" starttime="20161110 23:50:43.314"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.316" starttime="20161110 23:50:36.952"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.317">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_record_log</msg>
<status status="PASS" endtime="20161110 23:50:43.317" starttime="20161110 23:50:43.316"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.318">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20161110 23:50:43.318" starttime="20161110 23:50:43.318"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.320">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:43.320" starttime="20161110 23:50:43.319"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.321">URI:https://9.3.23.30:443/org/openbmc/records/events/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:43.322" starttime="20161110 23:50:43.321"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.322" starttime="20161110 23:50:43.321"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.322" starttime="20161110 23:50:43.318"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.323">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:50:43.323" starttime="20161110 23:50:43.322"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.323">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:50:43.323" starttime="20161110 23:50:43.323"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.324">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:50:43.324" starttime="20161110 23:50:43.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.325">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:50:43.325" starttime="20161110 23:50:43.324"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.654">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:50:43.655">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.655" starttime="20161110 23:50:43.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.655" starttime="20161110 23:50:43.655"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.656" starttime="20161110 23:50:43.322"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.871">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:50:43.871">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.871" starttime="20161110 23:50:43.656"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.872">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/285": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chass...</msg>
<status status="PASS" endtime="20161110 23:50:43.872" starttime="20161110 23:50:43.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.873">Response code:200, Content:{
  "data": {
    "/org/openbmc/records/events/285": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:01:38"
    }, 
    "/org/openbmc/records/events/285/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/287": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:01:42"
    }, 
    "/org/openbmc/records/events/287/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:50:43.873" starttime="20161110 23:50:43.873"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.873" starttime="20161110 23:50:43.872"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.873" starttime="20161110 23:50:43.871"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:43.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.874" starttime="20161110 23:50:43.317"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.875">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:43.875" starttime="20161110 23:50:43.874"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:43.875">${status} = True</msg>
<status status="PASS" endtime="20161110 23:50:43.875" starttime="20161110 23:50:43.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:43.880" starttime="20161110 23:50:43.875"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.881">To JSON using : content={
  "data": {
    "/org/openbmc/records/events/285": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
        ]
      ], 
      "debug_data": [
        1
      ], 
      "message": "Error", 
      "reported_by": "Host", 
      "severity": "Testing failure", 
      "time": "2016:10:20 20:01:38"
    }, 
    "/org/openbmc/records/events/285/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
      ]
    }, 
    "/org/openbmc/records/events/287": {
      "associations": [
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm3"
        ], 
        [
          "fru", 
          "event", 
          "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
        ]
      ], 
      "debug_data": [
        48, 
        0, 
        19, 
        127, 
        136, 
        255
      ], 
      "message": "A Test event log just happened", 
      "reported_by": "Test", 
      "severity": "Info", 
      "time": "2016:10:20 20:01:42"
    }, 
    "/org/openbmc/records/events/287/fru": {
      "endpoints": [
        "/org/openbmc/inventory/system/chassis/motherboard/dimm3", 
        "/org/openbmc/inventory/system/chassis/motherboard/dimm2"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:50:43.881">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 23:50:43.881">${jsondata} = {
    "data": {
        "/org/openbmc/records/events/285": {
            "associations": [
                [
                    "fru",
                    "event",
                    "/org/openbmc/i...</msg>
<status status="PASS" endtime="20161110 23:50:43.881" starttime="20161110 23:50:43.881"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.883" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_record_log"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_record_log&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:43.884" starttime="20161110 23:50:43.882"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.884" starttime="20161110 23:50:43.882"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.884" starttime="20161110 23:50:43.316"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.884">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_led</msg>
<status status="PASS" endtime="20161110 23:50:43.884" starttime="20161110 23:50:43.884"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.885">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20161110 23:50:43.886" starttime="20161110 23:50:43.885"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.887">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:43.887" starttime="20161110 23:50:43.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.888">URI:https://9.3.23.30:443/org/openbmc/control/led/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:43.888" starttime="20161110 23:50:43.887"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.888" starttime="20161110 23:50:43.887"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:43.888" starttime="20161110 23:50:43.886"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:43.889">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:50:43.889" starttime="20161110 23:50:43.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.890">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:50:43.890" starttime="20161110 23:50:43.889"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.890">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:50:43.890" starttime="20161110 23:50:43.890"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:43.891">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:50:43.891" starttime="20161110 23:50:43.890"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.217">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:50:44.218">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.218" starttime="20161110 23:50:43.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.219">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.219" starttime="20161110 23:50:44.218"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.219" starttime="20161110 23:50:43.888"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.407">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:50:44.407">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.408" starttime="20161110 23:50:44.219"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.409">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK...</msg>
<status status="PASS" endtime="20161110 23:50:44.409" starttime="20161110 23:50:44.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.410">Response code:200, Content:{
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:50:44.410" starttime="20161110 23:50:44.409"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.410" starttime="20161110 23:50:44.409"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.410" starttime="20161110 23:50:44.408"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:44.410">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.410" starttime="20161110 23:50:43.885"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.411" starttime="20161110 23:50:44.411"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:44.411">${status} = True</msg>
<status status="PASS" endtime="20161110 23:50:44.411" starttime="20161110 23:50:44.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:44.414" starttime="20161110 23:50:44.412"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.415">To JSON using : content={
  "data": {
    "/org/openbmc/control/led/beep": {}, 
    "/org/openbmc/control/led/heartbeat": {}, 
    "/org/openbmc/control/led/identify": {}
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:50:44.415">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 23:50:44.415">${jsondata} = {
    "data": {
        "/org/openbmc/control/led/beep": {},
        "/org/openbmc/control/led/heartbeat": {},
        "/org/openbmc/control/led/identify": {}
    },
    "message": "200 OK",
    "stat...</msg>
<status status="PASS" endtime="20161110 23:50:44.415" starttime="20161110 23:50:44.414"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.416" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_led"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_led&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:44.416" starttime="20161110 23:50:44.416"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.417" starttime="20161110 23:50:44.415"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.417" starttime="20161110 23:50:43.884"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.417">${logpath} = /tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_inventory</msg>
<status status="PASS" endtime="20161110 23:50:44.417" starttime="20161110 23:50:44.417"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.418">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status status="PASS" endtime="20161110 23:50:44.418" starttime="20161110 23:50:44.418"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.420">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:44.420" starttime="20161110 23:50:44.419"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.420">URI:https://9.3.23.30:443/org/openbmc/inventory/system/enumerate, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:50:44.421" starttime="20161110 23:50:44.420"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.421" starttime="20161110 23:50:44.420"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.421" starttime="20161110 23:50:44.418"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.422">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:50:44.422" starttime="20161110 23:50:44.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:50:44.422" starttime="20161110 23:50:44.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.423">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:50:44.423" starttime="20161110 23:50:44.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:50:44.424" starttime="20161110 23:50:44.423"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:44.750">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:50:44.751">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.751" starttime="20161110 23:50:44.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:44.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:44.751" starttime="20161110 23:50:44.751"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:44.751" starttime="20161110 23:50:44.421"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.403">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:50:48.403">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:48.403" starttime="20161110 23:50:44.752"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.406">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-op...</msg>
<status status="PASS" endtime="20161110 23:50:48.406" starttime="20161110 23:50:48.404"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.408">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g5118027-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/285"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/287"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/287"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "ECID:019C0097401407181C1D0000006D0391", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "ECID:019C009740140718141D000000350461", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "ECID:019C0097401407181C1C0000003A03C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "ECID:019C009740140718221D000000300481", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:50:48.409" starttime="20161110 23:50:48.407"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.409" starttime="20161110 23:50:48.406"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.409" starttime="20161110 23:50:48.403"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.409">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:50:48.409" starttime="20161110 23:50:44.417"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.411">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:50:48.411" starttime="20161110 23:50:48.410"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.411">${status} = True</msg>
<status status="PASS" endtime="20161110 23:50:48.411" starttime="20161110 23:50:48.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:48.415" starttime="20161110 23:50:48.411"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.420">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-81b8d98", 
      "Custom Field 2": "\tskiboot-5.3.2-opdirty", 
      "Custom Field 3": "\thostboot-5e17973-opdirty-185a924", 
      "Custom Field 4": "\tlinux-4.4.19-openpower1-opdirty-47fa53c", 
      "Custom Field 5": "\tpetitboot-v1.2.3-opdirty-94a2998", 
      "Custom Field 6": "\tbarreleye-xml-253622f-opdirty", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-3d0f297-dirty", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-213-g5118027-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A007780242718070D0000008D35D1", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "ECID:019A0077C120471803070000005A3822", 
      "Custom Field 3": "EC:20", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1/event": {
      "endpoints": [
        "/org/openbmc/records/events/285"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/287"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/287"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "ECID:019C009740140718081C000000CF0361", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "ECID:019C00974014071822200000006705C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "ECID:00000000000000000000000000000000", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "ECID:019C0097401407181C1D0000006D0391", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "ECID:019C009740140718141D000000350461", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "ECID:019C0097401407181C1C0000003A03C1", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "ECID:019C009740140718221D000000300481", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:50:48.421">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20161110 23:50:48.422">${jsondata} = {
    "data": {
        "/org/openbmc/inventory/system/bios": {
            "Asset Tag": "",
            "Custom Field 1": "\tbuildroot-81b8d98",
            "Custom Field 2": "\tskiboot-5.3.2-opdirty...</msg>
<status status="PASS" endtime="20161110 23:50:48.422" starttime="20161110 23:50:48.415"></status>
</kw>
<kw name="Write Data to File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.424" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_inventory"&gt;/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest/20161110234959550967_BMC_inventory&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:48.423"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:48.422"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:44.417"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:36.952"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:36.950"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:36.950"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:36.950"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:29.837"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:29.836"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:29.835"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.424" starttime="20161110 23:50:29.835"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.429">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:50:48.426"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:50:48.426"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:50:48.425"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:50:48.425"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:50:48.425"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:49:59.610"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:49:59.609"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.429" starttime="20161110 23:49:59.609"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.430" starttime="20161110 23:49:59.609"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.430" starttime="20161110 23:49:59.608"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.430">${cur_time} = 2016-11-10 23:50:48:430300</msg>
<status status="PASS" endtime="20161110 23:50:48.431" starttime="20161110 23:50:48.430"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.431">${cur_time} = 20161110235048430300</msg>
<status status="PASS" endtime="20161110 23:50:48.431" starttime="20161110 23:50:48.431"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.431">${cur_time} = 20161110235048430300</msg>
<status status="PASS" endtime="20161110 23:50:48.432" starttime="20161110 23:50:48.430"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:48.432" starttime="20161110 23:50:48.432"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.433">
/tmp/root/31302/obmc-robot/logs/20161110234959550967_TestsTestBasicPoweron/20161110234959550967_powerontest</msg>
<status status="PASS" endtime="20161110 23:50:48.433" starttime="20161110 23:50:48.432"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.433" starttime="20161110 23:49:59.550"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.433" starttime="20161110 23:49:59.547"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.434" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:50:48.434" starttime="20161110 23:50:48.434"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.435" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:50:48.435" starttime="20161110 23:50:48.435"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.435">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:50:48.435" starttime="20161110 23:50:48.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:48.438" starttime="20161110 23:50:48.435"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.439">${cur_time} = 2016-11-10 23:50:48:438542</msg>
<status status="PASS" endtime="20161110 23:50:48.439" starttime="20161110 23:50:48.438"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.439">${cur_time} = 20161110235048438542</msg>
<status status="PASS" endtime="20161110 23:50:48.439" starttime="20161110 23:50:48.439"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.439">${cur_time} = 20161110235048438542</msg>
<status status="PASS" endtime="20161110 23:50:48.439" starttime="20161110 23:50:48.438"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.440" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:50:48.440" starttime="20161110 23:50:48.440"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.440" starttime="20161110 23:50:48.433"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.440" starttime="20161110 23:49:59.547"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:48.443">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:50:48.443" starttime="20161110 23:50:48.442"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.443">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:50:48.443" starttime="20161110 23:50:48.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:48.446" starttime="20161110 23:50:48.446"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.446" starttime="20161110 23:50:48.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.450">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:50:48.450" starttime="20161110 23:50:48.449"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.450">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:50:48.450" starttime="20161110 23:50:48.450"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:48.451">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:50:48.451" starttime="20161110 23:50:48.450"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.451">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:50:48.451" starttime="20161110 23:50:48.451"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.452" starttime="20161110 23:50:48.449"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.452" starttime="20161110 23:50:48.446"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:48.452">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:50:48.452" starttime="20161110 23:50:48.452"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:48.453">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:50:48.453" starttime="20161110 23:50:48.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:48.457" starttime="20161110 23:50:48.456"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:48.457" starttime="20161110 23:50:48.457"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.457" starttime="20161110 23:50:48.456"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:48.457" starttime="20161110 23:50:48.453"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:48.458">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:50:51.454">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:50:51.454" starttime="20161110 23:50:48.458"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:51.454" starttime="20161110 23:50:48.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:51.455">Executing command 'ls /tmp/obmc-console.log-20161110233431992407_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161110 23:50:51.574">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:51.575">${pid} = 921</msg>
<msg level="INFO" timestamp="20161110 23:50:51.575">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:51.575" starttime="20161110 23:50:51.455"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:51.576">Length is 0</msg>
<status status="PASS" endtime="20161110 23:50:51.576" starttime="20161110 23:50:51.575"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:51.577">Executing command 'ps ax | grep 921 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161110 23:50:51.999">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:51.999">${rc} = 0</msg>
<status status="PASS" endtime="20161110 23:50:51.999" starttime="20161110 23:50:51.576"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:52.004" starttime="20161110 23:50:51.999"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:52.005">Executing command 'kill -s KILL 921'.</msg>
<msg level="INFO" timestamp="20161110 23:50:52.324">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:52.324">${console} = </msg>
<msg level="INFO" timestamp="20161110 23:50:52.324">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:52.325" starttime="20161110 23:50:52.005"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:52.325">Length is 0</msg>
<status status="PASS" endtime="20161110 23:50:52.325" starttime="20161110 23:50:52.325"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:52.326">Current Client PID:921</msg>
<status status="PASS" endtime="20161110 23:50:52.326" starttime="20161110 23:50:52.326"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:52.327">Executing command 'cat /tmp/obmc-console.log-20161110233431992407_921'.</msg>
<msg level="INFO" timestamp="20161110 23:50:57.179">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161110 23:50:57.179">${console} = </msg>
<msg level="INFO" timestamp="20161110 23:50:57.180">${stderr} = </msg>
<status status="PASS" endtime="20161110 23:50:57.180" starttime="20161110 23:50:52.327"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:57.181">Length is 0</msg>
<status status="PASS" endtime="20161110 23:50:57.181" starttime="20161110 23:50:57.180"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:57.181">${sol_log} = </msg>
<status status="PASS" endtime="20161110 23:50:57.181" starttime="20161110 23:50:48.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:57.182"></msg>
<status status="PASS" endtime="20161110 23:50:57.182" starttime="20161110 23:50:57.181"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:57.182" starttime="20161110 23:49:59.546"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20161110 23:50:57.182" starttime="20161110 23:34:27.687">Keyword 'Is Host Booted' failed after retrying for 15 minutes. The last error was: 'HOST_POWERED_ON' does not contain 'HOST_BOOTED'</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status status="FAIL" endtime="20161110 23:50:57.184" starttime="20161110 23:34:27.662"></status>
</suite>
<suite id="s1-s4" source="/tmp/root/31302/obmc-robot/tests/test_eventlog.robot" name="Test Eventlog">
<kw type="setup" name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:57.212">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20161110 23:50:57.212" starttime="20161110 23:50:57.212"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:57.212">${has_host} = False</msg>
<status status="PASS" endtime="20161110 23:50:57.212" starttime="20161110 23:50:57.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:57.216" starttime="20161110 23:50:57.215"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:57.216" starttime="20161110 23:50:57.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:57.219">${port_num} = 22</msg>
<status status="PASS" endtime="20161110 23:50:57.219" starttime="20161110 23:50:57.219"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:57.220">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20161110 23:50:57.220" starttime="20161110 23:50:57.219"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:57.220">${https_num} = 443</msg>
<status status="PASS" endtime="20161110 23:50:57.220" starttime="20161110 23:50:57.220"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:57.221">${AUTH_URI} = https://9.3.23.30:443</msg>
<status status="PASS" endtime="20161110 23:50:57.221" starttime="20161110 23:50:57.220"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:57.221" starttime="20161110 23:50:57.218"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:57.221" starttime="20161110 23:50:57.216"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161110 23:50:57.222">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20161110 23:50:57.222" starttime="20161110 23:50:57.222"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:50:57.222">${has_port} = False</msg>
<status status="PASS" endtime="20161110 23:50:57.222" starttime="20161110 23:50:57.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:57.226" starttime="20161110 23:50:57.225"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:57.226" starttime="20161110 23:50:57.226"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:57.226" starttime="20161110 23:50:57.225"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:57.226" starttime="20161110 23:50:57.222"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:57.227">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161110 23:50:59.810">Read output: 7[r[999;999H[6n</msg>
<status status="PASS" endtime="20161110 23:50:59.810" starttime="20161110 23:50:57.227"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:59.810" starttime="20161110 23:50:57.211"></status>
</kw>
<test id="s1-s4-t1" name="clear any logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:59.813">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status status="PASS" endtime="20161110 23:50:59.813" starttime="20161110 23:50:59.812"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:59.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:50:59.814" starttime="20161110 23:50:59.813"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:50:59.815" starttime="20161110 23:50:59.814"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:59.817">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:50:59.817" starttime="20161110 23:50:59.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:59.818">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:50:59.819" starttime="20161110 23:50:59.818"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:59.819" starttime="20161110 23:50:59.817"></status>
</kw>
<status status="PASS" endtime="20161110 23:50:59.819" starttime="20161110 23:50:59.815"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:50:59.820">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:50:59.821" starttime="20161110 23:50:59.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:59.822">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:50:59.822" starttime="20161110 23:50:59.821"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:59.823">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:50:59.823" starttime="20161110 23:50:59.822"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:50:59.824">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:50:59.824" starttime="20161110 23:50:59.823"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.347">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:04.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:04.348" starttime="20161110 23:50:59.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:04.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:04.349" starttime="20161110 23:51:04.348"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:04.349" starttime="20161110 23:50:59.819"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.830">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:04.830">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:04.830" starttime="20161110 23:51:04.350"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.832">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:04.832" starttime="20161110 23:51:04.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:04.834">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:04.834" starttime="20161110 23:51:04.833"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:04.834" starttime="20161110 23:51:04.832"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:04.834" starttime="20161110 23:51:04.830"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:04.835">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:04.835" starttime="20161110 23:50:59.811"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:04.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:04.836" starttime="20161110 23:51:04.835"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.837">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20161110 23:51:04.837" starttime="20161110 23:51:04.837"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.839">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:51:04.839" starttime="20161110 23:51:04.838"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:04.840">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:51:04.840" starttime="20161110 23:51:04.840"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:04.840" starttime="20161110 23:51:04.839"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:04.840" starttime="20161110 23:51:04.838"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:04.841">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:51:04.841" starttime="20161110 23:51:04.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:51:04.842" starttime="20161110 23:51:04.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.842">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:51:04.842" starttime="20161110 23:51:04.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:04.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:51:04.843" starttime="20161110 23:51:04.843"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:05.177">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.177" starttime="20161110 23:51:04.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.178" starttime="20161110 23:51:05.178"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.178" starttime="20161110 23:51:04.840"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.235">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:51:05.235">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.235" starttime="20161110 23:51:05.179"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.236">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:05.236" starttime="20161110 23:51:05.236"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.237">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:05.237" starttime="20161110 23:51:05.237"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.237" starttime="20161110 23:51:05.236"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.237" starttime="20161110 23:51:05.235"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:05.238">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.238" starttime="20161110 23:51:04.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.239">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:51:05.239">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:51:05.239">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:51:05.239" starttime="20161110 23:51:05.238"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.240">Length is 0</msg>
<status status="PASS" endtime="20161110 23:51:05.240" starttime="20161110 23:51:05.239"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:05.245" starttime="20161110 23:51:05.241"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.246" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:51:05.246" starttime="20161110 23:51:05.246"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.247" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:51:05.248" starttime="20161110 23:51:05.247"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:05.248">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:51:05.248" starttime="20161110 23:51:05.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:05.251" starttime="20161110 23:51:05.248"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.251">${cur_time} = 2016-11-10 23:51:05:251231</msg>
<status status="PASS" endtime="20161110 23:51:05.251" starttime="20161110 23:51:05.251"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.252">${cur_time} = 20161110235105251231</msg>
<status status="PASS" endtime="20161110 23:51:05.252" starttime="20161110 23:51:05.252"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:05.252">${cur_time} = 20161110235105251231</msg>
<status status="PASS" endtime="20161110 23:51:05.252" starttime="20161110 23:51:05.251"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.253" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:51:05.253" starttime="20161110 23:51:05.252"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.253" starttime="20161110 23:51:05.245"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.253" starttime="20161110 23:51:05.240"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:51:05.253" starttime="20161110 23:50:59.810"></status>
</test>
<test id="s1-s4-t2" name="write a log">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.255">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20161110 23:51:05.255" starttime="20161110 23:51:05.254"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.256">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status status="PASS" endtime="20161110 23:51:05.256" starttime="20161110 23:51:05.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:51:05.256" starttime="20161110 23:51:05.256"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:05.257" starttime="20161110 23:51:05.257"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.259">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:51:05.259" starttime="20161110 23:51:05.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.260">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20161110 23:51:05.260" starttime="20161110 23:51:05.260"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.260" starttime="20161110 23:51:05.259"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.260" starttime="20161110 23:51:05.257"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.261">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:51:05.261" starttime="20161110 23:51:05.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:51:05.262" starttime="20161110 23:51:05.262"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.262">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:51:05.263" starttime="20161110 23:51:05.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.263">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:51:05.263" starttime="20161110 23:51:05.263"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.589">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:05.589">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.589" starttime="20161110 23:51:05.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.590" starttime="20161110 23:51:05.589"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.590" starttime="20161110 23:51:05.260"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.980">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:05.980">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.980" starttime="20161110 23:51:05.590"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.981">${msg} = Response code:200, Content:{
  "data": 288, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:05.981" starttime="20161110 23:51:05.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.982">Response code:200, Content:{
  "data": 288, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:05.982" starttime="20161110 23:51:05.982"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.982" starttime="20161110 23:51:05.981"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.982" starttime="20161110 23:51:05.980"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:05.982">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.982" starttime="20161110 23:51:05.255"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:05.983" starttime="20161110 23:51:05.982"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.983">To JSON using : content={
  "data": 288, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:51:05.983">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:51:05.983">${json} = {u'data': 288, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:51:05.983" starttime="20161110 23:51:05.983"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.984">${LOGID} = 288</msg>
<status status="PASS" endtime="20161110 23:51:05.984" starttime="20161110 23:51:05.984"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.985">${uri} = /org/openbmc/records/events/288</msg>
<status status="PASS" endtime="20161110 23:51:05.985" starttime="20161110 23:51:05.984"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.985" starttime="20161110 23:51:05.254"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:05.988" starttime="20161110 23:51:05.986"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.989" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:51:05.989" starttime="20161110 23:51:05.989"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.990" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:51:05.990" starttime="20161110 23:51:05.990"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:05.990">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:51:05.990" starttime="20161110 23:51:05.989"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:05.993" starttime="20161110 23:51:05.990"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.995">${cur_time} = 2016-11-10 23:51:05:994332</msg>
<status status="PASS" endtime="20161110 23:51:05.995" starttime="20161110 23:51:05.994"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:05.995">${cur_time} = 20161110235105994332</msg>
<status status="PASS" endtime="20161110 23:51:05.995" starttime="20161110 23:51:05.995"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:05.996">${cur_time} = 20161110235105994332</msg>
<status status="PASS" endtime="20161110 23:51:05.996" starttime="20161110 23:51:05.994"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:05.997" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:51:05.997" starttime="20161110 23:51:05.996"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.997" starttime="20161110 23:51:05.988"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:05.997" starttime="20161110 23:51:05.985"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:51:05.997" starttime="20161110 23:51:05.253"></status>
</test>
<kw type="teardown" name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20161110 23:51:06.246" starttime="20161110 23:51:05.998"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status status="PASS" endtime="20161110 23:51:06.247" starttime="20161110 23:50:57.186"></status>
</suite>
<suite id="s1-s5" source="/tmp/root/31302/obmc-robot/tests/test_obmcrest.robot" name="Test Obmcrest">
<test id="s1-s5-t1" name="Good connection for testing">
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.274">${base_uri} = /</msg>
<status status="PASS" endtime="20161110 23:51:06.274" starttime="20161110 23:51:06.274"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.276">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:51:06.276" starttime="20161110 23:51:06.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.276">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:51:06.277" starttime="20161110 23:51:06.276"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.277" starttime="20161110 23:51:06.276"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.277" starttime="20161110 23:51:06.274"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.278">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:51:06.278" starttime="20161110 23:51:06.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.279">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:51:06.279" starttime="20161110 23:51:06.279"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.279">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:51:06.279" starttime="20161110 23:51:06.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.280">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:51:06.280" starttime="20161110 23:51:06.280"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.707">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:06.707">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:06.707" starttime="20161110 23:51:06.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.708">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:06.708" starttime="20161110 23:51:06.707"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.708" starttime="20161110 23:51:06.277"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.765">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:51:06.765">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:06.766" starttime="20161110 23:51:06.708"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.767">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:06.767" starttime="20161110 23:51:06.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.767">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:06.768" starttime="20161110 23:51:06.767"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.768" starttime="20161110 23:51:06.767"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.768" starttime="20161110 23:51:06.766"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:06.768">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:06.768" starttime="20161110 23:51:06.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.768">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:06.769" starttime="20161110 23:51:06.768"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.769">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:51:06.769">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:51:06.769">${content} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:51:06.769" starttime="20161110 23:51:06.769"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:06.769">${content} = [u'/org']</msg>
<status status="PASS" endtime="20161110 23:51:06.769" starttime="20161110 23:51:06.272"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${content}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${c}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.770">${c} = /org</msg>
<status status="PASS" endtime="20161110 23:51:06.770" starttime="20161110 23:51:06.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${c}</arg>
<arg>/org</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:06.770" starttime="20161110 23:51:06.770"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:06.774" starttime="20161110 23:51:06.771"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.774" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:51:06.775" starttime="20161110 23:51:06.774"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.776" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:51:06.776" starttime="20161110 23:51:06.775"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:06.776">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:51:06.776" starttime="20161110 23:51:06.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:06.779" starttime="20161110 23:51:06.776"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.780">${cur_time} = 2016-11-10 23:51:06:779624</msg>
<status status="PASS" endtime="20161110 23:51:06.780" starttime="20161110 23:51:06.779"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.780">${cur_time} = 20161110235106779624</msg>
<status status="PASS" endtime="20161110 23:51:06.780" starttime="20161110 23:51:06.780"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:06.781">${cur_time} = 20161110235106779624</msg>
<status status="PASS" endtime="20161110 23:51:06.781" starttime="20161110 23:51:06.779"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.781" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:51:06.781" starttime="20161110 23:51:06.781"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.781" starttime="20161110 23:51:06.774"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.782" starttime="20161110 23:51:06.771"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>Good_connection_for_testing</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:51:06.782" starttime="20161110 23:51:06.271"></status>
</test>
<test id="s1-s5-t2" name="get directory listing /">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.783">${base_uri} = /</msg>
<status status="PASS" endtime="20161110 23:51:06.783" starttime="20161110 23:51:06.783"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.785">${msg} = URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:51:06.785" starttime="20161110 23:51:06.784"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.786">URI:https://9.3.23.30:443/, method:Get, args:{}</msg>
<status status="PASS" endtime="20161110 23:51:06.786" starttime="20161110 23:51:06.785"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.786" starttime="20161110 23:51:06.785"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:06.786" starttime="20161110 23:51:06.783"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:06.787">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20161110 23:51:06.787" starttime="20161110 23:51:06.786"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20161110 23:51:06.788" starttime="20161110 23:51:06.787"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.788">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20161110 23:51:06.788" starttime="20161110 23:51:06.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:06.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20161110 23:51:06.789" starttime="20161110 23:51:06.788"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:07.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161110 23:51:07.965">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:07.965" starttime="20161110 23:51:06.789"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:07.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:07.966" starttime="20161110 23:51:07.965"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:07.966" starttime="20161110 23:51:06.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:08.022">Get Request using : alias=openbmc, uri=/, headers=None </msg>
<msg level="INFO" timestamp="20161110 23:51:08.023">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:08.023" starttime="20161110 23:51:07.966"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:08.025">${msg} = Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:08.025" starttime="20161110 23:51:08.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:08.026">Response code:200, Content:{
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20161110 23:51:08.026" starttime="20161110 23:51:08.026"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:08.027" starttime="20161110 23:51:08.025"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:08.027" starttime="20161110 23:51:08.023"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:08.027">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20161110 23:51:08.027" starttime="20161110 23:51:06.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:08.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20161110 23:51:08.029" starttime="20161110 23:51:08.028"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:08.029">To JSON using : content={
  "data": [
    "/org"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161110 23:51:08.029">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161110 23:51:08.030">${json} = {u'data': [u'/org'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20161110 23:51:08.030" starttime="20161110 23:51:08.029"></status>
</kw>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${json['data']}</arg>
<arg>/org</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:08.030" starttime="20161110 23:51:08.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${json['status']}</arg>
<arg>ok</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:08.031" starttime="20161110 23:51:08.031"></status>
</kw>
<kw type="teardown" name="Log FFDC" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Log FFDC If Test Case Failed</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:08.036" starttime="20161110 23:51:08.032"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:08.038" html="yes">Directory '&lt;a href="file:///tmp/root/31302/obmc-robot/logs"&gt;/tmp/root/31302/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20161110 23:51:08.038" starttime="20161110 23:51:08.037"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:08.039" html="yes">File '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20161110 23:51:08.039" starttime="20161110 23:51:08.039"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:08.039">${exist} = True</msg>
<status status="PASS" endtime="20161110 23:51:08.039" starttime="20161110 23:51:08.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20161110 23:51:08.042" starttime="20161110 23:51:08.039"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:08.043">${cur_time} = 2016-11-10 23:51:08:042529</msg>
<status status="PASS" endtime="20161110 23:51:08.043" starttime="20161110 23:51:08.042"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161110 23:51:08.043">${cur_time} = 20161110235108042529</msg>
<status status="PASS" endtime="20161110 23:51:08.043" starttime="20161110 23:51:08.043"></status>
</kw>
<msg level="INFO" timestamp="20161110 23:51:08.043">${cur_time} = 20161110235108042529</msg>
<status status="PASS" endtime="20161110 23:51:08.043" starttime="20161110 23:51:08.042"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161110 23:51:08.044" html="yes">Appended to file '&lt;a href="file:///tmp/root/31302/obmc-robot/logs/test_history.txt"&gt;/tmp/root/31302/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20161110 23:51:08.044" starttime="20161110 23:51:08.044"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:08.044" starttime="20161110 23:51:08.036"></status>
</kw>
<status status="PASS" endtime="20161110 23:51:08.044" starttime="20161110 23:51:08.032"></status>
</kw>
<tags>
<tag>CI</tag>
<tag>get_directory_listing</tag>
</tags>
<status status="PASS" critical="yes" endtime="20161110 23:51:08.044" starttime="20161110 23:51:06.782"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status status="PASS" endtime="20161110 23:51:08.045" starttime="20161110 23:51:06.249"></status>
</suite>
<status status="FAIL" endtime="20161110 23:51:08.048" starttime="20161110 23:34:06.360"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="7">Critical Tests</stat>
<stat fail="1" pass="7">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="0" pass="4">CI</stat>
<stat fail="0" pass="1">clear_any_logs</stat>
<stat fail="0" pass="1">Create_error_log_on_single_FRU</stat>
<stat fail="0" pass="1">Delete_error_log</stat>
<stat fail="0" pass="1">get_directory_listing</stat>
<stat fail="0" pass="1">Good_connection_for_testing</stat>
<stat fail="1" pass="0">power_on_test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
<stat fail="0" pass="1">write_a_log</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="7">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="0" name="Test Association" pass="2">Tests.Test Association</stat>
<stat id="s1-s3" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
<stat id="s1-s4" fail="0" name="Test Eventlog" pass="2">Tests.Test Eventlog</stat>
<stat id="s1-s5" fail="0" name="Test Obmcrest" pass="2">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
